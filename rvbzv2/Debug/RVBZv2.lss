
RVBZv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007118  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00802000  00007118  000071cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000067d  00802102  00802102  000072ce  2**0
                  ALLOC
  3 .eeprom       0000000f  00810000  00810000  000072ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000072dd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000733c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000728  00000000  00000000  0000737c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00013e27  00000000  00000000  00007aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000369a  00000000  00000000  0001b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007a44  00000000  00000000  0001ef65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c30  00000000  00000000  000269ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005c87  00000000  00000000  000285dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000094c7  00000000  00000000  0002e263  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009f8  00000000  00000000  0003772a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c6       	rjmp	.+3382   	; 0xd38 <__ctors_end>
       2:	00 00       	nop
       4:	bf c6       	rjmp	.+3454   	; 0xd84 <__bad_interrupt>
       6:	00 00       	nop
       8:	bd c6       	rjmp	.+3450   	; 0xd84 <__bad_interrupt>
       a:	00 00       	nop
       c:	bb c6       	rjmp	.+3446   	; 0xd84 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c6       	rjmp	.+3442   	; 0xd84 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c6       	rjmp	.+3438   	; 0xd84 <__bad_interrupt>
      16:	00 00       	nop
      18:	b5 c6       	rjmp	.+3434   	; 0xd84 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c6       	rjmp	.+3430   	; 0xd84 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b1 c6       	rjmp	.+3426   	; 0xd84 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c6       	rjmp	.+3422   	; 0xd84 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <__vector_10>
      2c:	ab c6       	rjmp	.+3414   	; 0xd84 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__vector_12>
      34:	0c 94 37 2c 	jmp	0x586e	; 0x586e <__vector_13>
      38:	a5 c6       	rjmp	.+3402   	; 0xd84 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c6       	rjmp	.+3398   	; 0xd84 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c6       	rjmp	.+3394   	; 0xd84 <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c6       	rjmp	.+3390   	; 0xd84 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c6       	rjmp	.+3386   	; 0xd84 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c6       	rjmp	.+3382   	; 0xd84 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c6       	rjmp	.+3378   	; 0xd84 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c6       	rjmp	.+3374   	; 0xd84 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c6       	rjmp	.+3370   	; 0xd84 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c6       	rjmp	.+3366   	; 0xd84 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c6       	rjmp	.+3362   	; 0xd84 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c6       	rjmp	.+3358   	; 0xd84 <__bad_interrupt>
      66:	00 00       	nop
      68:	8d c6       	rjmp	.+3354   	; 0xd84 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c6       	rjmp	.+3350   	; 0xd84 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c6       	rjmp	.+3346   	; 0xd84 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c6       	rjmp	.+3342   	; 0xd84 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c6       	rjmp	.+3338   	; 0xd84 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c6       	rjmp	.+3334   	; 0xd84 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c6       	rjmp	.+3330   	; 0xd84 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c6       	rjmp	.+3326   	; 0xd84 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c6       	rjmp	.+3322   	; 0xd84 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c6       	rjmp	.+3318   	; 0xd84 <__bad_interrupt>
      8e:	00 00       	nop
      90:	79 c6       	rjmp	.+3314   	; 0xd84 <__bad_interrupt>
      92:	00 00       	nop
      94:	77 c6       	rjmp	.+3310   	; 0xd84 <__bad_interrupt>
      96:	00 00       	nop
      98:	75 c6       	rjmp	.+3306   	; 0xd84 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	73 c6       	rjmp	.+3302   	; 0xd84 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	71 c6       	rjmp	.+3298   	; 0xd84 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6f c6       	rjmp	.+3294   	; 0xd84 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6d c6       	rjmp	.+3290   	; 0xd84 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6b c6       	rjmp	.+3286   	; 0xd84 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	69 c6       	rjmp	.+3282   	; 0xd84 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c 94 31 2d 	jmp	0x5a62	; 0x5a62 <__vector_45>
      b8:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__vector_46>
      bc:	63 c6       	rjmp	.+3270   	; 0xd84 <__bad_interrupt>
      be:	00 00       	nop
      c0:	61 c6       	rjmp	.+3266   	; 0xd84 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5f c6       	rjmp	.+3262   	; 0xd84 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5d c6       	rjmp	.+3258   	; 0xd84 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5b c6       	rjmp	.+3254   	; 0xd84 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	59 c6       	rjmp	.+3250   	; 0xd84 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	57 c6       	rjmp	.+3246   	; 0xd84 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	55 c6       	rjmp	.+3242   	; 0xd84 <__bad_interrupt>
      da:	00 00       	nop
      dc:	53 c6       	rjmp	.+3238   	; 0xd84 <__bad_interrupt>
      de:	00 00       	nop
      e0:	51 c6       	rjmp	.+3234   	; 0xd84 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4f c6       	rjmp	.+3230   	; 0xd84 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	4d c6       	rjmp	.+3226   	; 0xd84 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	4b c6       	rjmp	.+3222   	; 0xd84 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	49 c6       	rjmp	.+3218   	; 0xd84 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	47 c6       	rjmp	.+3214   	; 0xd84 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	45 c6       	rjmp	.+3210   	; 0xd84 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	43 c6       	rjmp	.+3206   	; 0xd84 <__bad_interrupt>
      fe:	00 00       	nop
     100:	41 c6       	rjmp	.+3202   	; 0xd84 <__bad_interrupt>
     102:	00 00       	nop
     104:	3f c6       	rjmp	.+3198   	; 0xd84 <__bad_interrupt>
     106:	00 00       	nop
     108:	3d c6       	rjmp	.+3194   	; 0xd84 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	3b c6       	rjmp	.+3190   	; 0xd84 <__bad_interrupt>
     10e:	00 00       	nop
     110:	39 c6       	rjmp	.+3186   	; 0xd84 <__bad_interrupt>
     112:	00 00       	nop
     114:	37 c6       	rjmp	.+3182   	; 0xd84 <__bad_interrupt>
     116:	00 00       	nop
     118:	35 c6       	rjmp	.+3178   	; 0xd84 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	33 c6       	rjmp	.+3174   	; 0xd84 <__bad_interrupt>
     11e:	00 00       	nop
     120:	31 c6       	rjmp	.+3170   	; 0xd84 <__bad_interrupt>
     122:	00 00       	nop
     124:	2f c6       	rjmp	.+3166   	; 0xd84 <__bad_interrupt>
     126:	00 00       	nop
     128:	2d c6       	rjmp	.+3162   	; 0xd84 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	0c 94 cd 2c 	jmp	0x599a	; 0x599a <__vector_75>
     130:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__vector_76>
     134:	27 c6       	rjmp	.+3150   	; 0xd84 <__bad_interrupt>
     136:	00 00       	nop
     138:	25 c6       	rjmp	.+3146   	; 0xd84 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0c 94 c5 29 	jmp	0x538a	; 0x538a <__vector_79>
     140:	21 c6       	rjmp	.+3138   	; 0xd84 <__bad_interrupt>
     142:	00 00       	nop
     144:	1f c6       	rjmp	.+3134   	; 0xd84 <__bad_interrupt>
     146:	00 00       	nop
     148:	1d c6       	rjmp	.+3130   	; 0xd84 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	1b c6       	rjmp	.+3126   	; 0xd84 <__bad_interrupt>
     14e:	00 00       	nop
     150:	19 c6       	rjmp	.+3122   	; 0xd84 <__bad_interrupt>
     152:	00 00       	nop
     154:	17 c6       	rjmp	.+3118   	; 0xd84 <__bad_interrupt>
     156:	00 00       	nop
     158:	15 c6       	rjmp	.+3114   	; 0xd84 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	13 c6       	rjmp	.+3110   	; 0xd84 <__bad_interrupt>
     15e:	00 00       	nop
     160:	11 c6       	rjmp	.+3106   	; 0xd84 <__bad_interrupt>
     162:	00 00       	nop
     164:	0f c6       	rjmp	.+3102   	; 0xd84 <__bad_interrupt>
     166:	00 00       	nop
     168:	0d c6       	rjmp	.+3098   	; 0xd84 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0b c6       	rjmp	.+3094   	; 0xd84 <__bad_interrupt>
     16e:	00 00       	nop
     170:	09 c6       	rjmp	.+3090   	; 0xd84 <__bad_interrupt>
     172:	00 00       	nop
     174:	07 c6       	rjmp	.+3086   	; 0xd84 <__bad_interrupt>
     176:	00 00       	nop
     178:	05 c6       	rjmp	.+3082   	; 0xd84 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	03 c6       	rjmp	.+3078   	; 0xd84 <__bad_interrupt>
     17e:	00 00       	nop
     180:	01 c6       	rjmp	.+3074   	; 0xd84 <__bad_interrupt>
     182:	00 00       	nop
     184:	ff c5       	rjmp	.+3070   	; 0xd84 <__bad_interrupt>
     186:	00 00       	nop
     188:	fd c5       	rjmp	.+3066   	; 0xd84 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	fb c5       	rjmp	.+3062   	; 0xd84 <__bad_interrupt>
     18e:	00 00       	nop
     190:	f9 c5       	rjmp	.+3058   	; 0xd84 <__bad_interrupt>
     192:	00 00       	nop
     194:	f7 c5       	rjmp	.+3054   	; 0xd84 <__bad_interrupt>
     196:	00 00       	nop
     198:	f5 c5       	rjmp	.+3050   	; 0xd84 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	f3 c5       	rjmp	.+3046   	; 0xd84 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	f1 c5       	rjmp	.+3042   	; 0xd84 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ef c5       	rjmp	.+3038   	; 0xd84 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	ed c5       	rjmp	.+3034   	; 0xd84 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	eb c5       	rjmp	.+3030   	; 0xd84 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	e9 c5       	rjmp	.+3026   	; 0xd84 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	e7 c5       	rjmp	.+3022   	; 0xd84 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	e5 c5       	rjmp	.+3018   	; 0xd84 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	e3 c5       	rjmp	.+3014   	; 0xd84 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	e1 c5       	rjmp	.+3010   	; 0xd84 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	df c5       	rjmp	.+3006   	; 0xd84 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	dd c5       	rjmp	.+3002   	; 0xd84 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	db c5       	rjmp	.+2998   	; 0xd84 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	d9 c5       	rjmp	.+2994   	; 0xd84 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	d7 c5       	rjmp	.+2990   	; 0xd84 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	d5 c5       	rjmp	.+2986   	; 0xd84 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	d3 c5       	rjmp	.+2982   	; 0xd84 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	d1 c5       	rjmp	.+2978   	; 0xd84 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	cf c5       	rjmp	.+2974   	; 0xd84 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	cd c5       	rjmp	.+2970   	; 0xd84 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	cb c5       	rjmp	.+2966   	; 0xd84 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	c9 c5       	rjmp	.+2962   	; 0xd84 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_125>
     1f8:	c5 c5       	rjmp	.+2954   	; 0xd84 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	3c 62       	ori	r19, 0x2C	; 44
     1fe:	72 3e       	cpi	r23, 0xE2	; 226
	...

00000201 <__c.7057>:
     201:	1b 5b 25 75 3b 25 75 48 1b 5b 30 4b 00              .[%u;%uH.[0K.

0000020e <__c.7044>:
     20e:	3c 62 72 3e 00                                      <br>.

00000213 <__c.7042>:
     213:	0d 0a 00                                            ...

00000216 <__c.7005>:
     216:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     226:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     236:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 66 6f 6e     ext/html....<fon
     246:	74 3e 00                                            t>.

00000249 <__c.7001>:
     249:	1b 5b 25 75 3b 25 75 48 1b 5b 30 4b 00              .[%u;%uH.[0K.

00000256 <__c.6999>:
     256:	1b 5b 30 6d 1b 5b 32 4a 1b 5b 31 6d 1b 5b 33 6d     .[0m.[2J.[1m.[3m
     266:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000026d <__c.6993>:
     26d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 6d 61 67     <font color="mag
     27d:	65 6e 74 61 22 3e 00                                enta">.

00000284 <__c.6990>:
     284:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 72 65 64     <font color="red
     294:	22 3e 00                                            ">.

00000297 <__c.6987>:
     297:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 70 75 72     <font color="pur
     2a7:	70 6c 65 22 3e 00                                   ple">.

000002ad <__c.6983>:
     2ad:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 67 72 65     <font color="gre
     2bd:	65 6e 22 3e 00                                      en">.

000002c2 <__c.6980>:
     2c2:	3c 2f 66 6f 6e 74 3e 00                             </font>.

000002ca <__c.6974>:
     2ca:	1b 5b 75 1b 5b 33 35 6d 00                          .[u.[35m.

000002d3 <__c.6971>:
     2d3:	1b 5b 73 1b 5b 33 31 6d 00                          .[s.[31m.

000002dc <__c.6968>:
     2dc:	1b 5b 73 1b 5b 33 36 6d 00                          .[s.[36m.

000002e5 <__c.6964>:
     2e5:	1b 5b 73 1b 5b 33 32 6d 00                          .[s.[32m.

000002ee <ProductString>:
     2ee:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     2fe:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000030c <ManufacturerString>:
     30c:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     31c:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000326 <LanguageString>:
     326:	04 03 09 04                                         ....

0000032a <ConfigurationDescriptor>:
     32a:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     33a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     34a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     35a:	07 05 04 02 40 00 05 07 05 83 02 40 00 05           ....@......@..

00000368 <DeviceDescriptor>:
     368:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     378:	dc 01                                               ..

0000037a <__c.7348>:
     37a:	41 6c 61 72 6d 20 26 20 54 69 6d 65 20 53 61 76     Alarm & Time Sav
     38a:	65 64 20 74 6f 20 45 45 50 52 4f 4d 2e 00           ed to EEPROM..

00000398 <__c.7284>:
     398:	44 65 76 25 32 75 42 2d 25 32 75 42 3a 25 35 64     Dev%2uB-%2uB:%5d
     3a8:	2c 25 35 64 2c 25 35 75 2c 25 35 64 20 6d 41 00     ,%5d,%5u,%5d mA.

000003b8 <__c.7282>:
     3b8:	44 65 76 25 32 75 41 2d 25 32 75 41 3a 25 35 64     Dev%2uA-%2uA:%5d
     3c8:	2c 25 35 64 2c 25 35 75 2c 25 35 64 20 6d 41 00     ,%5d,%5u,%5d mA.

000003d8 <__c.7279>:
     3d8:	28 6f 66 66 29 00                                   (off).

000003de <__c.7277>:
     3de:	28 6f 6e 29 00                                      (on).

000003e3 <__c.7275>:
     3e3:	41 6c 61 72 6d 3a 20 00                             Alarm: .

000003eb <__c.7273>:
     3eb:	54 69 6d 65 3a 20 20 00                             Time:  .

000003f3 <__c.7271>:
     3f3:	50 53 55 3a 20 25 35 64 20 6d 56 2c 20 4c 6f 61     PSU: %5d mV, Loa
     403:	64 3a 20 25 35 64 20 6d 41 00                       d: %5d mA.

0000040d <__c.7269>:
     40d:	42 6f 61 72 64 3a 20 25 75 2c 20 43 50 55 3a 20     Board: %u, CPU: 
     41d:	25 2e 31 66 25 25 2c 20 54 65 6d 70 3a 20 25 2e     %.1f%%, Temp: %.
     42d:	31 66 20 43 00                                      1f C.

00000432 <__c.7267>:
     432:	20 28 25 73 29 00                                    (%s).

00000438 <__c.7265>:
     438:	44 65 76 69 63 65 3a 20 25 73 2c 20 25 32 75 20     Device: %s, %2u 
     448:	2f 20 25 32 75 00                                   / %2u.

0000044e <__c.7263>:
     44e:	4d 65 6e 75 3a 20 25 73 00                          Menu: %s.

00000457 <__c.7258>:
     457:	58 3a 20 66 6f 72 63 65 20 72 65 62 6f 6f 74 20     X: force reboot 
     467:	61 6c 6c 20 64 65 76 69 63 65 73 00                 all devices.

00000473 <__c.7256>:
     473:	5a 3a 20 73 65 74 20 63 68 61 6e 6e 65 6c 20 61     Z: set channel a
     483:	6c 6c 20 64 65 76 69 63 65 73 00                    ll devices.

0000048e <__c.7254>:
     48e:	46 3a 20 66 6f 72 63 65 20 72 65 62 6f 6f 74 00     F: force reboot.

0000049e <__c.7252>:
     49e:	47 3a 20 73 65 74 20 63 68 61 6e 6e 65 6c 00        G: set channel.

000004ad <__c.7250>:
     4ad:	59 2c 4e 2c 4c 3a 20 66 61 76 6f 72 69 74 65 2c     Y,N,L: favorite,
     4bd:	20 6f 70 74 69 6f 6e 2c 20 73 63 68 65 64 75 6c      option, schedul
     4cd:	65 00                                               e.

000004cf <__c.7248>:
     4cf:	55 2c 49 2c 4a 2c 4b 3a 20 72 65 64 2c 20 67 72     U,I,J,K: red, gr
     4df:	65 65 6e 2c 20 79 65 6c 6c 6f 77 2c 20 62 6c 75     een, yellow, blu
     4ef:	65 00                                               e.

000004f1 <__c.7246>:
     4f1:	56 3a 20 76 6f 6c 75 6d 65 00                       V: volume.

000004fb <__c.7244>:
     4fb:	4d 3a 20 6d 65 6e 75 00                             M: menu.

00000503 <__c.7242>:
     503:	48 3a 20 68 6f 6d 65 00                             H: home.

0000050b <__c.7240>:
     50b:	43 3a 20 63 61 6e 63 65 6c 00                       C: cancel.

00000515 <__c.7238>:
     515:	42 3a 20 62 61 63 6b 00                             B: back.

0000051d <__c.7236>:
     51d:	4f 3a 20 6f 6b 00                                   O: ok.

00000523 <__c.7234>:
     523:	50 3a 20 70 6f 77 65 72 20 62 75 74 74 6f 6e 00     P: power button.

00000533 <__c.7232>:
     533:	27 2c 27 20 2f 20 27 2e 27 3a 20 63 68 61 6e 6e     ',' / '.': chann
     543:	65 6c 20 70 72 65 76 2f 6e 65 78 74 00              el prev/next.

00000550 <__c.7230>:
     550:	30 2d 39 3a 20 64 69 67 69 74 73 00                 0-9: digits.

0000055c <__c.7228>:
     55c:	57 41 53 44 3a 20 61 72 72 6f 77 20 6b 65 79 73     WASD: arrow keys
	...

0000056d <__c.7224>:
     56d:	44 61 74 61 3a 20 27 25 73 27 00                    Data: '%s'.

00000578 <__c.7222>:
     578:	61 6c 61 72 6d 20 6f 6e 2c 20 61 6c 61 72 6d 20     alarm on, alarm 
     588:	6f 66 66 00                                         off.

0000058c <__c.7220>:
     58c:	73 65 74 20 62 65 69 6e 2c 20 73 65 74 20 68 75     set bein, set hu
     59c:	6d 61 78 2c 20 73 65 74 20 6d 62 63 00              max, set mbc.

000005a9 <__c.7218>:
     5a9:	72 65 73 65 74 20 2f 20 72 65 73 74 61 72 74 20     reset / restart 
     5b9:	2f 20 72 65 62 6f 6f 74 00                          / reboot.

000005c2 <__c.7216>:
     5c2:	69 70 20 61 2e 62 2e 63 2e 64 00                    ip a.b.c.d.

000005cd <__c.7214>:
     5cd:	61 6c 61 72 6d 20 68 3a 6d 3a 73 00                 alarm h:m:s.

000005d9 <__c.7212>:
     5d9:	74 69 6d 65 20 68 3a 6d 3a 73 00                    time h:m:s.

000005e4 <__c.7210>:
     5e4:	64 61 74 65 20 79 3a 6d 3a 64 00                    date y:m:d.

000005ef <__c.7208>:
     5ef:	57 44 54 3a 20 25 75 2c 20 52 41 4d 3a 20 25 64     WDT: %u, RAM: %d
     5ff:	2c 20 49 44 3a 20 30 78 25 30 38 6c 78 00           , ID: 0x%08lx.

0000060d <__c.7206>:
     60d:	42 75 69 6c 64 3a 20 53 61 74 20 4f 63 74 20 30     Build: Sat Oct 0
     61d:	37 20 32 31 3a 35 36 3a 30 39 20 32 30 31 37 00     7 21:56:09 2017.

0000062d <__c.7202>:
     62d:	50 72 65 73 73 20 53 20 74 6f 20 6d 6f 64 69 66     Press S to modif
     63d:	79 20 73 65 74 74 69 6e 67 73 00                    y settings.

00000648 <__c.7200>:
     648:	50 72 65 73 73 20 53 70 61 63 65 20 74 6f 20 73     Press Space to s
     658:	65 6e 64 20 72 65 6d 6f 74 65 20 63 6f 6d 6d 61     end remote comma
     668:	6e 64 00                                            nd.

0000066b <__c.7196>:
     66b:	52 6f 6f 6d 73 20 45 72 72 6f 72 21 00              Rooms Error!.

00000678 <__c.7372>:
     678:	45 72 72 6f 72 3a 20 74 65 78 74 20 69 6e 70 75     Error: text inpu
     688:	74 20 6f 76 65 72 66 6c 6f 77 21 00                 t overflow!.

00000694 <__c.7145>:
     694:	46 61 69 6c 65 64 20 72 65 61 64 69 6e 67 20 74     Failed reading t
     6a4:	65 78 74 20 69 6e 70 75 74 3a 20 69 6e 76 61 6c     ext input: inval
     6b4:	69 64 20 69 6e 70 75 74 20 66 6f 72 6d 61 74 21     id input format!
	...

000006c5 <__c.7143>:
     6c5:	46 61 69 6c 65 64 20 75 70 64 61 74 69 6e 67 20     Failed updating 
     6d5:	61 6c 61 72 6d 3a 20 69 6e 76 61 6c 69 64 20 74     alarm: invalid t
     6e5:	69 6d 65 21 00                                      ime!.

000006ea <__c.7141>:
     6ea:	53 75 63 63 65 73 66 75 6c 6c 79 20 75 70 64 61     Succesfully upda
     6fa:	74 65 64 20 61 6c 61 72 6d 20 74 6f 3a 20 00        ted alarm to: .

00000709 <__c.7139>:
     709:	61 25 2a 5b 5e 30 2d 39 5d 25 68 68 75 3a 25 68     a%*[^0-9]%hhu:%h
     719:	68 75 3a 25 68 68 75 00                             hu:%hhu.

00000721 <__c.7137>:
     721:	46 61 69 6c 65 64 20 75 70 64 61 74 69 6e 67 20     Failed updating 
     731:	74 69 6d 65 3a 20 69 6e 76 61 6c 69 64 20 74 69     time: invalid ti
     741:	6d 65 21 00                                         me!.

00000745 <__c.7135>:
     745:	53 75 63 63 65 73 66 75 6c 6c 79 20 75 70 64 61     Succesfully upda
     755:	74 65 64 20 74 69 6d 65 20 74 6f 3a 20 00           ted time to: .

00000763 <__c.7133>:
     763:	74 25 2a 5b 5e 30 2d 39 5d 25 68 68 75 3a 25 68     t%*[^0-9]%hhu:%h
     773:	68 75 3a 25 68 68 75 00                             hu:%hhu.

0000077b <__c.7131>:
     77b:	46 61 69 6c 65 64 20 75 70 64 61 74 69 6e 67 20     Failed updating 
     78b:	64 61 74 65 3a 20 69 6e 76 61 6c 69 64 20 64 61     date: invalid da
     79b:	74 65 21 00                                         te!.

0000079f <__c.7129>:
     79f:	53 75 63 63 65 73 66 75 6c 6c 79 20 75 70 64 61     Succesfully upda
     7af:	74 65 64 20 64 61 74 65 20 74 6f 3a 20 00           ted date to: .

000007bd <__c.7127>:
     7bd:	64 25 2a 5b 5e 30 2d 39 5d 25 68 68 75 3a 25 68     d%*[^0-9]%hhu:%h
     7cd:	68 75 3a 25 68 68 75 00                             hu:%hhu.

000007d5 <__c.7125>:
     7d5:	41 6c 61 72 6d 20 64 69 73 61 62 6c 65 64 00        Alarm disabled.

000007e4 <__c.7123>:
     7e4:	6f 66 66 00                                         off.

000007e8 <__c.7121>:
     7e8:	41 6c 61 72 6d 20 65 6e 61 62 6c 65 64 00           Alarm enabled.

000007f6 <__c.7119>:
     7f6:	6f 6e 00                                            on.

000007f9 <__c.7117>:
     7f9:	61 6c 61 72 6d 00                                   alarm.

000007ff <__c.7115>:
     7ff:	72 65 62 6f 6f 74 00                                reboot.

00000806 <__c.7113>:
     806:	72 65 73 74 61 72 74 00                             restart.

0000080e <__c.7111>:
     80e:	72 65 73 65 74 00                                   reset.

00000814 <__c.7109>:
     814:	44 65 76 69 63 65 20 74 79 70 65 20 73 65 74 20     Device type set 
     824:	74 6f 20 4d 42 43 00                                to MBC.

0000082b <__c.7107>:
     82b:	6d 62 63 00                                         mbc.

0000082f <__c.7105>:
     82f:	44 65 76 69 63 65 20 74 79 70 65 20 73 65 74 20     Device type set 
     83f:	74 6f 20 48 75 6d 61 78 00                          to Humax.

00000848 <__c.7103>:
     848:	68 75 6d 61 78 00                                   humax.

0000084e <__c.7101>:
     84e:	44 65 76 69 63 65 20 74 79 70 65 20 73 65 74 20     Device type set 
     85e:	74 6f 20 42 65 69 6e 00                             to Bein.

00000866 <__c.7099>:
     866:	62 65 69 6e 00                                      bein.

0000086b <strDevice>:
     86b:	9f 08 84 08 7f 08 7b 08                             ......{.

00000873 <strMenu>:
     873:	9f 08 9a 08 91 08 8a 08                             ........

0000087b <strDeviceMbc>:
     87b:	6d 62 63 00                                         mbc.

0000087f <strDeviceBein>:
     87f:	62 65 69 6e 00                                      bein.

00000884 <strDeviceHumax>:
     884:	68 75 6d 61 78 00                                   humax.

0000088a <strMenuRemote>:
     88a:	72 65 6d 6f 74 65 00                                remote.

00000891 <strMenuSettings>:
     891:	73 65 74 74 69 6e 67 73 00                          settings.

0000089a <strMenuMain>:
     89a:	6d 61 69 6e 00                                      main.

0000089f <strNoone>:
     89f:	6e 6f 6f 6e 65 00                                   noone.

000008a5 <__c.7138>:
     8a5:	54 4d 50 31 31 32 20 69 6e 69 74 20 73 75 63 63     TMP112 init succ
     8b5:	65 73 73 21 00                                      ess!.

000008ba <__c.7136>:
     8ba:	54 4d 50 31 31 32 20 66 61 69 6c 65 64 20 32 21     TMP112 failed 2!
	...

000008cb <__c.7134>:
     8cb:	54 4d 50 31 31 32 20 66 61 69 6c 65 64 21 00        TMP112 failed!.

000008da <__c.7077>:
     8da:	42 65 69 6e 20 36 00                                Bein 6.

000008e1 <__c.7074>:
     8e1:	42 65 69 6e 20 35 00                                Bein 5.

000008e8 <__c.7071>:
     8e8:	42 65 69 6e 20 34 00                                Bein 4.

000008ef <__c.7068>:
     8ef:	42 65 69 6e 20 37 00                                Bein 7.

000008f6 <__c.7065>:
     8f6:	42 65 69 6e 20 38 00                                Bein 8.

000008fd <__c.7062>:
     8fd:	42 65 69 6e 20 33 00                                Bein 3.

00000904 <__c.7059>:
     904:	42 65 69 6e 20 32 00                                Bein 2.

0000090b <__c.7055>:
     90b:	42 65 69 6e 20 31 00                                Bein 1.

00000912 <__c.7050>:
     912:	4d 42 43 20 4d 61 78 00                             MBC Max.

0000091a <__c.7047>:
     91a:	4d 42 43 20 34 00                                   MBC 4.

00000920 <__c.7044>:
     920:	4d 42 43 20 50 00                                   MBC P.

00000926 <__c.7041>:
     926:	4d 42 43 20 32 00                                   MBC 2.

0000092c <__c.7038>:
     92c:	42 65 69 6e 20 4d 31 00                             Bein M1.

00000934 <__c.7035>:
     934:	4d 42 43 20 44 72 61 00                             MBC Dra.

0000093c <__c.7032>:
     93c:	42 65 69 6e 20 4d 32 00                             Bein M2.

00000944 <__c.7028>:
     944:	4d 42 43 20 31 00                                   MBC 1.

0000094a <__c.6990>:
     94a:	52 65 62 6f 6f 74 69 6e 67 2e 2e 2e 00              Rebooting....

00000957 <__c.7125>:
     957:	25 75 21 00                                         %u!.

0000095b <__c.7122>:
     95b:	55 6e 6b 6e 6f 77 6e 21 00                          Unknown!.

00000964 <__c.7119>:
     964:	57 61 74 63 68 64 6f 67 21 00                       Watchdog!.

0000096e <__c.7116>:
     96e:	53 70 69 6b 65 21 00                                Spike!.

00000975 <__c.7113>:
     975:	53 6f 66 74 77 61 72 65 21 00                       Software!.

0000097f <__c.7110>:
     97f:	50 6f 77 65 72 2d 4f 6e 21 00                       Power-On!.

00000989 <__c.7107>:
     989:	44 65 62 75 67 20 53 79 73 74 65 6d 21 00           Debug System!.

00000997 <__c.7104>:
     997:	55 6e 64 65 72 76 6f 6c 74 61 67 65 21 00           Undervoltage!.

000009a5 <__c.7100>:
     9a5:	45 78 74 65 72 6e 61 6c 21 00                       External!.

000009af <__c.7020>:
     9af:	57 61 72 6e 69 6e 67 3a 20 75 6e 6b 6e 6f 77 6e     Warning: unknown
     9bf:	20 6d 69 63 72 6f 63 6f 6e 74 72 6f 6c 6c 65 72      microcontroller
     9cf:	20 49 44 3a 20 30 78 25 30 38 6c 78 20 00            ID: 0x%08lx .

000009dd <__c.6974>:
     9dd:	48 61 72 64 77 61 72 65 20 49 6e 69 74 69 61 6c     Hardware Initial
     9ed:	69 7a 65 64 2e 00                                   ized..

000009f3 <__c.7038>:
     9f3:	20 45 72 72 6f 72 3a 20 75 6e 6b 6e 6f 77 6e 20      Error: unknown 
     a03:	64 65 76 69 63 65 20 74 79 70 65 21 00              device type!.

00000a10 <__c.7185>:
     a10:	45 72 72 6f 72 3a 20 75 6e 6b 6e 6f 77 6e 20 6b     Error: unknown k
     a20:	65 79 21 00                                         ey!.

00000a24 <__c.7182>:
     a24:	39 00                                               9.

00000a26 <__c.7179>:
     a26:	38 00                                               8.

00000a28 <__c.7176>:
     a28:	37 00                                               7.

00000a2a <__c.7173>:
     a2a:	36 00                                               6.

00000a2c <__c.7170>:
     a2c:	35 00                                               5.

00000a2e <__c.7167>:
     a2e:	34 00                                               4.

00000a30 <__c.7164>:
     a30:	33 00                                               3.

00000a32 <__c.7161>:
     a32:	32 00                                               2.

00000a34 <__c.7158>:
     a34:	31 00                                               1.

00000a36 <__c.7155>:
     a36:	30 00                                               0.

00000a38 <__c.7152>:
     a38:	73 63 68 65 64 75 6c 65 00                          schedule.

00000a41 <__c.7149>:
     a41:	6f 70 74 69 6f 6e 00                                option.

00000a48 <__c.7146>:
     a48:	66 61 76 6f 72 69 74 65 00                          favorite.

00000a51 <__c.7143>:
     a51:	73 75 62 73 00                                      subs.

00000a56 <__c.7140>:
     a56:	61 75 64 69 6f 00                                   audio.

00000a5c <__c.7137>:
     a5c:	62 6c 75 65 00                                      blue.

00000a61 <__c.7134>:
     a61:	79 65 6c 6c 6f 77 00                                yellow.

00000a68 <__c.7131>:
     a68:	67 72 65 65 6e 00                                   green.

00000a6e <__c.7128>:
     a6e:	72 65 64 00                                         red.

00000a72 <__c.7125>:
     a72:	73 65 74 20 63 68 61 6e 6e 65 6c 20 25 75 00        set channel %u.

00000a81 <__c.7122>:
     a81:	66 6f 72 63 65 20 72 65 62 6f 6f 74 00              force reboot.

00000a8e <__c.7119>:
     a8e:	76 6f 6c 75 6d 65 20 75 70 00                       volume up.

00000a98 <__c.7116>:
     a98:	70 6f 77 65 72 00                                   power.

00000a9e <__c.7113>:
     a9e:	6d 65 6e 75 00                                      menu.

00000aa3 <__c.7110>:
     aa3:	68 6f 6d 65 00                                      home.

00000aa8 <__c.7107>:
     aa8:	63 61 6e 63 65 6c 00                                cancel.

00000aaf <__c.7104>:
     aaf:	62 61 63 6b 00                                      back.

00000ab4 <__c.7101>:
     ab4:	63 6f 6e 66 69 72 6d 00                             confirm.

00000abc <__c.7098>:
     abc:	61 72 72 6f 77 20 72 69 67 68 74 00                 arrow right.

00000ac8 <__c.7095>:
     ac8:	61 72 72 6f 77 20 64 6f 77 6e 00                    arrow down.

00000ad3 <__c.7092>:
     ad3:	61 72 72 6f 77 20 6c 65 66 74 00                    arrow left.

00000ade <__c.7089>:
     ade:	61 72 72 6f 77 20 75 70 00                          arrow up.

00000ae7 <__c.7086>:
     ae7:	63 68 61 6e 6e 65 6c 20 75 70 00                    channel up.

00000af2 <__c.7082>:
     af2:	63 68 61 6e 6e 65 6c 20 64 6f 77 6e 00              channel down.

00000aff <__c.7079>:
     aff:	52 65 6d 6f 74 65 20 74 6f 20 25 73 2c 20 30 78     Remote to %s, 0x
     b0f:	25 30 33 78 2c 20 00                                %03x, .

00000b16 <__c.6989>:
     b16:	50 6f 77 65 72 69 6e 67 20 4f 66 66 20 64 65 76     Powering Off dev
     b26:	69 63 65 20 25 75 20 41 2b 42 00                    ice %u A+B.

00000b31 <__c.6987>:
     b31:	50 6f 77 65 72 69 6e 67 20 4f 6e 20 64 65 76 69     Powering On devi
     b41:	63 65 20 25 75 20 41 2b 42 00                       ce %u A+B.

00000b4b <__c.7028>:
     b4b:	20 64 6f 6e 65 2e 0d 0a 00                           done....

00000b54 <__c.7022>:
     b54:	2c 20 64 65 76 69 63 65 73 20 30 78 25 30 33 78     , devices 0x%03x
     b64:	2c 20 6b 65 79 63 6f 64 65 20 30 78 25 30 38 78     , keycode 0x%08x
	...

00000b75 <__c.7001>:
     b75:	25 75 00                                            %u.

00000b78 <__c.6996>:
     b78:	45 72 72 6f 72 3a 20 72 65 62 6f 6f 74 20 69 73     Error: reboot is
     b88:	20 61 62 6f 72 74 65 64 21 20 41 6c 72 65 61 64      aborted! Alread
     b98:	79 20 62 75 73 79 20 72 65 62 6f 6f 74 69 6e 67     y busy rebooting
     ba8:	20 6f 72 20 69 6e 74 65 72 6e 61 6c 20 65 72 72      or internal err
     bb8:	6f 72 2e 00                                         or..

00000bbc <__c.6994>:
     bbc:	20 45 72 72 6f 72 3a 20 65 6d 70 74 79 20 63 6f      Error: empty co
     bcc:	6d 6d 61 6e 64 21 00                                mmand!.

00000bd3 <__c.6975>:
     bd3:	25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 20 00     %02u:%02u:%02u .

00000be3 <__c.6970>:
     be3:	25 30 34 75 2d 25 30 32 75 2d 25 30 32 75 20 00     %04u-%02u-%02u .

00000bf3 <__c.7044>:
     bf3:	0d 0a 1b 5b 30 4b 41 70 70 6c 69 63 61 74 69 6f     ...[0KApplicatio
     c03:	6e 20 53 74 61 72 74 65 64 21 00                    n Started!.

00000c0e <__c.6969>:
     c0e:	0d 0a 1b 5b 30 4b 45 76 65 6e 74 20 6f 76 65 72     ...[0KEvent over
     c1e:	66 6c 6f 77 20 65 72 72 6f 72 21 00                 flow error!.

00000c2a <__c.2179>:
     c2a:	6e 61 6e 00                                         nan.

00000c2e <__c.2177>:
     c2e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     c3e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     c4e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     c5e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     c6e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     c7e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     c8e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     c9e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     cae:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     cbe:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     cce:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     cde:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     cee:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     cfe:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     d0e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     d1e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000d2c <__c.2319>:
     d2c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000d38 <__ctors_end>:
     d38:	11 24       	eor	r1, r1
     d3a:	1f be       	out	0x3f, r1	; 63
     d3c:	cf ef       	ldi	r28, 0xFF	; 255
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	df e3       	ldi	r29, 0x3F	; 63
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	00 e0       	ldi	r16, 0x00	; 0
     d46:	0c bf       	out	0x3c, r16	; 60
     d48:	18 be       	out	0x38, r1	; 56
     d4a:	19 be       	out	0x39, r1	; 57
     d4c:	1a be       	out	0x3a, r1	; 58
     d4e:	1b be       	out	0x3b, r1	; 59

00000d50 <__do_copy_data>:
     d50:	11 e2       	ldi	r17, 0x21	; 33
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e2       	ldi	r27, 0x20	; 32
     d56:	e8 e1       	ldi	r30, 0x18	; 24
     d58:	f1 e7       	ldi	r31, 0x71	; 113
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	0b bf       	out	0x3b, r16	; 59
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <__do_copy_data+0x14>
     d60:	07 90       	elpm	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	a2 30       	cpi	r26, 0x02	; 2
     d66:	b1 07       	cpc	r27, r17
     d68:	d9 f7       	brne	.-10     	; 0xd60 <__do_copy_data+0x10>
     d6a:	1b be       	out	0x3b, r1	; 59

00000d6c <__do_clear_bss>:
     d6c:	27 e2       	ldi	r18, 0x27	; 39
     d6e:	a2 e0       	ldi	r26, 0x02	; 2
     d70:	b1 e2       	ldi	r27, 0x21	; 33
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <.do_clear_bss_start>

00000d74 <.do_clear_bss_loop>:
     d74:	1d 92       	st	X+, r1

00000d76 <.do_clear_bss_start>:
     d76:	af 37       	cpi	r26, 0x7F	; 127
     d78:	b2 07       	cpc	r27, r18
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <.do_clear_bss_loop>
     d7c:	0e 94 33 12 	call	0x2466	; 0x2466 <main>
     d80:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <_exit>

00000d84 <__bad_interrupt>:
     d84:	3d c9       	rjmp	.-3462   	; 0x0 <__vectors>

00000d86 <_ZL23adcMeasureSingleChannelh>:
#define SAMPLE_DIVISION					16
#define CALCULATE_VOLTAGE(INTEGER)		((float)INTEGER * (1 / ((4.096f / 2.048f) * (float) NUMBER_OF_SAMPLES)))


static int16_t adcMeasureSingleChannel(uint8_t adca_pin)
{
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
	ADCA.CH0.MUXCTRL = adca_pin;
     d94:	e0 e0       	ldi	r30, 0x00	; 0
     d96:	f2 e0       	ldi	r31, 0x02	; 2
     d98:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = adca_pin;
     d9a:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = adca_pin;
     d9c:	81 ab       	std	Z+49, r24	; 0x31
	ADCA.CH3.MUXCTRL = adca_pin;
     d9e:	81 af       	std	Z+57, r24	; 0x39
	
	ADCB.CH0.MUXCTRL = adca_pin ^ 0x40;
     da0:	90 e4       	ldi	r25, 0x40	; 64
     da2:	89 27       	eor	r24, r25
     da4:	e0 e4       	ldi	r30, 0x40	; 64
     da6:	f2 e0       	ldi	r31, 0x02	; 2
     da8:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH1.MUXCTRL = adca_pin ^ 0x40;
     daa:	81 a7       	std	Z+41, r24	; 0x29
	ADCB.CH2.MUXCTRL = adca_pin ^ 0x40;
     dac:	81 ab       	std	Z+49, r24	; 0x31
	ADCB.CH3.MUXCTRL = adca_pin ^ 0x40;
     dae:	81 af       	std	Z+57, r24	; 0x39
     db0:	20 e2       	ldi	r18, 0x20	; 32
     db2:	30 e0       	ldi	r19, 0x00	; 0
	
	int32_t sum = 0;
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	ba 01       	movw	r22, r20
	
	for (uint16_t i = 0; i < NUMBER_OF_ITERATIONS; i++)
	{
		// Start all channels
		ADCA.CTRLA |= ADC_CH0START_bm | ADC_CH1START_bm | ADC_CH2START_bm | ADC_CH3START_bm;
     dba:	c0 e0       	ldi	r28, 0x00	; 0
     dbc:	d2 e0       	ldi	r29, 0x02	; 2
		
		// Wait till all channels finish
		while ((ADCB.INTFLAGS & 0x0F) != 0x0F);
		
		// Clear all flags
		ADCA.INTFLAGS = ADC_CH0IF_bm | ADC_CH1IF_bm | ADC_CH2IF_bm | ADC_CH3IF_bm;
     dbe:	1f e0       	ldi	r17, 0x0F	; 15
	int32_t sum = 0;
	
	for (uint16_t i = 0; i < NUMBER_OF_ITERATIONS; i++)
	{
		// Start all channels
		ADCA.CTRLA |= ADC_CH0START_bm | ADC_CH1START_bm | ADC_CH2START_bm | ADC_CH3START_bm;
     dc0:	88 81       	ld	r24, Y
     dc2:	8c 63       	ori	r24, 0x3C	; 60
     dc4:	88 83       	st	Y, r24
		ADCB.CTRLA |= ADC_CH0START_bm | ADC_CH1START_bm | ADC_CH2START_bm | ADC_CH3START_bm;
     dc6:	80 81       	ld	r24, Z
     dc8:	8c 63       	ori	r24, 0x3C	; 60
     dca:	80 83       	st	Z, r24
		
		// Wait till all channels finish
		while ((ADCB.INTFLAGS & 0x0F) != 0x0F);
     dcc:	86 81       	ldd	r24, Z+6	; 0x06
     dce:	8f 70       	andi	r24, 0x0F	; 15
     dd0:	8f 30       	cpi	r24, 0x0F	; 15
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <_ZL23adcMeasureSingleChannelh+0x46>
		
		// Clear all flags
		ADCA.INTFLAGS = ADC_CH0IF_bm | ADC_CH1IF_bm | ADC_CH2IF_bm | ADC_CH3IF_bm;
     dd4:	1e 83       	std	Y+6, r17	; 0x06
		ADCB.INTFLAGS = ADC_CH0IF_bm | ADC_CH1IF_bm | ADC_CH2IF_bm | ADC_CH3IF_bm;
     dd6:	16 83       	std	Z+6, r17	; 0x06
		
		// Read all results
		sum += (int16_t) ADCA.CH0.RES + (int16_t) ADCA.CH1.RES + (int16_t) ADCA.CH2.RES + (int16_t) ADCA.CH3.RES;
     dd8:	cc a0       	ldd	r12, Y+36	; 0x24
     dda:	dd a0       	ldd	r13, Y+37	; 0x25
     ddc:	ec a4       	ldd	r14, Y+44	; 0x2c
     dde:	fd a4       	ldd	r15, Y+45	; 0x2d
     de0:	ac a9       	ldd	r26, Y+52	; 0x34
     de2:	bd a9       	ldd	r27, Y+53	; 0x35
     de4:	8c ad       	ldd	r24, Y+60	; 0x3c
     de6:	9d ad       	ldd	r25, Y+61	; 0x3d
     de8:	ce 0c       	add	r12, r14
     dea:	df 1c       	adc	r13, r15
     dec:	ca 0e       	add	r12, r26
     dee:	db 1e       	adc	r13, r27
     df0:	c8 0e       	add	r12, r24
     df2:	d9 1e       	adc	r13, r25
     df4:	0d 2c       	mov	r0, r13
     df6:	00 0c       	add	r0, r0
     df8:	ee 08       	sbc	r14, r14
     dfa:	ff 08       	sbc	r15, r15
     dfc:	c4 0e       	add	r12, r20
     dfe:	d5 1e       	adc	r13, r21
     e00:	e6 1e       	adc	r14, r22
     e02:	f7 1e       	adc	r15, r23
		sum += (int16_t) ADCB.CH0.RES + (int16_t) ADCB.CH1.RES + (int16_t) ADCB.CH2.RES + (int16_t) ADCB.CH3.RES;
     e04:	44 a1       	ldd	r20, Z+36	; 0x24
     e06:	55 a1       	ldd	r21, Z+37	; 0x25
     e08:	84 a5       	ldd	r24, Z+44	; 0x2c
     e0a:	95 a5       	ldd	r25, Z+45	; 0x2d
     e0c:	a4 a9       	ldd	r26, Z+52	; 0x34
     e0e:	b5 a9       	ldd	r27, Z+53	; 0x35
     e10:	64 ad       	ldd	r22, Z+60	; 0x3c
     e12:	75 ad       	ldd	r23, Z+61	; 0x3d
     e14:	84 0f       	add	r24, r20
     e16:	95 1f       	adc	r25, r21
     e18:	8a 0f       	add	r24, r26
     e1a:	9b 1f       	adc	r25, r27
     e1c:	86 0f       	add	r24, r22
     e1e:	97 1f       	adc	r25, r23
     e20:	09 2e       	mov	r0, r25
     e22:	00 0c       	add	r0, r0
     e24:	aa 0b       	sbc	r26, r26
     e26:	bb 0b       	sbc	r27, r27
     e28:	ac 01       	movw	r20, r24
     e2a:	bd 01       	movw	r22, r26
     e2c:	4c 0d       	add	r20, r12
     e2e:	5d 1d       	adc	r21, r13
     e30:	6e 1d       	adc	r22, r14
     e32:	7f 1d       	adc	r23, r15
     e34:	21 50       	subi	r18, 0x01	; 1
     e36:	31 09       	sbc	r19, r1
	ADCB.CH2.MUXCTRL = adca_pin ^ 0x40;
	ADCB.CH3.MUXCTRL = adca_pin ^ 0x40;
	
	int32_t sum = 0;
	
	for (uint16_t i = 0; i < NUMBER_OF_ITERATIONS; i++)
     e38:	19 f6       	brne	.-122    	; 0xdc0 <_ZL23adcMeasureSingleChannelh+0x3a>
		// Read all results
		sum += (int16_t) ADCA.CH0.RES + (int16_t) ADCA.CH1.RES + (int16_t) ADCA.CH2.RES + (int16_t) ADCA.CH3.RES;
		sum += (int16_t) ADCB.CH0.RES + (int16_t) ADCB.CH1.RES + (int16_t) ADCB.CH2.RES + (int16_t) ADCB.CH3.RES;
	}
	
	return (sum / SAMPLE_DIVISION) & 0xFFFF;
     e3a:	db 01       	movw	r26, r22
     e3c:	ca 01       	movw	r24, r20
     e3e:	77 23       	and	r23, r23
     e40:	1c f4       	brge	.+6      	; 0xe48 <_ZL23adcMeasureSingleChannelh+0xc2>
     e42:	0f 96       	adiw	r24, 0x0f	; 15
     e44:	a1 1d       	adc	r26, r1
     e46:	b1 1d       	adc	r27, r1
     e48:	68 94       	set
     e4a:	13 f8       	bld	r1, 3
     e4c:	b5 95       	asr	r27
     e4e:	a7 95       	ror	r26
     e50:	97 95       	ror	r25
     e52:	87 95       	ror	r24
     e54:	16 94       	lsr	r1
     e56:	d1 f7       	brne	.-12     	; 0xe4c <_ZL23adcMeasureSingleChannelh+0xc6>
}
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	08 95       	ret

00000e68 <adcInit>:

static adc_packet_t * packet = NULL;


void adcInit(adc_packet_t * adc_packet) 
{
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
// 	B0: 2.048 V reference
// 	B1: 12V_DIV11_SENSE
// 	B4-7: PWR_SENSE 8-11
// 	K4: PWR_SELECT group A/B
	
	packet = adc_packet;
     e70:	80 93 04 21 	sts	0x2104, r24
     e74:	90 93 05 21 	sts	0x2105, r25

	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
     e78:	20 ec       	ldi	r18, 0xC0	; 192
     e7a:	31 e0       	ldi	r19, 0x01	; 1
     e7c:	92 e0       	ldi	r25, 0x02	; 2
     e7e:	f9 01       	movw	r30, r18
     e80:	92 87       	std	Z+10, r25	; 0x0a
	ADCA.CALL = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     e82:	e0 e2       	ldi	r30, 0x20	; 32
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	e4 91       	lpm	r30, Z
     e88:	c0 e0       	ldi	r28, 0x00	; 0
     e8a:	d2 e0       	ldi	r29, 0x02	; 2
     e8c:	ec 87       	std	Y+12, r30	; 0x0c
	ADCA.CALH = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     e8e:	e1 e2       	ldi	r30, 0x21	; 33
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	e4 91       	lpm	r30, Z
     e94:	ed 87       	std	Y+13, r30	; 0x0d
	ADCB.CALL = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0));
     e96:	e4 e2       	ldi	r30, 0x24	; 36
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	e4 91       	lpm	r30, Z
     e9c:	a0 e4       	ldi	r26, 0x40	; 64
     e9e:	b2 e0       	ldi	r27, 0x02	; 2
     ea0:	1c 96       	adiw	r26, 0x0c	; 12
     ea2:	ec 93       	st	X, r30
     ea4:	1c 97       	sbiw	r26, 0x0c	; 12
	ADCB.CALH = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1));
     ea6:	e5 e2       	ldi	r30, 0x25	; 37
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	e4 91       	lpm	r30, Z
     eac:	1d 96       	adiw	r26, 0x0d	; 13
     eae:	ec 93       	st	X, r30
     eb0:	1d 97       	sbiw	r26, 0x0d	; 13
	NVM.CMD = 0;
     eb2:	f9 01       	movw	r30, r18
     eb4:	12 86       	std	Z+10, r1	; 0x0a
	
	PORTA.OUTCLR = 0xFF;
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	16 e0       	ldi	r17, 0x06	; 6
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	f8 01       	movw	r30, r16
     ebe:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRCLR = 0xFF;
     ec0:	82 83       	std	Z+2, r24	; 0x02
	
	PORTB.OUTCLR = 0xF3;
     ec2:	20 e2       	ldi	r18, 0x20	; 32
     ec4:	36 e0       	ldi	r19, 0x06	; 6
     ec6:	83 ef       	ldi	r24, 0xF3	; 243
     ec8:	f9 01       	movw	r30, r18
     eca:	86 83       	std	Z+6, r24	; 0x06
	PORTB.DIRCLR = 0xF3;
     ecc:	82 83       	std	Z+2, r24	; 0x02
	
	PORTK.OUTCLR = 0x10;
     ece:	60 e2       	ldi	r22, 0x20	; 32
     ed0:	77 e0       	ldi	r23, 0x07	; 7
     ed2:	40 e1       	ldi	r20, 0x10	; 16
     ed4:	fb 01       	movw	r30, r22
     ed6:	46 83       	std	Z+6, r20	; 0x06
	PORTK.DIRSET = 0x10;
     ed8:	41 83       	std	Z+1, r20	; 0x01
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	f8 01       	movw	r30, r16
     ede:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ee0:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ee2:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ee4:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ee6:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ee8:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     eea:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     eec:	87 8b       	std	Z+23, r24	; 0x17
	
	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     eee:	f9 01       	movw	r30, r18
     ef0:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ef2:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ef4:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ef6:	85 8b       	std	Z+21, r24	; 0x15
	PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ef8:	86 8b       	std	Z+22, r24	; 0x16
	PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     efa:	87 8b       	std	Z+23, r24	; 0x17
	
	PORTK.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     efc:	fb 01       	movw	r30, r22
     efe:	84 8b       	std	Z+20, r24	; 0x14
	
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f00:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f02:	1a a6       	std	Y+42, r1	; 0x2a
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f04:	1a aa       	std	Y+50, r1	; 0x32
	ADCA.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f06:	1a ae       	std	Y+58, r1	; 0x3a
	
	ADCB.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f08:	92 96       	adiw	r26, 0x22	; 34
     f0a:	1c 92       	st	X, r1
     f0c:	92 97       	sbiw	r26, 0x22	; 34
	ADCB.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f0e:	9a 96       	adiw	r26, 0x2a	; 42
     f10:	1c 92       	st	X, r1
     f12:	9a 97       	sbiw	r26, 0x2a	; 42
	ADCB.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f14:	d2 96       	adiw	r26, 0x32	; 50
     f16:	1c 92       	st	X, r1
     f18:	d2 97       	sbiw	r26, 0x32	; 50
	ADCB.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f1a:	da 96       	adiw	r26, 0x3a	; 58
     f1c:	1c 92       	st	X, r1
     f1e:	da 97       	sbiw	r26, 0x3a	; 58
	
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f20:	98 a3       	std	Y+32, r25	; 0x20
	ADCA.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f22:	98 a7       	std	Y+40, r25	; 0x28
	ADCA.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f24:	98 ab       	std	Y+48, r25	; 0x30
	ADCA.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f26:	98 af       	std	Y+56, r25	; 0x38
	
	ADCB.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f28:	90 96       	adiw	r26, 0x20	; 32
     f2a:	9c 93       	st	X, r25
     f2c:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f2e:	98 96       	adiw	r26, 0x28	; 40
     f30:	9c 93       	st	X, r25
     f32:	98 97       	sbiw	r26, 0x28	; 40
	ADCB.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f34:	d0 96       	adiw	r26, 0x30	; 48
     f36:	9c 93       	st	X, r25
     f38:	d0 97       	sbiw	r26, 0x30	; 48
	ADCB.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     f3a:	d8 96       	adiw	r26, 0x38	; 56
     f3c:	9c 93       	st	X, r25
     f3e:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f40:	85 e0       	ldi	r24, 0x05	; 5
     f42:	89 a3       	std	Y+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f44:	89 a7       	std	Y+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f46:	89 ab       	std	Y+49, r24	; 0x31
	ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f48:	89 af       	std	Y+57, r24	; 0x39
	
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f4a:	85 e4       	ldi	r24, 0x45	; 69
     f4c:	91 96       	adiw	r26, 0x21	; 33
     f4e:	8c 93       	st	X, r24
     f50:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f52:	99 96       	adiw	r26, 0x29	; 41
     f54:	8c 93       	st	X, r24
     f56:	99 97       	sbiw	r26, 0x29	; 41
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f58:	d1 96       	adiw	r26, 0x31	; 49
     f5a:	8c 93       	st	X, r24
     f5c:	d1 97       	sbiw	r26, 0x31	; 49
	ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     f5e:	d9 96       	adiw	r26, 0x39	; 57
     f60:	8c 93       	st	X, r24
     f62:	d9 97       	sbiw	r26, 0x39	; 57
	
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm | ADC_CURRLIMIT_NO_gc| !ADC_FREERUN_bm;
     f64:	49 83       	std	Y+1, r20	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFB_gc;
     f66:	80 e3       	ldi	r24, 0x30	; 48
     f68:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; // ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc; /* Sweep channels 0-1, trigger using event channel 0, sync sweep on event */
     f6a:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc; // 24 MHz / 16 = 1.5 MSPS
     f6c:	9c 83       	std	Y+4, r25	; 0x04
	
	ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm | ADC_CURRLIMIT_NO_gc | !ADC_FREERUN_bm;
     f6e:	11 96       	adiw	r26, 0x01	; 1
     f70:	4c 93       	st	X, r20
     f72:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;
     f74:	12 96       	adiw	r26, 0x02	; 2
     f76:	8c 93       	st	X, r24
     f78:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.EVCTRL = 0; // ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc; /* Sweep channels 0-1, trigger using event channel 0, sync sweep on event */
     f7a:	13 96       	adiw	r26, 0x03	; 3
     f7c:	1c 92       	st	X, r1
     f7e:	13 97       	sbiw	r26, 0x03	; 3
	ADCB.PRESCALER = ADC_PRESCALER_DIV16_gc; // 24 MHz / 16 = 1.5 MSPS
     f80:	14 96       	adiw	r26, 0x04	; 4
     f82:	9c 93       	st	X, r25
     f84:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CTRLA = ADC_ENABLE_bm;// | ADC_FLUSH_bm;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	88 83       	st	Y, r24
	ADCB.CTRLA = ADC_ENABLE_bm;// | ADC_FLUSH_bm;
     f8a:	8c 93       	st	X, r24
	
//	PMIC.CTRL |=  PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
//	EVSYS.CH0MUX = EVSYS_CHMUX_RTC_OVF_gc; /* Connect RTC overflow to event channel 0, thus triggering an ADC sweep on ADC */
//	EVSYS.CH0MUX = EVSYS_CHMUX_TCE0_OVF_gc; /* Connect TCE0 overflow to event channel 0, thus triggering an ADC sweep on ADC */
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <adcMeasure>:
#define ADC_TO_MILLIVOLT(ADC)				((int16_t) ((float) (ADC) * (ADC_TO_MILLIVOLT_MULTIPLIER)))
#define ADC_PSU_TO_MILLIVOLT(ADC)			((int16_t) ((float) (ADC) * (ADC_PSU_TO_MILLIVOLT_MULTIPLIER)))
#define ADC_TO_MILLIAMPS(ADC)				((int16_t) ((float) (ADC) * (ADC_TO_MILLIAMPS_MULTIPLIER)) + (int16_t) CURRENTSENSE_OFFSET)

void adcMeasure()
{
     f96:	5f 92       	push	r5
     f98:	6f 92       	push	r6
     f9a:	7f 92       	push	r7
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	2d 97       	sbiw	r28, 0x0d	; 13
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	de bf       	out	0x3e, r29	; 62
	static int16_t sum = 0;
	static bool isFirstGroup = true;
	int16_t * device;
	uint8_t i = 0;
	
	if (packet == NULL) {
     fbe:	a0 90 04 21 	lds	r10, 0x2104
     fc2:	b0 90 05 21 	lds	r11, 0x2105
     fc6:	a1 14       	cp	r10, r1
     fc8:	b1 04       	cpc	r11, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <adcMeasure+0x38>
     fcc:	8d c0       	rjmp	.+282    	; 0x10e8 <adcMeasure+0x152>
		ADC_CH_MUXNEG_GND_MODE3_gc | ADC_CH_MUXPOS_PIN12_gc,
		ADC_CH_MUXNEG_GND_MODE3_gc | ADC_CH_MUXPOS_PIN13_gc,
		ADC_CH_MUXNEG_GND_MODE3_gc | ADC_CH_MUXPOS_PIN14_gc,
		ADC_CH_MUXNEG_GND_MODE3_gc | ADC_CH_MUXPOS_PIN15_gc,
		ADC_CH_MUXNEG_GND_MODE3_gc | ADC_CH_MUXPOS_PIN9_gc
	};
     fce:	8d e0       	ldi	r24, 0x0D	; 13
     fd0:	ee ed       	ldi	r30, 0xDE	; 222
     fd2:	f0 e2       	ldi	r31, 0x20	; 32
     fd4:	de 01       	movw	r26, r28
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	01 90       	ld	r0, Z+
     fda:	0d 92       	st	X+, r0
     fdc:	8a 95       	dec	r24
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <adcMeasure+0x42>
	
	if (isFirstGroup)
     fe0:	50 90 06 20 	lds	r5, 0x2006
     fe4:	55 20       	and	r5, r5
     fe6:	29 f0       	breq	.+10     	; 0xff2 <adcMeasure+0x5c>
	{
		device = packet->milliAmps_devB;
     fe8:	65 01       	movw	r12, r10
     fea:	28 e1       	ldi	r18, 0x18	; 24
     fec:	c2 0e       	add	r12, r18
     fee:	d1 1c       	adc	r13, r1
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <adcMeasure+0x5e>
	}
	else
	{
		device = packet->milliAmps_devA;
     ff2:	65 01       	movw	r12, r10
     ff4:	ce 01       	movw	r24, r28
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	7c 01       	movw	r14, r24
     ffa:	86 01       	movw	r16, r12
     ffc:	98 e1       	ldi	r25, 0x18	; 24
     ffe:	c9 0e       	add	r12, r25
    1000:	d1 1c       	adc	r13, r1
    1002:	0f 2e       	mov	r0, r31
    1004:	f0 ea       	ldi	r31, 0xA0	; 160
    1006:	6f 2e       	mov	r6, r31
    1008:	f0 2d       	mov	r31, r0
    100a:	0f 2e       	mov	r0, r31
    100c:	ff e0       	ldi	r31, 0x0F	; 15
    100e:	7f 2e       	mov	r7, r31
    1010:	f0 2d       	mov	r31, r0
    1012:	0f 2e       	mov	r0, r31
    1014:	f0 e6       	ldi	r31, 0x60	; 96
    1016:	8f 2e       	mov	r8, r31
    1018:	f0 2d       	mov	r31, r0
    101a:	0f 2e       	mov	r0, r31
    101c:	f0 ef       	ldi	r31, 0xF0	; 240
    101e:	9f 2e       	mov	r9, r31
    1020:	f0 2d       	mov	r31, r0
	}
	
	for (i = 0; i < 12; i++)
	{
		int16_t sample = ADC_TO_MILLIAMPS(adcMeasureSingleChannel(adcPin[i]));
    1022:	f7 01       	movw	r30, r14
    1024:	81 91       	ld	r24, Z+
    1026:	7f 01       	movw	r14, r30
    1028:	ae de       	rcall	.-676    	; 0xd86 <_ZL23adcMeasureSingleChannelh>
    102a:	bc 01       	movw	r22, r24
    102c:	99 0f       	add	r25, r25
    102e:	88 0b       	sbc	r24, r24
    1030:	99 0b       	sbc	r25, r25
    1032:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__floatsisf>
    1036:	28 ed       	ldi	r18, 0xD8	; 216
    1038:	3e e4       	ldi	r19, 0x4E	; 78
    103a:	42 e8       	ldi	r20, 0x82	; 130
    103c:	5d e3       	ldi	r21, 0x3D	; 61
    103e:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__mulsf3>
    1042:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__fixsfsi>
    1046:	9b 01       	movw	r18, r22
    1048:	27 5f       	subi	r18, 0xF7	; 247
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if (sample < ADC_MILLIAMPS_MIN && sample > -ADC_MILLIAMPS_MIN) {
    104c:	ab 01       	movw	r20, r22
    104e:	44 5e       	subi	r20, 0xE4	; 228
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	47 32       	cpi	r20, 0x27	; 39
    1054:	51 05       	cpc	r21, r1
    1056:	68 f0       	brcs	.+26     	; 0x1072 <adcMeasure+0xdc>
    1058:	c9 01       	movw	r24, r18
    105a:	20 36       	cpi	r18, 0x60	; 96
    105c:	30 4f       	sbci	r19, 0xF0	; 240
    105e:	14 f4       	brge	.+4      	; 0x1064 <adcMeasure+0xce>
    1060:	88 2d       	mov	r24, r8
    1062:	99 2d       	mov	r25, r9
    1064:	81 3a       	cpi	r24, 0xA1	; 161
    1066:	2f e0       	ldi	r18, 0x0F	; 15
    1068:	92 07       	cpc	r25, r18
    106a:	2c f0       	brlt	.+10     	; 0x1076 <adcMeasure+0xe0>
    106c:	86 2d       	mov	r24, r6
    106e:	97 2d       	mov	r25, r7
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <adcMeasure+0xe0>
			sample = 0;
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if (sample < -ADC_MILLIAMPS_MAX) {
			sample = -ADC_MILLIAMPS_MAX;
		}
		
		device[i] = sample;
    1076:	f8 01       	movw	r30, r16
    1078:	81 93       	st	Z+, r24
    107a:	91 93       	st	Z+, r25
    107c:	8f 01       	movw	r16, r30
		sum += sample;
    107e:	20 91 02 21 	lds	r18, 0x2102
    1082:	30 91 03 21 	lds	r19, 0x2103
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	80 93 02 21 	sts	0x2102, r24
    108e:	90 93 03 21 	sts	0x2103, r25
	else
	{
		device = packet->milliAmps_devA;
	}
	
	for (i = 0; i < 12; i++)
    1092:	ec 15       	cp	r30, r12
    1094:	fd 05       	cpc	r31, r13
    1096:	29 f6       	brne	.-118    	; 0x1022 <adcMeasure+0x8c>
		
		device[i] = sample;
		sum += sample;
	}
	
	packet->milliVolts_psu = ADC_PSU_TO_MILLIVOLT(adcMeasureSingleChannel(adcPin[i]));
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	75 de       	rcall	.-790    	; 0xd86 <_ZL23adcMeasureSingleChannelh>
    109c:	bc 01       	movw	r22, r24
    109e:	99 0f       	add	r25, r25
    10a0:	88 0b       	sbc	r24, r24
    10a2:	99 0b       	sbc	r25, r25
    10a4:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__floatsisf>
    10a8:	20 e6       	ldi	r18, 0x60	; 96
    10aa:	31 e0       	ldi	r19, 0x01	; 1
    10ac:	40 e3       	ldi	r20, 0x30	; 48
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__mulsf3>
    10b4:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__fixsfsi>
    10b8:	f5 01       	movw	r30, r10
    10ba:	62 ab       	std	Z+50, r22	; 0x32
    10bc:	73 ab       	std	Z+51, r23	; 0x33
	
	if (!isFirstGroup)
    10be:	51 10       	cpse	r5, r1
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <adcMeasure+0x140>
	{
		packet->milliAmps_total = sum;
    10c2:	80 91 02 21 	lds	r24, 0x2102
    10c6:	90 91 03 21 	lds	r25, 0x2103
    10ca:	80 ab       	std	Z+48, r24	; 0x30
    10cc:	91 ab       	std	Z+49, r25	; 0x31
		sum = 0;
    10ce:	10 92 02 21 	sts	0x2102, r1
    10d2:	10 92 03 21 	sts	0x2103, r1
	}
	isFirstGroup = !isFirstGroup;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	58 26       	eor	r5, r24
    10da:	50 92 06 20 	sts	0x2006, r5
	
	// Settling time after switching sense pin is 20 us max, but RC filter time constant = 215 us => must wait 1-2 ms minimum
	PORTK.DIRSET = 0x10;
    10de:	e0 e2       	ldi	r30, 0x20	; 32
    10e0:	f7 e0       	ldi	r31, 0x07	; 7
    10e2:	80 e1       	ldi	r24, 0x10	; 16
    10e4:	81 83       	std	Z+1, r24	; 0x01
	PORTK.OUTTGL = 0x10;
    10e6:	87 83       	std	Z+7, r24	; 0x07
	
	//adcMeasureSingleChannel(&(sample[0][i]), adcPin[i]);
}
    10e8:	2d 96       	adiw	r28, 0x0d	; 13
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	7f 90       	pop	r7
    1108:	6f 90       	pop	r6
    110a:	5f 90       	pop	r5
    110c:	08 95       	ret

0000110e <appUICleanUSB>:


uint16_t appUIGetBufWebsiteLength()
{
	return appUI.ethWebsitePos - HEADER_OFFSET;
}
    110e:	86 e5       	ldi	r24, 0x56	; 86
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    111a:	1f 92       	push	r1
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	8f 93       	push	r24
    1120:	1f 92       	push	r1
    1122:	83 e1       	ldi	r24, 0x13	; 19
    1124:	8f 93       	push	r24
    1126:	89 e4       	ldi	r24, 0x49	; 73
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    1132:	8d b7       	in	r24, 0x3d	; 61
    1134:	9e b7       	in	r25, 0x3e	; 62
    1136:	08 96       	adiw	r24, 0x08	; 8
    1138:	8d bf       	out	0x3d, r24	; 61
    113a:	9e bf       	out	0x3e, r25	; 62
    113c:	08 95       	ret

0000113e <appUICleanWebsite>:
    113e:	88 e5       	ldi	r24, 0x58	; 88
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	e7 e0       	ldi	r30, 0x07	; 7
    1144:	f1 e2       	ldi	r31, 0x21	; 33
    1146:	df 01       	movw	r26, r30
    1148:	9c 01       	movw	r18, r24
    114a:	1d 92       	st	X+, r1
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	30 40       	sbci	r19, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <appUICleanWebsite+0xc>
    1152:	66 e1       	ldi	r22, 0x16	; 22
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	8d e3       	ldi	r24, 0x3D	; 61
    1158:	91 e2       	ldi	r25, 0x21	; 33
    115a:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    115e:	88 e6       	ldi	r24, 0x68	; 104
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	80 93 5f 23 	sts	0x235F, r24
    1166:	90 93 60 23 	sts	0x2360, r25
    116a:	10 92 61 23 	sts	0x2361, r1
    116e:	10 92 62 23 	sts	0x2362, r1
    1172:	08 95       	ret

00001174 <appUIClean>:
    1174:	cc df       	rcall	.-104    	; 0x110e <appUICleanUSB>
    1176:	e3 cf       	rjmp	.-58     	; 0x113e <appUICleanWebsite>
    1178:	08 95       	ret

0000117a <appUIGetBufWebsiteSpaceRemaining>:


size_t appUIGetBufWebsiteSpaceRemaining()
{
	int16_t space = ((sizeof appUI.ethWebsite) - 1) - appUI.ethWebsitePos;
    117a:	20 91 5f 23 	lds	r18, 0x235F
    117e:	30 91 60 23 	lds	r19, 0x2360
    1182:	87 e5       	ldi	r24, 0x57	; 87
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	82 1b       	sub	r24, r18
    1188:	93 0b       	sbc	r25, r19

	if (space <= 0)
    118a:	18 16       	cp	r1, r24
    118c:	19 06       	cpc	r1, r25
    118e:	14 f0       	brlt	.+4      	; 0x1194 <appUIGetBufWebsiteSpaceRemaining+0x1a>
		return 0;
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
	else
		return (size_t)space;
}
    1194:	08 95       	ret

00001196 <appUIvPrintWebsite_P>:


//*****************************************************************************

void appUIvPrintWebsite_P(const char *str_P, va_list args)
{
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	8c 01       	movw	r16, r24
    11a6:	7b 01       	movw	r14, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11a8:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11aa:	f8 94       	cli
	{
		size_t charRemaining;
		if ((charRemaining = appUIGetBufWebsiteSpaceRemaining()))
    11ac:	e6 df       	rcall	.-52     	; 0x117a <appUIGetBufWebsiteSpaceRemaining>
    11ae:	bc 01       	movw	r22, r24
    11b0:	89 2b       	or	r24, r25
    11b2:	81 f0       	breq	.+32     	; 0x11d4 <appUIvPrintWebsite_P+0x3e>
		{
			appUI.ethWebsitePos += vsnprintf_P(appUI.ethWebsite + appUI.ethWebsitePos, charRemaining, str_P, args);
    11b4:	cf e5       	ldi	r28, 0x5F	; 95
    11b6:	d3 e2       	ldi	r29, 0x23	; 35
    11b8:	88 81       	ld	r24, Y
    11ba:	99 81       	ldd	r25, Y+1	; 0x01
    11bc:	97 01       	movw	r18, r14
    11be:	a8 01       	movw	r20, r16
    11c0:	89 5f       	subi	r24, 0xF9	; 249
    11c2:	9e 4d       	sbci	r25, 0xDE	; 222
    11c4:	0e 94 76 34 	call	0x68ec	; 0x68ec <vsnprintf_P>
    11c8:	28 81       	ld	r18, Y
    11ca:	39 81       	ldd	r19, Y+1	; 0x01
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	88 83       	st	Y, r24
    11d2:	99 83       	std	Y+1, r25	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11d4:	df be       	out	0x3f, r13	; 63
		}
	}
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	08 95       	ret

000011e6 <appUIPrintWebsite_P>:


void appUIPrintWebsite_P(const char *str_P, ...)
{
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	be 01       	movw	r22, r28
    11f2:	69 5f       	subi	r22, 0xF9	; 249
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	fb 01       	movw	r30, r22
    11f8:	81 91       	ld	r24, Z+
    11fa:	91 91       	ld	r25, Z+
    11fc:	bf 01       	movw	r22, r30
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11fe:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1200:	f8 94       	cli
	{
		va_list args;			// is this allowed & safe?? nested va_list :-)
		va_start (args, str_P);
		appUIvPrintWebsite_P(str_P, args);
    1202:	c9 df       	rcall	.-110    	; 0x1196 <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1204:	1f bf       	out	0x3f, r17	; 63
		va_end (args);
	}
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	08 95       	ret

0000120e <appUISetHTMLFont>:
		case APPUI_INFO:	print(ESC_CURSOR_POS_RESTORE	COLOR_INFO);		break;
	}
}

void appUISetHTMLFont(APPUI_t UI)
{
    120e:	cf 93       	push	r28
    1210:	c8 2f       	mov	r28, r24
	static bool firstCall = false;
	
	if (!firstCall)
    1212:	80 91 06 21 	lds	r24, 0x2106
    1216:	81 11       	cpse	r24, r1
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <appUISetHTMLFont+0x14>
		firstCall = true;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 06 21 	sts	0x2106, r24
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <appUISetHTMLFont+0x22>
	else
		appUIPrintWebsite("</font>");
    1222:	82 ec       	ldi	r24, 0xC2	; 194
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	dd df       	rcall	.-70     	; 0x11e6 <appUIPrintWebsite_P>
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
		
	switch (UI)
    1230:	c1 30       	cpi	r28, 0x01	; 1
    1232:	71 f0       	breq	.+28     	; 0x1250 <appUISetHTMLFont+0x42>
    1234:	28 f0       	brcs	.+10     	; 0x1240 <appUISetHTMLFont+0x32>
    1236:	c2 30       	cpi	r28, 0x02	; 2
    1238:	99 f0       	breq	.+38     	; 0x1260 <appUISetHTMLFont+0x52>
    123a:	c3 30       	cpi	r28, 0x03	; 3
    123c:	c9 f0       	breq	.+50     	; 0x1270 <appUISetHTMLFont+0x62>
    123e:	1f c0       	rjmp	.+62     	; 0x127e <appUISetHTMLFont+0x70>
	{
		case APPUI_DEVICES:	appUIPrintWebsite("<font color=\"green\">");		break;
    1240:	8d ea       	ldi	r24, 0xAD	; 173
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	9f 93       	push	r25
    1246:	8f 93       	push	r24
    1248:	ce df       	rcall	.-100    	; 0x11e6 <appUIPrintWebsite_P>
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	17 c0       	rjmp	.+46     	; 0x127e <appUISetHTMLFont+0x70>
		case APPUI_MENUS:	appUIPrintWebsite("<font color=\"purple\">");		break;
    1250:	87 e9       	ldi	r24, 0x97	; 151
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	9f 93       	push	r25
    1256:	8f 93       	push	r24
    1258:	c6 df       	rcall	.-116    	; 0x11e6 <appUIPrintWebsite_P>
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f c0       	rjmp	.+30     	; 0x127e <appUISetHTMLFont+0x70>
		case APPUI_PSU:		appUIPrintWebsite("<font color=\"red\">");		break;
    1260:	84 e8       	ldi	r24, 0x84	; 132
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	be df       	rcall	.-132    	; 0x11e6 <appUIPrintWebsite_P>
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	07 c0       	rjmp	.+14     	; 0x127e <appUISetHTMLFont+0x70>
		case APPUI_INFO:	appUIPrintWebsite("<font color=\"magenta\">");	break;
    1270:	8d e6       	ldi	r24, 0x6D	; 109
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	9f 93       	push	r25
    1276:	8f 93       	push	r24
    1278:	b6 df       	rcall	.-148    	; 0x11e6 <appUIPrintWebsite_P>
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
	}
}
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <appUISetUI>:
#define HEADER_OFFSET	0x36
#define WEBSITE_STR_START			PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<font>")


void appUISetUI(APPUI_t UI)
{
    1282:	cf 93       	push	r28
    1284:	c8 2f       	mov	r28, r24
	appUISetHTMLFont(UI);
    1286:	c3 df       	rcall	.-122    	; 0x120e <appUISetHTMLFont>
	
	switch (UI)
    1288:	c1 30       	cpi	r28, 0x01	; 1
    128a:	79 f0       	breq	.+30     	; 0x12aa <appUISetUI+0x28>
    128c:	28 f0       	brcs	.+10     	; 0x1298 <appUISetUI+0x16>
    128e:	c2 30       	cpi	r28, 0x02	; 2
    1290:	a9 f0       	breq	.+42     	; 0x12bc <appUISetUI+0x3a>
    1292:	c3 30       	cpi	r28, 0x03	; 3
    1294:	e1 f0       	breq	.+56     	; 0x12ce <appUISetUI+0x4c>
    1296:	23 c0       	rjmp	.+70     	; 0x12de <appUISetUI+0x5c>
	{
		case APPUI_DEVICES:	print(ESC_CURSOR_POS_SAVE		COLOR_DEVICES);		break;
    1298:	85 ee       	ldi	r24, 0xE5	; 229
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
    12a0:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	1a c0       	rjmp	.+52     	; 0x12de <appUISetUI+0x5c>
		case APPUI_MENUS:	print(ESC_CURSOR_POS_SAVE		COLOR_MENUS);		break;
    12aa:	8c ed       	ldi	r24, 0xDC	; 220
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <appUISetUI+0x5c>
		case APPUI_PSU:		print(ESC_CURSOR_POS_SAVE		COLOR_PSU);			break;
    12bc:	83 ed       	ldi	r24, 0xD3	; 211
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	9f 93       	push	r25
    12c2:	8f 93       	push	r24
    12c4:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	08 c0       	rjmp	.+16     	; 0x12de <appUISetUI+0x5c>
		case APPUI_INFO:	print(ESC_CURSOR_POS_RESTORE	COLOR_INFO);		break;
    12ce:	8a ec       	ldi	r24, 0xCA	; 202
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	9f 93       	push	r25
    12d4:	8f 93       	push	r24
    12d6:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
	}
}
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <appUIPrint_P>:
}

//*****************************************************************************

void appUIPrint_P(const char *str_P, ...)
{
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8e 01       	movw	r16, r28
    12f6:	05 5f       	subi	r16, 0xF5	; 245
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	f8 01       	movw	r30, r16
    12fc:	e1 90       	ld	r14, Z+
    12fe:	f1 90       	ld	r15, Z+
    1300:	8f 01       	movw	r16, r30
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1302:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1304:	f8 94       	cli
	{
		va_list args;
		va_start (args, str_P);
		vfprintf_P(stdout, str_P, args);
    1306:	af 01       	movw	r20, r30
    1308:	b7 01       	movw	r22, r14
    130a:	80 91 7b 27 	lds	r24, 0x277B
    130e:	90 91 7c 27 	lds	r25, 0x277C
    1312:	0e 94 68 34 	call	0x68d0	; 0x68d0 <vfprintf_P>
		appUIvPrintWebsite_P(str_P, args);
    1316:	b8 01       	movw	r22, r16
    1318:	c7 01       	movw	r24, r14
    131a:	3d df       	rcall	.-390    	; 0x1196 <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    131c:	df be       	out	0x3f, r13	; 63
		va_end (args);
	}
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	08 95       	ret

0000132e <appUIPrintln_P>:


void appUIPrintln_P(const char *str_P, ...)
{
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	8e 01       	movw	r16, r28
    1342:	05 5f       	subi	r16, 0xF5	; 245
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	f8 01       	movw	r30, r16
    1348:	e1 90       	ld	r14, Z+
    134a:	f1 90       	ld	r15, Z+
    134c:	8f 01       	movw	r16, r30
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    134e:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1350:	f8 94       	cli
	{
		printf_P(PSTR("\r\n"));
    1352:	83 e1       	ldi	r24, 0x13	; 19
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
		appUIPrintWebsite_P(PSTR("<br>"));
    135e:	8e e0       	ldi	r24, 0x0E	; 14
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	9f 93       	push	r25
    1364:	8f 93       	push	r24
    1366:	3f df       	rcall	.-386    	; 0x11e6 <appUIPrintWebsite_P>
		
		va_list args;
		va_start (args, str_P);
		vfprintf_P(stdout, str_P, args);
    1368:	a8 01       	movw	r20, r16
    136a:	b7 01       	movw	r22, r14
    136c:	80 91 7b 27 	lds	r24, 0x277B
    1370:	90 91 7c 27 	lds	r25, 0x277C
    1374:	0e 94 68 34 	call	0x68d0	; 0x68d0 <vfprintf_P>
		appUIvPrintWebsite_P(str_P, args);
    1378:	b8 01       	movw	r22, r16
    137a:	c7 01       	movw	r24, r14
    137c:	0c df       	rcall	.-488    	; 0x1196 <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    137e:	df be       	out	0x3f, r13	; 63
    __asm__ volatile ("" ::: "memory");
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
		va_end (args);
	}
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	08 95       	ret

00001398 <appUIPrintPos_P>:


void appUIPrintPos_P(const uint8_t line, const uint8_t column, const char *str_P, ...)
{
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	0b 85       	ldd	r16, Y+11	; 0x0b
    13ac:	1c 85       	ldd	r17, Y+12	; 0x0c
    13ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    13b0:	fe 84       	ldd	r15, Y+14	; 0x0e
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    13b2:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13b4:	f8 94       	cli
	{
		if (line != appUI.line || column != appUI.column)
    13b6:	80 91 61 23 	lds	r24, 0x2361
    13ba:	80 13       	cpse	r24, r16
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <appUIPrintPos_P+0x2e>
    13be:	80 91 62 23 	lds	r24, 0x2362
    13c2:	81 17       	cp	r24, r17
    13c4:	a9 f0       	breq	.+42     	; 0x13f0 <appUIPrintPos_P+0x58>
		{
			printf_P(PSTR("\33[%u;%uH\33[0K"), line, column);
    13c6:	1f 92       	push	r1
    13c8:	1f 93       	push	r17
    13ca:	1f 92       	push	r1
    13cc:	0f 93       	push	r16
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
			appUIPrintWebsite_P(PSTR("<br>"));
    13da:	2c ef       	ldi	r18, 0xFC	; 252
    13dc:	31 e0       	ldi	r19, 0x01	; 1
    13de:	3f 93       	push	r19
    13e0:	2f 93       	push	r18
    13e2:	01 df       	rcall	.-510    	; 0x11e6 <appUIPrintWebsite_P>
			appUI.line = line;
    13e4:	00 93 61 23 	sts	0x2361, r16
			appUI.column = column;
    13e8:	10 93 62 23 	sts	0x2362, r17
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	de bf       	out	0x3e, r29	; 62
		}
		
		va_list args;
		va_start (args, str_P);
		vfprintf_P(stdout, str_P, args);
    13f0:	ae 01       	movw	r20, r28
    13f2:	41 5f       	subi	r20, 0xF1	; 241
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	b7 01       	movw	r22, r14
    13f8:	80 91 7b 27 	lds	r24, 0x277B
    13fc:	90 91 7c 27 	lds	r25, 0x277C
    1400:	0e 94 68 34 	call	0x68d0	; 0x68d0 <vfprintf_P>
		appUIvPrintWebsite_P(str_P, args);
    1404:	be 01       	movw	r22, r28
    1406:	61 5f       	subi	r22, 0xF1	; 241
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	c7 01       	movw	r24, r14
    140c:	c4 de       	rcall	.-632    	; 0x1196 <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    140e:	df be       	out	0x3f, r13	; 63
		va_end (args);
	}
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	08 95       	ret

00001420 <CCPWrite>:
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
	uint8_t clkEnabled = OSC.CTRL & oscSel;
	return clkEnabled;
}
    1420:	0f 93       	push	r16
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	1f 92       	push	r1
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	2f b7       	in	r18, 0x3f	; 63
    142e:	29 83       	std	Y+1, r18	; 0x01
    1430:	f8 94       	cli
    1432:	1b be       	out	0x3b, r1	; 59
    1434:	fc 01       	movw	r30, r24
    1436:	08 ed       	ldi	r16, 0xD8	; 216
    1438:	04 bf       	out	0x34, r16	; 52
    143a:	60 83       	st	Z, r22
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	8f bf       	out	0x3f, r24	; 63
    1440:	0f 90       	pop	r0
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <CLKSYS_PLL_Config>:
    144a:	6f 71       	andi	r22, 0x1F	; 31
    144c:	86 2b       	or	r24, r22
    144e:	80 93 55 00 	sts	0x0055, r24
    1452:	08 95       	ret

00001454 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    1454:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
    1456:	81 e4       	ldi	r24, 0x41	; 65
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	e2 cf       	rjmp	.-60     	; 0x1420 <CCPWrite>
    145c:	08 95       	ret

0000145e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    1466:	00 e4       	ldi	r16, 0x40	; 64
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	f8 01       	movw	r30, r16
    146c:	60 81       	ld	r22, Z
    146e:	68 7f       	andi	r22, 0xF8	; 248
    1470:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    1472:	80 e4       	ldi	r24, 0x40	; 64
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	d4 df       	rcall	.-88     	; 0x1420 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    1478:	f8 01       	movw	r30, r16
    147a:	80 81       	ld	r24, Z
	return clkCtrl;
}
    147c:	8c 23       	and	r24, r28
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    1486:	29 2f       	mov	r18, r25
    1488:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	59 f0       	breq	.+22     	; 0x14a6 <CALLBACK_USB_GetDescriptor+0x20>
    1490:	23 30       	cpi	r18, 0x03	; 3
    1492:	31 05       	cpc	r19, r1
    1494:	69 f0       	breq	.+26     	; 0x14b0 <CALLBACK_USB_GetDescriptor+0x2a>
    1496:	21 30       	cpi	r18, 0x01	; 1
    1498:	31 05       	cpc	r19, r1
    149a:	29 f5       	brne	.+74     	; 0x14e6 <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    149c:	82 e1       	ldi	r24, 0x12	; 18
    149e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    14a0:	28 e6       	ldi	r18, 0x68	; 104
    14a2:	33 e0       	ldi	r19, 0x03	; 3
    14a4:	29 c0       	rjmp	.+82     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    14a6:	8e e3       	ldi	r24, 0x3E	; 62
    14a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    14aa:	2a e2       	ldi	r18, 0x2A	; 42
    14ac:	33 e0       	ldi	r19, 0x03	; 3
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    14ae:	24 c0       	rjmp	.+72     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x72>
    14b0:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	59 f0       	breq	.+22     	; 0x14ce <CALLBACK_USB_GetDescriptor+0x48>
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	71 f0       	breq	.+28     	; 0x14da <CALLBACK_USB_GetDescriptor+0x54>
    14be:	89 2b       	or	r24, r25
    14c0:	b9 f4       	brne	.+46     	; 0x14f0 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    14c2:	e6 e2       	ldi	r30, 0x26	; 38
    14c4:	f3 e0       	ldi	r31, 0x03	; 3
    14c6:	84 91       	lpm	r24, Z
    14c8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    14ca:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    14cc:	15 c0       	rjmp	.+42     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    14ce:	ec e0       	ldi	r30, 0x0C	; 12
    14d0:	f3 e0       	ldi	r31, 0x03	; 3
    14d2:	84 91       	lpm	r24, Z
    14d4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    14d6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    14da:	ee ee       	ldi	r30, 0xEE	; 238
    14dc:	f2 e0       	ldi	r31, 0x02	; 2
    14de:	84 91       	lpm	r24, Z
    14e0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    14e2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    14e4:	09 c0       	rjmp	.+18     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    14f8:	fa 01       	movw	r30, r20
    14fa:	20 83       	st	Z, r18
    14fc:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
    14fe:	08 95       	ret

00001500 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ec 01       	movw	r28, r24
    1506:	fc 01       	movw	r30, r24
    1508:	70 96       	adiw	r30, 0x10	; 16
    150a:	8b e0       	ldi	r24, 0x0B	; 11
    150c:	df 01       	movw	r26, r30
    150e:	1d 92       	st	X+, r1
    1510:	8a 95       	dec	r24
    1512:	e9 f7       	brne	.-6      	; 0x150e <CDC_Device_ConfigureEndpoints+0xe>
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	8c 83       	std	Y+4, r24	; 0x04
    1518:	89 87       	std	Y+9, r24	; 0x09
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	8e 87       	std	Y+14, r24	; 0x0e
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	d5 d5       	rcall	.+2986   	; 0x20d0 <Endpoint_ConfigureEndpointTable>
    1526:	88 23       	and	r24, r24
    1528:	51 f0       	breq	.+20     	; 0x153e <CDC_Device_ConfigureEndpoints+0x3e>
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	ce 01       	movw	r24, r28
    152e:	06 96       	adiw	r24, 0x06	; 6
    1530:	cf d5       	rcall	.+2974   	; 0x20d0 <Endpoint_ConfigureEndpointTable>
    1532:	88 23       	and	r24, r24
    1534:	21 f0       	breq	.+8      	; 0x153e <CDC_Device_ConfigureEndpoints+0x3e>
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	ce 01       	movw	r24, r28
    153a:	0b 96       	adiw	r24, 0x0b	; 11
    153c:	c9 d5       	rcall	.+2962   	; 0x20d0 <Endpoint_ConfigureEndpointTable>
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <CDC_Device_SendByte>:
    1544:	cf 93       	push	r28
    1546:	fc 01       	movw	r30, r24
    1548:	90 91 76 24 	lds	r25, 0x2476
    154c:	94 30       	cpi	r25, 0x04	; 4
    154e:	f9 f4       	brne	.+62     	; 0x158e <CDC_Device_SendByte+0x4a>
    1550:	84 89       	ldd	r24, Z+20	; 0x14
    1552:	95 89       	ldd	r25, Z+21	; 0x15
    1554:	a6 89       	ldd	r26, Z+22	; 0x16
    1556:	b7 89       	ldd	r27, Z+23	; 0x17
    1558:	89 2b       	or	r24, r25
    155a:	8a 2b       	or	r24, r26
    155c:	8b 2b       	or	r24, r27
    155e:	c9 f0       	breq	.+50     	; 0x1592 <CDC_Device_SendByte+0x4e>
    1560:	c6 2f       	mov	r28, r22
    1562:	81 81       	ldd	r24, Z+1	; 0x01
    1564:	ab d4       	rcall	.+2390   	; 0x1ebc <Endpoint_SelectEndpoint>
    1566:	80 91 7f 24 	lds	r24, 0x247F
    156a:	90 91 80 24 	lds	r25, 0x2480
    156e:	fc 01       	movw	r30, r24
    1570:	ef 5b       	subi	r30, 0xBF	; 191
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	20 81       	ld	r18, Z
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	80 81       	ld	r24, Z
    157a:	28 17       	cp	r18, r24
    157c:	20 f0       	brcs	.+8      	; 0x1586 <CDC_Device_SendByte+0x42>
    157e:	56 d4       	rcall	.+2220   	; 0x1e2c <Endpoint_ClearIN>
    1580:	50 d6       	rcall	.+3232   	; 0x2222 <Endpoint_WaitUntilReady>
    1582:	81 11       	cpse	r24, r1
    1584:	07 c0       	rjmp	.+14     	; 0x1594 <CDC_Device_SendByte+0x50>
    1586:	8c 2f       	mov	r24, r28
    1588:	89 d4       	rcall	.+2322   	; 0x1e9c <Endpoint_Write_8>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <CDC_Device_SendByte+0x50>
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <CDC_Device_SendByte+0x50>
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <CDC_Device_putchar>:
    1598:	fb 01       	movw	r30, r22
    159a:	68 2f       	mov	r22, r24
    159c:	84 85       	ldd	r24, Z+12	; 0x0c
    159e:	95 85       	ldd	r25, Z+13	; 0x0d
    15a0:	d1 df       	rcall	.-94     	; 0x1544 <CDC_Device_SendByte>
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 11       	cpse	r24, r1
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <CDC_Device_putchar+0x16>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	88 27       	eor	r24, r24
    15b0:	99 27       	eor	r25, r25
    15b2:	82 1b       	sub	r24, r18
    15b4:	93 0b       	sbc	r25, r19
    15b6:	08 95       	ret

000015b8 <CDC_Device_Flush>:
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	fc 01       	movw	r30, r24
    15be:	90 91 76 24 	lds	r25, 0x2476
    15c2:	94 30       	cpi	r25, 0x04	; 4
    15c4:	d1 f5       	brne	.+116    	; 0x163a <CDC_Device_Flush+0x82>
    15c6:	84 89       	ldd	r24, Z+20	; 0x14
    15c8:	95 89       	ldd	r25, Z+21	; 0x15
    15ca:	a6 89       	ldd	r26, Z+22	; 0x16
    15cc:	b7 89       	ldd	r27, Z+23	; 0x17
    15ce:	89 2b       	or	r24, r25
    15d0:	8a 2b       	or	r24, r26
    15d2:	8b 2b       	or	r24, r27
    15d4:	a1 f1       	breq	.+104    	; 0x163e <CDC_Device_Flush+0x86>
    15d6:	81 81       	ldd	r24, Z+1	; 0x01
    15d8:	71 d4       	rcall	.+2274   	; 0x1ebc <Endpoint_SelectEndpoint>
    15da:	80 91 83 24 	lds	r24, 0x2483
    15de:	88 23       	and	r24, r24
    15e0:	4c f4       	brge	.+18     	; 0x15f4 <CDC_Device_Flush+0x3c>
    15e2:	e0 91 7f 24 	lds	r30, 0x247F
    15e6:	f0 91 80 24 	lds	r31, 0x2480
    15ea:	ef 5b       	subi	r30, 0xBF	; 191
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 81       	ld	r24, Z
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0d c0       	rjmp	.+26     	; 0x160e <CDC_Device_Flush+0x56>
    15f4:	20 91 7f 24 	lds	r18, 0x247F
    15f8:	30 91 80 24 	lds	r19, 0x2480
    15fc:	f9 01       	movw	r30, r18
    15fe:	e0 5c       	subi	r30, 0xC0	; 192
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	31 96       	adiw	r30, 0x01	; 1
    1606:	20 81       	ld	r18, Z
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	82 1b       	sub	r24, r18
    160c:	91 09       	sbc	r25, r1
    160e:	89 2b       	or	r24, r25
    1610:	c1 f0       	breq	.+48     	; 0x1642 <CDC_Device_Flush+0x8a>
    1612:	80 91 7f 24 	lds	r24, 0x247F
    1616:	90 91 80 24 	lds	r25, 0x2480
    161a:	fc 01       	movw	r30, r24
    161c:	ef 5b       	subi	r30, 0xBF	; 191
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	d0 81       	ld	r29, Z
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	c0 81       	ld	r28, Z
    1626:	02 d4       	rcall	.+2052   	; 0x1e2c <Endpoint_ClearIN>
    1628:	dc 17       	cp	r29, r28
    162a:	68 f0       	brcs	.+26     	; 0x1646 <CDC_Device_Flush+0x8e>
    162c:	fa d5       	rcall	.+3060   	; 0x2222 <Endpoint_WaitUntilReady>
    162e:	c8 2f       	mov	r28, r24
    1630:	81 11       	cpse	r24, r1
    1632:	0b c0       	rjmp	.+22     	; 0x164a <CDC_Device_Flush+0x92>
    1634:	fb d3       	rcall	.+2038   	; 0x1e2c <Endpoint_ClearIN>
    1636:	8c 2f       	mov	r24, r28
    1638:	08 c0       	rjmp	.+16     	; 0x164a <CDC_Device_Flush+0x92>
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	06 c0       	rjmp	.+12     	; 0x164a <CDC_Device_Flush+0x92>
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	04 c0       	rjmp	.+8      	; 0x164a <CDC_Device_Flush+0x92>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <CDC_Device_Flush+0x92>
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	00 c0       	rjmp	.+0      	; 0x164a <CDC_Device_Flush+0x92>
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <CDC_Device_USBTask>:
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	fc 01       	movw	r30, r24
    1656:	90 91 76 24 	lds	r25, 0x2476
    165a:	94 30       	cpi	r25, 0x04	; 4
    165c:	81 f4       	brne	.+32     	; 0x167e <CDC_Device_USBTask+0x2e>
    165e:	84 89       	ldd	r24, Z+20	; 0x14
    1660:	95 89       	ldd	r25, Z+21	; 0x15
    1662:	a6 89       	ldd	r26, Z+22	; 0x16
    1664:	b7 89       	ldd	r27, Z+23	; 0x17
    1666:	89 2b       	or	r24, r25
    1668:	8a 2b       	or	r24, r26
    166a:	8b 2b       	or	r24, r27
    166c:	41 f0       	breq	.+16     	; 0x167e <CDC_Device_USBTask+0x2e>
    166e:	ef 01       	movw	r28, r30
    1670:	81 81       	ldd	r24, Z+1	; 0x01
    1672:	24 d4       	rcall	.+2120   	; 0x1ebc <Endpoint_SelectEndpoint>
    1674:	63 d4       	rcall	.+2246   	; 0x1f3c <Endpoint_IsINReady>
    1676:	88 23       	and	r24, r24
    1678:	11 f0       	breq	.+4      	; 0x167e <CDC_Device_USBTask+0x2e>
    167a:	ce 01       	movw	r24, r28
    167c:	9d df       	rcall	.-198    	; 0x15b8 <CDC_Device_Flush>
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <CDC_Device_BytesReceived>:
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	fc 01       	movw	r30, r24
    168a:	90 91 76 24 	lds	r25, 0x2476
    168e:	94 30       	cpi	r25, 0x04	; 4
    1690:	09 f0       	breq	.+2      	; 0x1694 <CDC_Device_BytesReceived+0x10>
    1692:	48 c0       	rjmp	.+144    	; 0x1724 <CDC_Device_BytesReceived+0xa0>
    1694:	84 89       	ldd	r24, Z+20	; 0x14
    1696:	95 89       	ldd	r25, Z+21	; 0x15
    1698:	a6 89       	ldd	r26, Z+22	; 0x16
    169a:	b7 89       	ldd	r27, Z+23	; 0x17
    169c:	89 2b       	or	r24, r25
    169e:	8a 2b       	or	r24, r26
    16a0:	8b 2b       	or	r24, r27
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <CDC_Device_BytesReceived+0x22>
    16a4:	42 c0       	rjmp	.+132    	; 0x172a <CDC_Device_BytesReceived+0xa6>
    16a6:	86 81       	ldd	r24, Z+6	; 0x06
    16a8:	09 d4       	rcall	.+2066   	; 0x1ebc <Endpoint_SelectEndpoint>
    16aa:	54 d4       	rcall	.+2216   	; 0x1f54 <Endpoint_IsOUTReceived>
    16ac:	88 23       	and	r24, r24
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <CDC_Device_BytesReceived+0x2e>
    16b0:	3f c0       	rjmp	.+126    	; 0x1730 <CDC_Device_BytesReceived+0xac>
    16b2:	80 91 83 24 	lds	r24, 0x2483
    16b6:	88 23       	and	r24, r24
    16b8:	4c f4       	brge	.+18     	; 0x16cc <CDC_Device_BytesReceived+0x48>
    16ba:	e0 91 7f 24 	lds	r30, 0x247F
    16be:	f0 91 80 24 	lds	r31, 0x2480
    16c2:	ef 5b       	subi	r30, 0xBF	; 191
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	c0 81       	ld	r28, Z
    16c8:	d0 e0       	ldi	r29, 0x00	; 0
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <CDC_Device_BytesReceived+0x62>
    16cc:	80 91 7f 24 	lds	r24, 0x247F
    16d0:	90 91 80 24 	lds	r25, 0x2480
    16d4:	fc 01       	movw	r30, r24
    16d6:	e0 5c       	subi	r30, 0xC0	; 192
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	c0 81       	ld	r28, Z
    16dc:	31 96       	adiw	r30, 0x01	; 1
    16de:	80 81       	ld	r24, Z
    16e0:	d0 e0       	ldi	r29, 0x00	; 0
    16e2:	c8 1b       	sub	r28, r24
    16e4:	d1 09       	sbc	r29, r1
    16e6:	20 97       	sbiw	r28, 0x00	; 0
    16e8:	11 f4       	brne	.+4      	; 0x16ee <CDC_Device_BytesReceived+0x6a>
    16ea:	b9 d3       	rcall	.+1906   	; 0x1e5e <Endpoint_ClearOUT>
    16ec:	23 c0       	rjmp	.+70     	; 0x1734 <CDC_Device_BytesReceived+0xb0>
    16ee:	80 91 83 24 	lds	r24, 0x2483
    16f2:	88 23       	and	r24, r24
    16f4:	4c f4       	brge	.+18     	; 0x1708 <CDC_Device_BytesReceived+0x84>
    16f6:	e0 91 7f 24 	lds	r30, 0x247F
    16fa:	f0 91 80 24 	lds	r31, 0x2480
    16fe:	ef 5b       	subi	r30, 0xBF	; 191
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	c0 81       	ld	r28, Z
    1704:	d0 e0       	ldi	r29, 0x00	; 0
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <CDC_Device_BytesReceived+0xb0>
    1708:	80 91 7f 24 	lds	r24, 0x247F
    170c:	90 91 80 24 	lds	r25, 0x2480
    1710:	fc 01       	movw	r30, r24
    1712:	e0 5c       	subi	r30, 0xC0	; 192
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	c0 81       	ld	r28, Z
    1718:	31 96       	adiw	r30, 0x01	; 1
    171a:	80 81       	ld	r24, Z
    171c:	d0 e0       	ldi	r29, 0x00	; 0
    171e:	c8 1b       	sub	r28, r24
    1720:	d1 09       	sbc	r29, r1
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <CDC_Device_BytesReceived+0xb0>
    1724:	c0 e0       	ldi	r28, 0x00	; 0
    1726:	d0 e0       	ldi	r29, 0x00	; 0
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <CDC_Device_BytesReceived+0xb0>
    172a:	c0 e0       	ldi	r28, 0x00	; 0
    172c:	d0 e0       	ldi	r29, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <CDC_Device_BytesReceived+0xb0>
    1730:	c0 e0       	ldi	r28, 0x00	; 0
    1732:	d0 e0       	ldi	r29, 0x00	; 0
    1734:	ce 01       	movw	r24, r28
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <CDC_Device_ReceiveByte>:
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	20 91 76 24 	lds	r18, 0x2476
    1744:	24 30       	cpi	r18, 0x04	; 4
    1746:	09 f0       	breq	.+2      	; 0x174a <CDC_Device_ReceiveByte+0xe>
    1748:	52 c0       	rjmp	.+164    	; 0x17ee <CDC_Device_ReceiveByte+0xb2>
    174a:	fc 01       	movw	r30, r24
    174c:	44 89       	ldd	r20, Z+20	; 0x14
    174e:	55 89       	ldd	r21, Z+21	; 0x15
    1750:	66 89       	ldd	r22, Z+22	; 0x16
    1752:	77 89       	ldd	r23, Z+23	; 0x17
    1754:	45 2b       	or	r20, r21
    1756:	46 2b       	or	r20, r22
    1758:	47 2b       	or	r20, r23
    175a:	09 f4       	brne	.+2      	; 0x175e <CDC_Device_ReceiveByte+0x22>
    175c:	4b c0       	rjmp	.+150    	; 0x17f4 <CDC_Device_ReceiveByte+0xb8>
    175e:	86 81       	ldd	r24, Z+6	; 0x06
    1760:	ad d3       	rcall	.+1882   	; 0x1ebc <Endpoint_SelectEndpoint>
    1762:	f8 d3       	rcall	.+2032   	; 0x1f54 <Endpoint_IsOUTReceived>
    1764:	88 23       	and	r24, r24
    1766:	09 f4       	brne	.+2      	; 0x176a <CDC_Device_ReceiveByte+0x2e>
    1768:	48 c0       	rjmp	.+144    	; 0x17fa <CDC_Device_ReceiveByte+0xbe>
    176a:	80 91 83 24 	lds	r24, 0x2483
    176e:	88 23       	and	r24, r24
    1770:	4c f4       	brge	.+18     	; 0x1784 <CDC_Device_ReceiveByte+0x48>
    1772:	e0 91 7f 24 	lds	r30, 0x247F
    1776:	f0 91 80 24 	lds	r31, 0x2480
    177a:	ef 5b       	subi	r30, 0xBF	; 191
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0d c0       	rjmp	.+26     	; 0x179e <CDC_Device_ReceiveByte+0x62>
    1784:	20 91 7f 24 	lds	r18, 0x247F
    1788:	30 91 80 24 	lds	r19, 0x2480
    178c:	f9 01       	movw	r30, r18
    178e:	e0 5c       	subi	r30, 0xC0	; 192
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	31 96       	adiw	r30, 0x01	; 1
    1796:	20 81       	ld	r18, Z
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	82 1b       	sub	r24, r18
    179c:	91 09       	sbc	r25, r1
    179e:	89 2b       	or	r24, r25
    17a0:	21 f0       	breq	.+8      	; 0x17aa <CDC_Device_ReceiveByte+0x6e>
    17a2:	6c d3       	rcall	.+1752   	; 0x1e7c <Endpoint_Read_8>
    17a4:	c8 2f       	mov	r28, r24
    17a6:	d0 e0       	ldi	r29, 0x00	; 0
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <CDC_Device_ReceiveByte+0x72>
    17aa:	cf ef       	ldi	r28, 0xFF	; 255
    17ac:	df ef       	ldi	r29, 0xFF	; 255
    17ae:	80 91 83 24 	lds	r24, 0x2483
    17b2:	88 23       	and	r24, r24
    17b4:	4c f4       	brge	.+18     	; 0x17c8 <CDC_Device_ReceiveByte+0x8c>
    17b6:	e0 91 7f 24 	lds	r30, 0x247F
    17ba:	f0 91 80 24 	lds	r31, 0x2480
    17be:	ef 5b       	subi	r30, 0xBF	; 191
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	20 81       	ld	r18, Z
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <CDC_Device_ReceiveByte+0xa6>
    17c8:	40 91 7f 24 	lds	r20, 0x247F
    17cc:	50 91 80 24 	lds	r21, 0x2480
    17d0:	fa 01       	movw	r30, r20
    17d2:	e0 5c       	subi	r30, 0xC0	; 192
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	20 81       	ld	r18, Z
    17d8:	31 96       	adiw	r30, 0x01	; 1
    17da:	80 81       	ld	r24, Z
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	28 1b       	sub	r18, r24
    17e0:	31 09       	sbc	r19, r1
    17e2:	23 2b       	or	r18, r19
    17e4:	69 f4       	brne	.+26     	; 0x1800 <CDC_Device_ReceiveByte+0xc4>
    17e6:	3b d3       	rcall	.+1654   	; 0x1e5e <Endpoint_ClearOUT>
    17e8:	8c 2f       	mov	r24, r28
    17ea:	9d 2f       	mov	r25, r29
    17ec:	0b c0       	rjmp	.+22     	; 0x1804 <CDC_Device_ReceiveByte+0xc8>
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	9f ef       	ldi	r25, 0xFF	; 255
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <CDC_Device_ReceiveByte+0xc8>
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	9f ef       	ldi	r25, 0xFF	; 255
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <CDC_Device_ReceiveByte+0xc8>
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <CDC_Device_ReceiveByte+0xc8>
    1800:	8c 2f       	mov	r24, r28
    1802:	9d 2f       	mov	r25, r29
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <CDC_Device_getchar>:
    180a:	fc 01       	movw	r30, r24
    180c:	84 85       	ldd	r24, Z+12	; 0x0c
    180e:	95 85       	ldd	r25, Z+13	; 0x0d
    1810:	95 df       	rcall	.-214    	; 0x173c <CDC_Device_ReceiveByte>
    1812:	99 23       	and	r25, r25
    1814:	14 f4       	brge	.+4      	; 0x181a <CDC_Device_getchar+0x10>
    1816:	8e ef       	ldi	r24, 0xFE	; 254
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	08 95       	ret

0000181c <CDC_Device_CreateStream>:
    181c:	fb 01       	movw	r30, r22
    181e:	2e e0       	ldi	r18, 0x0E	; 14
    1820:	db 01       	movw	r26, r22
    1822:	1d 92       	st	X+, r1
    1824:	2a 95       	dec	r18
    1826:	e9 f7       	brne	.-6      	; 0x1822 <CDC_Device_CreateStream+0x6>
    1828:	23 e0       	ldi	r18, 0x03	; 3
    182a:	23 83       	std	Z+3, r18	; 0x03
    182c:	2c ec       	ldi	r18, 0xCC	; 204
    182e:	3a e0       	ldi	r19, 0x0A	; 10
    1830:	20 87       	std	Z+8, r18	; 0x08
    1832:	31 87       	std	Z+9, r19	; 0x09
    1834:	25 e0       	ldi	r18, 0x05	; 5
    1836:	3c e0       	ldi	r19, 0x0C	; 12
    1838:	22 87       	std	Z+10, r18	; 0x0a
    183a:	33 87       	std	Z+11, r19	; 0x0b
    183c:	84 87       	std	Z+12, r24	; 0x0c
    183e:	95 87       	std	Z+13, r25	; 0x0d
    1840:	08 95       	ret

00001842 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1842:	08 95       	ret

00001844 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    1850:	9a d3       	rcall	.+1844   	; 0x1f86 <Endpoint_IsSETUPReceived>
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <CDC_Device_ProcessControlRequest+0x14>
    1856:	7e c0       	rjmp	.+252    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1858:	28 81       	ld	r18, Y
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	80 91 7b 24 	lds	r24, 0x247B
    1860:	90 91 7c 24 	lds	r25, 0x247C
    1864:	82 17       	cp	r24, r18
    1866:	93 07       	cpc	r25, r19
    1868:	09 f0       	breq	.+2      	; 0x186c <CDC_Device_ProcessControlRequest+0x28>
    186a:	74 c0       	rjmp	.+232    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
	  return;

	switch (USB_ControlRequest.bRequest)
    186c:	80 91 78 24 	lds	r24, 0x2478
    1870:	81 32       	cpi	r24, 0x21	; 33
    1872:	59 f0       	breq	.+22     	; 0x188a <CDC_Device_ProcessControlRequest+0x46>
    1874:	18 f4       	brcc	.+6      	; 0x187c <CDC_Device_ProcessControlRequest+0x38>
    1876:	80 32       	cpi	r24, 0x20	; 32
    1878:	29 f1       	breq	.+74     	; 0x18c4 <CDC_Device_ProcessControlRequest+0x80>
    187a:	6c c0       	rjmp	.+216    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
    187c:	82 32       	cpi	r24, 0x22	; 34
    187e:	09 f4       	brne	.+2      	; 0x1882 <CDC_Device_ProcessControlRequest+0x3e>
    1880:	50 c0       	rjmp	.+160    	; 0x1922 <CDC_Device_ProcessControlRequest+0xde>
    1882:	83 32       	cpi	r24, 0x23	; 35
    1884:	09 f4       	brne	.+2      	; 0x1888 <CDC_Device_ProcessControlRequest+0x44>
    1886:	5c c0       	rjmp	.+184    	; 0x1940 <CDC_Device_ProcessControlRequest+0xfc>
    1888:	65 c0       	rjmp	.+202    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    188a:	80 91 77 24 	lds	r24, 0x2477
    188e:	81 3a       	cpi	r24, 0xA1	; 161
    1890:	09 f0       	breq	.+2      	; 0x1894 <CDC_Device_ProcessControlRequest+0x50>
    1892:	60 c0       	rjmp	.+192    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    1894:	91 d3       	rcall	.+1826   	; 0x1fb8 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    1896:	52 d3       	rcall	.+1700   	; 0x1f3c <Endpoint_IsINReady>
    1898:	88 23       	and	r24, r24
    189a:	e9 f3       	breq	.-6      	; 0x1896 <CDC_Device_ProcessControlRequest+0x52>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    189c:	8c 89       	ldd	r24, Y+20	; 0x14
    189e:	fd 88       	ldd	r15, Y+21	; 0x15
    18a0:	0e 89       	ldd	r16, Y+22	; 0x16
    18a2:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    18a4:	fb d2       	rcall	.+1526   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    18a6:	8f 2d       	mov	r24, r15
    18a8:	f9 d2       	rcall	.+1522   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    18aa:	80 2f       	mov	r24, r16
    18ac:	f7 d2       	rcall	.+1518   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    18ae:	81 2f       	mov	r24, r17
    18b0:	f5 d2       	rcall	.+1514   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    18b2:	88 8d       	ldd	r24, Y+24	; 0x18
    18b4:	f3 d2       	rcall	.+1510   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    18b6:	89 8d       	ldd	r24, Y+25	; 0x19
    18b8:	f1 d2       	rcall	.+1506   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    18ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18bc:	ef d2       	rcall	.+1502   	; 0x1e9c <Endpoint_Write_8>

				Endpoint_ClearIN();
    18be:	b6 d2       	rcall	.+1388   	; 0x1e2c <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    18c0:	99 d4       	rcall	.+2354   	; 0x21f4 <Endpoint_ClearStatusStage>
    18c2:	48 c0       	rjmp	.+144    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18c4:	80 91 77 24 	lds	r24, 0x2477
    18c8:	81 32       	cpi	r24, 0x21	; 33
    18ca:	09 f0       	breq	.+2      	; 0x18ce <CDC_Device_ProcessControlRequest+0x8a>
    18cc:	43 c0       	rjmp	.+134    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    18ce:	74 d3       	rcall	.+1768   	; 0x1fb8 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <CDC_Device_ProcessControlRequest+0x98>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    18d2:	80 91 76 24 	lds	r24, 0x2476
    18d6:	88 23       	and	r24, r24
    18d8:	09 f4       	brne	.+2      	; 0x18dc <CDC_Device_ProcessControlRequest+0x98>
    18da:	3c c0       	rjmp	.+120    	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    18dc:	3b d3       	rcall	.+1654   	; 0x1f54 <Endpoint_IsOUTReceived>
    18de:	88 23       	and	r24, r24
    18e0:	c1 f3       	breq	.-16     	; 0x18d2 <CDC_Device_ProcessControlRequest+0x8e>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    18e2:	cc d2       	rcall	.+1432   	; 0x1e7c <Endpoint_Read_8>
    18e4:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
    18e6:	ca d2       	rcall	.+1428   	; 0x1e7c <Endpoint_Read_8>
    18e8:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    18ea:	c8 d2       	rcall	.+1424   	; 0x1e7c <Endpoint_Read_8>
    18ec:	08 2f       	mov	r16, r24
				uint32_t Byte3 = Endpoint_Read_8();
    18ee:	c6 d2       	rcall	.+1420   	; 0x1e7c <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    18f0:	40 2f       	mov	r20, r16
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    18f8:	ba 01       	movw	r22, r20
    18fa:	55 27       	eor	r21, r21
    18fc:	44 27       	eor	r20, r20
    18fe:	78 2b       	or	r23, r24
    1900:	4f 29       	or	r20, r15
    1902:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1904:	4c 8b       	std	Y+20, r20	; 0x14
    1906:	5d 8b       	std	Y+21, r21	; 0x15
    1908:	6e 8b       	std	Y+22, r22	; 0x16
    190a:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    190c:	b7 d2       	rcall	.+1390   	; 0x1e7c <Endpoint_Read_8>
    190e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1910:	b5 d2       	rcall	.+1386   	; 0x1e7c <Endpoint_Read_8>
    1912:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1914:	b3 d2       	rcall	.+1382   	; 0x1e7c <Endpoint_Read_8>
    1916:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    1918:	a2 d2       	rcall	.+1348   	; 0x1e5e <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    191a:	6c d4       	rcall	.+2264   	; 0x21f4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    191c:	ce 01       	movw	r24, r28
    191e:	91 df       	rcall	.-222    	; 0x1842 <CDC_Device_Event_Stub>
    1920:	19 c0       	rjmp	.+50     	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1922:	80 91 77 24 	lds	r24, 0x2477
    1926:	81 32       	cpi	r24, 0x21	; 33
    1928:	a9 f4       	brne	.+42     	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    192a:	46 d3       	rcall	.+1676   	; 0x1fb8 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    192c:	63 d4       	rcall	.+2246   	; 0x21f4 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    192e:	80 91 79 24 	lds	r24, 0x2479
    1932:	90 91 7a 24 	lds	r25, 0x247A
    1936:	88 8b       	std	Y+16, r24	; 0x10
    1938:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    193a:	ce 01       	movw	r24, r28
    193c:	82 df       	rcall	.-252    	; 0x1842 <CDC_Device_Event_Stub>
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1940:	80 91 77 24 	lds	r24, 0x2477
    1944:	81 32       	cpi	r24, 0x21	; 33
    1946:	31 f4       	brne	.+12     	; 0x1954 <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    1948:	37 d3       	rcall	.+1646   	; 0x1fb8 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    194a:	54 d4       	rcall	.+2216   	; 0x21f4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    194c:	60 91 79 24 	lds	r22, 0x2479
    1950:	ce 01       	movw	r24, r28
    1952:	77 df       	rcall	.-274    	; 0x1842 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	08 95       	ret

00001960 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	ea 97       	sbiw	r28, 0x3a	; 58
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	07 e7       	ldi	r16, 0x77	; 119
    1978:	14 e2       	ldi	r17, 0x24	; 36
    197a:	0f 2e       	mov	r0, r31
    197c:	ff e7       	ldi	r31, 0x7F	; 127
    197e:	ef 2e       	mov	r14, r31
    1980:	f4 e2       	ldi	r31, 0x24	; 36
    1982:	ff 2e       	mov	r15, r31
    1984:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1986:	7a d2       	rcall	.+1268   	; 0x1e7c <Endpoint_Read_8>
    1988:	f8 01       	movw	r30, r16
    198a:	81 93       	st	Z+, r24
    198c:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    198e:	ee 15       	cp	r30, r14
    1990:	ff 05       	cpc	r31, r15
    1992:	c9 f7       	brne	.-14     	; 0x1986 <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1994:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    1998:	f6 d2       	rcall	.+1516   	; 0x1f86 <Endpoint_IsSETUPReceived>
    199a:	88 23       	and	r24, r24
    199c:	09 f4       	brne	.+2      	; 0x19a0 <USB_Device_ProcessControlRequest+0x40>
    199e:	fe c0       	rjmp	.+508    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    19a0:	e7 e7       	ldi	r30, 0x77	; 119
    19a2:	f4 e2       	ldi	r31, 0x24	; 36
    19a4:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    19a6:	81 81       	ldd	r24, Z+1	; 0x01
    19a8:	85 30       	cpi	r24, 0x05	; 5
    19aa:	09 f4       	brne	.+2      	; 0x19ae <USB_Device_ProcessControlRequest+0x4e>
    19ac:	6b c0       	rjmp	.+214    	; 0x1a84 <USB_Device_ProcessControlRequest+0x124>
    19ae:	30 f4       	brcc	.+12     	; 0x19bc <USB_Device_ProcessControlRequest+0x5c>
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	91 f1       	breq	.+100    	; 0x1a18 <USB_Device_ProcessControlRequest+0xb8>
    19b4:	68 f0       	brcs	.+26     	; 0x19d0 <USB_Device_ProcessControlRequest+0x70>
    19b6:	83 30       	cpi	r24, 0x03	; 3
    19b8:	79 f1       	breq	.+94     	; 0x1a18 <USB_Device_ProcessControlRequest+0xb8>
    19ba:	f0 c0       	rjmp	.+480    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
    19bc:	88 30       	cpi	r24, 0x08	; 8
    19be:	09 f4       	brne	.+2      	; 0x19c2 <USB_Device_ProcessControlRequest+0x62>
    19c0:	c5 c0       	rjmp	.+394    	; 0x1b4c <USB_Device_ProcessControlRequest+0x1ec>
    19c2:	89 30       	cpi	r24, 0x09	; 9
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <USB_Device_ProcessControlRequest+0x68>
    19c6:	cb c0       	rjmp	.+406    	; 0x1b5e <USB_Device_ProcessControlRequest+0x1fe>
    19c8:	86 30       	cpi	r24, 0x06	; 6
    19ca:	09 f0       	breq	.+2      	; 0x19ce <USB_Device_ProcessControlRequest+0x6e>
    19cc:	e7 c0       	rjmp	.+462    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
    19ce:	6e c0       	rjmp	.+220    	; 0x1aac <USB_Device_ProcessControlRequest+0x14c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19d0:	90 38       	cpi	r25, 0x80	; 128
    19d2:	21 f0       	breq	.+8      	; 0x19dc <USB_Device_ProcessControlRequest+0x7c>
    19d4:	92 38       	cpi	r25, 0x82	; 130
    19d6:	09 f0       	breq	.+2      	; 0x19da <USB_Device_ProcessControlRequest+0x7a>
    19d8:	e1 c0       	rjmp	.+450    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
    19da:	08 c0       	rjmp	.+16     	; 0x19ec <USB_Device_ProcessControlRequest+0x8c>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    19dc:	10 91 73 24 	lds	r17, 0x2473
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    19e0:	80 91 74 24 	lds	r24, 0x2474
    19e4:	88 23       	and	r24, r24
    19e6:	81 f0       	breq	.+32     	; 0x1a08 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    19e8:	12 60       	ori	r17, 0x02	; 2
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    19ec:	80 91 7b 24 	lds	r24, 0x247B
    19f0:	8f 70       	andi	r24, 0x0F	; 15
    19f2:	64 d2       	rcall	.+1224   	; 0x1ebc <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    19f4:	e0 91 81 24 	lds	r30, 0x2481
    19f8:	f0 91 82 24 	lds	r31, 0x2482
    19fc:	11 81       	ldd	r17, Z+1	; 0x01
    19fe:	12 fb       	bst	r17, 2
    1a00:	11 27       	eor	r17, r17
    1a02:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	5a d2       	rcall	.+1204   	; 0x1ebc <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    1a08:	d7 d2       	rcall	.+1454   	; 0x1fb8 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1a0a:	81 2f       	mov	r24, r17
    1a0c:	47 d2       	rcall	.+1166   	; 0x1e9c <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	45 d2       	rcall	.+1162   	; 0x1e9c <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    1a12:	0c d2       	rcall	.+1048   	; 0x1e2c <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1a14:	ef d3       	rcall	.+2014   	; 0x21f4 <Endpoint_ClearStatusStage>
    1a16:	c2 c0       	rjmp	.+388    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a18:	99 23       	and	r25, r25
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <USB_Device_ProcessControlRequest+0xbe>
    1a1c:	c5 c0       	rjmp	.+394    	; 0x1ba8 <USB_Device_ProcessControlRequest+0x248>
    1a1e:	92 30       	cpi	r25, 0x02	; 2
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <USB_Device_ProcessControlRequest+0xc4>
    1a22:	bc c0       	rjmp	.+376    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
    1a24:	c6 c0       	rjmp	.+396    	; 0x1bb2 <USB_Device_ProcessControlRequest+0x252>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <USB_Device_ProcessControlRequest+0xce>
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	90 93 74 24 	sts	0x2474, r25
    1a32:	23 c0       	rjmp	.+70     	; 0x1a7a <USB_Device_ProcessControlRequest+0x11a>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1a34:	e0 91 7b 24 	lds	r30, 0x247B
    1a38:	1e 2f       	mov	r17, r30
    1a3a:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <USB_Device_ProcessControlRequest+0xe0>
    1a3e:	ae c0       	rjmp	.+348    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    1a40:	81 2f       	mov	r24, r17
    1a42:	3c d2       	rcall	.+1144   	; 0x1ebc <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1a44:	80 91 78 24 	lds	r24, 0x2478
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	11 f4       	brne	.+4      	; 0x1a50 <USB_Device_ProcessControlRequest+0xf0>
					{
						Endpoint_StallTransaction();
    1a4c:	e1 d2       	rcall	.+1474   	; 0x2010 <Endpoint_StallTransaction>
    1a4e:	15 c0       	rjmp	.+42     	; 0x1a7a <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    1a50:	e0 91 81 24 	lds	r30, 0x2481
    1a54:	f0 91 82 24 	lds	r31, 0x2482
    1a58:	81 81       	ldd	r24, Z+1	; 0x01
    1a5a:	8b 7f       	andi	r24, 0xFB	; 251
    1a5c:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    1a5e:	24 e8       	ldi	r18, 0x84	; 132
    1a60:	12 9f       	mul	r17, r18
    1a62:	f0 01       	movw	r30, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	eb 53       	subi	r30, 0x3B	; 59
    1a68:	fb 4d       	sbci	r31, 0xDB	; 219
    1a6a:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    1a6c:	e0 91 81 24 	lds	r30, 0x2481
    1a70:	f0 91 82 24 	lds	r31, 0x2482
    1a74:	80 81       	ld	r24, Z
    1a76:	8e 7f       	andi	r24, 0xFE	; 254
    1a78:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	1f d2       	rcall	.+1086   	; 0x1ebc <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    1a7e:	9c d2       	rcall	.+1336   	; 0x1fb8 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1a80:	b9 d3       	rcall	.+1906   	; 0x21f4 <Endpoint_ClearStatusStage>
    1a82:	8c c0       	rjmp	.+280    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1a84:	91 11       	cpse	r25, r1
    1a86:	8a c0       	rjmp	.+276    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1a88:	10 91 79 24 	lds	r17, 0x2479
    1a8c:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    1a8e:	94 d2       	rcall	.+1320   	; 0x1fb8 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1a90:	b1 d3       	rcall	.+1890   	; 0x21f4 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    1a92:	54 d2       	rcall	.+1192   	; 0x1f3c <Endpoint_IsINReady>
    1a94:	88 23       	and	r24, r24
    1a96:	e9 f3       	breq	.-6      	; 0x1a92 <USB_Device_ProcessControlRequest+0x132>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1a98:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1a9c:	11 11       	cpse	r17, r1
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <USB_Device_ProcessControlRequest+0x144>
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <USB_Device_ProcessControlRequest+0x146>
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	80 93 76 24 	sts	0x2476, r24
    1aaa:	78 c0       	rjmp	.+240    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1aac:	90 58       	subi	r25, 0x80	; 128
    1aae:	92 30       	cpi	r25, 0x02	; 2
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <USB_Device_ProcessControlRequest+0x154>
    1ab2:	74 c0       	rjmp	.+232    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ab4:	80 91 79 24 	lds	r24, 0x2479
    1ab8:	90 91 7a 24 	lds	r25, 0x247A
    1abc:	8c 3d       	cpi	r24, 0xDC	; 220
    1abe:	e3 e0       	ldi	r30, 0x03	; 3
    1ac0:	9e 07       	cpc	r25, r30
    1ac2:	a1 f5       	brne	.+104    	; 0x1b2c <USB_Device_ProcessControlRequest+0x1cc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ac8:	8a e3       	ldi	r24, 0x3A	; 58
    1aca:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    1acc:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1ace:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    1ad0:	ae 01       	movw	r20, r28
    1ad2:	4d 5f       	subi	r20, 0xFD	; 253
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ad8:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    1ada:	a0 ec       	ldi	r26, 0xC0	; 192
    1adc:	b1 e0       	ldi	r27, 0x01	; 1
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	1a 96       	adiw	r26, 0x0a	; 10
    1ae2:	6c 93       	st	X, r22
    1ae4:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    1ae6:	e3 2f       	mov	r30, r19
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    1aec:	1a 96       	adiw	r26, 0x0a	; 10
    1aee:	1c 92       	st	X, r1
    1af0:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    1af2:	20 ff       	sbrs	r18, 0
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
    1af6:	82 95       	swap	r24
    1af8:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1afa:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1afc:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1afe:	8a 30       	cpi	r24, 0x0A	; 10
    1b00:	18 f0       	brcs	.+6      	; 0x1b08 <USB_Device_ProcessControlRequest+0x1a8>
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	c7 96       	adiw	r24, 0x37	; 55
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <USB_Device_ProcessControlRequest+0x1ac>
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	c0 96       	adiw	r24, 0x30	; 48
    1b0c:	fa 01       	movw	r30, r20
    1b0e:	81 93       	st	Z+, r24
    1b10:	91 93       	st	Z+, r25
    1b12:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1b14:	2f 5f       	subi	r18, 0xFF	; 255
    1b16:	2c 31       	cpi	r18, 0x1C	; 28
    1b18:	19 f7       	brne	.-58     	; 0x1ae0 <USB_Device_ProcessControlRequest+0x180>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1b1a:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    1b1c:	4d d2       	rcall	.+1178   	; 0x1fb8 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1b1e:	6a e3       	ldi	r22, 0x3A	; 58
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	65 d0       	rcall	.+202    	; 0x1bf2 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1b28:	9a d1       	rcall	.+820    	; 0x1e5e <Endpoint_ClearOUT>
    1b2a:	38 c0       	rjmp	.+112    	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1b2c:	ae 01       	movw	r20, r28
    1b2e:	4f 5f       	subi	r20, 0xFF	; 255
    1b30:	5f 4f       	sbci	r21, 0xFF	; 255
    1b32:	60 91 7b 24 	lds	r22, 0x247B
    1b36:	a7 dc       	rcall	.-1714   	; 0x1486 <CALLBACK_USB_GetDescriptor>
    1b38:	8c 01       	movw	r16, r24
    1b3a:	89 2b       	or	r24, r25
    1b3c:	79 f1       	breq	.+94     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    1b3e:	3c d2       	rcall	.+1144   	; 0x1fb8 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1b40:	b8 01       	movw	r22, r16
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	e2 d0       	rcall	.+452    	; 0x1d0c <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    1b48:	8a d1       	rcall	.+788    	; 0x1e5e <Endpoint_ClearOUT>
    1b4a:	28 c0       	rjmp	.+80     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1b4c:	90 38       	cpi	r25, 0x80	; 128
    1b4e:	31 f5       	brne	.+76     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    1b50:	33 d2       	rcall	.+1126   	; 0x1fb8 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1b52:	80 91 72 24 	lds	r24, 0x2472
    1b56:	a2 d1       	rcall	.+836    	; 0x1e9c <Endpoint_Write_8>
	Endpoint_ClearIN();
    1b58:	69 d1       	rcall	.+722    	; 0x1e2c <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1b5a:	4c d3       	rcall	.+1688   	; 0x21f4 <Endpoint_ClearStatusStage>
    1b5c:	1f c0       	rjmp	.+62     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b5e:	91 11       	cpse	r25, r1
    1b60:	1d c0       	rjmp	.+58     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1b62:	80 91 79 24 	lds	r24, 0x2479
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	c8 f4       	brcc	.+50     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    1b6a:	26 d2       	rcall	.+1100   	; 0x1fb8 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1b6c:	80 91 79 24 	lds	r24, 0x2479
    1b70:	80 93 72 24 	sts	0x2472, r24

	Endpoint_ClearStatusStage();
    1b74:	3f d3       	rcall	.+1662   	; 0x21f4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1b76:	80 91 72 24 	lds	r24, 0x2472
    1b7a:	88 23       	and	r24, r24
    1b7c:	21 f0       	breq	.+8      	; 0x1b86 <USB_Device_ProcessControlRequest+0x226>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1b7e:	84 e0       	ldi	r24, 0x04	; 4
    1b80:	80 93 76 24 	sts	0x2476, r24
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <USB_Device_ProcessControlRequest+0x238>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1b86:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <USB_Device_ProcessControlRequest+0x232>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <USB_Device_ProcessControlRequest+0x234>
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	80 93 76 24 	sts	0x2476, r24

	EVENT_USB_Device_ConfigurationChanged();
    1b98:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1b9c:	f4 d1       	rcall	.+1000   	; 0x1f86 <Endpoint_IsSETUPReceived>
    1b9e:	88 23       	and	r24, r24
    1ba0:	71 f0       	breq	.+28     	; 0x1bbe <USB_Device_ProcessControlRequest+0x25e>
	{
		Endpoint_ClearSETUP();
    1ba2:	0a d2       	rcall	.+1044   	; 0x1fb8 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    1ba4:	35 d2       	rcall	.+1130   	; 0x2010 <Endpoint_StallTransaction>
    1ba6:	0b c0       	rjmp	.+22     	; 0x1bbe <USB_Device_ProcessControlRequest+0x25e>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1ba8:	90 91 79 24 	lds	r25, 0x2479
    1bac:	91 30       	cpi	r25, 0x01	; 1
    1bae:	b1 f7       	brne	.-20     	; 0x1b9c <USB_Device_ProcessControlRequest+0x23c>
    1bb0:	3a cf       	rjmp	.-396    	; 0x1a26 <USB_Device_ProcessControlRequest+0xc6>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1bb2:	80 91 79 24 	lds	r24, 0x2479
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <USB_Device_ProcessControlRequest+0x25c>
    1bba:	3c cf       	rjmp	.-392    	; 0x1a34 <USB_Device_ProcessControlRequest+0xd4>
    1bbc:	5e cf       	rjmp	.-324    	; 0x1a7a <USB_Device_ProcessControlRequest+0x11a>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1bbe:	ea 96       	adiw	r28, 0x3a	; 58
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	08 95       	ret

00001bd2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1bd2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bd4:	80 91 76 24 	lds	r24, 0x2476
    1bd8:	88 23       	and	r24, r24
    1bda:	49 f0       	breq	.+18     	; 0x1bee <USB_USBTask+0x1c>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    1bdc:	c0 91 83 24 	lds	r28, 0x2483
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	6c d1       	rcall	.+728    	; 0x1ebc <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    1be4:	d0 d1       	rcall	.+928    	; 0x1f86 <Endpoint_IsSETUPReceived>
    1be6:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    1be8:	bb de       	rcall	.-650    	; 0x1960 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    1bea:	8c 2f       	mov	r24, r28
    1bec:	67 d1       	rcall	.+718    	; 0x1ebc <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	c8 2e       	mov	r12, r24
    1c04:	d9 2e       	mov	r13, r25
    1c06:	8b 01       	movw	r16, r22
    1c08:	80 91 83 24 	lds	r24, 0x2483
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	56 d1       	rcall	.+684    	; 0x1ebc <Endpoint_SelectEndpoint>
    1c10:	c0 91 7d 24 	lds	r28, 0x247D
    1c14:	d0 91 7e 24 	lds	r29, 0x247E
    1c18:	c0 17       	cp	r28, r16
    1c1a:	d1 07       	cpc	r29, r17
    1c1c:	38 f0       	brcs	.+14     	; 0x1c2c <Endpoint_Write_Control_Stream_LE+0x3a>
    1c1e:	01 15       	cp	r16, r1
    1c20:	11 05       	cpc	r17, r1
    1c22:	19 f4       	brne	.+6      	; 0x1c2a <Endpoint_Write_Control_Stream_LE+0x38>
    1c24:	03 d1       	rcall	.+518    	; 0x1e2c <Endpoint_ClearIN>
    1c26:	e8 01       	movw	r28, r16
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <Endpoint_Write_Control_Stream_LE+0x3a>
    1c2a:	e8 01       	movw	r28, r16
    1c2c:	ec 2c       	mov	r14, r12
    1c2e:	fd 2c       	mov	r15, r13
    1c30:	d1 2c       	mov	r13, r1
    1c32:	44 c0       	rjmp	.+136    	; 0x1cbc <Endpoint_Write_Control_Stream_LE+0xca>
    1c34:	80 91 76 24 	lds	r24, 0x2476
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <Endpoint_Write_Control_Stream_LE+0x4c>
    1c3c:	53 c0       	rjmp	.+166    	; 0x1ce4 <Endpoint_Write_Control_Stream_LE+0xf2>
    1c3e:	85 30       	cpi	r24, 0x05	; 5
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <Endpoint_Write_Control_Stream_LE+0x52>
    1c42:	52 c0       	rjmp	.+164    	; 0x1ce8 <Endpoint_Write_Control_Stream_LE+0xf6>
    1c44:	a0 d1       	rcall	.+832    	; 0x1f86 <Endpoint_IsSETUPReceived>
    1c46:	81 11       	cpse	r24, r1
    1c48:	51 c0       	rjmp	.+162    	; 0x1cec <Endpoint_Write_Control_Stream_LE+0xfa>
    1c4a:	84 d1       	rcall	.+776    	; 0x1f54 <Endpoint_IsOUTReceived>
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	45 c0       	rjmp	.+138    	; 0x1cda <Endpoint_Write_Control_Stream_LE+0xe8>
    1c50:	75 d1       	rcall	.+746    	; 0x1f3c <Endpoint_IsINReady>
    1c52:	88 23       	and	r24, r24
    1c54:	99 f1       	breq	.+102    	; 0x1cbc <Endpoint_Write_Control_Stream_LE+0xca>
    1c56:	80 91 83 24 	lds	r24, 0x2483
    1c5a:	88 23       	and	r24, r24
    1c5c:	74 f4       	brge	.+28     	; 0x1c7a <Endpoint_Write_Control_Stream_LE+0x88>
    1c5e:	e0 91 7f 24 	lds	r30, 0x247F
    1c62:	f0 91 80 24 	lds	r31, 0x2480
    1c66:	ef 5b       	subi	r30, 0xBF	; 191
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	00 81       	ld	r16, Z
    1c6c:	10 e0       	ldi	r17, 0x00	; 0
    1c6e:	20 97       	sbiw	r28, 0x00	; 0
    1c70:	f1 f0       	breq	.+60     	; 0x1cae <Endpoint_Write_Control_Stream_LE+0xbc>
    1c72:	08 30       	cpi	r16, 0x08	; 8
    1c74:	11 05       	cpc	r17, r1
    1c76:	78 f0       	brcs	.+30     	; 0x1c96 <Endpoint_Write_Control_Stream_LE+0xa4>
    1c78:	1a c0       	rjmp	.+52     	; 0x1cae <Endpoint_Write_Control_Stream_LE+0xbc>
    1c7a:	80 91 7f 24 	lds	r24, 0x247F
    1c7e:	90 91 80 24 	lds	r25, 0x2480
    1c82:	fc 01       	movw	r30, r24
    1c84:	e0 5c       	subi	r30, 0xC0	; 192
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	00 81       	ld	r16, Z
    1c8a:	31 96       	adiw	r30, 0x01	; 1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	10 e0       	ldi	r17, 0x00	; 0
    1c90:	08 1b       	sub	r16, r24
    1c92:	11 09       	sbc	r17, r1
    1c94:	ec cf       	rjmp	.-40     	; 0x1c6e <Endpoint_Write_Control_Stream_LE+0x7c>
    1c96:	f7 01       	movw	r30, r14
    1c98:	81 91       	ld	r24, Z+
    1c9a:	7f 01       	movw	r14, r30
    1c9c:	ff d0       	rcall	.+510    	; 0x1e9c <Endpoint_Write_8>
    1c9e:	21 97       	sbiw	r28, 0x01	; 1
    1ca0:	0f 5f       	subi	r16, 0xFF	; 255
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	20 97       	sbiw	r28, 0x00	; 0
    1ca6:	19 f0       	breq	.+6      	; 0x1cae <Endpoint_Write_Control_Stream_LE+0xbc>
    1ca8:	08 30       	cpi	r16, 0x08	; 8
    1caa:	11 05       	cpc	r17, r1
    1cac:	a1 f7       	brne	.-24     	; 0x1c96 <Endpoint_Write_Control_Stream_LE+0xa4>
    1cae:	dd 24       	eor	r13, r13
    1cb0:	d3 94       	inc	r13
    1cb2:	08 30       	cpi	r16, 0x08	; 8
    1cb4:	11 05       	cpc	r17, r1
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <Endpoint_Write_Control_Stream_LE+0xc8>
    1cb8:	d1 2c       	mov	r13, r1
    1cba:	b8 d0       	rcall	.+368    	; 0x1e2c <Endpoint_ClearIN>
    1cbc:	20 97       	sbiw	r28, 0x00	; 0
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <Endpoint_Write_Control_Stream_LE+0xd0>
    1cc0:	b9 cf       	rjmp	.-142    	; 0x1c34 <Endpoint_Write_Control_Stream_LE+0x42>
    1cc2:	d1 10       	cpse	r13, r1
    1cc4:	b7 cf       	rjmp	.-146    	; 0x1c34 <Endpoint_Write_Control_Stream_LE+0x42>
    1cc6:	09 c0       	rjmp	.+18     	; 0x1cda <Endpoint_Write_Control_Stream_LE+0xe8>
    1cc8:	80 91 76 24 	lds	r24, 0x2476
    1ccc:	88 23       	and	r24, r24
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <Endpoint_Write_Control_Stream_LE+0xfe>
    1cd0:	85 30       	cpi	r24, 0x05	; 5
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <Endpoint_Write_Control_Stream_LE+0x102>
    1cd4:	58 d1       	rcall	.+688    	; 0x1f86 <Endpoint_IsSETUPReceived>
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	0f c0       	rjmp	.+30     	; 0x1cf8 <Endpoint_Write_Control_Stream_LE+0x106>
    1cda:	3c d1       	rcall	.+632    	; 0x1f54 <Endpoint_IsOUTReceived>
    1cdc:	88 23       	and	r24, r24
    1cde:	a1 f3       	breq	.-24     	; 0x1cc8 <Endpoint_Write_Control_Stream_LE+0xd6>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	0b c0       	rjmp	.+22     	; 0x1cfa <Endpoint_Write_Control_Stream_LE+0x108>
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	09 c0       	rjmp	.+18     	; 0x1cfa <Endpoint_Write_Control_Stream_LE+0x108>
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	07 c0       	rjmp	.+14     	; 0x1cfa <Endpoint_Write_Control_Stream_LE+0x108>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <Endpoint_Write_Control_Stream_LE+0x108>
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <Endpoint_Write_Control_Stream_LE+0x108>
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <Endpoint_Write_Control_Stream_LE+0x108>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	df 90       	pop	r13
    1d08:	cf 90       	pop	r12
    1d0a:	08 95       	ret

00001d0c <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	e8 2e       	mov	r14, r24
    1d1c:	f9 2e       	mov	r15, r25
    1d1e:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1d20:	80 91 83 24 	lds	r24, 0x2483
    1d24:	80 68       	ori	r24, 0x80	; 128
    1d26:	ca d0       	rcall	.+404    	; 0x1ebc <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    1d28:	c0 91 7d 24 	lds	r28, 0x247D
    1d2c:	d0 91 7e 24 	lds	r29, 0x247E
    1d30:	c0 17       	cp	r28, r16
    1d32:	d1 07       	cpc	r29, r17
    1d34:	38 f0       	brcs	.+14     	; 0x1d44 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1d36:	01 15       	cp	r16, r1
    1d38:	11 05       	cpc	r17, r1
    1d3a:	19 f4       	brne	.+6      	; 0x1d42 <Endpoint_Write_Control_PStream_LE+0x36>
	  Endpoint_ClearIN();
    1d3c:	77 d0       	rcall	.+238    	; 0x1e2c <Endpoint_ClearIN>
    1d3e:	e8 01       	movw	r28, r16
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <Endpoint_Write_Control_PStream_LE+0x38>
    1d42:	e8 01       	movw	r28, r16
    1d44:	0e 2d       	mov	r16, r14
    1d46:	1f 2d       	mov	r17, r15
    1d48:	d1 2c       	mov	r13, r1
    1d4a:	49 c0       	rjmp	.+146    	; 0x1dde <Endpoint_Write_Control_PStream_LE+0xd2>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d4c:	80 91 76 24 	lds	r24, 0x2476

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d50:	88 23       	and	r24, r24
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <Endpoint_Write_Control_PStream_LE+0x4a>
    1d54:	58 c0       	rjmp	.+176    	; 0x1e06 <Endpoint_Write_Control_PStream_LE+0xfa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d56:	85 30       	cpi	r24, 0x05	; 5
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <Endpoint_Write_Control_PStream_LE+0x50>
    1d5a:	57 c0       	rjmp	.+174    	; 0x1e0a <Endpoint_Write_Control_PStream_LE+0xfe>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d5c:	14 d1       	rcall	.+552    	; 0x1f86 <Endpoint_IsSETUPReceived>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	56 c0       	rjmp	.+172    	; 0x1e0e <Endpoint_Write_Control_PStream_LE+0x102>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1d62:	f8 d0       	rcall	.+496    	; 0x1f54 <Endpoint_IsOUTReceived>
    1d64:	81 11       	cpse	r24, r1
    1d66:	4a c0       	rjmp	.+148    	; 0x1dfc <Endpoint_Write_Control_PStream_LE+0xf0>
		  break;

		if (Endpoint_IsINReady())
    1d68:	e9 d0       	rcall	.+466    	; 0x1f3c <Endpoint_IsINReady>
    1d6a:	88 23       	and	r24, r24
    1d6c:	c1 f1       	breq	.+112    	; 0x1dde <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1d6e:	80 91 83 24 	lds	r24, 0x2483
    1d72:	88 23       	and	r24, r24
    1d74:	7c f4       	brge	.+30     	; 0x1d94 <Endpoint_Write_Control_PStream_LE+0x88>
				  return USB_Endpoint_SelectedFIFO->Position;
    1d76:	e0 91 7f 24 	lds	r30, 0x247F
    1d7a:	f0 91 80 24 	lds	r31, 0x2480
    1d7e:	ef 5b       	subi	r30, 0xBF	; 191
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	e0 80       	ld	r14, Z
    1d84:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d86:	20 97       	sbiw	r28, 0x00	; 0
    1d88:	11 f1       	breq	.+68     	; 0x1dce <Endpoint_Write_Control_PStream_LE+0xc2>
    1d8a:	88 e0       	ldi	r24, 0x08	; 8
    1d8c:	e8 16       	cp	r14, r24
    1d8e:	f1 04       	cpc	r15, r1
    1d90:	78 f0       	brcs	.+30     	; 0x1db0 <Endpoint_Write_Control_PStream_LE+0xa4>
    1d92:	1d c0       	rjmp	.+58     	; 0x1dce <Endpoint_Write_Control_PStream_LE+0xc2>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1d94:	80 91 7f 24 	lds	r24, 0x247F
    1d98:	90 91 80 24 	lds	r25, 0x2480
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e0 5c       	subi	r30, 0xC0	; 192
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	e0 80       	ld	r14, Z
    1da4:	31 96       	adiw	r30, 0x01	; 1
    1da6:	80 81       	ld	r24, Z
    1da8:	f1 2c       	mov	r15, r1
    1daa:	e8 1a       	sub	r14, r24
    1dac:	f1 08       	sbc	r15, r1
    1dae:	eb cf       	rjmp	.-42     	; 0x1d86 <Endpoint_Write_Control_PStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1db0:	f8 01       	movw	r30, r16
    1db2:	84 91       	lpm	r24, Z
    1db4:	73 d0       	rcall	.+230    	; 0x1e9c <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1db6:	0f 5f       	subi	r16, 0xFF	; 255
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1dba:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1dbc:	ff ef       	ldi	r31, 0xFF	; 255
    1dbe:	ef 1a       	sub	r14, r31
    1dc0:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1dc2:	20 97       	sbiw	r28, 0x00	; 0
    1dc4:	21 f0       	breq	.+8      	; 0x1dce <Endpoint_Write_Control_PStream_LE+0xc2>
    1dc6:	88 e0       	ldi	r24, 0x08	; 8
    1dc8:	e8 16       	cp	r14, r24
    1dca:	f1 04       	cpc	r15, r1
    1dcc:	89 f7       	brne	.-30     	; 0x1db0 <Endpoint_Write_Control_PStream_LE+0xa4>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1dce:	dd 24       	eor	r13, r13
    1dd0:	d3 94       	inc	r13
    1dd2:	e8 e0       	ldi	r30, 0x08	; 8
    1dd4:	ee 16       	cp	r14, r30
    1dd6:	f1 04       	cpc	r15, r1
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <Endpoint_Write_Control_PStream_LE+0xd0>
    1dda:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1ddc:	27 d0       	rcall	.+78     	; 0x1e2c <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1dde:	20 97       	sbiw	r28, 0x00	; 0
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <Endpoint_Write_Control_PStream_LE+0xd8>
    1de2:	b4 cf       	rjmp	.-152    	; 0x1d4c <Endpoint_Write_Control_PStream_LE+0x40>
    1de4:	d1 10       	cpse	r13, r1
    1de6:	b2 cf       	rjmp	.-156    	; 0x1d4c <Endpoint_Write_Control_PStream_LE+0x40>
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <Endpoint_Write_Control_PStream_LE+0xf0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1dea:	80 91 76 24 	lds	r24, 0x2476

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1dee:	88 23       	and	r24, r24
    1df0:	81 f0       	breq	.+32     	; 0x1e12 <Endpoint_Write_Control_PStream_LE+0x106>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1df2:	85 30       	cpi	r24, 0x05	; 5
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <Endpoint_Write_Control_PStream_LE+0x10a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1df6:	c7 d0       	rcall	.+398    	; 0x1f86 <Endpoint_IsSETUPReceived>
    1df8:	81 11       	cpse	r24, r1
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <Endpoint_Write_Control_PStream_LE+0x10e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1dfc:	ab d0       	rcall	.+342    	; 0x1f54 <Endpoint_IsOUTReceived>
    1dfe:	88 23       	and	r24, r24
    1e00:	a1 f3       	breq	.-24     	; 0x1dea <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0b c0       	rjmp	.+22     	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x110>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x110>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	07 c0       	rjmp	.+14     	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x110>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	05 c0       	rjmp	.+10     	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x110>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x110>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x110>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	df 90       	pop	r13
    1e2a:	08 95       	ret

00001e2c <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1e2c:	e0 91 81 24 	lds	r30, 0x2481
    1e30:	f0 91 82 24 	lds	r31, 0x2482
    1e34:	a0 91 7f 24 	lds	r26, 0x247F
    1e38:	b0 91 80 24 	lds	r27, 0x2480
    1e3c:	af 5b       	subi	r26, 0xBF	; 191
    1e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e40:	8c 91       	ld	r24, X
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	82 83       	std	Z+2, r24	; 0x02
    1e46:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1e48:	80 81       	ld	r24, Z
    1e4a:	8d 79       	andi	r24, 0x9D	; 157
    1e4c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1e4e:	e0 91 7f 24 	lds	r30, 0x247F
    1e52:	f0 91 80 24 	lds	r31, 0x2480
    1e56:	ef 5b       	subi	r30, 0xBF	; 191
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	10 82       	st	Z, r1
    1e5c:	08 95       	ret

00001e5e <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1e5e:	e0 91 81 24 	lds	r30, 0x2481
    1e62:	f0 91 82 24 	lds	r31, 0x2482
    1e66:	80 81       	ld	r24, Z
    1e68:	8d 79       	andi	r24, 0x9D	; 157
    1e6a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1e6c:	e0 91 7f 24 	lds	r30, 0x247F
    1e70:	f0 91 80 24 	lds	r31, 0x2480
    1e74:	ef 5b       	subi	r30, 0xBF	; 191
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	10 82       	st	Z, r1
    1e7a:	08 95       	ret

00001e7c <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1e7c:	80 91 7f 24 	lds	r24, 0x247F
    1e80:	90 91 80 24 	lds	r25, 0x2480
    1e84:	fc 01       	movw	r30, r24
    1e86:	ef 5b       	subi	r30, 0xBF	; 191
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	20 81       	ld	r18, Z
    1e8c:	31 e0       	ldi	r19, 0x01	; 1
    1e8e:	32 0f       	add	r19, r18
    1e90:	30 83       	st	Z, r19
    1e92:	fc 01       	movw	r30, r24
    1e94:	e2 0f       	add	r30, r18
    1e96:	f1 1d       	adc	r31, r1
    1e98:	80 81       	ld	r24, Z
}
    1e9a:	08 95       	ret

00001e9c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1e9c:	20 91 7f 24 	lds	r18, 0x247F
    1ea0:	30 91 80 24 	lds	r19, 0x2480
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	ef 5b       	subi	r30, 0xBF	; 191
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	90 81       	ld	r25, Z
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	49 0f       	add	r20, r25
    1eb0:	40 83       	st	Z, r20
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	e9 0f       	add	r30, r25
    1eb6:	f1 1d       	adc	r31, r1
    1eb8:	80 83       	st	Z, r24
    1eba:	08 95       	ret

00001ebc <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1ebc:	80 93 83 24 	sts	0x2483, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    1ec6:	40 91 c6 04 	lds	r20, 0x04C6
    1eca:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1ece:	88 23       	and	r24, r24
    1ed0:	e4 f4       	brge	.+56     	; 0x1f0a <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1ed2:	64 e8       	ldi	r22, 0x84	; 132
    1ed4:	62 9f       	mul	r22, r18
    1ed6:	c0 01       	movw	r24, r0
    1ed8:	63 9f       	mul	r22, r19
    1eda:	90 0d       	add	r25, r0
    1edc:	11 24       	eor	r1, r1
    1ede:	8a 53       	subi	r24, 0x3A	; 58
    1ee0:	9b 4d       	sbci	r25, 0xDB	; 219
    1ee2:	80 93 7f 24 	sts	0x247F, r24
    1ee6:	90 93 80 24 	sts	0x2480, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    1eea:	c9 01       	movw	r24, r18
    1eec:	82 95       	swap	r24
    1eee:	92 95       	swap	r25
    1ef0:	90 7f       	andi	r25, 0xF0	; 240
    1ef2:	98 27       	eor	r25, r24
    1ef4:	80 7f       	andi	r24, 0xF0	; 240
    1ef6:	98 27       	eor	r25, r24
    1ef8:	08 96       	adiw	r24, 0x08	; 8
    1efa:	9a 01       	movw	r18, r20
    1efc:	28 0f       	add	r18, r24
    1efe:	39 1f       	adc	r19, r25
    1f00:	20 93 81 24 	sts	0x2481, r18
    1f04:	30 93 82 24 	sts	0x2482, r19
    1f08:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1f0a:	64 e8       	ldi	r22, 0x84	; 132
    1f0c:	62 9f       	mul	r22, r18
    1f0e:	c0 01       	movw	r24, r0
    1f10:	63 9f       	mul	r22, r19
    1f12:	90 0d       	add	r25, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	8c 57       	subi	r24, 0x7C	; 124
    1f18:	9b 4d       	sbci	r25, 0xDB	; 219
    1f1a:	80 93 7f 24 	sts	0x247F, r24
    1f1e:	90 93 80 24 	sts	0x2480, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    1f22:	22 95       	swap	r18
    1f24:	32 95       	swap	r19
    1f26:	30 7f       	andi	r19, 0xF0	; 240
    1f28:	32 27       	eor	r19, r18
    1f2a:	20 7f       	andi	r18, 0xF0	; 240
    1f2c:	32 27       	eor	r19, r18
    1f2e:	24 0f       	add	r18, r20
    1f30:	35 1f       	adc	r19, r21
    1f32:	20 93 81 24 	sts	0x2481, r18
    1f36:	30 93 82 24 	sts	0x2482, r19
    1f3a:	08 95       	ret

00001f3c <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1f3c:	80 91 83 24 	lds	r24, 0x2483
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	bc df       	rcall	.-136    	; 0x1ebc <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1f44:	e0 91 81 24 	lds	r30, 0x2481
    1f48:	f0 91 82 24 	lds	r31, 0x2482
    1f4c:	80 81       	ld	r24, Z
}
    1f4e:	86 95       	lsr	r24
    1f50:	81 70       	andi	r24, 0x01	; 1
    1f52:	08 95       	ret

00001f54 <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1f54:	80 91 83 24 	lds	r24, 0x2483
    1f58:	8f 77       	andi	r24, 0x7F	; 127
    1f5a:	b0 df       	rcall	.-160    	; 0x1ebc <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1f5c:	e0 91 81 24 	lds	r30, 0x2481
    1f60:	f0 91 82 24 	lds	r31, 0x2482
    1f64:	80 81       	ld	r24, Z
    1f66:	85 ff       	sbrs	r24, 5
    1f68:	0c c0       	rjmp	.+24     	; 0x1f82 <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1f6a:	80 91 7f 24 	lds	r24, 0x247F
    1f6e:	90 91 80 24 	lds	r25, 0x2480
    1f72:	22 81       	ldd	r18, Z+2	; 0x02
    1f74:	33 81       	ldd	r19, Z+3	; 0x03
    1f76:	fc 01       	movw	r30, r24
    1f78:	e0 5c       	subi	r30, 0xC0	; 192
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	20 83       	st	Z, r18
		return true;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	08 95       	ret
	}

	return false;
    1f82:	80 e0       	ldi	r24, 0x00	; 0
}
    1f84:	08 95       	ret

00001f86 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1f86:	80 91 83 24 	lds	r24, 0x2483
    1f8a:	8f 77       	andi	r24, 0x7F	; 127
    1f8c:	97 df       	rcall	.-210    	; 0x1ebc <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1f8e:	e0 91 81 24 	lds	r30, 0x2481
    1f92:	f0 91 82 24 	lds	r31, 0x2482
    1f96:	80 81       	ld	r24, Z
    1f98:	84 ff       	sbrs	r24, 4
    1f9a:	0c c0       	rjmp	.+24     	; 0x1fb4 <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1f9c:	80 91 7f 24 	lds	r24, 0x247F
    1fa0:	90 91 80 24 	lds	r25, 0x2480
    1fa4:	22 81       	ldd	r18, Z+2	; 0x02
    1fa6:	33 81       	ldd	r19, Z+3	; 0x03
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e0 5c       	subi	r30, 0xC0	; 192
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	20 83       	st	Z, r18
		return true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	08 95       	ret
	}

	return false;
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
}
    1fb6:	08 95       	ret

00001fb8 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1fb8:	80 91 83 24 	lds	r24, 0x2483
    1fbc:	8f 77       	andi	r24, 0x7F	; 127
    1fbe:	7e df       	rcall	.-260    	; 0x1ebc <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1fc0:	e0 91 81 24 	lds	r30, 0x2481
    1fc4:	f0 91 82 24 	lds	r31, 0x2482
    1fc8:	80 81       	ld	r24, Z
    1fca:	8d 78       	andi	r24, 0x8D	; 141
    1fcc:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1fce:	e0 91 81 24 	lds	r30, 0x2481
    1fd2:	f0 91 82 24 	lds	r31, 0x2482
    1fd6:	80 81       	ld	r24, Z
    1fd8:	81 60       	ori	r24, 0x01	; 1
    1fda:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1fdc:	e0 91 7f 24 	lds	r30, 0x247F
    1fe0:	f0 91 80 24 	lds	r31, 0x2480
    1fe4:	ef 5b       	subi	r30, 0xBF	; 191
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1fea:	80 91 83 24 	lds	r24, 0x2483
    1fee:	80 68       	ori	r24, 0x80	; 128
    1ff0:	65 df       	rcall	.-310    	; 0x1ebc <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1ff2:	e0 91 81 24 	lds	r30, 0x2481
    1ff6:	f0 91 82 24 	lds	r31, 0x2482
    1ffa:	80 81       	ld	r24, Z
    1ffc:	81 60       	ori	r24, 0x01	; 1
    1ffe:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    2000:	e0 91 7f 24 	lds	r30, 0x247F
    2004:	f0 91 80 24 	lds	r31, 0x2480
    2008:	ef 5b       	subi	r30, 0xBF	; 191
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	10 82       	st	Z, r1
    200e:	08 95       	ret

00002010 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    2010:	e0 91 81 24 	lds	r30, 0x2481
    2014:	f0 91 82 24 	lds	r31, 0x2482
    2018:	81 81       	ldd	r24, Z+1	; 0x01
    201a:	84 60       	ori	r24, 0x04	; 4
    201c:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    201e:	e0 91 81 24 	lds	r30, 0x2481
    2022:	f0 91 82 24 	lds	r31, 0x2482
    2026:	81 81       	ldd	r24, Z+1	; 0x01
    2028:	80 7c       	andi	r24, 0xC0	; 192
    202a:	80 34       	cpi	r24, 0x40	; 64
    202c:	59 f4       	brne	.+22     	; 0x2044 <Endpoint_StallTransaction+0x34>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    202e:	80 91 83 24 	lds	r24, 0x2483
    2032:	80 58       	subi	r24, 0x80	; 128
    2034:	43 df       	rcall	.-378    	; 0x1ebc <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    2036:	e0 91 81 24 	lds	r30, 0x2481
    203a:	f0 91 82 24 	lds	r31, 0x2482
    203e:	81 81       	ldd	r24, Z+1	; 0x01
    2040:	84 60       	ori	r24, 0x04	; 4
    2042:	81 83       	std	Z+1, r24	; 0x01
    2044:	08 95       	ret

00002046 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	d8 2f       	mov	r29, r24
    204e:	16 2f       	mov	r17, r22
    2050:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    2052:	34 df       	rcall	.-408    	; 0x1ebc <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    2054:	e0 91 81 24 	lds	r30, 0x2481
    2058:	f0 91 82 24 	lds	r31, 0x2482
    205c:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    205e:	e0 91 81 24 	lds	r30, 0x2481
    2062:	f0 91 82 24 	lds	r31, 0x2482
    2066:	dd 23       	and	r29, r29
    2068:	a4 f0       	brlt	.+40     	; 0x2092 <Endpoint_ConfigureEndpoint_PRV+0x4c>
    206a:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    206c:	e0 91 81 24 	lds	r30, 0x2481
    2070:	f0 91 82 24 	lds	r31, 0x2482
    2074:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    2076:	e0 91 81 24 	lds	r30, 0x2481
    207a:	f0 91 82 24 	lds	r31, 0x2482
    207e:	12 82       	std	Z+2, r1	; 0x02
    2080:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    2082:	80 91 7f 24 	lds	r24, 0x247F
    2086:	90 91 80 24 	lds	r25, 0x2480
    208a:	84 83       	std	Z+4, r24	; 0x04
    208c:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <Endpoint_ConfigureEndpoint_PRV+0x74>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    2096:	e0 91 81 24 	lds	r30, 0x2481
    209a:	f0 91 82 24 	lds	r31, 0x2482
    209e:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    20a0:	e0 91 81 24 	lds	r30, 0x2481
    20a4:	f0 91 82 24 	lds	r31, 0x2482
    20a8:	12 82       	std	Z+2, r1	; 0x02
    20aa:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    20ac:	80 91 7f 24 	lds	r24, 0x247F
    20b0:	90 91 80 24 	lds	r25, 0x2480
    20b4:	84 83       	std	Z+4, r24	; 0x04
    20b6:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    20b8:	4c 2f       	mov	r20, r28
    20ba:	fc 01       	movw	r30, r24
    20bc:	e0 5c       	subi	r30, 0xC0	; 192
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    20c2:	31 96       	adiw	r30, 0x01	; 1
    20c4:	10 82       	st	Z, r1

	return true;
}
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	08 95       	ret

000020d0 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    20e4:	66 23       	and	r22, r22
    20e6:	09 f4       	brne	.+2      	; 0x20ea <Endpoint_ConfigureEndpointTable+0x1a>
    20e8:	55 c0       	rjmp	.+170    	; 0x2194 <Endpoint_ConfigureEndpointTable+0xc4>
    20ea:	a6 2e       	mov	r10, r22
    20ec:	7c 01       	movw	r14, r24
    20ee:	8c 01       	movw	r16, r24
    20f0:	84 e0       	ldi	r24, 0x04	; 4
    20f2:	e8 0e       	add	r14, r24
    20f4:	f1 1c       	adc	r15, r1
    20f6:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    20f8:	f8 01       	movw	r30, r16
    20fa:	c0 80       	ld	r12, Z
    20fc:	cc 20       	and	r12, r12
    20fe:	09 f4       	brne	.+2      	; 0x2102 <Endpoint_ConfigureEndpointTable+0x32>
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <Endpoint_ConfigureEndpointTable+0xb0>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    2102:	c1 81       	ldd	r28, Z+1	; 0x01
    2104:	d2 81       	ldd	r29, Z+2	; 0x02
    2106:	f7 01       	movw	r30, r14
    2108:	31 97       	sbiw	r30, 0x01	; 1
    210a:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    210c:	f7 01       	movw	r30, r14
    210e:	90 81       	ld	r25, Z
    2110:	92 30       	cpi	r25, 0x02	; 2
    2112:	10 f4       	brcc	.+4      	; 0x2118 <Endpoint_ConfigureEndpointTable+0x48>
    2114:	48 e0       	ldi	r20, 0x08	; 8
    2116:	01 c0       	rjmp	.+2      	; 0x211a <Endpoint_ConfigureEndpointTable+0x4a>
    2118:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    211a:	c9 30       	cpi	r28, 0x09	; 9
    211c:	d1 05       	cpc	r29, r1
    211e:	50 f0       	brcs	.+20     	; 0x2134 <Endpoint_ConfigureEndpointTable+0x64>
    2120:	28 e0       	ldi	r18, 0x08	; 8
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    2126:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    212c:	2c 17       	cp	r18, r28
    212e:	3d 07       	cpc	r19, r29
    2130:	d0 f3       	brcs	.-12     	; 0x2126 <Endpoint_ConfigureEndpointTable+0x56>
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    2134:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    2136:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    2138:	2c 2d       	mov	r18, r12
    213a:	2f 70       	andi	r18, 0x0F	; 15
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	25 30       	cpi	r18, 0x05	; 5
    2140:	31 05       	cpc	r19, r1
    2142:	54 f5       	brge	.+84     	; 0x2198 <Endpoint_ConfigureEndpointTable+0xc8>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    2144:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    2146:	c1 34       	cpi	r28, 0x41	; 65
    2148:	d1 05       	cpc	r29, r1
    214a:	40 f5       	brcc	.+80     	; 0x219c <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				switch (Type)
    214c:	88 23       	and	r24, r24
    214e:	19 f0       	breq	.+6      	; 0x2156 <Endpoint_ConfigureEndpointTable+0x86>
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	21 f0       	breq	.+8      	; 0x215c <Endpoint_ConfigureEndpointTable+0x8c>
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    2156:	90 64       	ori	r25, 0x40	; 64
    2158:	d9 2e       	mov	r13, r25
    215a:	07 c0       	rjmp	.+14     	; 0x216a <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    215c:	90 6c       	ori	r25, 0xC0	; 192
    215e:	d9 2e       	mov	r13, r25
    2160:	09 c0       	rjmp	.+18     	; 0x2174 <Endpoint_ConfigureEndpointTable+0xa4>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    2162:	90 68       	ori	r25, 0x80	; 128
    2164:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    2166:	81 11       	cpse	r24, r1
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <Endpoint_ConfigureEndpointTable+0xa4>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    216a:	4c 2f       	mov	r20, r28
    216c:	6d 2d       	mov	r22, r13
    216e:	80 e8       	ldi	r24, 0x80	; 128
    2170:	8c 0d       	add	r24, r12
    2172:	69 df       	rcall	.-302    	; 0x2046 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    2174:	4c 2f       	mov	r20, r28
    2176:	6d 2d       	mov	r22, r13
    2178:	8c 2d       	mov	r24, r12
    217a:	65 df       	rcall	.-310    	; 0x2046 <Endpoint_ConfigureEndpoint_PRV>
    217c:	88 23       	and	r24, r24
    217e:	79 f0       	breq	.+30     	; 0x219e <Endpoint_ConfigureEndpointTable+0xce>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    2180:	b3 94       	inc	r11
    2182:	0b 5f       	subi	r16, 0xFB	; 251
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	f5 e0       	ldi	r31, 0x05	; 5
    2188:	ef 0e       	add	r14, r31
    218a:	f1 1c       	adc	r15, r1
    218c:	ba 10       	cpse	r11, r10
    218e:	b4 cf       	rjmp	.-152    	; 0x20f8 <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	05 c0       	rjmp	.+10     	; 0x219e <Endpoint_ConfigureEndpointTable+0xce>
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	03 c0       	rjmp	.+6      	; 0x219e <Endpoint_ConfigureEndpointTable+0xce>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	01 c0       	rjmp	.+2      	; 0x219e <Endpoint_ConfigureEndpointTable+0xce>
    219c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	bf 90       	pop	r11
    21b0:	af 90       	pop	r10
    21b2:	08 95       	ret

000021b4 <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    21b8:	a0 ec       	ldi	r26, 0xC0	; 192
    21ba:	b4 e0       	ldi	r27, 0x04	; 4
    21bc:	16 96       	adiw	r26, 0x06	; 6
    21be:	ed 91       	ld	r30, X+
    21c0:	fc 91       	ld	r31, X
    21c2:	17 97       	sbiw	r26, 0x07	; 7
    21c4:	c9 01       	movw	r24, r18
    21c6:	82 95       	swap	r24
    21c8:	92 95       	swap	r25
    21ca:	90 7f       	andi	r25, 0xF0	; 240
    21cc:	98 27       	eor	r25, r24
    21ce:	80 7f       	andi	r24, 0xF0	; 240
    21d0:	98 27       	eor	r25, r24
    21d2:	e8 0f       	add	r30, r24
    21d4:	f9 1f       	adc	r31, r25
    21d6:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    21d8:	16 96       	adiw	r26, 0x06	; 6
    21da:	4d 91       	ld	r20, X+
    21dc:	5c 91       	ld	r21, X
    21de:	17 97       	sbiw	r26, 0x07	; 7
    21e0:	fa 01       	movw	r30, r20
    21e2:	e8 0f       	add	r30, r24
    21e4:	f9 1f       	adc	r31, r25
    21e6:	11 82       	std	Z+1, r1	; 0x01
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    21ec:	25 30       	cpi	r18, 0x05	; 5
    21ee:	31 05       	cpc	r19, r1
    21f0:	29 f7       	brne	.-54     	; 0x21bc <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    21f2:	08 95       	ret

000021f4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    21f4:	80 91 77 24 	lds	r24, 0x2477
    21f8:	88 23       	and	r24, r24
    21fa:	74 f4       	brge	.+28     	; 0x2218 <Endpoint_ClearStatusStage+0x24>
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    21fe:	80 91 76 24 	lds	r24, 0x2476
    2202:	88 23       	and	r24, r24
    2204:	69 f0       	breq	.+26     	; 0x2220 <Endpoint_ClearStatusStage+0x2c>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2206:	a6 de       	rcall	.-692    	; 0x1f54 <Endpoint_IsOUTReceived>
    2208:	88 23       	and	r24, r24
    220a:	c9 f3       	breq	.-14     	; 0x21fe <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    220c:	28 ce       	rjmp	.-944    	; 0x1e5e <Endpoint_ClearOUT>
    220e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2210:	80 91 76 24 	lds	r24, 0x2476
    2214:	88 23       	and	r24, r24
    2216:	21 f0       	breq	.+8      	; 0x2220 <Endpoint_ClearStatusStage+0x2c>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2218:	91 de       	rcall	.-734    	; 0x1f3c <Endpoint_IsINReady>
    221a:	88 23       	and	r24, r24
    221c:	c9 f3       	breq	.-14     	; 0x2210 <Endpoint_ClearStatusStage+0x1c>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    221e:	06 ce       	rjmp	.-1012   	; 0x1e2c <Endpoint_ClearIN>
    2220:	08 95       	ret

00002222 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    222c:	e0 91 c6 04 	lds	r30, 0x04C6
    2230:	f0 91 c7 04 	lds	r31, 0x04C7
    2234:	e0 5b       	subi	r30, 0xB0	; 176
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	c0 81       	ld	r28, Z
    223a:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    223c:	ff 24       	eor	r15, r15
    223e:	f3 94       	inc	r15
    2240:	00 ec       	ldi	r16, 0xC0	; 192
    2242:	14 e0       	ldi	r17, 0x04	; 4
    2244:	02 c0       	rjmp	.+4      	; 0x224a <Endpoint_WaitUntilReady+0x28>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2246:	f2 2e       	mov	r15, r18
    2248:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    224a:	80 91 83 24 	lds	r24, 0x2483

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    224e:	88 23       	and	r24, r24
    2250:	24 f4       	brge	.+8      	; 0x225a <Endpoint_WaitUntilReady+0x38>
		{
			if (Endpoint_IsINReady())
    2252:	74 de       	rcall	.-792    	; 0x1f3c <Endpoint_IsINReady>
    2254:	88 23       	and	r24, r24
    2256:	21 f0       	breq	.+8      	; 0x2260 <Endpoint_WaitUntilReady+0x3e>
    2258:	22 c0       	rjmp	.+68     	; 0x229e <Endpoint_WaitUntilReady+0x7c>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    225a:	7c de       	rcall	.-776    	; 0x1f54 <Endpoint_IsOUTReceived>
    225c:	81 11       	cpse	r24, r1
    225e:	21 c0       	rjmp	.+66     	; 0x22a2 <Endpoint_WaitUntilReady+0x80>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2260:	80 91 76 24 	lds	r24, 0x2476

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2264:	88 23       	and	r24, r24
    2266:	f9 f0       	breq	.+62     	; 0x22a6 <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2268:	85 30       	cpi	r24, 0x05	; 5
    226a:	f9 f0       	breq	.+62     	; 0x22aa <Endpoint_WaitUntilReady+0x88>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    226c:	e0 91 81 24 	lds	r30, 0x2481
    2270:	f0 91 82 24 	lds	r31, 0x2482
    2274:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2276:	82 fd       	sbrc	r24, 2
    2278:	1a c0       	rjmp	.+52     	; 0x22ae <Endpoint_WaitUntilReady+0x8c>
    227a:	d8 01       	movw	r26, r16
    227c:	16 96       	adiw	r26, 0x06	; 6
    227e:	ed 91       	ld	r30, X+
    2280:	fc 91       	ld	r31, X
    2282:	17 97       	sbiw	r26, 0x07	; 7
    2284:	e0 5b       	subi	r30, 0xB0	; 176
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    228c:	c8 17       	cp	r28, r24
    228e:	d9 07       	cpc	r29, r25
    2290:	d9 f2       	breq	.-74     	; 0x2248 <Endpoint_WaitUntilReady+0x26>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2292:	2f ef       	ldi	r18, 0xFF	; 255
    2294:	2f 0d       	add	r18, r15
    2296:	f1 10       	cpse	r15, r1
    2298:	d6 cf       	rjmp	.-84     	; 0x2246 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	09 c0       	rjmp	.+18     	; 0x22b0 <Endpoint_WaitUntilReady+0x8e>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <Endpoint_WaitUntilReady+0x8e>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	05 c0       	rjmp	.+10     	; 0x22b0 <Endpoint_WaitUntilReady+0x8e>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <Endpoint_WaitUntilReady+0x8e>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <Endpoint_WaitUntilReady+0x8e>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    22ae:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	08 95       	ret

000022bc <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    22c0:	e0 e4       	ldi	r30, 0x40	; 64
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    22c6:	84 81       	ldd	r24, Z+4	; 0x04
    22c8:	83 60       	ori	r24, 0x03	; 3
    22ca:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    22cc:	50 d0       	rcall	.+160    	; 0x236e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    22ce:	56 d0       	rcall	.+172    	; 0x237c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    22d0:	c0 ec       	ldi	r28, 0xC0	; 192
    22d2:	d4 e0       	ldi	r29, 0x04	; 4
    22d4:	88 81       	ld	r24, Y
    22d6:	8f 77       	andi	r24, 0x7F	; 127
    22d8:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    22da:	88 81       	ld	r24, Y
    22dc:	80 68       	ori	r24, 0x80	; 128
    22de:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    22e0:	10 92 76 24 	sts	0x2476, r1
	USB_Device_ConfigurationNumber  = 0;
    22e4:	10 92 72 24 	sts	0x2472, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    22e8:	10 92 74 24 	sts	0x2474, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    22ec:	10 92 73 24 	sts	0x2473, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    22f0:	88 81       	ld	r24, Y
    22f2:	80 64       	ori	r24, 0x40	; 64
    22f4:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    22f6:	48 e0       	ldi	r20, 0x08	; 8
    22f8:	68 e4       	ldi	r22, 0x48	; 72
    22fa:	80 e8       	ldi	r24, 0x80	; 128
    22fc:	a4 de       	rcall	.-696    	; 0x2046 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    22fe:	48 e0       	ldi	r20, 0x08	; 8
    2300:	68 e4       	ldi	r22, 0x48	; 72
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	a0 de       	rcall	.-704    	; 0x2046 <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    2306:	88 85       	ldd	r24, Y+8	; 0x08
    2308:	80 64       	ori	r24, 0x40	; 64
    230a:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	81 60       	ori	r24, 0x01	; 1
    2310:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    231c:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    231e:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    2320:	c0 ec       	ldi	r28, 0xC0	; 192
    2322:	d1 e0       	ldi	r29, 0x01	; 1
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    2328:	ea e1       	ldi	r30, 0x1A	; 26
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	e4 91       	lpm	r30, Z
    232e:	a0 ec       	ldi	r26, 0xC0	; 192
    2330:	b4 e0       	ldi	r27, 0x04	; 4
    2332:	da 96       	adiw	r26, 0x3a	; 58
    2334:	ec 93       	st	X, r30
    2336:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    2338:	eb e1       	ldi	r30, 0x1B	; 27
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	e4 91       	lpm	r30, Z
    233e:	db 96       	adiw	r26, 0x3b	; 59
    2340:	ec 93       	st	X, r30
    2342:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    2344:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    2346:	89 e1       	ldi	r24, 0x19	; 25
    2348:	97 e2       	ldi	r25, 0x27	; 39
    234a:	8e 7f       	andi	r24, 0xFE	; 254
    234c:	16 96       	adiw	r26, 0x06	; 6
    234e:	8d 93       	st	X+, r24
    2350:	9c 93       	st	X, r25
    2352:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    2354:	84 e1       	ldi	r24, 0x14	; 20
    2356:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    2358:	83 e0       	ldi	r24, 0x03	; 3
    235a:	18 96       	adiw	r26, 0x08	; 8
    235c:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    235e:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	80 93 75 24 	sts	0x2475, r24

	USB_ResetInterface();
    2366:	aa df       	rcall	.-172    	; 0x22bc <USB_ResetInterface>
}
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    236e:	e0 ec       	ldi	r30, 0xC0	; 192
    2370:	f4 e0       	ldi	r31, 0x04	; 4
    2372:	80 85       	ldd	r24, Z+8	; 0x08
    2374:	83 70       	andi	r24, 0x03	; 3
    2376:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    2378:	11 86       	std	Z+9, r1	; 0x09
    237a:	08 95       	ret

0000237c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    237c:	e0 ec       	ldi	r30, 0xC0	; 192
    237e:	f4 e0       	ldi	r31, 0x04	; 4
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    2384:	84 87       	std	Z+12, r24	; 0x0c
    2386:	08 95       	ret

00002388 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	08 b6       	in	r0, 0x38	; 56
    2394:	0f 92       	push	r0
    2396:	18 be       	out	0x38, r1	; 56
    2398:	09 b6       	in	r0, 0x39	; 57
    239a:	0f 92       	push	r0
    239c:	19 be       	out	0x39, r1	; 57
    239e:	0b b6       	in	r0, 0x3b	; 59
    23a0:	0f 92       	push	r0
    23a2:	1b be       	out	0x3b, r1	; 59
    23a4:	2f 93       	push	r18
    23a6:	3f 93       	push	r19
    23a8:	4f 93       	push	r20
    23aa:	5f 93       	push	r21
    23ac:	6f 93       	push	r22
    23ae:	7f 93       	push	r23
    23b0:	8f 93       	push	r24
    23b2:	9f 93       	push	r25
    23b4:	af 93       	push	r26
    23b6:	bf 93       	push	r27
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    23bc:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    23c0:	86 ff       	sbrs	r24, 6
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <__vector_125+0x4a>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    23c4:	80 e4       	ldi	r24, 0x40	; 64
    23c6:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    23ca:	10 92 76 24 	sts	0x2476, r1
		EVENT_USB_Device_Disconnect();
    23ce:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    23d2:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    23d6:	85 ff       	sbrs	r24, 5
    23d8:	16 c0       	rjmp	.+44     	; 0x2406 <__vector_125+0x7e>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    23da:	80 e2       	ldi	r24, 0x20	; 32
    23dc:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    23e0:	80 91 72 24 	lds	r24, 0x2472
    23e4:	88 23       	and	r24, r24
    23e6:	21 f0       	breq	.+8      	; 0x23f0 <__vector_125+0x68>
		  USB_DeviceState = DEVICE_STATE_Configured;
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	80 93 76 24 	sts	0x2476, r24
    23ee:	09 c0       	rjmp	.+18     	; 0x2402 <__vector_125+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    23f0:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    23f4:	81 11       	cpse	r24, r1
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <__vector_125+0x74>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <__vector_125+0x76>
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	80 93 76 24 	sts	0x2476, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    2402:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    2406:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    240a:	84 ff       	sbrs	r24, 4
    240c:	15 c0       	rjmp	.+42     	; 0x2438 <__vector_125+0xb0>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    240e:	e0 ec       	ldi	r30, 0xC0	; 192
    2410:	f4 e0       	ldi	r31, 0x04	; 4
    2412:	80 e1       	ldi	r24, 0x10	; 16
    2414:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	80 93 76 24 	sts	0x2476, r24
		USB_Device_ConfigurationNumber = 0;
    241c:	10 92 72 24 	sts	0x2472, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    2420:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    2422:	c8 de       	rcall	.-624    	; 0x21b4 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    2424:	48 e0       	ldi	r20, 0x08	; 8
    2426:	68 e4       	ldi	r22, 0x48	; 72
    2428:	80 e8       	ldi	r24, 0x80	; 128
    242a:	0d de       	rcall	.-998    	; 0x2046 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    242c:	48 e0       	ldi	r20, 0x08	; 8
    242e:	68 e4       	ldi	r22, 0x48	; 72
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	09 de       	rcall	.-1006   	; 0x2046 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    2434:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <EVENT_USB_Device_Reset>
	}
}
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	bf 91       	pop	r27
    243e:	af 91       	pop	r26
    2440:	9f 91       	pop	r25
    2442:	8f 91       	pop	r24
    2444:	7f 91       	pop	r23
    2446:	6f 91       	pop	r22
    2448:	5f 91       	pop	r21
    244a:	4f 91       	pop	r20
    244c:	3f 91       	pop	r19
    244e:	2f 91       	pop	r18
    2450:	0f 90       	pop	r0
    2452:	0b be       	out	0x3b, r0	; 59
    2454:	0f 90       	pop	r0
    2456:	09 be       	out	0x39, r0	; 57
    2458:	0f 90       	pop	r0
    245a:	08 be       	out	0x38, r0	; 56
    245c:	0f 90       	pop	r0
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	0f 90       	pop	r0
    2462:	1f 90       	pop	r1
    2464:	18 95       	reti

00002466 <main>:


int main()
{
	// Initialization
	initHardware();
    2466:	af d7       	rcall	.+3934   	; 0x33c6 <initHardware>
	
	// Start Timer Events
	//eventAdd(5000,				-1, &led);
	eventAdd(1000,				-1, &adcMeasure);
    2468:	2b ec       	ldi	r18, 0xCB	; 203
    246a:	37 e0       	ldi	r19, 0x07	; 7
    246c:	4f ef       	ldi	r20, 0xFF	; 255
    246e:	68 ee       	ldi	r22, 0xE8	; 232
    2470:	73 e0       	ldi	r23, 0x03	; 3
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	eventAdd(125,				-1, &TMP112Read);
    247a:	2c ed       	ldi	r18, 0xDC	; 220
    247c:	3c e1       	ldi	r19, 0x1C	; 28
    247e:	4f ef       	ldi	r20, 0xFF	; 255
    2480:	6d e7       	ldi	r22, 0x7D	; 125
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	//eventAdd(500,				-1, &RX8900Read);
	eventAdd(1000,				-1, &ledController);
    248c:	28 e7       	ldi	r18, 0x78	; 120
    248e:	3d e1       	ldi	r19, 0x1D	; 29
    2490:	4f ef       	ldi	r20, 0xFF	; 255
    2492:	68 ee       	ldi	r22, 0xE8	; 232
    2494:	73 e0       	ldi	r23, 0x03	; 3
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	eventAdd((uint32_t)1000 * 120,		-1, &roomReset);				// Return to main menu after few min of inactivity
    249e:	2f e6       	ldi	r18, 0x6F	; 111
    24a0:	35 e1       	ldi	r19, 0x15	; 21
    24a2:	4f ef       	ldi	r20, 0xFF	; 255
    24a4:	60 ec       	ldi	r22, 0xC0	; 192
    24a6:	74 ed       	ldi	r23, 0xD4	; 212
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	eventAdd(3000,				-1, &roomClean);				// Clean screen after few sec of inactivity
    24b0:	24 e5       	ldi	r18, 0x54	; 84
    24b2:	35 e1       	ldi	r19, 0x15	; 21
    24b4:	4f ef       	ldi	r20, 0xFF	; 255
    24b6:	68 eb       	ldi	r22, 0xB8	; 184
    24b8:	7b e0       	ldi	r23, 0x0B	; 11
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	eventAdd(100,				-1, &roomKeys);					// Read USB input
    24c2:	21 ed       	ldi	r18, 0xD1	; 209
    24c4:	35 e1       	ldi	r19, 0x15	; 21
    24c6:	4f ef       	ldi	r20, 0xFF	; 255
    24c8:	64 e6       	ldi	r22, 0x64	; 100
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	eventAdd(1000,				-1, &roomPrintDeviceStuff);		// Update UI top screen
    24d4:	21 e1       	ldi	r18, 0x11	; 17
    24d6:	34 e1       	ldi	r19, 0x14	; 20
    24d8:	4f ef       	ldi	r20, 0xFF	; 255
    24da:	68 ee       	ldi	r22, 0xE8	; 232
    24dc:	73 e0       	ldi	r23, 0x03	; 3
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	eventAdd(1000,				-1, &roomPrintMenus);			// Update UI menus
    24e6:	2a eb       	ldi	r18, 0xBA	; 186
    24e8:	32 e1       	ldi	r19, 0x12	; 18
    24ea:	4f ef       	ldi	r20, 0xFF	; 255
    24ec:	68 ee       	ldi	r22, 0xE8	; 232
    24ee:	73 e0       	ldi	r23, 0x03	; 3
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
	//eventAdd(1000,				-1, &psuVoltageController);		//
	eventAdd((uint32_t)1000 * 900,		-1, &writeTimeToEE);			// Save every 15 min: 35k/y cycles
    24f8:	20 eb       	ldi	r18, 0xB0	; 176
    24fa:	35 e1       	ldi	r19, 0x15	; 21
    24fc:	4f ef       	ldi	r20, 0xFF	; 255
    24fe:	60 ea       	ldi	r22, 0xA0	; 160
    2500:	7b eb       	ldi	r23, 0xBB	; 187
    2502:	8d e0       	ldi	r24, 0x0D	; 13
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eventAdd>
// 	eventAdd(5000,				-1, &alarmCheck);				//
// 	eventAdd((uint32_t)1000 * 10,		-1, &alarmCancelButton);		//
// 	eventAdd((uint32_t)1000 * 3600 * 3,	-1, &alarmSetChannel);		//
	
	// Infinite loop
	eventControllerLoop(); 
    250a:	0e 94 87 28 	call	0x510e	; 0x510e <eventControllerLoop>
}
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	08 95       	ret

00002514 <psuVoltageController>:
	everythingData.busy = true;
	everythingData.len = len;
	
	// Start DMA controller
	//dmaCopy(everythingData.str, USARTC0.DATA, DMA_CH_TRIGSRC_USARTC0_DRE_gc, DMA_CH_BURSTLEN_1BYTE_gc, 16, 1, DMA_CH_TRNINTLVL_OFF_gc);
}
    2514:	08 95       	ret

00002516 <alarmCancelButton>:
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	00 d0       	rcall	.+0      	; 0x2520 <alarmCancelButton+0xa>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <alarmCancelButton+0xc>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	8e 01       	movw	r16, r28
    2528:	0f 5f       	subi	r16, 0xFF	; 255
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	86 e0       	ldi	r24, 0x06	; 6
    252e:	f8 01       	movw	r30, r16
    2530:	11 92       	st	Z+, r1
    2532:	8a 95       	dec	r24
    2534:	e9 f7       	brne	.-6      	; 0x2530 <alarmCancelButton+0x1a>
    2536:	80 91 bc 20 	lds	r24, 0x20BC
    253a:	90 91 bd 20 	lds	r25, 0x20BD
    253e:	8a 83       	std	Y+2, r24	; 0x02
    2540:	9b 83       	std	Y+3, r25	; 0x03
    2542:	8a e0       	ldi	r24, 0x0A	; 10
    2544:	8e 83       	std	Y+6, r24	; 0x06
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	c8 01       	movw	r24, r16
    254c:	0e 94 d5 22 	call	0x45aa	; 0x45aa <remoteSendCommand>
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	c8 01       	movw	r24, r16
    2556:	0e 94 d5 22 	call	0x45aa	; 0x45aa <remoteSendCommand>
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	c8 01       	movw	r24, r16
    2560:	0e 94 d5 22 	call	0x45aa	; 0x45aa <remoteSendCommand>
    2564:	26 96       	adiw	r28, 0x06	; 6
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	08 95       	ret

00002574 <roomPrintMenus>:
    2574:	cf 92       	push	r12
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0e 94 41 09 	call	0x1282	; 0x1282 <appUISetUI>
    258a:	80 91 84 23 	lds	r24, 0x2384
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	f9 f0       	breq	.+62     	; 0x25d0 <roomPrintMenus+0x5c>
    2592:	83 30       	cpi	r24, 0x03	; 3
    2594:	09 f4       	brne	.+2      	; 0x2598 <roomPrintMenus+0x24>
    2596:	9c c0       	rjmp	.+312    	; 0x26d0 <roomPrintMenus+0x15c>
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	09 f0       	breq	.+2      	; 0x259e <roomPrintMenus+0x2a>
    259c:	2e c1       	rjmp	.+604    	; 0x27fa <roomPrintMenus+0x286>
    259e:	88 e4       	ldi	r24, 0x48	; 72
    25a0:	96 e0       	ldi	r25, 0x06	; 6
    25a2:	9f 93       	push	r25
    25a4:	8f 93       	push	r24
    25a6:	c2 e0       	ldi	r28, 0x02	; 2
    25a8:	cf 93       	push	r28
    25aa:	89 e0       	ldi	r24, 0x09	; 9
    25ac:	8f 93       	push	r24
    25ae:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    25b2:	8d e2       	ldi	r24, 0x2D	; 45
    25b4:	96 e0       	ldi	r25, 0x06	; 6
    25b6:	9f 93       	push	r25
    25b8:	8f 93       	push	r24
    25ba:	cf 93       	push	r28
    25bc:	8a e0       	ldi	r24, 0x0A	; 10
    25be:	8f 93       	push	r24
    25c0:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    25c4:	8d b7       	in	r24, 0x3d	; 61
    25c6:	9e b7       	in	r25, 0x3e	; 62
    25c8:	08 96       	adiw	r24, 0x08	; 8
    25ca:	8d bf       	out	0x3d, r24	; 61
    25cc:	9e bf       	out	0x3e, r25	; 62
    25ce:	1d c1       	rjmp	.+570    	; 0x280a <roomPrintMenus+0x296>
    25d0:	8d e0       	ldi	r24, 0x0D	; 13
    25d2:	96 e0       	ldi	r25, 0x06	; 6
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	c2 e0       	ldi	r28, 0x02	; 2
    25da:	cf 93       	push	r28
    25dc:	0f 2e       	mov	r0, r31
    25de:	f9 e0       	ldi	r31, 0x09	; 9
    25e0:	ff 2e       	mov	r15, r31
    25e2:	f0 2d       	mov	r31, r0
    25e4:	ff 92       	push	r15
    25e6:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    25ea:	09 e1       	ldi	r16, 0x19	; 25
    25ec:	10 e2       	ldi	r17, 0x20	; 32
    25ee:	f8 01       	movw	r30, r16
    25f0:	d4 85       	ldd	r29, Z+12	; 0x0c
    25f2:	e5 84       	ldd	r14, Z+13	; 0x0d
    25f4:	d6 84       	ldd	r13, Z+14	; 0x0e
    25f6:	c7 84       	ldd	r12, Z+15	; 0x0f
    25f8:	0e 94 24 1c 	call	0x3848	; 0x3848 <freeRam>
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ef 92       	push	r14
    2602:	df 93       	push	r29
    2604:	9f 93       	push	r25
    2606:	8f 93       	push	r24
    2608:	f8 01       	movw	r30, r16
    260a:	81 89       	ldd	r24, Z+17	; 0x11
    260c:	1f 92       	push	r1
    260e:	8f 93       	push	r24
    2610:	8f ee       	ldi	r24, 0xEF	; 239
    2612:	95 e0       	ldi	r25, 0x05	; 5
    2614:	9f 93       	push	r25
    2616:	8f 93       	push	r24
    2618:	d9 e2       	ldi	r29, 0x29	; 41
    261a:	df 93       	push	r29
    261c:	ff 92       	push	r15
    261e:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2622:	84 ee       	ldi	r24, 0xE4	; 228
    2624:	95 e0       	ldi	r25, 0x05	; 5
    2626:	9f 93       	push	r25
    2628:	8f 93       	push	r24
    262a:	cf 93       	push	r28
    262c:	0f 2e       	mov	r0, r31
    262e:	fb e0       	ldi	r31, 0x0B	; 11
    2630:	ff 2e       	mov	r15, r31
    2632:	f0 2d       	mov	r31, r0
    2634:	ff 92       	push	r15
    2636:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    263a:	89 ed       	ldi	r24, 0xD9	; 217
    263c:	95 e0       	ldi	r25, 0x05	; 5
    263e:	9f 93       	push	r25
    2640:	8f 93       	push	r24
    2642:	cf 93       	push	r28
    2644:	0c e0       	ldi	r16, 0x0C	; 12
    2646:	0f 93       	push	r16
    2648:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    264c:	8d ec       	ldi	r24, 0xCD	; 205
    264e:	95 e0       	ldi	r25, 0x05	; 5
    2650:	9f 93       	push	r25
    2652:	8f 93       	push	r24
    2654:	cf 93       	push	r28
    2656:	1d e0       	ldi	r17, 0x0D	; 13
    2658:	1f 93       	push	r17
    265a:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    265e:	82 ec       	ldi	r24, 0xC2	; 194
    2660:	95 e0       	ldi	r25, 0x05	; 5
    2662:	9f 93       	push	r25
    2664:	8f 93       	push	r24
    2666:	cf 93       	push	r28
    2668:	8e e0       	ldi	r24, 0x0E	; 14
    266a:	8f 93       	push	r24
    266c:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2670:	8d b7       	in	r24, 0x3d	; 61
    2672:	9e b7       	in	r25, 0x3e	; 62
    2674:	80 96       	adiw	r24, 0x20	; 32
    2676:	8d bf       	out	0x3d, r24	; 61
    2678:	9e bf       	out	0x3e, r25	; 62
    267a:	89 ea       	ldi	r24, 0xA9	; 169
    267c:	95 e0       	ldi	r25, 0x05	; 5
    267e:	9f 93       	push	r25
    2680:	8f 93       	push	r24
    2682:	df 93       	push	r29
    2684:	ff 92       	push	r15
    2686:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    268a:	8c e8       	ldi	r24, 0x8C	; 140
    268c:	95 e0       	ldi	r25, 0x05	; 5
    268e:	9f 93       	push	r25
    2690:	8f 93       	push	r24
    2692:	df 93       	push	r29
    2694:	0f 93       	push	r16
    2696:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    269a:	88 e7       	ldi	r24, 0x78	; 120
    269c:	95 e0       	ldi	r25, 0x05	; 5
    269e:	9f 93       	push	r25
    26a0:	8f 93       	push	r24
    26a2:	df 93       	push	r29
    26a4:	1f 93       	push	r17
    26a6:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    26aa:	83 e6       	ldi	r24, 0x63	; 99
    26ac:	93 e2       	ldi	r25, 0x23	; 35
    26ae:	9f 93       	push	r25
    26b0:	8f 93       	push	r24
    26b2:	8d e6       	ldi	r24, 0x6D	; 109
    26b4:	95 e0       	ldi	r25, 0x05	; 5
    26b6:	9f 93       	push	r25
    26b8:	8f 93       	push	r24
    26ba:	cf 93       	push	r28
    26bc:	80 e1       	ldi	r24, 0x10	; 16
    26be:	8f 93       	push	r24
    26c0:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    26c4:	ed b7       	in	r30, 0x3d	; 61
    26c6:	fe b7       	in	r31, 0x3e	; 62
    26c8:	72 96       	adiw	r30, 0x12	; 18
    26ca:	ed bf       	out	0x3d, r30	; 61
    26cc:	fe bf       	out	0x3e, r31	; 62
    26ce:	9d c0       	rjmp	.+314    	; 0x280a <roomPrintMenus+0x296>
    26d0:	8c e5       	ldi	r24, 0x5C	; 92
    26d2:	95 e0       	ldi	r25, 0x05	; 5
    26d4:	9f 93       	push	r25
    26d6:	8f 93       	push	r24
    26d8:	d2 e0       	ldi	r29, 0x02	; 2
    26da:	df 93       	push	r29
    26dc:	19 e0       	ldi	r17, 0x09	; 9
    26de:	1f 93       	push	r17
    26e0:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    26e4:	80 e5       	ldi	r24, 0x50	; 80
    26e6:	95 e0       	ldi	r25, 0x05	; 5
    26e8:	9f 93       	push	r25
    26ea:	8f 93       	push	r24
    26ec:	c9 e2       	ldi	r28, 0x29	; 41
    26ee:	cf 93       	push	r28
    26f0:	1f 93       	push	r17
    26f2:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    26f6:	83 e3       	ldi	r24, 0x33	; 51
    26f8:	95 e0       	ldi	r25, 0x05	; 5
    26fa:	9f 93       	push	r25
    26fc:	8f 93       	push	r24
    26fe:	df 93       	push	r29
    2700:	1a e0       	ldi	r17, 0x0A	; 10
    2702:	1f 93       	push	r17
    2704:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2708:	83 e2       	ldi	r24, 0x23	; 35
    270a:	95 e0       	ldi	r25, 0x05	; 5
    270c:	9f 93       	push	r25
    270e:	8f 93       	push	r24
    2710:	cf 93       	push	r28
    2712:	1f 93       	push	r17
    2714:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2718:	8d e1       	ldi	r24, 0x1D	; 29
    271a:	95 e0       	ldi	r25, 0x05	; 5
    271c:	9f 93       	push	r25
    271e:	8f 93       	push	r24
    2720:	df 93       	push	r29
    2722:	1b e0       	ldi	r17, 0x0B	; 11
    2724:	1f 93       	push	r17
    2726:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    272a:	85 e1       	ldi	r24, 0x15	; 21
    272c:	95 e0       	ldi	r25, 0x05	; 5
    272e:	9f 93       	push	r25
    2730:	8f 93       	push	r24
    2732:	cf 93       	push	r28
    2734:	1f 93       	push	r17
    2736:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    273a:	8b e0       	ldi	r24, 0x0B	; 11
    273c:	95 e0       	ldi	r25, 0x05	; 5
    273e:	9f 93       	push	r25
    2740:	8f 93       	push	r24
    2742:	df 93       	push	r29
    2744:	1c e0       	ldi	r17, 0x0C	; 12
    2746:	1f 93       	push	r17
    2748:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	95 e0       	ldi	r25, 0x05	; 5
    2750:	9f 93       	push	r25
    2752:	8f 93       	push	r24
    2754:	cf 93       	push	r28
    2756:	1f 93       	push	r17
    2758:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    275c:	8d b7       	in	r24, 0x3d	; 61
    275e:	9e b7       	in	r25, 0x3e	; 62
    2760:	80 96       	adiw	r24, 0x20	; 32
    2762:	8d bf       	out	0x3d, r24	; 61
    2764:	9e bf       	out	0x3e, r25	; 62
    2766:	8b ef       	ldi	r24, 0xFB	; 251
    2768:	94 e0       	ldi	r25, 0x04	; 4
    276a:	9f 93       	push	r25
    276c:	8f 93       	push	r24
    276e:	df 93       	push	r29
    2770:	1d e0       	ldi	r17, 0x0D	; 13
    2772:	1f 93       	push	r17
    2774:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2778:	81 ef       	ldi	r24, 0xF1	; 241
    277a:	94 e0       	ldi	r25, 0x04	; 4
    277c:	9f 93       	push	r25
    277e:	8f 93       	push	r24
    2780:	cf 93       	push	r28
    2782:	1f 93       	push	r17
    2784:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2788:	8f ec       	ldi	r24, 0xCF	; 207
    278a:	94 e0       	ldi	r25, 0x04	; 4
    278c:	9f 93       	push	r25
    278e:	8f 93       	push	r24
    2790:	df 93       	push	r29
    2792:	1e e0       	ldi	r17, 0x0E	; 14
    2794:	1f 93       	push	r17
    2796:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    279a:	8d ea       	ldi	r24, 0xAD	; 173
    279c:	94 e0       	ldi	r25, 0x04	; 4
    279e:	9f 93       	push	r25
    27a0:	8f 93       	push	r24
    27a2:	cf 93       	push	r28
    27a4:	1f 93       	push	r17
    27a6:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    27aa:	8e e9       	ldi	r24, 0x9E	; 158
    27ac:	94 e0       	ldi	r25, 0x04	; 4
    27ae:	9f 93       	push	r25
    27b0:	8f 93       	push	r24
    27b2:	df 93       	push	r29
    27b4:	1f e0       	ldi	r17, 0x0F	; 15
    27b6:	1f 93       	push	r17
    27b8:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    27bc:	8e e8       	ldi	r24, 0x8E	; 142
    27be:	94 e0       	ldi	r25, 0x04	; 4
    27c0:	9f 93       	push	r25
    27c2:	8f 93       	push	r24
    27c4:	cf 93       	push	r28
    27c6:	1f 93       	push	r17
    27c8:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    27cc:	83 e7       	ldi	r24, 0x73	; 115
    27ce:	94 e0       	ldi	r25, 0x04	; 4
    27d0:	9f 93       	push	r25
    27d2:	8f 93       	push	r24
    27d4:	df 93       	push	r29
    27d6:	d0 e1       	ldi	r29, 0x10	; 16
    27d8:	df 93       	push	r29
    27da:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    27de:	87 e5       	ldi	r24, 0x57	; 87
    27e0:	94 e0       	ldi	r25, 0x04	; 4
    27e2:	9f 93       	push	r25
    27e4:	8f 93       	push	r24
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    27ee:	ed b7       	in	r30, 0x3d	; 61
    27f0:	fe b7       	in	r31, 0x3e	; 62
    27f2:	b0 96       	adiw	r30, 0x20	; 32
    27f4:	ed bf       	out	0x3d, r30	; 61
    27f6:	fe bf       	out	0x3e, r31	; 62
    27f8:	08 c0       	rjmp	.+16     	; 0x280a <roomPrintMenus+0x296>
    27fa:	8b e6       	ldi	r24, 0x6B	; 107
    27fc:	96 e0       	ldi	r25, 0x06	; 6
    27fe:	9f 93       	push	r25
    2800:	8f 93       	push	r24
    2802:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	0e 94 41 09 	call	0x1282	; 0x1282 <appUISetUI>
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	08 95       	ret

00002822 <roomPrintDeviceStuff>:
    2822:	6f 92       	push	r6
    2824:	7f 92       	push	r7
    2826:	8f 92       	push	r8
    2828:	9f 92       	push	r9
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	64 97       	sbiw	r28, 0x14	; 20
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0e 94 9f 08 	call	0x113e	; 0x113e <appUICleanWebsite>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	0e 94 41 09 	call	0x1282	; 0x1282 <appUISetUI>
    2852:	e0 91 84 23 	lds	r30, 0x2384
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	ed 58       	subi	r30, 0x8D	; 141
    285e:	f7 4f       	sbci	r31, 0xF7	; 247
    2860:	65 91       	lpm	r22, Z+
    2862:	75 91       	lpm	r23, Z+
    2864:	ce 01       	movw	r24, r28
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	7c 01       	movw	r14, r24
    286a:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    286e:	ff 92       	push	r15
    2870:	ef 92       	push	r14
    2872:	8e e4       	ldi	r24, 0x4E	; 78
    2874:	94 e0       	ldi	r25, 0x04	; 4
    2876:	9f 93       	push	r25
    2878:	8f 93       	push	r24
    287a:	12 e0       	ldi	r17, 0x02	; 2
    287c:	1f 93       	push	r17
    287e:	1f 93       	push	r17
    2880:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2884:	e0 91 b9 20 	lds	r30, 0x20B9
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e5 59       	subi	r30, 0x95	; 149
    2890:	f7 4f       	sbci	r31, 0xF7	; 247
    2892:	65 91       	lpm	r22, Z+
    2894:	75 91       	lpm	r23, Z+
    2896:	c7 01       	movw	r24, r14
    2898:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    289c:	80 91 bb 20 	lds	r24, 0x20BB
    28a0:	1f 92       	push	r1
    28a2:	8f 93       	push	r24
    28a4:	0f 2e       	mov	r0, r31
    28a6:	fa eb       	ldi	r31, 0xBA	; 186
    28a8:	cf 2e       	mov	r12, r31
    28aa:	f0 e2       	ldi	r31, 0x20	; 32
    28ac:	df 2e       	mov	r13, r31
    28ae:	f0 2d       	mov	r31, r0
    28b0:	f6 01       	movw	r30, r12
    28b2:	80 81       	ld	r24, Z
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	9f 93       	push	r25
    28ba:	8f 93       	push	r24
    28bc:	ff 92       	push	r15
    28be:	ef 92       	push	r14
    28c0:	88 e3       	ldi	r24, 0x38	; 56
    28c2:	94 e0       	ldi	r25, 0x04	; 4
    28c4:	9f 93       	push	r25
    28c6:	8f 93       	push	r24
    28c8:	1f 93       	push	r17
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	8f 93       	push	r24
    28ce:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    28d2:	f6 01       	movw	r30, r12
    28d4:	80 81       	ld	r24, Z
    28d6:	d8 d7       	rcall	.+4016   	; 0x3888 <deviceNameGet>
    28d8:	9f 93       	push	r25
    28da:	8f 93       	push	r24
    28dc:	82 e3       	ldi	r24, 0x32	; 50
    28de:	94 e0       	ldi	r25, 0x04	; 4
    28e0:	9f 93       	push	r25
    28e2:	8f 93       	push	r24
    28e4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    28e8:	ee eb       	ldi	r30, 0xBE	; 190
    28ea:	f0 e2       	ldi	r31, 0x20	; 32
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	8f 93       	push	r24
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	8f 93       	push	r24
    28f4:	81 81       	ldd	r24, Z+1	; 0x01
    28f6:	8f 93       	push	r24
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 93       	push	r24
    28fc:	e5 e6       	ldi	r30, 0x65	; 101
    28fe:	f0 e2       	ldi	r31, 0x20	; 32
    2900:	83 81       	ldd	r24, Z+3	; 0x03
    2902:	8f 93       	push	r24
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	8f 93       	push	r24
    2908:	81 81       	ldd	r24, Z+1	; 0x01
    290a:	8f 93       	push	r24
    290c:	80 81       	ld	r24, Z
    290e:	8f 93       	push	r24
    2910:	80 91 29 20 	lds	r24, 0x2029
    2914:	1f 92       	push	r1
    2916:	8f 93       	push	r24
    2918:	8d e0       	ldi	r24, 0x0D	; 13
    291a:	94 e0       	ldi	r25, 0x04	; 4
    291c:	9f 93       	push	r25
    291e:	8f 93       	push	r24
    2920:	1f 93       	push	r17
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	8f 93       	push	r24
    2926:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	eb e5       	ldi	r30, 0x5B	; 91
    2930:	f0 e2       	ldi	r31, 0x20	; 32
    2932:	81 81       	ldd	r24, Z+1	; 0x01
    2934:	8f 93       	push	r24
    2936:	80 81       	ld	r24, Z
    2938:	8f 93       	push	r24
    293a:	ed e5       	ldi	r30, 0x5D	; 93
    293c:	f0 e2       	ldi	r31, 0x20	; 32
    293e:	81 81       	ldd	r24, Z+1	; 0x01
    2940:	8f 93       	push	r24
    2942:	80 81       	ld	r24, Z
    2944:	8f 93       	push	r24
    2946:	83 ef       	ldi	r24, 0xF3	; 243
    2948:	93 e0       	ldi	r25, 0x03	; 3
    294a:	9f 93       	push	r25
    294c:	8f 93       	push	r24
    294e:	1f 93       	push	r17
    2950:	85 e0       	ldi	r24, 0x05	; 5
    2952:	8f 93       	push	r24
    2954:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2958:	8b ee       	ldi	r24, 0xEB	; 235
    295a:	93 e0       	ldi	r25, 0x03	; 3
    295c:	9f 93       	push	r25
    295e:	8f 93       	push	r24
    2960:	1f 93       	push	r17
    2962:	86 e0       	ldi	r24, 0x06	; 6
    2964:	8f 93       	push	r24
    2966:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    296a:	89 e1       	ldi	r24, 0x19	; 25
    296c:	90 e2       	ldi	r25, 0x20	; 32
    296e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <RTCPrintAll>
    2972:	83 ee       	ldi	r24, 0xE3	; 227
    2974:	93 e0       	ldi	r25, 0x03	; 3
    2976:	9f 93       	push	r25
    2978:	8f 93       	push	r24
    297a:	1f 93       	push	r17
    297c:	87 e0       	ldi	r24, 0x07	; 7
    297e:	8f 93       	push	r24
    2980:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2984:	8f e1       	ldi	r24, 0x1F	; 31
    2986:	90 e2       	ldi	r25, 0x20	; 32
    2988:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <RTCPrintTime>
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	80 91 c2 20 	lds	r24, 0x20C2
    2994:	88 23       	and	r24, r24
    2996:	49 f0       	breq	.+18     	; 0x29aa <roomPrintDeviceStuff+0x188>
    2998:	8e ed       	ldi	r24, 0xDE	; 222
    299a:	93 e0       	ldi	r25, 0x03	; 3
    299c:	9f 93       	push	r25
    299e:	8f 93       	push	r24
    29a0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	54 c0       	rjmp	.+168    	; 0x2a52 <roomPrintDeviceStuff+0x230>
    29aa:	88 ed       	ldi	r24, 0xD8	; 216
    29ac:	93 e0       	ldi	r25, 0x03	; 3
    29ae:	9f 93       	push	r25
    29b0:	8f 93       	push	r24
    29b2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	4b c0       	rjmp	.+150    	; 0x2a52 <roomPrintDeviceStuff+0x230>
    29bc:	67 01       	movw	r12, r14
    29be:	f3 e0       	ldi	r31, 0x03	; 3
    29c0:	cf 0e       	add	r12, r31
    29c2:	d1 1c       	adc	r13, r1
    29c4:	f8 01       	movw	r30, r16
    29c6:	87 81       	ldd	r24, Z+7	; 0x07
    29c8:	8f 93       	push	r24
    29ca:	86 81       	ldd	r24, Z+6	; 0x06
    29cc:	8f 93       	push	r24
    29ce:	85 81       	ldd	r24, Z+5	; 0x05
    29d0:	8f 93       	push	r24
    29d2:	84 81       	ldd	r24, Z+4	; 0x04
    29d4:	8f 93       	push	r24
    29d6:	83 81       	ldd	r24, Z+3	; 0x03
    29d8:	8f 93       	push	r24
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	8f 93       	push	r24
    29de:	81 81       	ldd	r24, Z+1	; 0x01
    29e0:	8f 93       	push	r24
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 93       	push	r24
    29e6:	df 92       	push	r13
    29e8:	cf 92       	push	r12
    29ea:	ff 92       	push	r15
    29ec:	ef 92       	push	r14
    29ee:	9f 92       	push	r9
    29f0:	8f 92       	push	r8
    29f2:	6f 92       	push	r6
    29f4:	7f 92       	push	r7
    29f6:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    29fa:	f8 01       	movw	r30, r16
    29fc:	87 8d       	ldd	r24, Z+31	; 0x1f
    29fe:	8f 93       	push	r24
    2a00:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a02:	8f 93       	push	r24
    2a04:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a06:	8f 93       	push	r24
    2a08:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a0a:	8f 93       	push	r24
    2a0c:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a0e:	8f 93       	push	r24
    2a10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a12:	8f 93       	push	r24
    2a14:	81 8d       	ldd	r24, Z+25	; 0x19
    2a16:	8f 93       	push	r24
    2a18:	80 8d       	ldd	r24, Z+24	; 0x18
    2a1a:	8f 93       	push	r24
    2a1c:	df 92       	push	r13
    2a1e:	cf 92       	push	r12
    2a20:	ff 92       	push	r15
    2a22:	ef 92       	push	r14
    2a24:	bf 92       	push	r11
    2a26:	af 92       	push	r10
    2a28:	6f 92       	push	r6
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	87 0d       	add	r24, r7
    2a2e:	8f 93       	push	r24
    2a30:	0e 94 cc 09 	call	0x1398	; 0x1398 <appUIPrintPos_P>
    2a34:	08 5f       	subi	r16, 0xF8	; 248
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	73 94       	inc	r7
    2a3a:	f4 e0       	ldi	r31, 0x04	; 4
    2a3c:	ef 0e       	add	r14, r31
    2a3e:	f1 1c       	adc	r15, r1
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	95 e0       	ldi	r25, 0x05	; 5
    2a46:	79 12       	cpse	r7, r25
    2a48:	b9 cf       	rjmp	.-142    	; 0x29bc <roomPrintDeviceStuff+0x19a>
    2a4a:	83 e0       	ldi	r24, 0x03	; 3
    2a4c:	0e 94 41 09 	call	0x1282	; 0x1282 <appUISetUI>
    2a50:	19 c0       	rjmp	.+50     	; 0x2a84 <roomPrintDeviceStuff+0x262>
    2a52:	0b e2       	ldi	r16, 0x2B	; 43
    2a54:	10 e2       	ldi	r17, 0x20	; 32
    2a56:	ee 24       	eor	r14, r14
    2a58:	e3 94       	inc	r14
    2a5a:	f1 2c       	mov	r15, r1
    2a5c:	68 94       	set
    2a5e:	77 24       	eor	r7, r7
    2a60:	71 f8       	bld	r7, 1
    2a62:	0f 2e       	mov	r0, r31
    2a64:	f8 eb       	ldi	r31, 0xB8	; 184
    2a66:	8f 2e       	mov	r8, r31
    2a68:	f3 e0       	ldi	r31, 0x03	; 3
    2a6a:	9f 2e       	mov	r9, r31
    2a6c:	f0 2d       	mov	r31, r0
    2a6e:	0f 2e       	mov	r0, r31
    2a70:	f9 e2       	ldi	r31, 0x29	; 41
    2a72:	6f 2e       	mov	r6, r31
    2a74:	f0 2d       	mov	r31, r0
    2a76:	0f 2e       	mov	r0, r31
    2a78:	f8 e9       	ldi	r31, 0x98	; 152
    2a7a:	af 2e       	mov	r10, r31
    2a7c:	f3 e0       	ldi	r31, 0x03	; 3
    2a7e:	bf 2e       	mov	r11, r31
    2a80:	f0 2d       	mov	r31, r0
    2a82:	9c cf       	rjmp	.-200    	; 0x29bc <roomPrintDeviceStuff+0x19a>
    2a84:	64 96       	adiw	r28, 0x14	; 20
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	bf 90       	pop	r11
    2a9c:	af 90       	pop	r10
    2a9e:	9f 90       	pop	r9
    2aa0:	8f 90       	pop	r8
    2aa2:	7f 90       	pop	r7
    2aa4:	6f 90       	pop	r6
    2aa6:	08 95       	ret

00002aa8 <roomClean>:
    2aa8:	80 91 84 23 	lds	r24, 0x2384
    2aac:	82 30       	cpi	r24, 0x02	; 2
    2aae:	61 f0       	breq	.+24     	; 0x2ac8 <roomClean+0x20>
    2ab0:	81 e2       	ldi	r24, 0x21	; 33
    2ab2:	e3 e6       	ldi	r30, 0x63	; 99
    2ab4:	f3 e2       	ldi	r31, 0x23	; 35
    2ab6:	df 01       	movw	r26, r30
    2ab8:	1d 92       	st	X+, r1
    2aba:	8a 95       	dec	r24
    2abc:	e9 f7       	brne	.-6      	; 0x2ab8 <roomClean+0x10>
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <roomClean+0x20>
    2ac0:	83 ec       	ldi	r24, 0xC3	; 195
    2ac2:	90 e2       	ldi	r25, 0x20	; 32
    2ac4:	0e 94 9e 0b 	call	0x173c	; 0x173c <CDC_Device_ReceiveByte>
    2ac8:	83 ec       	ldi	r24, 0xC3	; 195
    2aca:	90 e2       	ldi	r25, 0x20	; 32
    2acc:	0e 94 42 0b 	call	0x1684	; 0x1684 <CDC_Device_BytesReceived>
    2ad0:	89 2b       	or	r24, r25
    2ad2:	b1 f7       	brne	.-20     	; 0x2ac0 <roomClean+0x18>
    2ad4:	0e 94 ba 08 	call	0x1174	; 0x1174 <appUIClean>
    2ad8:	a4 de       	rcall	.-696    	; 0x2822 <roomPrintDeviceStuff>
    2ada:	4c cd       	rjmp	.-1384   	; 0x2574 <roomPrintMenus>
    2adc:	08 95       	ret

00002ade <roomReset>:
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	80 93 84 23 	sts	0x2384, r24
    2ae4:	e1 cf       	rjmp	.-62     	; 0x2aa8 <roomClean>
    2ae6:	08 95       	ret

00002ae8 <roomInit>:
    2ae8:	cf 93       	push	r28
    2aea:	f9 df       	rcall	.-14     	; 0x2ade <roomReset>
    2aec:	10 92 c2 20 	sts	0x20C2, r1
    2af0:	cf b7       	in	r28, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	6c e0       	ldi	r22, 0x0C	; 12
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	89 eb       	ldi	r24, 0xB9	; 185
    2afe:	90 e2       	ldi	r25, 0x20	; 32
    2b00:	0e 94 34 38 	call	0x7068	; 0x7068 <eeprom_read_block>
    2b04:	80 91 b9 20 	lds	r24, 0x20B9
    2b08:	81 50       	subi	r24, 0x01	; 1
    2b0a:	82 30       	cpi	r24, 0x02	; 2
    2b0c:	18 f5       	brcc	.+70     	; 0x2b54 <roomInit+0x6c>
    2b0e:	cf bf       	out	0x3f, r28	; 63
    2b10:	cf b7       	in	r28, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	6d e0       	ldi	r22, 0x0D	; 13
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	82 ec       	ldi	r24, 0xC2	; 194
    2b1e:	90 e2       	ldi	r25, 0x20	; 32
    2b20:	0e 94 34 38 	call	0x7068	; 0x7068 <eeprom_read_block>
    2b24:	cf bf       	out	0x3f, r28	; 63
    2b26:	cf b7       	in	r28, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	46 e0       	ldi	r20, 0x06	; 6
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	66 e0       	ldi	r22, 0x06	; 6
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	8f e1       	ldi	r24, 0x1F	; 31
    2b34:	90 e2       	ldi	r25, 0x20	; 32
    2b36:	0e 94 34 38 	call	0x7068	; 0x7068 <eeprom_read_block>
    2b3a:	cf bf       	out	0x3f, r28	; 63
    2b3c:	cf b7       	in	r28, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	46 e0       	ldi	r20, 0x06	; 6
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	89 e1       	ldi	r24, 0x19	; 25
    2b4a:	90 e2       	ldi	r25, 0x20	; 32
    2b4c:	0e 94 34 38 	call	0x7068	; 0x7068 <eeprom_read_block>
    2b50:	cf bf       	out	0x3f, r28	; 63
    2b52:	04 c0       	rjmp	.+8      	; 0x2b5c <roomInit+0x74>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	80 93 b9 20 	sts	0x20B9, r24
    2b5a:	d9 cf       	rjmp	.-78     	; 0x2b0e <roomInit+0x26>
    2b5c:	cf 91       	pop	r28
    2b5e:	08 95       	ret

00002b60 <writeTimeToEE>:

/////////////////////////////// Boring Functions ///////////////////////////////


void writeTimeToEE()
{
    2b60:	cf 93       	push	r28
	EEPROM_DO(&hardware.alarm, &alarmEEPROM, EEPROM_SAVE);
    2b62:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b64:	f8 94       	cli
    2b66:	46 e0       	ldi	r20, 0x06	; 6
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	66 e0       	ldi	r22, 0x06	; 6
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	8f e1       	ldi	r24, 0x1F	; 31
    2b70:	90 e2       	ldi	r25, 0x20	; 32
    2b72:	0e 94 4f 38 	call	0x709e	; 0x709e <eeprom_update_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b76:	cf bf       	out	0x3f, r28	; 63
	EEPROM_DO(&hardware.time, &timeEEPROM, EEPROM_SAVE);
    2b78:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b7a:	f8 94       	cli
    2b7c:	46 e0       	ldi	r20, 0x06	; 6
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	89 e1       	ldi	r24, 0x19	; 25
    2b86:	90 e2       	ldi	r25, 0x20	; 32
    2b88:	0e 94 4f 38 	call	0x709e	; 0x709e <eeprom_update_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b8c:	cf bf       	out	0x3f, r28	; 63
	appUIPrintln("Alarm & Time Saved to EEPROM.");
    2b8e:	8a e7       	ldi	r24, 0x7A	; 122
    2b90:	93 e0       	ldi	r25, 0x03	; 3
    2b92:	9f 93       	push	r25
    2b94:	8f 93       	push	r24
    2b96:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
}
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <roomKeys>:

/////////////////////////////// Room USB Key Presses ///////////////////////////////


void roomKeys()
{
    2ba2:	cf 92       	push	r12
    2ba4:	ef 92       	push	r14
    2ba6:	0f 93       	push	r16
    2ba8:	1f 93       	push	r17
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	2a 97       	sbiw	r28, 0x0a	; 10
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	de bf       	out	0x3e, r29	; 62
//	Check for USB input
	if (!CDC_Device_BytesReceived(&USBSerialClass))	return;
    2bb8:	83 ec       	ldi	r24, 0xC3	; 195
    2bba:	90 e2       	ldi	r25, 0x20	; 32
    2bbc:	0e 94 42 0b 	call	0x1684	; 0x1684 <CDC_Device_BytesReceived>
    2bc0:	89 2b       	or	r24, r25
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <roomKeys+0x24>
    2bc4:	66 c3       	rjmp	.+1740   	; 0x3292 <roomKeys+0x6f0>

//	Read USB input
	char key = tolower(CDC_Device_ReceiveByte(&USBSerialClass));
    2bc6:	83 ec       	ldi	r24, 0xC3	; 195
    2bc8:	90 e2       	ldi	r25, 0x20	; 32
    2bca:	0e 94 9e 0b 	call	0x173c	; 0x173c <CDC_Device_ReceiveByte>
    2bce:	0e 94 69 33 	call	0x66d2	; 0x66d2 <tolower>
    2bd2:	08 2f       	mov	r16, r24
    2bd4:	18 2f       	mov	r17, r24
	
//	Clear buffer
	while (CDC_Device_BytesReceived(&USBSerialClass))
    2bd6:	04 c0       	rjmp	.+8      	; 0x2be0 <roomKeys+0x3e>
	{
		CDC_Device_ReceiveByte(&USBSerialClass);
    2bd8:	83 ec       	ldi	r24, 0xC3	; 195
    2bda:	90 e2       	ldi	r25, 0x20	; 32
    2bdc:	0e 94 9e 0b 	call	0x173c	; 0x173c <CDC_Device_ReceiveByte>

//	Read USB input
	char key = tolower(CDC_Device_ReceiveByte(&USBSerialClass));
	
//	Clear buffer
	while (CDC_Device_BytesReceived(&USBSerialClass))
    2be0:	83 ec       	ldi	r24, 0xC3	; 195
    2be2:	90 e2       	ldi	r25, 0x20	; 32
    2be4:	0e 94 42 0b 	call	0x1684	; 0x1684 <CDC_Device_BytesReceived>
    2be8:	89 2b       	or	r24, r25
    2bea:	b1 f7       	brne	.-20     	; 0x2bd8 <roomKeys+0x36>
// 	if (RingBuffer_IsEmpty(&input))	return;

//	Read byte
//	key = RingBuffer_Remove(&input);
	
	eventTimerTrigger(&roomPrintDeviceStuff);
    2bec:	81 e1       	ldi	r24, 0x11	; 17
    2bee:	94 e1       	ldi	r25, 0x14	; 20
    2bf0:	0e 94 47 28 	call	0x508e	; 0x508e <eventTimerTrigger>
	eventTimerTrigger(&roomPrintMenus);
    2bf4:	8a eb       	ldi	r24, 0xBA	; 186
    2bf6:	92 e1       	ldi	r25, 0x12	; 18
    2bf8:	0e 94 47 28 	call	0x508e	; 0x508e <eventTimerTrigger>
	eventTimerTrigger(&psuVoltageController);
    2bfc:	8a e8       	ldi	r24, 0x8A	; 138
    2bfe:	92 e1       	ldi	r25, 0x12	; 18
    2c00:	0e 94 47 28 	call	0x508e	; 0x508e <eventTimerTrigger>
	eventTimerRestart(&roomReset);
    2c04:	8f e6       	ldi	r24, 0x6F	; 111
    2c06:	95 e1       	ldi	r25, 0x15	; 21
    2c08:	0e 94 37 28 	call	0x506e	; 0x506e <eventTimerRestart>
	eventTimerRestart(&roomClean);
    2c0c:	84 e5       	ldi	r24, 0x54	; 84
    2c0e:	95 e1       	ldi	r25, 0x15	; 21
    2c10:	0e 94 37 28 	call	0x506e	; 0x506e <eventTimerRestart>
	
	eventSetTimeleft(&alarmCancelButton, MAX2((uint32_t)1000 * 300, eventGetInterval(&alarmCancelButton)));
    2c14:	8b e8       	ldi	r24, 0x8B	; 139
    2c16:	92 e1       	ldi	r25, 0x12	; 18
    2c18:	0e 94 64 28 	call	0x50c8	; 0x50c8 <eventGetInterval>
    2c1c:	ab 01       	movw	r20, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	40 3e       	cpi	r20, 0xE0	; 224
    2c22:	23 e9       	ldi	r18, 0x93	; 147
    2c24:	52 07       	cpc	r21, r18
    2c26:	24 e0       	ldi	r18, 0x04	; 4
    2c28:	62 07       	cpc	r22, r18
    2c2a:	71 05       	cpc	r23, r1
    2c2c:	20 f4       	brcc	.+8      	; 0x2c36 <roomKeys+0x94>
    2c2e:	40 ee       	ldi	r20, 0xE0	; 224
    2c30:	53 e9       	ldi	r21, 0x93	; 147
    2c32:	64 e0       	ldi	r22, 0x04	; 4
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	8b e8       	ldi	r24, 0x8B	; 139
    2c38:	92 e1       	ldi	r25, 0x12	; 18
    2c3a:	0e 94 71 28 	call	0x50e2	; 0x50e2 <eventSetTimeleft>
	//eventSetTimeleft(&alarmSetChannel, MAX2((uint32_t)1000 * 300, eventGetInterval()));
	
	switch (key)
    2c3e:	0b 31       	cpi	r16, 0x1B	; 27
    2c40:	29 f4       	brne	.+10     	; 0x2c4c <roomKeys+0xaa>
}


static void roomSet(ROOMS_t newRoom)
{
	room = newRoom;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	80 93 84 23 	sts	0x2384, r24
	
	roomClean();
    2c48:	2f df       	rcall	.-418    	; 0x2aa8 <roomClean>
    2c4a:	23 c3       	rjmp	.+1606   	; 0x3292 <roomKeys+0x6f0>
		case 27:	roomSet(ROOM_MAIN); return; //Escape
		//case 8: 
		//case 127:	roomClean(); break;
	}
	
	switch(room)
    2c4c:	80 91 84 23 	lds	r24, 0x2384
    2c50:	82 30       	cpi	r24, 0x02	; 2
    2c52:	a9 f0       	breq	.+42     	; 0x2c7e <roomKeys+0xdc>
    2c54:	83 30       	cpi	r24, 0x03	; 3
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <roomKeys+0xb8>
    2c58:	0e c2       	rjmp	.+1052   	; 0x3076 <roomKeys+0x4d4>
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <roomKeys+0xbe>
    2c5e:	19 c3       	rjmp	.+1586   	; 0x3292 <roomKeys+0x6f0>



static void roomKeysMenuMain(uint8_t key)
{
	switch (key)
    2c60:	10 32       	cpi	r17, 0x20	; 32
    2c62:	41 f0       	breq	.+16     	; 0x2c74 <roomKeys+0xd2>
    2c64:	13 37       	cpi	r17, 0x73	; 115
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <roomKeys+0xc8>
    2c68:	14 c3       	rjmp	.+1576   	; 0x3292 <roomKeys+0x6f0>
}


static void roomSet(ROOMS_t newRoom)
{
	room = newRoom;
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	80 93 84 23 	sts	0x2384, r24
	
	roomClean();
    2c70:	1b df       	rcall	.-458    	; 0x2aa8 <roomClean>
    2c72:	0f c3       	rjmp	.+1566   	; 0x3292 <roomKeys+0x6f0>
}


static void roomSet(ROOMS_t newRoom)
{
	room = newRoom;
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	80 93 84 23 	sts	0x2384, r24
	
	roomClean();
    2c7a:	16 df       	rcall	.-468    	; 0x2aa8 <roomClean>
    2c7c:	0a c3       	rjmp	.+1556   	; 0x3292 <roomKeys+0x6f0>

static void roomKeysMenuSettings(uint8_t key)
{
	uint8_t newIP[4];
	time_t newTime;
	memset(&newIP, 0, sizeof newIP);
    2c7e:	1f 82       	std	Y+7, r1	; 0x07
    2c80:	18 86       	std	Y+8, r1	; 0x08
    2c82:	19 86       	std	Y+9, r1	; 0x09
    2c84:	1a 86       	std	Y+10, r1	; 0x0a
	memset(&newTime, 0, sizeof newTime);
    2c86:	fe 01       	movw	r30, r28
    2c88:	31 96       	adiw	r30, 0x01	; 1
    2c8a:	86 e0       	ldi	r24, 0x06	; 6
    2c8c:	df 01       	movw	r26, r30
    2c8e:	1d 92       	st	X+, r1
    2c90:	8a 95       	dec	r24
    2c92:	e9 f7       	brne	.-6      	; 0x2c8e <roomKeys+0xec>
{
	//while (CDC_Device_BytesReceived(&USBSerialClass))
	//{
	//	key = CDC_Device_ReceiveByte(&USBSerialClass);

	if (key == 8 || key == 127)
    2c94:	18 30       	cpi	r17, 0x08	; 8
    2c96:	11 f0       	breq	.+4      	; 0x2c9c <roomKeys+0xfa>
    2c98:	1f 37       	cpi	r17, 0x7F	; 127
    2c9a:	69 f4       	brne	.+26     	; 0x2cb6 <roomKeys+0x114>
	{
		if (textInput.charNumber > 0)
    2c9c:	e0 91 83 23 	lds	r30, 0x2383
    2ca0:	ee 23       	and	r30, r30
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <roomKeys+0x104>
    2ca4:	f6 c2       	rjmp	.+1516   	; 0x3292 <roomKeys+0x6f0>
		{
			textInput.buf[--textInput.charNumber] = 0;
    2ca6:	e1 50       	subi	r30, 0x01	; 1
    2ca8:	e0 93 83 23 	sts	0x2383, r30
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	ed 59       	subi	r30, 0x9D	; 157
    2cb0:	fc 4d       	sbci	r31, 0xDC	; 220
    2cb2:	10 82       	st	Z, r1
    2cb4:	ee c2       	rjmp	.+1500   	; 0x3292 <roomKeys+0x6f0>
		}
	}
	else if (key == 13) // newline
    2cb6:	1d 30       	cpi	r17, 0x0D	; 13
    2cb8:	59 f4       	brne	.+22     	; 0x2cd0 <roomKeys+0x12e>
	{
		textInput.charNumber = 0;
    2cba:	10 92 83 23 	sts	0x2383, r1
	memset(&newIP, 0, sizeof newIP);
	memset(&newTime, 0, sizeof newTime);
	
	if (roomReadInputText(key) == true)
	{
		if (strstr_P(textInput.buf, PSTR("bein")) != NULL)
    2cbe:	66 e6       	ldi	r22, 0x66	; 102
    2cc0:	78 e0       	ldi	r23, 0x08	; 8
    2cc2:	83 e6       	ldi	r24, 0x63	; 99
    2cc4:	93 e2       	ldi	r25, 0x23	; 35
    2cc6:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2cca:	89 2b       	or	r24, r25
    2ccc:	19 f5       	brne	.+70     	; 0x2d14 <roomKeys+0x172>
    2cce:	2e c0       	rjmp	.+92     	; 0x2d2c <roomKeys+0x18a>
	else if (key == 13) // newline
	{
		textInput.charNumber = 0;
		return true;
	}
	else if (key >= 32 && key <= 127) { 
    2cd0:	80 ee       	ldi	r24, 0xE0	; 224
    2cd2:	80 0f       	add	r24, r16
    2cd4:	80 36       	cpi	r24, 0x60	; 96
    2cd6:	08 f0       	brcs	.+2      	; 0x2cda <roomKeys+0x138>
    2cd8:	dc c2       	rjmp	.+1464   	; 0x3292 <roomKeys+0x6f0>
		if (textInput.charNumber < sizeof textInput.buf - 1) {
    2cda:	e0 91 83 23 	lds	r30, 0x2383
    2cde:	ef 31       	cpi	r30, 0x1F	; 31
    2ce0:	48 f4       	brcc	.+18     	; 0x2cf4 <roomKeys+0x152>
			textInput.buf[textInput.charNumber++] = key;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	8e 0f       	add	r24, r30
    2ce6:	80 93 83 23 	sts	0x2383, r24
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	ed 59       	subi	r30, 0x9D	; 157
    2cee:	fc 4d       	sbci	r31, 0xDC	; 220
    2cf0:	00 83       	st	Z, r16
    2cf2:	cf c2       	rjmp	.+1438   	; 0x3292 <roomKeys+0x6f0>
		}
		else {
			memset(&textInput, 0, sizeof textInput);
    2cf4:	81 e2       	ldi	r24, 0x21	; 33
    2cf6:	e3 e6       	ldi	r30, 0x63	; 99
    2cf8:	f3 e2       	ldi	r31, 0x23	; 35
    2cfa:	df 01       	movw	r26, r30
    2cfc:	1d 92       	st	X+, r1
    2cfe:	8a 95       	dec	r24
    2d00:	e9 f7       	brne	.-6      	; 0x2cfc <roomKeys+0x15a>
			appUIPrintln("Error: text input overflow!");
    2d02:	88 e7       	ldi	r24, 0x78	; 120
    2d04:	96 e0       	ldi	r25, 0x06	; 6
    2d06:	9f 93       	push	r25
    2d08:	8f 93       	push	r24
    2d0a:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	bf c2       	rjmp	.+1406   	; 0x3292 <roomKeys+0x6f0>
	
	if (roomReadInputText(key) == true)
	{
		if (strstr_P(textInput.buf, PSTR("bein")) != NULL)
		{
			hardware.device.type = device_bein;
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	80 93 b9 20 	sts	0x20B9, r24
			appUIPrintln("Device type set to Bein");
    2d1a:	8e e4       	ldi	r24, 0x4E	; 78
    2d1c:	98 e0       	ldi	r25, 0x08	; 8
    2d1e:	9f 93       	push	r25
    2d20:	8f 93       	push	r24
    2d22:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	9d c1       	rjmp	.+826    	; 0x3066 <roomKeys+0x4c4>
		}
		
		else if (strstr_P(textInput.buf, PSTR("humax")) != NULL)
    2d2c:	68 e4       	ldi	r22, 0x48	; 72
    2d2e:	78 e0       	ldi	r23, 0x08	; 8
    2d30:	83 e6       	ldi	r24, 0x63	; 99
    2d32:	93 e2       	ldi	r25, 0x23	; 35
    2d34:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2d38:	89 2b       	or	r24, r25
    2d3a:	61 f0       	breq	.+24     	; 0x2d54 <roomKeys+0x1b2>
		{
			hardware.device.type = device_humax;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	80 93 b9 20 	sts	0x20B9, r24
			appUIPrintln("Device type set to Humax");
    2d42:	8f e2       	ldi	r24, 0x2F	; 47
    2d44:	98 e0       	ldi	r25, 0x08	; 8
    2d46:	9f 93       	push	r25
    2d48:	8f 93       	push	r24
    2d4a:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	89 c1       	rjmp	.+786    	; 0x3066 <roomKeys+0x4c4>
		}
		
		else if (strstr_P(textInput.buf, PSTR("mbc")) != NULL)
    2d54:	6b e2       	ldi	r22, 0x2B	; 43
    2d56:	78 e0       	ldi	r23, 0x08	; 8
    2d58:	83 e6       	ldi	r24, 0x63	; 99
    2d5a:	93 e2       	ldi	r25, 0x23	; 35
    2d5c:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2d60:	89 2b       	or	r24, r25
    2d62:	61 f0       	breq	.+24     	; 0x2d7c <roomKeys+0x1da>
		{
			hardware.device.type = device_mbc;
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	80 93 b9 20 	sts	0x20B9, r24
			appUIPrintln("Device type set to MBC");
    2d6a:	84 e1       	ldi	r24, 0x14	; 20
    2d6c:	98 e0       	ldi	r25, 0x08	; 8
    2d6e:	9f 93       	push	r25
    2d70:	8f 93       	push	r24
    2d72:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	75 c1       	rjmp	.+746    	; 0x3066 <roomKeys+0x4c4>
		}
		
		else if (strstr_P(textInput.buf, PSTR("reset")) != NULL || strstr_P(textInput.buf, PSTR("restart")) != NULL || strstr_P(textInput.buf, PSTR("reboot")) != NULL)
    2d7c:	6e e0       	ldi	r22, 0x0E	; 14
    2d7e:	78 e0       	ldi	r23, 0x08	; 8
    2d80:	83 e6       	ldi	r24, 0x63	; 99
    2d82:	93 e2       	ldi	r25, 0x23	; 35
    2d84:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2d88:	89 2b       	or	r24, r25
    2d8a:	81 f4       	brne	.+32     	; 0x2dac <roomKeys+0x20a>
    2d8c:	66 e0       	ldi	r22, 0x06	; 6
    2d8e:	78 e0       	ldi	r23, 0x08	; 8
    2d90:	83 e6       	ldi	r24, 0x63	; 99
    2d92:	93 e2       	ldi	r25, 0x23	; 35
    2d94:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2d98:	89 2b       	or	r24, r25
    2d9a:	41 f4       	brne	.+16     	; 0x2dac <roomKeys+0x20a>
    2d9c:	6f ef       	ldi	r22, 0xFF	; 255
    2d9e:	77 e0       	ldi	r23, 0x07	; 7
    2da0:	83 e6       	ldi	r24, 0x63	; 99
    2da2:	93 e2       	ldi	r25, 0x23	; 35
    2da4:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2da8:	89 2b       	or	r24, r25
    2daa:	11 f0       	breq	.+4      	; 0x2db0 <roomKeys+0x20e>
		{
			softwareReset();
    2dac:	27 d5       	rcall	.+2638   	; 0x37fc <softwareReset>
    2dae:	5b c1       	rjmp	.+694    	; 0x3066 <roomKeys+0x4c4>
		}
		
		else if (strstr_P(textInput.buf, PSTR("alarm")) != NULL)
    2db0:	69 ef       	ldi	r22, 0xF9	; 249
    2db2:	77 e0       	ldi	r23, 0x07	; 7
    2db4:	83 e6       	ldi	r24, 0x63	; 99
    2db6:	93 e2       	ldi	r25, 0x23	; 35
    2db8:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2dbc:	89 2b       	or	r24, r25
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <roomKeys+0x220>
    2dc0:	4b c0       	rjmp	.+150    	; 0x2e58 <roomKeys+0x2b6>
		{
			if (strstr_P(textInput.buf, PSTR("on")) != NULL)
    2dc2:	66 ef       	ldi	r22, 0xF6	; 246
    2dc4:	77 e0       	ldi	r23, 0x07	; 7
    2dc6:	83 e6       	ldi	r24, 0x63	; 99
    2dc8:	93 e2       	ldi	r25, 0x23	; 35
    2dca:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2dce:	89 2b       	or	r24, r25
    2dd0:	51 f1       	breq	.+84     	; 0x2e26 <roomKeys+0x284>
			{
				hardware.alarmEnabled = true;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	80 93 c2 20 	sts	0x20C2, r24
				eeprom_update_byte((uint8_t *) &alarmEnabledEEPROM, (uint8_t) hardware.alarmEnabled);
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	8d e0       	ldi	r24, 0x0D	; 13
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 5e 38 	call	0x70bc	; 0x70bc <eeprom_update_byte>
				appUIPrintln("Alarm enabled");
    2de2:	88 ee       	ldi	r24, 0xE8	; 232
    2de4:	97 e0       	ldi	r25, 0x07	; 7
    2de6:	9f 93       	push	r25
    2de8:	8f 93       	push	r24
    2dea:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
			
				if (RTCIsSurpassed(&hardware.time, &hardware.alarm))
    2dee:	6f e1       	ldi	r22, 0x1F	; 31
    2df0:	70 e2       	ldi	r23, 0x20	; 32
    2df2:	89 e1       	ldi	r24, 0x19	; 25
    2df4:	90 e2       	ldi	r25, 0x20	; 32
    2df6:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <RTCIsSurpassed>
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	88 23       	and	r24, r24
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <roomKeys+0x262>
    2e02:	31 c1       	rjmp	.+610    	; 0x3066 <roomKeys+0x4c4>
				{
					RTCUpdateDate(&hardware.alarm, hardware.time.year, hardware.time.month, hardware.time.day);
    2e04:	e9 e1       	ldi	r30, 0x19	; 25
    2e06:	f0 e2       	ldi	r31, 0x20	; 32
    2e08:	22 81       	ldd	r18, Z+2	; 0x02
    2e0a:	41 81       	ldd	r20, Z+1	; 0x01
    2e0c:	60 81       	ld	r22, Z
    2e0e:	8f e1       	ldi	r24, 0x1F	; 31
    2e10:	90 e2       	ldi	r25, 0x20	; 32
    2e12:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <RTCUpdateDate>
					RTCAddDate(&hardware.alarm, 0, 0, 1);
    2e16:	21 e0       	ldi	r18, 0x01	; 1
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	8f e1       	ldi	r24, 0x1F	; 31
    2e1e:	90 e2       	ldi	r25, 0x20	; 32
    2e20:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <RTCAddDate>
    2e24:	20 c1       	rjmp	.+576    	; 0x3066 <roomKeys+0x4c4>
				}
			}
			else if (strstr_P(textInput.buf, PSTR("off")) != NULL)
    2e26:	64 ee       	ldi	r22, 0xE4	; 228
    2e28:	77 e0       	ldi	r23, 0x07	; 7
    2e2a:	83 e6       	ldi	r24, 0x63	; 99
    2e2c:	93 e2       	ldi	r25, 0x23	; 35
    2e2e:	0e 94 83 33 	call	0x6706	; 0x6706 <strstr_P>
    2e32:	89 2b       	or	r24, r25
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <roomKeys+0x296>
    2e36:	17 c1       	rjmp	.+558    	; 0x3066 <roomKeys+0x4c4>
			{
				hardware.alarmEnabled = false;
    2e38:	10 92 c2 20 	sts	0x20C2, r1
				eeprom_update_byte((uint8_t *) &alarmEnabledEEPROM, (uint8_t) hardware.alarmEnabled);
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	8d e0       	ldi	r24, 0x0D	; 13
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 5e 38 	call	0x70bc	; 0x70bc <eeprom_update_byte>
				appUIPrintln("Alarm disabled");
    2e46:	85 ed       	ldi	r24, 0xD5	; 213
    2e48:	97 e0       	ldi	r25, 0x07	; 7
    2e4a:	9f 93       	push	r25
    2e4c:	8f 93       	push	r24
    2e4e:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	07 c1       	rjmp	.+526    	; 0x3066 <roomKeys+0x4c4>
			}
		}
		
		
		// Update Date
		else if (sscanf_P(textInput.buf, PSTR("d%*[^0-9]%hhu:%hhu:%hhu"), (uint8_t *) &newTime.year, (uint8_t *) &newTime.month, (uint8_t *) &newTime.day) == 3)
    2e58:	ce 01       	movw	r24, r28
    2e5a:	03 96       	adiw	r24, 0x03	; 3
    2e5c:	9f 93       	push	r25
    2e5e:	8f 93       	push	r24
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	9f 93       	push	r25
    2e64:	8f 93       	push	r24
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9f 93       	push	r25
    2e6a:	8f 93       	push	r24
    2e6c:	8d eb       	ldi	r24, 0xBD	; 189
    2e6e:	97 e0       	ldi	r25, 0x07	; 7
    2e70:	9f 93       	push	r25
    2e72:	8f 93       	push	r24
    2e74:	83 e6       	ldi	r24, 0x63	; 99
    2e76:	93 e2       	ldi	r25, 0x23	; 35
    2e78:	9f 93       	push	r25
    2e7a:	8f 93       	push	r24
    2e7c:	0e 94 4d 34 	call	0x689a	; 0x689a <sscanf_P>
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	03 97       	sbiw	r24, 0x03	; 3
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <roomKeys+0x2e8>
    2e88:	40 c0       	rjmp	.+128    	; 0x2f0a <roomKeys+0x368>
		{
			if (RTCUpdateDate(&hardware.time, newTime.year, newTime.month, newTime.day) == true)
    2e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e8c:	4a 81       	ldd	r20, Y+2	; 0x02
    2e8e:	69 81       	ldd	r22, Y+1	; 0x01
    2e90:	89 e1       	ldi	r24, 0x19	; 25
    2e92:	90 e2       	ldi	r25, 0x20	; 32
    2e94:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <RTCUpdateDate>
    2e98:	88 23       	and	r24, r24
    2e9a:	71 f1       	breq	.+92     	; 0x2ef8 <roomKeys+0x356>
			{
				writeTimeToEE();
    2e9c:	61 de       	rcall	.-830    	; 0x2b60 <writeTimeToEE>
				RTCUpdateDate(&hardware.alarm, newTime.year, newTime.month, newTime.day);
    2e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea0:	4a 81       	ldd	r20, Y+2	; 0x02
    2ea2:	69 81       	ldd	r22, Y+1	; 0x01
    2ea4:	8f e1       	ldi	r24, 0x1F	; 31
    2ea6:	90 e2       	ldi	r25, 0x20	; 32
    2ea8:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <RTCUpdateDate>
				appUIPrintln("Succesfully updated date to: ");
    2eac:	8f e9       	ldi	r24, 0x9F	; 159
    2eae:	97 e0       	ldi	r25, 0x07	; 7
    2eb0:	9f 93       	push	r25
    2eb2:	8f 93       	push	r24
    2eb4:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
				RTCPrintDate(&newTime);
    2eb8:	ce 01       	movw	r24, r28
    2eba:	01 96       	adiw	r24, 0x01	; 1
    2ebc:	0e 94 42 25 	call	0x4a84	; 0x4a84 <RTCPrintDate>
				
				if (RTCIsSurpassed(&hardware.time, &hardware.alarm))
    2ec0:	6f e1       	ldi	r22, 0x1F	; 31
    2ec2:	70 e2       	ldi	r23, 0x20	; 32
    2ec4:	89 e1       	ldi	r24, 0x19	; 25
    2ec6:	90 e2       	ldi	r25, 0x20	; 32
    2ec8:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <RTCIsSurpassed>
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	88 23       	and	r24, r24
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <roomKeys+0x334>
    2ed4:	c8 c0       	rjmp	.+400    	; 0x3066 <roomKeys+0x4c4>
				{
					RTCUpdateDate(&hardware.alarm, hardware.time.year, hardware.time.month, hardware.time.day);
    2ed6:	e9 e1       	ldi	r30, 0x19	; 25
    2ed8:	f0 e2       	ldi	r31, 0x20	; 32
    2eda:	22 81       	ldd	r18, Z+2	; 0x02
    2edc:	41 81       	ldd	r20, Z+1	; 0x01
    2ede:	60 81       	ld	r22, Z
    2ee0:	8f e1       	ldi	r24, 0x1F	; 31
    2ee2:	90 e2       	ldi	r25, 0x20	; 32
    2ee4:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <RTCUpdateDate>
					RTCAddDate(&hardware.alarm, 0, 0, 1);
    2ee8:	21 e0       	ldi	r18, 0x01	; 1
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	8f e1       	ldi	r24, 0x1F	; 31
    2ef0:	90 e2       	ldi	r25, 0x20	; 32
    2ef2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <RTCAddDate>
    2ef6:	b7 c0       	rjmp	.+366    	; 0x3066 <roomKeys+0x4c4>
				} // */
			}
			else appUIPrintln("Failed updating date: invalid date!");
    2ef8:	8b e7       	ldi	r24, 0x7B	; 123
    2efa:	97 e0       	ldi	r25, 0x07	; 7
    2efc:	9f 93       	push	r25
    2efe:	8f 93       	push	r24
    2f00:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	ae c0       	rjmp	.+348    	; 0x3066 <roomKeys+0x4c4>
		}
		
		// Update Time
		else if (sscanf_P(textInput.buf, PSTR("t%*[^0-9]%hhu:%hhu:%hhu"), (uint8_t *) &newTime.hour, (uint8_t *) &newTime.minute, (uint8_t *) &newTime.second) == 3)
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	06 96       	adiw	r24, 0x06	; 6
    2f0e:	9f 93       	push	r25
    2f10:	8f 93       	push	r24
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9f 93       	push	r25
    2f16:	8f 93       	push	r24
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9f 93       	push	r25
    2f1c:	8f 93       	push	r24
    2f1e:	83 e6       	ldi	r24, 0x63	; 99
    2f20:	97 e0       	ldi	r25, 0x07	; 7
    2f22:	9f 93       	push	r25
    2f24:	8f 93       	push	r24
    2f26:	83 e6       	ldi	r24, 0x63	; 99
    2f28:	93 e2       	ldi	r25, 0x23	; 35
    2f2a:	9f 93       	push	r25
    2f2c:	8f 93       	push	r24
    2f2e:	0e 94 4d 34 	call	0x689a	; 0x689a <sscanf_P>
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	03 97       	sbiw	r24, 0x03	; 3
    2f38:	c9 f5       	brne	.+114    	; 0x2fac <roomKeys+0x40a>
		{
			if (RTCUpdateTime(&hardware.time, newTime.hour, newTime.minute, newTime.second) == true)
    2f3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f3c:	4d 81       	ldd	r20, Y+5	; 0x05
    2f3e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f40:	89 e1       	ldi	r24, 0x19	; 25
    2f42:	90 e2       	ldi	r25, 0x20	; 32
    2f44:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <RTCUpdateTime>
    2f48:	88 23       	and	r24, r24
    2f4a:	39 f1       	breq	.+78     	; 0x2f9a <roomKeys+0x3f8>
			{
				writeTimeToEE();
    2f4c:	09 de       	rcall	.-1006   	; 0x2b60 <writeTimeToEE>
				appUIPrintln("Succesfully updated time to: ");
    2f4e:	85 e4       	ldi	r24, 0x45	; 69
    2f50:	97 e0       	ldi	r25, 0x07	; 7
    2f52:	9f 93       	push	r25
    2f54:	8f 93       	push	r24
    2f56:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
				RTCPrintTime(&newTime);
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <RTCPrintTime>
				
				if (RTCIsSurpassed(&hardware.time, &hardware.alarm))
    2f62:	6f e1       	ldi	r22, 0x1F	; 31
    2f64:	70 e2       	ldi	r23, 0x20	; 32
    2f66:	89 e1       	ldi	r24, 0x19	; 25
    2f68:	90 e2       	ldi	r25, 0x20	; 32
    2f6a:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <RTCIsSurpassed>
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	88 23       	and	r24, r24
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <roomKeys+0x3d6>
    2f76:	77 c0       	rjmp	.+238    	; 0x3066 <roomKeys+0x4c4>
				{
					RTCUpdateDate(&hardware.alarm, hardware.time.year, hardware.time.month, hardware.time.day);
    2f78:	e9 e1       	ldi	r30, 0x19	; 25
    2f7a:	f0 e2       	ldi	r31, 0x20	; 32
    2f7c:	22 81       	ldd	r18, Z+2	; 0x02
    2f7e:	41 81       	ldd	r20, Z+1	; 0x01
    2f80:	60 81       	ld	r22, Z
    2f82:	8f e1       	ldi	r24, 0x1F	; 31
    2f84:	90 e2       	ldi	r25, 0x20	; 32
    2f86:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <RTCUpdateDate>
					RTCAddDate(&hardware.alarm, 0, 0, 1);
    2f8a:	21 e0       	ldi	r18, 0x01	; 1
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	8f e1       	ldi	r24, 0x1F	; 31
    2f92:	90 e2       	ldi	r25, 0x20	; 32
    2f94:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <RTCAddDate>
    2f98:	66 c0       	rjmp	.+204    	; 0x3066 <roomKeys+0x4c4>
				} // */
			}
			else appUIPrintln("Failed updating time: invalid time!");
    2f9a:	81 e2       	ldi	r24, 0x21	; 33
    2f9c:	97 e0       	ldi	r25, 0x07	; 7
    2f9e:	9f 93       	push	r25
    2fa0:	8f 93       	push	r24
    2fa2:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	5d c0       	rjmp	.+186    	; 0x3066 <roomKeys+0x4c4>
		} 
		
		// Update Alarm
		else if (sscanf_P(textInput.buf, PSTR("a%*[^0-9]%hhu:%hhu:%hhu"), (uint8_t *) &newTime.hour, (uint8_t *) &newTime.minute, (uint8_t *) &newTime.second) == 3)
    2fac:	ce 01       	movw	r24, r28
    2fae:	06 96       	adiw	r24, 0x06	; 6
    2fb0:	9f 93       	push	r25
    2fb2:	8f 93       	push	r24
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9f 93       	push	r25
    2fb8:	8f 93       	push	r24
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	9f 93       	push	r25
    2fbe:	8f 93       	push	r24
    2fc0:	89 e0       	ldi	r24, 0x09	; 9
    2fc2:	97 e0       	ldi	r25, 0x07	; 7
    2fc4:	9f 93       	push	r25
    2fc6:	8f 93       	push	r24
    2fc8:	83 e6       	ldi	r24, 0x63	; 99
    2fca:	93 e2       	ldi	r25, 0x23	; 35
    2fcc:	9f 93       	push	r25
    2fce:	8f 93       	push	r24
    2fd0:	0e 94 4d 34 	call	0x689a	; 0x689a <sscanf_P>
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	03 97       	sbiw	r24, 0x03	; 3
    2fda:	e9 f5       	brne	.+122    	; 0x3056 <roomKeys+0x4b4>
		{
			if (RTCUpdateAll(&hardware.alarm, hardware.time.year, hardware.time.month, hardware.time.day, newTime.hour, newTime.minute, newTime.second) == true)
    2fdc:	e9 e1       	ldi	r30, 0x19	; 25
    2fde:	f0 e2       	ldi	r31, 0x20	; 32
    2fe0:	ce 80       	ldd	r12, Y+6	; 0x06
    2fe2:	ed 80       	ldd	r14, Y+5	; 0x05
    2fe4:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe6:	22 81       	ldd	r18, Z+2	; 0x02
    2fe8:	41 81       	ldd	r20, Z+1	; 0x01
    2fea:	60 81       	ld	r22, Z
    2fec:	8f e1       	ldi	r24, 0x1F	; 31
    2fee:	90 e2       	ldi	r25, 0x20	; 32
    2ff0:	0e 94 83 26 	call	0x4d06	; 0x4d06 <RTCUpdateAll>
    2ff4:	88 23       	and	r24, r24
    2ff6:	31 f1       	breq	.+76     	; 0x3044 <roomKeys+0x4a2>
			{
				writeTimeToEE();
    2ff8:	b3 dd       	rcall	.-1178   	; 0x2b60 <writeTimeToEE>
				appUIPrintln("Succesfully updated alarm to: ");
    2ffa:	8a ee       	ldi	r24, 0xEA	; 234
    2ffc:	96 e0       	ldi	r25, 0x06	; 6
    2ffe:	9f 93       	push	r25
    3000:	8f 93       	push	r24
    3002:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
				RTCPrintAll(&newTime);
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <RTCPrintAll>
				
				if (RTCIsSurpassed(&hardware.time, &hardware.alarm))
    300e:	6f e1       	ldi	r22, 0x1F	; 31
    3010:	70 e2       	ldi	r23, 0x20	; 32
    3012:	89 e1       	ldi	r24, 0x19	; 25
    3014:	90 e2       	ldi	r25, 0x20	; 32
    3016:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <RTCIsSurpassed>
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	88 23       	and	r24, r24
    3020:	11 f1       	breq	.+68     	; 0x3066 <roomKeys+0x4c4>
				{
					RTCUpdateDate(&hardware.alarm, hardware.time.year, hardware.time.month, hardware.time.day);
    3022:	e9 e1       	ldi	r30, 0x19	; 25
    3024:	f0 e2       	ldi	r31, 0x20	; 32
    3026:	22 81       	ldd	r18, Z+2	; 0x02
    3028:	41 81       	ldd	r20, Z+1	; 0x01
    302a:	60 81       	ld	r22, Z
    302c:	8f e1       	ldi	r24, 0x1F	; 31
    302e:	90 e2       	ldi	r25, 0x20	; 32
    3030:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <RTCUpdateDate>
					RTCAddDate(&hardware.alarm, 0, 0, 1);
    3034:	21 e0       	ldi	r18, 0x01	; 1
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	8f e1       	ldi	r24, 0x1F	; 31
    303c:	90 e2       	ldi	r25, 0x20	; 32
    303e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <RTCAddDate>
    3042:	11 c0       	rjmp	.+34     	; 0x3066 <roomKeys+0x4c4>
				}
			}
			else appUIPrintln("Failed updating alarm: invalid time!");
    3044:	85 ec       	ldi	r24, 0xC5	; 197
    3046:	96 e0       	ldi	r25, 0x06	; 6
    3048:	9f 93       	push	r25
    304a:	8f 93       	push	r24
    304c:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	08 c0       	rjmp	.+16     	; 0x3066 <roomKeys+0x4c4>
		}
		
		else appUIPrintln("Failed reading text input: invalid input format!");
    3056:	84 e9       	ldi	r24, 0x94	; 148
    3058:	96 e0       	ldi	r25, 0x06	; 6
    305a:	9f 93       	push	r25
    305c:	8f 93       	push	r24
    305e:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
		
		memset(&textInput, 0, sizeof textInput);
    3066:	81 e2       	ldi	r24, 0x21	; 33
    3068:	e3 e6       	ldi	r30, 0x63	; 99
    306a:	f3 e2       	ldi	r31, 0x23	; 35
    306c:	df 01       	movw	r26, r30
    306e:	1d 92       	st	X+, r1
    3070:	8a 95       	dec	r24
    3072:	e9 f7       	brne	.-6      	; 0x306e <roomKeys+0x4cc>
    3074:	0e c1       	rjmp	.+540    	; 0x3292 <roomKeys+0x6f0>



static void roomKeysMenuRemote(uint8_t key)
{
	remoteCommand_t cmd =
    3076:	80 91 b9 20 	lds	r24, 0x20B9
    307a:	89 83       	std	Y+1, r24	; 0x01
	{
		.devices_bm = 1 << hardware.device.number,
    307c:	20 91 ba 20 	lds	r18, 0x20BA
    3080:	42 2f       	mov	r20, r18
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	02 2e       	mov	r0, r18
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <roomKeys+0x4ee>
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	0a 94       	dec	r0
    3092:	e2 f7       	brpl	.-8      	; 0x308c <roomKeys+0x4ea>



static void roomKeysMenuRemote(uint8_t key)
{
	remoteCommand_t cmd =
    3094:	8a 83       	std	Y+2, r24	; 0x02
    3096:	9b 83       	std	Y+3, r25	; 0x03
    3098:	1c 82       	std	Y+4, r1	; 0x04
    309a:	1d 82       	std	Y+5, r1	; 0x05
		.device_type = hardware.device.type,
		.key = noone,
	};

//	Check for key press to fill in command struct
	switch (key)
    309c:	16 36       	cpi	r17, 0x66	; 102
    309e:	09 f4       	brne	.+2      	; 0x30a2 <roomKeys+0x500>
    30a0:	86 c0       	rjmp	.+268    	; 0x31ae <roomKeys+0x60c>
    30a2:	b0 f5       	brcc	.+108    	; 0x3110 <roomKeys+0x56e>
    30a4:	16 33       	cpi	r17, 0x36	; 54
    30a6:	09 f4       	brne	.+2      	; 0x30aa <roomKeys+0x508>
    30a8:	e5 c0       	rjmp	.+458    	; 0x3274 <roomKeys+0x6d2>
    30aa:	d0 f4       	brcc	.+52     	; 0x30e0 <roomKeys+0x53e>
    30ac:	11 33       	cpi	r17, 0x31	; 49
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <roomKeys+0x510>
    30b0:	d2 c0       	rjmp	.+420    	; 0x3256 <roomKeys+0x6b4>
    30b2:	50 f4       	brcc	.+20     	; 0x30c8 <roomKeys+0x526>
    30b4:	1e 32       	cpi	r17, 0x2E	; 46
    30b6:	09 f4       	brne	.+2      	; 0x30ba <roomKeys+0x518>
    30b8:	a7 c0       	rjmp	.+334    	; 0x3208 <roomKeys+0x666>
    30ba:	10 33       	cpi	r17, 0x30	; 48
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <roomKeys+0x51e>
    30be:	c8 c0       	rjmp	.+400    	; 0x3250 <roomKeys+0x6ae>
    30c0:	1c 32       	cpi	r17, 0x2C	; 44
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <roomKeys+0x524>
    30c4:	e6 c0       	rjmp	.+460    	; 0x3292 <roomKeys+0x6f0>
    30c6:	9d c0       	rjmp	.+314    	; 0x3202 <roomKeys+0x660>
    30c8:	13 33       	cpi	r17, 0x33	; 51
    30ca:	09 f4       	brne	.+2      	; 0x30ce <roomKeys+0x52c>
    30cc:	ca c0       	rjmp	.+404    	; 0x3262 <roomKeys+0x6c0>
    30ce:	08 f4       	brcc	.+2      	; 0x30d2 <roomKeys+0x530>
    30d0:	c5 c0       	rjmp	.+394    	; 0x325c <roomKeys+0x6ba>
    30d2:	14 33       	cpi	r17, 0x34	; 52
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <roomKeys+0x536>
    30d6:	c8 c0       	rjmp	.+400    	; 0x3268 <roomKeys+0x6c6>
    30d8:	15 33       	cpi	r17, 0x35	; 53
    30da:	09 f4       	brne	.+2      	; 0x30de <roomKeys+0x53c>
    30dc:	c8 c0       	rjmp	.+400    	; 0x326e <roomKeys+0x6cc>
    30de:	d9 c0       	rjmp	.+434    	; 0x3292 <roomKeys+0x6f0>
    30e0:	11 36       	cpi	r17, 0x61	; 97
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <roomKeys+0x544>
    30e4:	97 c0       	rjmp	.+302    	; 0x3214 <roomKeys+0x672>
    30e6:	48 f4       	brcc	.+18     	; 0x30fa <roomKeys+0x558>
    30e8:	18 33       	cpi	r17, 0x38	; 56
    30ea:	09 f4       	brne	.+2      	; 0x30ee <roomKeys+0x54c>
    30ec:	c9 c0       	rjmp	.+402    	; 0x3280 <roomKeys+0x6de>
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <roomKeys+0x550>
    30f0:	c4 c0       	rjmp	.+392    	; 0x327a <roomKeys+0x6d8>
    30f2:	19 33       	cpi	r17, 0x39	; 57
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <roomKeys+0x556>
    30f6:	c7 c0       	rjmp	.+398    	; 0x3286 <roomKeys+0x6e4>
    30f8:	cc c0       	rjmp	.+408    	; 0x3292 <roomKeys+0x6f0>
    30fa:	13 36       	cpi	r17, 0x63	; 99
    30fc:	09 f4       	brne	.+2      	; 0x3100 <roomKeys+0x55e>
    30fe:	78 c0       	rjmp	.+240    	; 0x31f0 <roomKeys+0x64e>
    3100:	08 f4       	brcc	.+2      	; 0x3104 <roomKeys+0x562>
    3102:	73 c0       	rjmp	.+230    	; 0x31ea <roomKeys+0x648>
    3104:	14 36       	cpi	r17, 0x64	; 100
    3106:	09 f4       	brne	.+2      	; 0x310a <roomKeys+0x568>
    3108:	8b c0       	rjmp	.+278    	; 0x3220 <roomKeys+0x67e>
    310a:	15 36       	cpi	r17, 0x65	; 101
    310c:	d9 f1       	breq	.+118    	; 0x3184 <roomKeys+0x5e2>
    310e:	c1 c0       	rjmp	.+386    	; 0x3292 <roomKeys+0x6f0>
    3110:	1f 36       	cpi	r17, 0x6F	; 111
    3112:	09 f4       	brne	.+2      	; 0x3116 <roomKeys+0x574>
    3114:	67 c0       	rjmp	.+206    	; 0x31e4 <roomKeys+0x642>
    3116:	b0 f4       	brcc	.+44     	; 0x3144 <roomKeys+0x5a2>
    3118:	1a 36       	cpi	r17, 0x6A	; 106
    311a:	09 f4       	brne	.+2      	; 0x311e <roomKeys+0x57c>
    311c:	93 c0       	rjmp	.+294    	; 0x3244 <roomKeys+0x6a2>
    311e:	30 f4       	brcc	.+12     	; 0x312c <roomKeys+0x58a>
    3120:	18 36       	cpi	r17, 0x68	; 104
    3122:	09 f4       	brne	.+2      	; 0x3126 <roomKeys+0x584>
    3124:	68 c0       	rjmp	.+208    	; 0x31f6 <roomKeys+0x654>
    3126:	08 f4       	brcc	.+2      	; 0x312a <roomKeys+0x588>
    3128:	4e c0       	rjmp	.+156    	; 0x31c6 <roomKeys+0x624>
    312a:	89 c0       	rjmp	.+274    	; 0x323e <roomKeys+0x69c>
    312c:	1c 36       	cpi	r17, 0x6C	; 108
    312e:	09 f4       	brne	.+2      	; 0x3132 <roomKeys+0x590>
    3130:	80 c0       	rjmp	.+256    	; 0x3232 <roomKeys+0x690>
    3132:	08 f4       	brcc	.+2      	; 0x3136 <roomKeys+0x594>
    3134:	8a c0       	rjmp	.+276    	; 0x324a <roomKeys+0x6a8>
    3136:	1d 36       	cpi	r17, 0x6D	; 109
    3138:	09 f4       	brne	.+2      	; 0x313c <roomKeys+0x59a>
    313a:	60 c0       	rjmp	.+192    	; 0x31fc <roomKeys+0x65a>
    313c:	1e 36       	cpi	r17, 0x6E	; 110
    313e:	09 f4       	brne	.+2      	; 0x3142 <roomKeys+0x5a0>
    3140:	75 c0       	rjmp	.+234    	; 0x322c <roomKeys+0x68a>
    3142:	a7 c0       	rjmp	.+334    	; 0x3292 <roomKeys+0x6f0>
    3144:	16 37       	cpi	r17, 0x76	; 118
    3146:	09 f4       	brne	.+2      	; 0x314a <roomKeys+0x5a8>
    3148:	41 c0       	rjmp	.+130    	; 0x31cc <roomKeys+0x62a>
    314a:	58 f4       	brcc	.+22     	; 0x3162 <roomKeys+0x5c0>
    314c:	11 37       	cpi	r17, 0x71	; 113
    314e:	99 f0       	breq	.+38     	; 0x3176 <roomKeys+0x5d4>
    3150:	08 f4       	brcc	.+2      	; 0x3154 <roomKeys+0x5b2>
    3152:	45 c0       	rjmp	.+138    	; 0x31de <roomKeys+0x63c>
    3154:	13 37       	cpi	r17, 0x73	; 115
    3156:	09 f4       	brne	.+2      	; 0x315a <roomKeys+0x5b8>
    3158:	60 c0       	rjmp	.+192    	; 0x321a <roomKeys+0x678>
    315a:	15 37       	cpi	r17, 0x75	; 117
    315c:	09 f4       	brne	.+2      	; 0x3160 <roomKeys+0x5be>
    315e:	6c c0       	rjmp	.+216    	; 0x3238 <roomKeys+0x696>
    3160:	98 c0       	rjmp	.+304    	; 0x3292 <roomKeys+0x6f0>
    3162:	18 37       	cpi	r17, 0x78	; 120
    3164:	d9 f0       	breq	.+54     	; 0x319c <roomKeys+0x5fa>
    3166:	08 f4       	brcc	.+2      	; 0x316a <roomKeys+0x5c8>
    3168:	52 c0       	rjmp	.+164    	; 0x320e <roomKeys+0x66c>
    316a:	19 37       	cpi	r17, 0x79	; 121
    316c:	09 f4       	brne	.+2      	; 0x3170 <roomKeys+0x5ce>
    316e:	5b c0       	rjmp	.+182    	; 0x3226 <roomKeys+0x684>
    3170:	1a 37       	cpi	r17, 0x7A	; 122
    3172:	01 f1       	breq	.+64     	; 0x31b4 <roomKeys+0x612>
    3174:	8e c0       	rjmp	.+284    	; 0x3292 <roomKeys+0x6f0>
	{
		case 'q':	if (hardware.device.number > 0)									hardware.device.number--;		return;
    3176:	22 23       	and	r18, r18
    3178:	09 f4       	brne	.+2      	; 0x317c <roomKeys+0x5da>
    317a:	8b c0       	rjmp	.+278    	; 0x3292 <roomKeys+0x6f0>
    317c:	21 50       	subi	r18, 0x01	; 1
    317e:	20 93 ba 20 	sts	0x20BA, r18
    3182:	87 c0       	rjmp	.+270    	; 0x3292 <roomKeys+0x6f0>
		case 'e':	if (hardware.device.number < hardware.device.numberTotal - 1)	hardware.device.number++;		return;
    3184:	80 91 bb 20 	lds	r24, 0x20BB
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	48 17       	cp	r20, r24
    318e:	59 07       	cpc	r21, r25
    3190:	0c f0       	brlt	.+2      	; 0x3194 <roomKeys+0x5f2>
    3192:	7f c0       	rjmp	.+254    	; 0x3292 <roomKeys+0x6f0>
    3194:	2f 5f       	subi	r18, 0xFF	; 255
    3196:	20 93 ba 20 	sts	0x20BA, r18
    319a:	7b c0       	rjmp	.+246    	; 0x3292 <roomKeys+0x6f0>
		
		case 'x':	cmd.key = power_switch;		cmd.devices_bm = hardware.device.numberTotal_bm;		break;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	8e 83       	std	Y+6, r24	; 0x06
    31a0:	80 91 bc 20 	lds	r24, 0x20BC
    31a4:	90 91 bd 20 	lds	r25, 0x20BD
    31a8:	8a 83       	std	Y+2, r24	; 0x02
    31aa:	9b 83       	std	Y+3, r25	; 0x03
    31ac:	6e c0       	rjmp	.+220    	; 0x328a <roomKeys+0x6e8>
		case 'f':	cmd.key = power_switch;		break;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	8e 83       	std	Y+6, r24	; 0x06
    31b2:	6b c0       	rjmp	.+214    	; 0x328a <roomKeys+0x6e8>
		
		case 'z':	cmd.key = channel_number;	cmd.devices_bm = hardware.device.numberTotal_bm;		break;
    31b4:	82 e0       	ldi	r24, 0x02	; 2
    31b6:	8e 83       	std	Y+6, r24	; 0x06
    31b8:	80 91 bc 20 	lds	r24, 0x20BC
    31bc:	90 91 bd 20 	lds	r25, 0x20BD
    31c0:	8a 83       	std	Y+2, r24	; 0x02
    31c2:	9b 83       	std	Y+3, r25	; 0x03
    31c4:	62 c0       	rjmp	.+196    	; 0x328a <roomKeys+0x6e8>
		case 'g':	cmd.key = channel_number;	break;
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	8e 83       	std	Y+6, r24	; 0x06
    31ca:	5f c0       	rjmp	.+190    	; 0x328a <roomKeys+0x6e8>
		
		case 'v':	cmd.key = volume_up;		cmd.devices_bm = hardware.device.numberTotal_bm;		break;
    31cc:	8f e0       	ldi	r24, 0x0F	; 15
    31ce:	8e 83       	std	Y+6, r24	; 0x06
    31d0:	80 91 bc 20 	lds	r24, 0x20BC
    31d4:	90 91 bd 20 	lds	r25, 0x20BD
    31d8:	8a 83       	std	Y+2, r24	; 0x02
    31da:	9b 83       	std	Y+3, r25	; 0x03
    31dc:	56 c0       	rjmp	.+172    	; 0x328a <roomKeys+0x6e8>
		case 'p':	cmd.key = power;			break;
    31de:	83 e0       	ldi	r24, 0x03	; 3
    31e0:	8e 83       	std	Y+6, r24	; 0x06
    31e2:	53 c0       	rjmp	.+166    	; 0x328a <roomKeys+0x6e8>
		case 'o':	cmd.key = confirm;			break;
    31e4:	88 e0       	ldi	r24, 0x08	; 8
    31e6:	8e 83       	std	Y+6, r24	; 0x06
    31e8:	50 c0       	rjmp	.+160    	; 0x328a <roomKeys+0x6e8>
		case 'b':	cmd.key = back;				break;
    31ea:	89 e0       	ldi	r24, 0x09	; 9
    31ec:	8e 83       	std	Y+6, r24	; 0x06
    31ee:	4d c0       	rjmp	.+154    	; 0x328a <roomKeys+0x6e8>
		case 'c':	cmd.key = cancel;			break;
    31f0:	8a e0       	ldi	r24, 0x0A	; 10
    31f2:	8e 83       	std	Y+6, r24	; 0x06
    31f4:	4a c0       	rjmp	.+148    	; 0x328a <roomKeys+0x6e8>
		case 'h':	cmd.key = home;				break;
    31f6:	8b e0       	ldi	r24, 0x0B	; 11
    31f8:	8e 83       	std	Y+6, r24	; 0x06
    31fa:	47 c0       	rjmp	.+142    	; 0x328a <roomKeys+0x6e8>
		case 'm':	cmd.key = menu;				break;
    31fc:	8c e0       	ldi	r24, 0x0C	; 12
    31fe:	8e 83       	std	Y+6, r24	; 0x06
    3200:	44 c0       	rjmp	.+136    	; 0x328a <roomKeys+0x6e8>
		case ',':	cmd.key = channel_down;		break;
    3202:	8e e0       	ldi	r24, 0x0E	; 14
    3204:	8e 83       	std	Y+6, r24	; 0x06
    3206:	41 c0       	rjmp	.+130    	; 0x328a <roomKeys+0x6e8>
		case '.':	cmd.key = channel_up;		break;
    3208:	8d e0       	ldi	r24, 0x0D	; 13
    320a:	8e 83       	std	Y+6, r24	; 0x06
    320c:	3e c0       	rjmp	.+124    	; 0x328a <roomKeys+0x6e8>
		case 'w':	cmd.key = arrow_up;			break;
    320e:	84 e0       	ldi	r24, 0x04	; 4
    3210:	8e 83       	std	Y+6, r24	; 0x06
    3212:	3b c0       	rjmp	.+118    	; 0x328a <roomKeys+0x6e8>
		case 'a':	cmd.key = arrow_left;		break;
    3214:	87 e0       	ldi	r24, 0x07	; 7
    3216:	8e 83       	std	Y+6, r24	; 0x06
    3218:	38 c0       	rjmp	.+112    	; 0x328a <roomKeys+0x6e8>
		case 's':	cmd.key = arrow_down;		break;
    321a:	85 e0       	ldi	r24, 0x05	; 5
    321c:	8e 83       	std	Y+6, r24	; 0x06
    321e:	35 c0       	rjmp	.+106    	; 0x328a <roomKeys+0x6e8>
		case 'd':	cmd.key = arrow_right;		break;
    3220:	86 e0       	ldi	r24, 0x06	; 6
    3222:	8e 83       	std	Y+6, r24	; 0x06
    3224:	32 c0       	rjmp	.+100    	; 0x328a <roomKeys+0x6e8>
		
		case 'y':	cmd.key = favorite;			break;
    3226:	83 e1       	ldi	r24, 0x13	; 19
    3228:	8e 83       	std	Y+6, r24	; 0x06
    322a:	2f c0       	rjmp	.+94     	; 0x328a <roomKeys+0x6e8>
		case 'n':	cmd.key = option;			break;
    322c:	82 e1       	ldi	r24, 0x12	; 18
    322e:	8e 83       	std	Y+6, r24	; 0x06
    3230:	2c c0       	rjmp	.+88     	; 0x328a <roomKeys+0x6e8>
		case 'l':	cmd.key = schedule;			break;
    3232:	84 e1       	ldi	r24, 0x14	; 20
    3234:	8e 83       	std	Y+6, r24	; 0x06
    3236:	29 c0       	rjmp	.+82     	; 0x328a <roomKeys+0x6e8>
		
		case 'u':	cmd.key = red;				break;
    3238:	85 e1       	ldi	r24, 0x15	; 21
    323a:	8e 83       	std	Y+6, r24	; 0x06
    323c:	26 c0       	rjmp	.+76     	; 0x328a <roomKeys+0x6e8>
		case 'i':	cmd.key = green;			break;
    323e:	86 e1       	ldi	r24, 0x16	; 22
    3240:	8e 83       	std	Y+6, r24	; 0x06
    3242:	23 c0       	rjmp	.+70     	; 0x328a <roomKeys+0x6e8>
		case 'j':	cmd.key = yellow;			break;
    3244:	87 e1       	ldi	r24, 0x17	; 23
    3246:	8e 83       	std	Y+6, r24	; 0x06
    3248:	20 c0       	rjmp	.+64     	; 0x328a <roomKeys+0x6e8>
		case 'k':	cmd.key = blue;				break;
    324a:	88 e1       	ldi	r24, 0x18	; 24
    324c:	8e 83       	std	Y+6, r24	; 0x06
    324e:	1d c0       	rjmp	.+58     	; 0x328a <roomKeys+0x6e8>
		
		case '0':	cmd.key = zero;				break;
    3250:	89 e1       	ldi	r24, 0x19	; 25
    3252:	8e 83       	std	Y+6, r24	; 0x06
    3254:	1a c0       	rjmp	.+52     	; 0x328a <roomKeys+0x6e8>
		case '1':	cmd.key = one;				break;
    3256:	8a e1       	ldi	r24, 0x1A	; 26
    3258:	8e 83       	std	Y+6, r24	; 0x06
    325a:	17 c0       	rjmp	.+46     	; 0x328a <roomKeys+0x6e8>
		case '2':	cmd.key = two;				break;
    325c:	8b e1       	ldi	r24, 0x1B	; 27
    325e:	8e 83       	std	Y+6, r24	; 0x06
    3260:	14 c0       	rjmp	.+40     	; 0x328a <roomKeys+0x6e8>
		case '3':	cmd.key = three;			break;
    3262:	8c e1       	ldi	r24, 0x1C	; 28
    3264:	8e 83       	std	Y+6, r24	; 0x06
    3266:	11 c0       	rjmp	.+34     	; 0x328a <roomKeys+0x6e8>
		case '4':	cmd.key = four;				break;
    3268:	8d e1       	ldi	r24, 0x1D	; 29
    326a:	8e 83       	std	Y+6, r24	; 0x06
    326c:	0e c0       	rjmp	.+28     	; 0x328a <roomKeys+0x6e8>
		case '5':	cmd.key = five;				break;
    326e:	8e e1       	ldi	r24, 0x1E	; 30
    3270:	8e 83       	std	Y+6, r24	; 0x06
    3272:	0b c0       	rjmp	.+22     	; 0x328a <roomKeys+0x6e8>
		case '6':	cmd.key = six;				break;
    3274:	8f e1       	ldi	r24, 0x1F	; 31
    3276:	8e 83       	std	Y+6, r24	; 0x06
    3278:	08 c0       	rjmp	.+16     	; 0x328a <roomKeys+0x6e8>
		case '7':	cmd.key = seven;			break;
    327a:	80 e2       	ldi	r24, 0x20	; 32
    327c:	8e 83       	std	Y+6, r24	; 0x06
    327e:	05 c0       	rjmp	.+10     	; 0x328a <roomKeys+0x6e8>
		case '8':	cmd.key = eight;			break;
    3280:	81 e2       	ldi	r24, 0x21	; 33
    3282:	8e 83       	std	Y+6, r24	; 0x06
    3284:	02 c0       	rjmp	.+4      	; 0x328a <roomKeys+0x6e8>
		case '9':	cmd.key = nine;				break;
    3286:	82 e2       	ldi	r24, 0x22	; 34
    3288:	8e 83       	std	Y+6, r24	; 0x06
		
		default:	return;						break;
	}

	remoteSendCommand(&cmd);
    328a:	ce 01       	movw	r24, r28
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	0e 94 d5 22 	call	0x45aa	; 0x45aa <remoteSendCommand>
		case ROOM_MAIN:			roomKeysMenuMain(key);		break;
		case ROOM_SETTINGS:		roomKeysMenuSettings(key);	break;
		case ROOM_REMOTE:		roomKeysMenuRemote(key);	break;
		default: break;
	}
}
    3292:	2a 96       	adiw	r28, 0x0a	; 10
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ef 90       	pop	r14
    32a2:	cf 90       	pop	r12
    32a4:	08 95       	ret

000032a6 <resetCausePrint>:
{
	
}

void EVENT_USB_Device_WakeUp()
{
    32a6:	cf 93       	push	r28
    32a8:	e8 e7       	ldi	r30, 0x78	; 120
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	c0 81       	ld	r28, Z
    32ae:	8f e7       	ldi	r24, 0x7F	; 127
    32b0:	80 83       	st	Z, r24
    32b2:	c4 30       	cpi	r28, 0x04	; 4
    32b4:	e1 f0       	breq	.+56     	; 0x32ee <resetCausePrint+0x48>
    32b6:	38 f4       	brcc	.+14     	; 0x32c6 <resetCausePrint+0x20>
    32b8:	c1 30       	cpi	r28, 0x01	; 1
    32ba:	59 f1       	breq	.+86     	; 0x3312 <resetCausePrint+0x6c>
    32bc:	08 f4       	brcc	.+2      	; 0x32c0 <resetCausePrint+0x1a>
    32be:	53 c0       	rjmp	.+166    	; 0x3366 <resetCausePrint+0xc0>
    32c0:	c2 30       	cpi	r28, 0x02	; 2
    32c2:	61 f0       	breq	.+24     	; 0x32dc <resetCausePrint+0x36>
    32c4:	59 c0       	rjmp	.+178    	; 0x3378 <resetCausePrint+0xd2>
    32c6:	c0 31       	cpi	r28, 0x10	; 16
    32c8:	d9 f0       	breq	.+54     	; 0x3300 <resetCausePrint+0x5a>
    32ca:	18 f4       	brcc	.+6      	; 0x32d2 <resetCausePrint+0x2c>
    32cc:	c8 30       	cpi	r28, 0x08	; 8
    32ce:	e1 f1       	breq	.+120    	; 0x3348 <resetCausePrint+0xa2>
    32d0:	53 c0       	rjmp	.+166    	; 0x3378 <resetCausePrint+0xd2>
    32d2:	c0 32       	cpi	r28, 0x20	; 32
    32d4:	39 f1       	breq	.+78     	; 0x3324 <resetCausePrint+0x7e>
    32d6:	c0 34       	cpi	r28, 0x40	; 64
    32d8:	71 f1       	breq	.+92     	; 0x3336 <resetCausePrint+0x90>
    32da:	4e c0       	rjmp	.+156    	; 0x3378 <resetCausePrint+0xd2>
    32dc:	85 ea       	ldi	r24, 0xA5	; 165
    32de:	99 e0       	ldi	r25, 0x09	; 9
    32e0:	9f 93       	push	r25
    32e2:	8f 93       	push	r24
    32e4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	64 c0       	rjmp	.+200    	; 0x33b6 <resetCausePrint+0x110>
    32ee:	87 e9       	ldi	r24, 0x97	; 151
    32f0:	99 e0       	ldi	r25, 0x09	; 9
    32f2:	9f 93       	push	r25
    32f4:	8f 93       	push	r24
    32f6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	5b c0       	rjmp	.+182    	; 0x33b6 <resetCausePrint+0x110>
    3300:	89 e8       	ldi	r24, 0x89	; 137
    3302:	99 e0       	ldi	r25, 0x09	; 9
    3304:	9f 93       	push	r25
    3306:	8f 93       	push	r24
    3308:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	52 c0       	rjmp	.+164    	; 0x33b6 <resetCausePrint+0x110>
    3312:	8f e7       	ldi	r24, 0x7F	; 127
    3314:	99 e0       	ldi	r25, 0x09	; 9
    3316:	9f 93       	push	r25
    3318:	8f 93       	push	r24
    331a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	49 c0       	rjmp	.+146    	; 0x33b6 <resetCausePrint+0x110>
    3324:	85 e7       	ldi	r24, 0x75	; 117
    3326:	99 e0       	ldi	r25, 0x09	; 9
    3328:	9f 93       	push	r25
    332a:	8f 93       	push	r24
    332c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	40 c0       	rjmp	.+128    	; 0x33b6 <resetCausePrint+0x110>
    3336:	8e e6       	ldi	r24, 0x6E	; 110
    3338:	99 e0       	ldi	r25, 0x09	; 9
    333a:	9f 93       	push	r25
    333c:	8f 93       	push	r24
    333e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	37 c0       	rjmp	.+110    	; 0x33b6 <resetCausePrint+0x110>
    3348:	84 e6       	ldi	r24, 0x64	; 100
    334a:	99 e0       	ldi	r25, 0x09	; 9
    334c:	9f 93       	push	r25
    334e:	8f 93       	push	r24
    3350:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    3354:	8e e0       	ldi	r24, 0x0E	; 14
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	0e 94 3f 38 	call	0x707e	; 0x707e <eeprom_read_byte>
    335c:	80 93 2a 20 	sts	0x202A, r24
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	1d c0       	rjmp	.+58     	; 0x33a0 <resetCausePrint+0xfa>
    3366:	8b e5       	ldi	r24, 0x5B	; 91
    3368:	99 e0       	ldi	r25, 0x09	; 9
    336a:	9f 93       	push	r25
    336c:	8f 93       	push	r24
    336e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	1f c0       	rjmp	.+62     	; 0x33b6 <resetCausePrint+0x110>
    3378:	1f 92       	push	r1
    337a:	cf 93       	push	r28
    337c:	87 e5       	ldi	r24, 0x57	; 87
    337e:	99 e0       	ldi	r25, 0x09	; 9
    3380:	9f 93       	push	r25
    3382:	8f 93       	push	r24
    3384:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    3388:	8e e0       	ldi	r24, 0x0E	; 14
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 3f 38 	call	0x707e	; 0x707e <eeprom_read_byte>
    3390:	80 93 2a 20 	sts	0x202A, r24
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	c3 ff       	sbrs	r28, 3
    339e:	11 c0       	rjmp	.+34     	; 0x33c2 <resetCausePrint+0x11c>
    33a0:	8a 3f       	cpi	r24, 0xFA	; 250
    33a2:	78 f4       	brcc	.+30     	; 0x33c2 <resetCausePrint+0x11c>
    33a4:	61 e0       	ldi	r22, 0x01	; 1
    33a6:	68 0f       	add	r22, r24
    33a8:	60 93 2a 20 	sts	0x202A, r22
    33ac:	8e e0       	ldi	r24, 0x0E	; 14
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 5e 38 	call	0x70bc	; 0x70bc <eeprom_update_byte>
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <resetCausePrint+0x11c>
    33b6:	8e e0       	ldi	r24, 0x0E	; 14
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 3f 38 	call	0x707e	; 0x707e <eeprom_read_byte>
    33be:	80 93 2a 20 	sts	0x202A, r24
    33c2:	cf 91       	pop	r28
    33c4:	08 95       	ret

000033c6 <initHardware>:
    33c6:	8f 92       	push	r8
    33c8:	9f 92       	push	r9
    33ca:	af 92       	push	r10
    33cc:	bf 92       	push	r11
    33ce:	cf 92       	push	r12
    33d0:	df 92       	push	r13
    33d2:	ef 92       	push	r14
    33d4:	ff 92       	push	r15
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	a8 95       	wdr
    33e0:	6b e2       	ldi	r22, 0x2B	; 43
    33e2:	80 e8       	ldi	r24, 0x80	; 128
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 10 0a 	call	0x1420	; 0x1420 <CCPWrite>
    33ea:	e0 e8       	ldi	r30, 0x80	; 128
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	80 fd       	sbrc	r24, 0
    33f2:	fd cf       	rjmp	.-6      	; 0x33ee <initHardware+0x28>
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	81 e8       	ldi	r24, 0x81	; 129
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 10 0a 	call	0x1420	; 0x1420 <CCPWrite>
    33fe:	e0 e8       	ldi	r30, 0x80	; 128
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	80 fd       	sbrc	r24, 0
    3406:	fd cf       	rjmp	.-6      	; 0x3402 <initHardware+0x3c>
    3408:	c0 e5       	ldi	r28, 0x50	; 80
    340a:	d0 e0       	ldi	r29, 0x00	; 0
    340c:	93 e0       	ldi	r25, 0x03	; 3
    340e:	98 83       	st	Y, r25
    3410:	82 e4       	ldi	r24, 0x42	; 66
    3412:	8a 83       	std	Y+2, r24	; 0x02
    3414:	88 81       	ld	r24, Y
    3416:	88 60       	ori	r24, 0x08	; 8
    3418:	88 83       	st	Y, r24
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	60 e1       	ldi	r22, 0x10	; 16
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	0e 94 25 0a 	call	0x144a	; 0x144a <CLKSYS_PLL_Config>
    3424:	88 81       	ld	r24, Y
    3426:	80 61       	ori	r24, 0x10	; 16
    3428:	88 83       	st	Y, r24
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <CLKSYS_Prescalers_Config>
    3432:	a0 e6       	ldi	r26, 0x60	; 96
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	8b e1       	ldi	r24, 0x1B	; 27
    3438:	15 96       	adiw	r26, 0x05	; 5
    343a:	8c 93       	st	X, r24
    343c:	15 97       	sbiw	r26, 0x05	; 5
    343e:	87 eb       	ldi	r24, 0xB7	; 183
    3440:	16 96       	adiw	r26, 0x06	; 6
    3442:	8c 93       	st	X, r24
    3444:	16 97       	sbiw	r26, 0x06	; 6
    3446:	c0 ec       	ldi	r28, 0xC0	; 192
    3448:	d1 e0       	ldi	r29, 0x01	; 1
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	8a 87       	std	Y+10, r24	; 0x0a
    344e:	ed e1       	ldi	r30, 0x1D	; 29
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	e4 91       	lpm	r30, Z
    3454:	12 96       	adiw	r26, 0x02	; 2
    3456:	ec 93       	st	X, r30
    3458:	12 97       	sbiw	r26, 0x02	; 2
    345a:	ec e1       	ldi	r30, 0x1C	; 28
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	e4 91       	lpm	r30, Z
    3460:	13 96       	adiw	r26, 0x03	; 3
    3462:	ec 93       	st	X, r30
    3464:	1a 86       	std	Y+10, r1	; 0x0a
    3466:	e0 e5       	ldi	r30, 0x50	; 80
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	81 81       	ldd	r24, Z+1	; 0x01
    346c:	90 81       	ld	r25, Z
    346e:	89 27       	eor	r24, r25
    3470:	8f 71       	andi	r24, 0x1F	; 31
    3472:	d9 f7       	brne	.-10     	; 0x346a <initHardware+0xa4>
    3474:	84 e0       	ldi	r24, 0x04	; 4
    3476:	0e 94 2f 0a 	call	0x145e	; 0x145e <CLKSYS_Main_ClockSource_Select>
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	80 93 60 00 	sts	0x0060, r24
    3480:	80 91 55 00 	lds	r24, 0x0055
    3484:	81 11       	cpse	r24, r1
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <initHardware+0xca>
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	80 93 68 00 	sts	0x0068, r24
    348e:	05 c0       	rjmp	.+10     	; 0x349a <initHardware+0xd4>
    3490:	e0 e5       	ldi	r30, 0x50	; 80
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	8e 7f       	andi	r24, 0xFE	; 254
    3498:	80 83       	st	Z, r24
    349a:	e0 e0       	ldi	r30, 0x00	; 0
    349c:	f6 e0       	ldi	r31, 0x06	; 6
    349e:	8f ef       	ldi	r24, 0xFF	; 255
    34a0:	86 83       	std	Z+6, r24	; 0x06
    34a2:	0f 2e       	mov	r0, r31
    34a4:	f0 e2       	ldi	r31, 0x20	; 32
    34a6:	cf 2e       	mov	r12, r31
    34a8:	f6 e0       	ldi	r31, 0x06	; 6
    34aa:	df 2e       	mov	r13, r31
    34ac:	f0 2d       	mov	r31, r0
    34ae:	93 ef       	ldi	r25, 0xF3	; 243
    34b0:	d6 01       	movw	r26, r12
    34b2:	16 96       	adiw	r26, 0x06	; 6
    34b4:	9c 93       	st	X, r25
    34b6:	16 97       	sbiw	r26, 0x06	; 6
    34b8:	82 83       	std	Z+2, r24	; 0x02
    34ba:	12 96       	adiw	r26, 0x02	; 2
    34bc:	9c 93       	st	X, r25
    34be:	12 97       	sbiw	r26, 0x02	; 2
    34c0:	94 e0       	ldi	r25, 0x04	; 4
    34c2:	11 96       	adiw	r26, 0x01	; 1
    34c4:	9c 93       	st	X, r25
    34c6:	11 97       	sbiw	r26, 0x01	; 1
    34c8:	16 96       	adiw	r26, 0x06	; 6
    34ca:	9c 93       	st	X, r25
    34cc:	c0 e8       	ldi	r28, 0x80	; 128
    34ce:	d6 e0       	ldi	r29, 0x06	; 6
    34d0:	8d 83       	std	Y+5, r24	; 0x05
    34d2:	a0 ea       	ldi	r26, 0xA0	; 160
    34d4:	b6 e0       	ldi	r27, 0x06	; 6
    34d6:	15 96       	adiw	r26, 0x05	; 5
    34d8:	8c 93       	st	X, r24
    34da:	15 97       	sbiw	r26, 0x05	; 5
    34dc:	e0 ee       	ldi	r30, 0xE0	; 224
    34de:	f6 e0       	ldi	r31, 0x06	; 6
    34e0:	85 83       	std	Z+5, r24	; 0x05
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	11 96       	adiw	r26, 0x01	; 1
    34e6:	8c 93       	st	X, r24
    34e8:	81 83       	std	Z+1, r24	; 0x01
    34ea:	e0 e0       	ldi	r30, 0x00	; 0
    34ec:	f7 e0       	ldi	r31, 0x07	; 7
    34ee:	85 83       	std	Z+5, r24	; 0x05
    34f0:	c0 e2       	ldi	r28, 0x20	; 32
    34f2:	d7 e0       	ldi	r29, 0x07	; 7
    34f4:	9f e2       	ldi	r25, 0x2F	; 47
    34f6:	9d 83       	std	Y+5, r25	; 0x05
    34f8:	90 e1       	ldi	r25, 0x10	; 16
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	82 83       	std	Z+2, r24	; 0x02
    34fe:	8f e3       	ldi	r24, 0x3F	; 63
    3500:	8a 83       	std	Y+2, r24	; 0x02
    3502:	0f 2e       	mov	r0, r31
    3504:	f0 ec       	ldi	r31, 0xC0	; 192
    3506:	ef 2e       	mov	r14, r31
    3508:	f7 e0       	ldi	r31, 0x07	; 7
    350a:	ff 2e       	mov	r15, r31
    350c:	f0 2d       	mov	r31, r0
    350e:	68 94       	set
    3510:	bb 24       	eor	r11, r11
    3512:	b3 f8       	bld	r11, 3
    3514:	f7 01       	movw	r30, r14
    3516:	b5 82       	std	Z+5, r11	; 0x05
    3518:	b1 82       	std	Z+1, r11	; 0x01
    351a:	00 ee       	ldi	r16, 0xE0	; 224
    351c:	17 e0       	ldi	r17, 0x07	; 7
    351e:	83 e0       	ldi	r24, 0x03	; 3
    3520:	d8 01       	movw	r26, r16
    3522:	15 96       	adiw	r26, 0x05	; 5
    3524:	8c 93       	st	X, r24
    3526:	15 97       	sbiw	r26, 0x05	; 5
    3528:	15 96       	adiw	r26, 0x05	; 5
    352a:	8c 93       	st	X, r24
    352c:	48 e0       	ldi	r20, 0x08	; 8
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	67 e8       	ldi	r22, 0x87	; 135
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	80 e1       	ldi	r24, 0x10	; 16
    3536:	96 e0       	ldi	r25, 0x06	; 6
    3538:	0e 94 a6 33 	call	0x674c	; 0x674c <memset>
    353c:	87 e8       	ldi	r24, 0x87	; 135
    353e:	97 e8       	ldi	r25, 0x87	; 135
    3540:	dc 01       	movw	r26, r24
    3542:	80 93 34 06 	sts	0x0634, r24
    3546:	90 93 35 06 	sts	0x0635, r25
    354a:	a0 93 36 06 	sts	0x0636, r26
    354e:	b0 93 37 06 	sts	0x0637, r27
    3552:	48 e0       	ldi	r20, 0x08	; 8
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	67 e8       	ldi	r22, 0x87	; 135
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	80 e9       	ldi	r24, 0x90	; 144
    355c:	96 e0       	ldi	r25, 0x06	; 6
    355e:	0e 94 a6 33 	call	0x674c	; 0x674c <memset>
    3562:	48 e0       	ldi	r20, 0x08	; 8
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	67 e8       	ldi	r22, 0x87	; 135
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	80 eb       	ldi	r24, 0xB0	; 176
    356c:	96 e0       	ldi	r25, 0x06	; 6
    356e:	0e 94 a6 33 	call	0x674c	; 0x674c <memset>
    3572:	48 e0       	ldi	r20, 0x08	; 8
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	67 e8       	ldi	r22, 0x87	; 135
    3578:	70 e0       	ldi	r23, 0x00	; 0
    357a:	80 ef       	ldi	r24, 0xF0	; 240
    357c:	96 e0       	ldi	r25, 0x06	; 6
    357e:	0e 94 a6 33 	call	0x674c	; 0x674c <memset>
    3582:	48 e0       	ldi	r20, 0x08	; 8
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	60 e8       	ldi	r22, 0x80	; 128
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	80 e1       	ldi	r24, 0x10	; 16
    358c:	97 e0       	ldi	r25, 0x07	; 7
    358e:	0e 94 a6 33 	call	0x674c	; 0x674c <memset>
    3592:	48 e0       	ldi	r20, 0x08	; 8
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	60 e8       	ldi	r22, 0x80	; 128
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	80 e3       	ldi	r24, 0x30	; 48
    359c:	97 e0       	ldi	r25, 0x07	; 7
    359e:	0e 94 a6 33 	call	0x674c	; 0x674c <memset>
    35a2:	80 e9       	ldi	r24, 0x90	; 144
    35a4:	f6 01       	movw	r30, r12
    35a6:	80 8b       	std	Z+16, r24	; 0x10
    35a8:	81 8b       	std	Z+17, r24	; 0x11
    35aa:	82 8b       	std	Z+18, r24	; 0x12
    35ac:	83 8b       	std	Z+19, r24	; 0x13
    35ae:	e0 e4       	ldi	r30, 0x40	; 64
    35b0:	f6 e0       	ldi	r31, 0x06	; 6
    35b2:	98 eb       	ldi	r25, 0xB8	; 184
    35b4:	90 8b       	std	Z+16, r25	; 0x10
    35b6:	91 8b       	std	Z+17, r25	; 0x11
    35b8:	82 8b       	std	Z+18, r24	; 0x12
    35ba:	83 8b       	std	Z+19, r24	; 0x13
    35bc:	84 8b       	std	Z+20, r24	; 0x14
    35be:	85 8b       	std	Z+21, r24	; 0x15
    35c0:	80 e8       	ldi	r24, 0x80	; 128
    35c2:	86 8b       	std	Z+22, r24	; 0x16
    35c4:	87 8b       	std	Z+23, r24	; 0x17
    35c6:	e0 e6       	ldi	r30, 0x60	; 96
    35c8:	f6 e0       	ldi	r31, 0x06	; 6
    35ca:	80 8b       	std	Z+16, r24	; 0x10
    35cc:	81 8b       	std	Z+17, r24	; 0x11
    35ce:	82 8b       	std	Z+18, r24	; 0x12
    35d0:	83 8b       	std	Z+19, r24	; 0x13
    35d2:	84 8b       	std	Z+20, r24	; 0x14
    35d4:	85 8b       	std	Z+21, r24	; 0x15
    35d6:	8c 8b       	std	Y+20, r24	; 0x14
    35d8:	8d 8b       	std	Y+21, r24	; 0x15
    35da:	8e 8b       	std	Y+22, r24	; 0x16
    35dc:	8f 8b       	std	Y+23, r24	; 0x17
    35de:	88 e9       	ldi	r24, 0x98	; 152
    35e0:	d7 01       	movw	r26, r14
    35e2:	52 96       	adiw	r26, 0x12	; 18
    35e4:	8c 93       	st	X, r24
    35e6:	52 97       	sbiw	r26, 0x12	; 18
    35e8:	8f ea       	ldi	r24, 0xAF	; 175
    35ea:	53 96       	adiw	r26, 0x13	; 19
    35ec:	8c 93       	st	X, r24
    35ee:	f8 01       	movw	r30, r16
    35f0:	82 8b       	std	Z+18, r24	; 0x12
    35f2:	83 8b       	std	Z+19, r24	; 0x13
    35f4:	ee 24       	eor	r14, r14
    35f6:	e3 94       	inc	r14
    35f8:	03 e0       	ldi	r16, 0x03	; 3
    35fa:	10 e0       	ldi	r17, 0x00	; 0
    35fc:	26 e0       	ldi	r18, 0x06	; 6
    35fe:	41 e0       	ldi	r20, 0x01	; 1
    3600:	64 e0       	ldi	r22, 0x04	; 4
    3602:	89 e1       	ldi	r24, 0x19	; 25
    3604:	90 e2       	ldi	r25, 0x20	; 32
    3606:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <RTCInit>
    360a:	88 e1       	ldi	r24, 0x18	; 24
    360c:	80 93 70 00 	sts	0x0070, r24
    3610:	85 e0       	ldi	r24, 0x05	; 5
    3612:	80 93 71 00 	sts	0x0071, r24
    3616:	80 93 72 00 	sts	0x0072, r24
    361a:	b0 92 73 00 	sts	0x0073, r11
    361e:	88 e6       	ldi	r24, 0x68	; 104
    3620:	80 93 74 00 	sts	0x0074, r24
    3624:	88 e7       	ldi	r24, 0x78	; 120
    3626:	80 93 75 00 	sts	0x0075, r24
    362a:	80 93 76 00 	sts	0x0076, r24
    362e:	61 e0       	ldi	r22, 0x01	; 1
    3630:	86 e9       	ldi	r24, 0x96	; 150
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	0e 94 10 0a 	call	0x1420	; 0x1420 <CCPWrite>
    3638:	0e 94 8c 11 	call	0x2318	; 0x2318 <USB_Init>
    363c:	6b e6       	ldi	r22, 0x6B	; 107
    363e:	77 e2       	ldi	r23, 0x27	; 39
    3640:	83 ec       	ldi	r24, 0xC3	; 195
    3642:	90 e2       	ldi	r25, 0x20	; 32
    3644:	0e 94 0e 0c 	call	0x181c	; 0x181c <CDC_Device_CreateStream>
    3648:	e9 e7       	ldi	r30, 0x79	; 121
    364a:	f7 e2       	ldi	r31, 0x27	; 39
    364c:	8b e6       	ldi	r24, 0x6B	; 107
    364e:	97 e2       	ldi	r25, 0x27	; 39
    3650:	80 83       	st	Z, r24
    3652:	91 83       	std	Z+1, r25	; 0x01
    3654:	82 83       	std	Z+2, r24	; 0x02
    3656:	93 83       	std	Z+3, r25	; 0x03
    3658:	87 e0       	ldi	r24, 0x07	; 7
    365a:	80 93 a2 00 	sts	0x00A2, r24
    365e:	78 94       	sei
    3660:	ff ef       	ldi	r31, 0xFF	; 255
    3662:	27 ea       	ldi	r18, 0xA7	; 167
    3664:	81 e6       	ldi	r24, 0x61	; 97
    3666:	f1 50       	subi	r31, 0x01	; 1
    3668:	20 40       	sbci	r18, 0x00	; 0
    366a:	80 40       	sbci	r24, 0x00	; 0
    366c:	e1 f7       	brne	.-8      	; 0x3666 <initHardware+0x2a0>
    366e:	00 c0       	rjmp	.+0      	; 0x3670 <initHardware+0x2aa>
    3670:	00 00       	nop
    3672:	80 91 25 20 	lds	r24, 0x2025
    3676:	90 91 26 20 	lds	r25, 0x2026
    367a:	a0 91 27 20 	lds	r26, 0x2027
    367e:	b0 91 28 20 	lds	r27, 0x2028
    3682:	89 2b       	or	r24, r25
    3684:	8a 2b       	or	r24, r26
    3686:	8b 2b       	or	r24, r27
    3688:	69 f5       	brne	.+90     	; 0x36e4 <initHardware+0x31e>
    368a:	c0 ec       	ldi	r28, 0xC0	; 192
    368c:	d1 e0       	ldi	r29, 0x01	; 1
    368e:	82 e0       	ldi	r24, 0x02	; 2
    3690:	8a 87       	std	Y+10, r24	; 0x0a
    3692:	e5 e1       	ldi	r30, 0x15	; 21
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	24 91       	lpm	r18, Z
    3698:	e4 e1       	ldi	r30, 0x14	; 20
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	44 91       	lpm	r20, Z
    369e:	e3 e1       	ldi	r30, 0x13	; 19
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	34 91       	lpm	r19, Z
    36a4:	e2 e1       	ldi	r30, 0x12	; 18
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	84 91       	lpm	r24, Z
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e0       	ldi	r26, 0x00	; 0
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	b8 2f       	mov	r27, r24
    36b2:	aa 27       	eor	r26, r26
    36b4:	99 27       	eor	r25, r25
    36b6:	88 27       	eor	r24, r24
    36b8:	a3 2b       	or	r26, r19
    36ba:	82 2b       	or	r24, r18
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	54 2f       	mov	r21, r20
    36c0:	44 27       	eor	r20, r20
    36c2:	05 2e       	mov	r0, r21
    36c4:	00 0c       	add	r0, r0
    36c6:	66 0b       	sbc	r22, r22
    36c8:	77 0b       	sbc	r23, r23
    36ca:	84 2b       	or	r24, r20
    36cc:	95 2b       	or	r25, r21
    36ce:	a6 2b       	or	r26, r22
    36d0:	b7 2b       	or	r27, r23
    36d2:	80 93 25 20 	sts	0x2025, r24
    36d6:	90 93 26 20 	sts	0x2026, r25
    36da:	a0 93 27 20 	sts	0x2027, r26
    36de:	b0 93 28 20 	sts	0x2028, r27
    36e2:	1a 86       	std	Y+10, r1	; 0x0a
    36e4:	80 91 25 20 	lds	r24, 0x2025
    36e8:	90 91 26 20 	lds	r25, 0x2026
    36ec:	a0 91 27 20 	lds	r26, 0x2027
    36f0:	b0 91 28 20 	lds	r27, 0x2028
    36f4:	81 15       	cp	r24, r1
    36f6:	e5 e1       	ldi	r30, 0x15	; 21
    36f8:	9e 07       	cpc	r25, r30
    36fa:	a1 05       	cpc	r26, r1
    36fc:	e3 e0       	ldi	r30, 0x03	; 3
    36fe:	be 07       	cpc	r27, r30
    3700:	d9 f0       	breq	.+54     	; 0x3738 <initHardware+0x372>
    3702:	40 f4       	brcc	.+16     	; 0x3714 <initHardware+0x34e>
    3704:	81 15       	cp	r24, r1
    3706:	2b e0       	ldi	r18, 0x0B	; 11
    3708:	92 07       	cpc	r25, r18
    370a:	a1 05       	cpc	r26, r1
    370c:	21 e0       	ldi	r18, 0x01	; 1
    370e:	b2 07       	cpc	r27, r18
    3710:	d9 f0       	breq	.+54     	; 0x3748 <initHardware+0x382>
    3712:	1e c0       	rjmp	.+60     	; 0x3750 <initHardware+0x38a>
    3714:	81 15       	cp	r24, r1
    3716:	e5 e1       	ldi	r30, 0x15	; 21
    3718:	9e 07       	cpc	r25, r30
    371a:	a1 05       	cpc	r26, r1
    371c:	e4 e0       	ldi	r30, 0x04	; 4
    371e:	be 07       	cpc	r27, r30
    3720:	79 f0       	breq	.+30     	; 0x3740 <initHardware+0x37a>
    3722:	81 15       	cp	r24, r1
    3724:	f5 e1       	ldi	r31, 0x15	; 21
    3726:	9f 07       	cpc	r25, r31
    3728:	a1 05       	cpc	r26, r1
    372a:	f2 e2       	ldi	r31, 0x22	; 34
    372c:	bf 07       	cpc	r27, r31
    372e:	81 f4       	brne	.+32     	; 0x3750 <initHardware+0x38a>
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	80 93 29 20 	sts	0x2029, r24
    3736:	1f c0       	rjmp	.+62     	; 0x3776 <initHardware+0x3b0>
    3738:	82 e0       	ldi	r24, 0x02	; 2
    373a:	80 93 29 20 	sts	0x2029, r24
    373e:	1b c0       	rjmp	.+54     	; 0x3776 <initHardware+0x3b0>
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	80 93 29 20 	sts	0x2029, r24
    3746:	17 c0       	rjmp	.+46     	; 0x3776 <initHardware+0x3b0>
    3748:	8a e0       	ldi	r24, 0x0A	; 10
    374a:	80 93 29 20 	sts	0x2029, r24
    374e:	13 c0       	rjmp	.+38     	; 0x3776 <initHardware+0x3b0>
    3750:	2f ef       	ldi	r18, 0xFF	; 255
    3752:	20 93 29 20 	sts	0x2029, r18
    3756:	bf 93       	push	r27
    3758:	af 93       	push	r26
    375a:	9f 93       	push	r25
    375c:	8f 93       	push	r24
    375e:	8f ea       	ldi	r24, 0xAF	; 175
    3760:	99 e0       	ldi	r25, 0x09	; 9
    3762:	9f 93       	push	r25
    3764:	8f 93       	push	r24
    3766:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	b8 d9       	rcall	.-3216   	; 0x2ae8 <roomInit>
    3778:	8b e2       	ldi	r24, 0x2B	; 43
    377a:	90 e2       	ldi	r25, 0x20	; 32
    377c:	0e 94 34 07 	call	0xe68	; 0xe68 <adcInit>
    3780:	1f 92       	push	r1
    3782:	1f 92       	push	r1
    3784:	83 ec       	ldi	r24, 0xC3	; 195
    3786:	8f 93       	push	r24
    3788:	80 e5       	ldi	r24, 0x50	; 80
    378a:	8f 93       	push	r24
    378c:	0f 2e       	mov	r0, r31
    378e:	81 2c       	mov	r8, r1
    3790:	f8 e4       	ldi	r31, 0x48	; 72
    3792:	9f 2e       	mov	r9, r31
    3794:	f8 ee       	ldi	r31, 0xE8	; 232
    3796:	af 2e       	mov	r10, r31
    3798:	bb 24       	eor	r11, r11
    379a:	b3 94       	inc	r11
    379c:	f0 2d       	mov	r31, r0
    379e:	68 94       	set
    37a0:	cc 24       	eor	r12, r12
    37a2:	c6 f8       	bld	r12, 6
    37a4:	e1 2c       	mov	r14, r1
    37a6:	f1 2c       	mov	r15, r1
    37a8:	00 e0       	ldi	r16, 0x00	; 0
    37aa:	21 e0       	ldi	r18, 0x01	; 1
    37ac:	40 e4       	ldi	r20, 0x40	; 64
    37ae:	56 e0       	ldi	r21, 0x06	; 6
    37b0:	60 e8       	ldi	r22, 0x80	; 128
    37b2:	74 e0       	ldi	r23, 0x04	; 4
    37b4:	89 e6       	ldi	r24, 0x69	; 105
    37b6:	90 e2       	ldi	r25, 0x20	; 32
    37b8:	0e 94 98 2b 	call	0x5730	; 0x5730 <twiInit>
    37bc:	8f e5       	ldi	r24, 0x5F	; 95
    37be:	90 e2       	ldi	r25, 0x20	; 32
    37c0:	0e 94 82 27 	call	0x4f04	; 0x4f04 <eventInit>
    37c4:	8d ed       	ldi	r24, 0xDD	; 221
    37c6:	99 e0       	ldi	r25, 0x09	; 9
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    37d0:	8b e6       	ldi	r24, 0x6B	; 107
    37d2:	97 e2       	ldi	r25, 0x27	; 39
    37d4:	68 dd       	rcall	.-1328   	; 0x32a6 <resetCausePrint>
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	1f 91       	pop	r17
    37e8:	0f 91       	pop	r16
    37ea:	ff 90       	pop	r15
    37ec:	ef 90       	pop	r14
    37ee:	df 90       	pop	r13
    37f0:	cf 90       	pop	r12
    37f2:	bf 90       	pop	r11
    37f4:	af 90       	pop	r10
    37f6:	9f 90       	pop	r9
    37f8:	8f 90       	pop	r8
    37fa:	08 95       	ret

000037fc <softwareReset>:
    37fc:	8a e4       	ldi	r24, 0x4A	; 74
    37fe:	99 e0       	ldi	r25, 0x09	; 9
    3800:	9f 93       	push	r25
    3802:	8f 93       	push	r24
    3804:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    3808:	ab d9       	rcall	.-3242   	; 0x2b60 <writeTimeToEE>
    380a:	2f ef       	ldi	r18, 0xFF	; 255
    380c:	83 ef       	ldi	r24, 0xF3	; 243
    380e:	91 e0       	ldi	r25, 0x01	; 1
    3810:	21 50       	subi	r18, 0x01	; 1
    3812:	80 40       	sbci	r24, 0x00	; 0
    3814:	90 40       	sbci	r25, 0x00	; 0
    3816:	e1 f7       	brne	.-8      	; 0x3810 <softwareReset+0x14>
    3818:	00 c0       	rjmp	.+0      	; 0x381a <softwareReset+0x1e>
    381a:	00 00       	nop
    381c:	e0 ec       	ldi	r30, 0xC0	; 192
    381e:	f4 e0       	ldi	r31, 0x04	; 4
    3820:	81 81       	ldd	r24, Z+1	; 0x01
    3822:	8e 7f       	andi	r24, 0xFE	; 254
    3824:	81 83       	std	Z+1, r24	; 0x01
    3826:	2f ef       	ldi	r18, 0xFF	; 255
    3828:	87 e8       	ldi	r24, 0x87	; 135
    382a:	93 e1       	ldi	r25, 0x13	; 19
    382c:	21 50       	subi	r18, 0x01	; 1
    382e:	80 40       	sbci	r24, 0x00	; 0
    3830:	90 40       	sbci	r25, 0x00	; 0
    3832:	e1 f7       	brne	.-8      	; 0x382c <softwareReset+0x30>
    3834:	00 c0       	rjmp	.+0      	; 0x3836 <softwareReset+0x3a>
    3836:	00 00       	nop
    3838:	61 e0       	ldi	r22, 0x01	; 1
    383a:	89 e7       	ldi	r24, 0x79	; 121
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 10 0a 	call	0x1420	; 0x1420 <CCPWrite>
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	08 95       	ret

00003848 <freeRam>:
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	1f 92       	push	r1
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	20 91 02 20 	lds	r18, 0x2002
    3856:	30 91 03 20 	lds	r19, 0x2003
    385a:	ce 01       	movw	r24, r28
    385c:	01 96       	adiw	r24, 0x01	; 1
    385e:	82 1b       	sub	r24, r18
    3860:	93 0b       	sbc	r25, r19
    3862:	20 91 17 20 	lds	r18, 0x2017
    3866:	30 91 18 20 	lds	r19, 0x2018
    386a:	82 17       	cp	r24, r18
    386c:	93 07       	cpc	r25, r19
    386e:	24 f4       	brge	.+8      	; 0x3878 <freeRam+0x30>
    3870:	80 93 17 20 	sts	0x2017, r24
    3874:	90 93 18 20 	sts	0x2018, r25
    3878:	80 91 17 20 	lds	r24, 0x2017
    387c:	90 91 18 20 	lds	r25, 0x2018
    3880:	0f 90       	pop	r0
    3882:	df 91       	pop	r29
    3884:	cf 91       	pop	r28
    3886:	08 95       	ret

00003888 <deviceNameGet>:
    3888:	90 91 29 20 	lds	r25, 0x2029
    388c:	91 30       	cpi	r25, 0x01	; 1
    388e:	21 f0       	breq	.+8      	; 0x3898 <deviceNameGet+0x10>
    3890:	92 30       	cpi	r25, 0x02	; 2
    3892:	09 f4       	brne	.+2      	; 0x3896 <deviceNameGet+0xe>
    3894:	48 c0       	rjmp	.+144    	; 0x3926 <deviceNameGet+0x9e>
    3896:	8d c0       	rjmp	.+282    	; 0x39b2 <deviceNameGet+0x12a>
    3898:	83 30       	cpi	r24, 0x03	; 3
    389a:	11 f1       	breq	.+68     	; 0x38e0 <deviceNameGet+0x58>
    389c:	20 f4       	brcc	.+8      	; 0x38a6 <deviceNameGet+0x1e>
    389e:	81 30       	cpi	r24, 0x01	; 1
    38a0:	89 f0       	breq	.+34     	; 0x38c4 <deviceNameGet+0x3c>
    38a2:	48 f0       	brcs	.+18     	; 0x38b6 <deviceNameGet+0x2e>
    38a4:	16 c0       	rjmp	.+44     	; 0x38d2 <deviceNameGet+0x4a>
    38a6:	85 30       	cpi	r24, 0x05	; 5
    38a8:	49 f1       	breq	.+82     	; 0x38fc <deviceNameGet+0x74>
    38aa:	08 f1       	brcs	.+66     	; 0x38ee <deviceNameGet+0x66>
    38ac:	86 30       	cpi	r24, 0x06	; 6
    38ae:	69 f1       	breq	.+90     	; 0x390a <deviceNameGet+0x82>
    38b0:	87 30       	cpi	r24, 0x07	; 7
    38b2:	91 f1       	breq	.+100    	; 0x3918 <deviceNameGet+0x90>
    38b4:	7e c0       	rjmp	.+252    	; 0x39b2 <deviceNameGet+0x12a>
    38b6:	64 e4       	ldi	r22, 0x44	; 68
    38b8:	79 e0       	ldi	r23, 0x09	; 9
    38ba:	87 e0       	ldi	r24, 0x07	; 7
    38bc:	90 e2       	ldi	r25, 0x20	; 32
    38be:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    38c2:	77 c0       	rjmp	.+238    	; 0x39b2 <deviceNameGet+0x12a>
    38c4:	6c e3       	ldi	r22, 0x3C	; 60
    38c6:	79 e0       	ldi	r23, 0x09	; 9
    38c8:	87 e0       	ldi	r24, 0x07	; 7
    38ca:	90 e2       	ldi	r25, 0x20	; 32
    38cc:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    38d0:	70 c0       	rjmp	.+224    	; 0x39b2 <deviceNameGet+0x12a>
    38d2:	64 e3       	ldi	r22, 0x34	; 52
    38d4:	79 e0       	ldi	r23, 0x09	; 9
    38d6:	87 e0       	ldi	r24, 0x07	; 7
    38d8:	90 e2       	ldi	r25, 0x20	; 32
    38da:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    38de:	69 c0       	rjmp	.+210    	; 0x39b2 <deviceNameGet+0x12a>
    38e0:	6c e2       	ldi	r22, 0x2C	; 44
    38e2:	79 e0       	ldi	r23, 0x09	; 9
    38e4:	87 e0       	ldi	r24, 0x07	; 7
    38e6:	90 e2       	ldi	r25, 0x20	; 32
    38e8:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    38ec:	62 c0       	rjmp	.+196    	; 0x39b2 <deviceNameGet+0x12a>
    38ee:	66 e2       	ldi	r22, 0x26	; 38
    38f0:	79 e0       	ldi	r23, 0x09	; 9
    38f2:	87 e0       	ldi	r24, 0x07	; 7
    38f4:	90 e2       	ldi	r25, 0x20	; 32
    38f6:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    38fa:	5b c0       	rjmp	.+182    	; 0x39b2 <deviceNameGet+0x12a>
    38fc:	60 e2       	ldi	r22, 0x20	; 32
    38fe:	79 e0       	ldi	r23, 0x09	; 9
    3900:	87 e0       	ldi	r24, 0x07	; 7
    3902:	90 e2       	ldi	r25, 0x20	; 32
    3904:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    3908:	54 c0       	rjmp	.+168    	; 0x39b2 <deviceNameGet+0x12a>
    390a:	6a e1       	ldi	r22, 0x1A	; 26
    390c:	79 e0       	ldi	r23, 0x09	; 9
    390e:	87 e0       	ldi	r24, 0x07	; 7
    3910:	90 e2       	ldi	r25, 0x20	; 32
    3912:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    3916:	4d c0       	rjmp	.+154    	; 0x39b2 <deviceNameGet+0x12a>
    3918:	62 e1       	ldi	r22, 0x12	; 18
    391a:	79 e0       	ldi	r23, 0x09	; 9
    391c:	87 e0       	ldi	r24, 0x07	; 7
    391e:	90 e2       	ldi	r25, 0x20	; 32
    3920:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    3924:	46 c0       	rjmp	.+140    	; 0x39b2 <deviceNameGet+0x12a>
    3926:	83 30       	cpi	r24, 0x03	; 3
    3928:	11 f1       	breq	.+68     	; 0x396e <deviceNameGet+0xe6>
    392a:	20 f4       	brcc	.+8      	; 0x3934 <deviceNameGet+0xac>
    392c:	81 30       	cpi	r24, 0x01	; 1
    392e:	89 f0       	breq	.+34     	; 0x3952 <deviceNameGet+0xca>
    3930:	48 f0       	brcs	.+18     	; 0x3944 <deviceNameGet+0xbc>
    3932:	16 c0       	rjmp	.+44     	; 0x3960 <deviceNameGet+0xd8>
    3934:	85 30       	cpi	r24, 0x05	; 5
    3936:	49 f1       	breq	.+82     	; 0x398a <deviceNameGet+0x102>
    3938:	08 f1       	brcs	.+66     	; 0x397c <deviceNameGet+0xf4>
    393a:	86 30       	cpi	r24, 0x06	; 6
    393c:	69 f1       	breq	.+90     	; 0x3998 <deviceNameGet+0x110>
    393e:	87 30       	cpi	r24, 0x07	; 7
    3940:	91 f1       	breq	.+100    	; 0x39a6 <deviceNameGet+0x11e>
    3942:	37 c0       	rjmp	.+110    	; 0x39b2 <deviceNameGet+0x12a>
    3944:	6b e0       	ldi	r22, 0x0B	; 11
    3946:	79 e0       	ldi	r23, 0x09	; 9
    3948:	87 e0       	ldi	r24, 0x07	; 7
    394a:	90 e2       	ldi	r25, 0x20	; 32
    394c:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    3950:	30 c0       	rjmp	.+96     	; 0x39b2 <deviceNameGet+0x12a>
    3952:	64 e0       	ldi	r22, 0x04	; 4
    3954:	79 e0       	ldi	r23, 0x09	; 9
    3956:	87 e0       	ldi	r24, 0x07	; 7
    3958:	90 e2       	ldi	r25, 0x20	; 32
    395a:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    395e:	29 c0       	rjmp	.+82     	; 0x39b2 <deviceNameGet+0x12a>
    3960:	6d ef       	ldi	r22, 0xFD	; 253
    3962:	78 e0       	ldi	r23, 0x08	; 8
    3964:	87 e0       	ldi	r24, 0x07	; 7
    3966:	90 e2       	ldi	r25, 0x20	; 32
    3968:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    396c:	22 c0       	rjmp	.+68     	; 0x39b2 <deviceNameGet+0x12a>
    396e:	66 ef       	ldi	r22, 0xF6	; 246
    3970:	78 e0       	ldi	r23, 0x08	; 8
    3972:	87 e0       	ldi	r24, 0x07	; 7
    3974:	90 e2       	ldi	r25, 0x20	; 32
    3976:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    397a:	1b c0       	rjmp	.+54     	; 0x39b2 <deviceNameGet+0x12a>
    397c:	6f ee       	ldi	r22, 0xEF	; 239
    397e:	78 e0       	ldi	r23, 0x08	; 8
    3980:	87 e0       	ldi	r24, 0x07	; 7
    3982:	90 e2       	ldi	r25, 0x20	; 32
    3984:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <deviceNameGet+0x12a>
    398a:	68 ee       	ldi	r22, 0xE8	; 232
    398c:	78 e0       	ldi	r23, 0x08	; 8
    398e:	87 e0       	ldi	r24, 0x07	; 7
    3990:	90 e2       	ldi	r25, 0x20	; 32
    3992:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    3996:	0d c0       	rjmp	.+26     	; 0x39b2 <deviceNameGet+0x12a>
    3998:	61 ee       	ldi	r22, 0xE1	; 225
    399a:	78 e0       	ldi	r23, 0x08	; 8
    399c:	87 e0       	ldi	r24, 0x07	; 7
    399e:	90 e2       	ldi	r25, 0x20	; 32
    39a0:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    39a4:	06 c0       	rjmp	.+12     	; 0x39b2 <deviceNameGet+0x12a>
    39a6:	6a ed       	ldi	r22, 0xDA	; 218
    39a8:	78 e0       	ldi	r23, 0x08	; 8
    39aa:	87 e0       	ldi	r24, 0x07	; 7
    39ac:	90 e2       	ldi	r25, 0x20	; 32
    39ae:	0e 94 71 33 	call	0x66e2	; 0x66e2 <strcpy_P>
    39b2:	87 e0       	ldi	r24, 0x07	; 7
    39b4:	90 e2       	ldi	r25, 0x20	; 32
    39b6:	08 95       	ret

000039b8 <TMP112Read>:
    39b8:	80 91 b0 20 	lds	r24, 0x20B0
    39bc:	81 11       	cpse	r24, r1
    39be:	8b c0       	rjmp	.+278    	; 0x3ad6 <TMP112Read+0x11e>
    39c0:	80 91 86 23 	lds	r24, 0x2386
    39c4:	81 11       	cpse	r24, r1
    39c6:	46 c0       	rjmp	.+140    	; 0x3a54 <TMP112Read+0x9c>
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	80 93 70 20 	sts	0x2070, r24
    39ce:	80 e6       	ldi	r24, 0x60	; 96
    39d0:	80 93 71 20 	sts	0x2071, r24
    39d4:	80 ee       	ldi	r24, 0xE0	; 224
    39d6:	80 93 72 20 	sts	0x2072, r24
    39da:	40 e0       	ldi	r20, 0x00	; 0
    39dc:	63 e0       	ldi	r22, 0x03	; 3
    39de:	89 e4       	ldi	r24, 0x49	; 73
    39e0:	0e 94 08 2c 	call	0x5810	; 0x5810 <twiMasterWriteRead>
    39e4:	8f e7       	ldi	r24, 0x7F	; 127
    39e6:	9e e3       	ldi	r25, 0x3E	; 62
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <TMP112Read+0x30>
    39ec:	00 c0       	rjmp	.+0      	; 0x39ee <TMP112Read+0x36>
    39ee:	00 00       	nop
    39f0:	80 91 b0 20 	lds	r24, 0x20B0
    39f4:	88 23       	and	r24, r24
    39f6:	49 f0       	breq	.+18     	; 0x3a0a <TMP112Read+0x52>
    39f8:	8b ec       	ldi	r24, 0xCB	; 203
    39fa:	98 e0       	ldi	r25, 0x08	; 8
    39fc:	9f 93       	push	r25
    39fe:	8f 93       	push	r24
    3a00:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	08 95       	ret
    3a0a:	10 92 70 20 	sts	0x2070, r1
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	61 e0       	ldi	r22, 0x01	; 1
    3a12:	89 e4       	ldi	r24, 0x49	; 73
    3a14:	0e 94 08 2c 	call	0x5810	; 0x5810 <twiMasterWriteRead>
    3a18:	8f e7       	ldi	r24, 0x7F	; 127
    3a1a:	9e e3       	ldi	r25, 0x3E	; 62
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <TMP112Read+0x64>
    3a20:	00 c0       	rjmp	.+0      	; 0x3a22 <TMP112Read+0x6a>
    3a22:	00 00       	nop
    3a24:	80 91 b0 20 	lds	r24, 0x20B0
    3a28:	88 23       	and	r24, r24
    3a2a:	49 f0       	breq	.+18     	; 0x3a3e <TMP112Read+0x86>
    3a2c:	8a eb       	ldi	r24, 0xBA	; 186
    3a2e:	98 e0       	ldi	r25, 0x08	; 8
    3a30:	9f 93       	push	r25
    3a32:	8f 93       	push	r24
    3a34:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	08 95       	ret
    3a3e:	85 ea       	ldi	r24, 0xA5	; 165
    3a40:	98 e0       	ldi	r25, 0x08	; 8
    3a42:	9f 93       	push	r25
    3a44:	8f 93       	push	r24
    3a46:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	80 93 86 23 	sts	0x2386, r24
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	42 e0       	ldi	r20, 0x02	; 2
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	89 e4       	ldi	r24, 0x49	; 73
    3a5a:	0e 94 08 2c 	call	0x5810	; 0x5810 <twiMasterWriteRead>
    3a5e:	8f e7       	ldi	r24, 0x7F	; 127
    3a60:	9e e3       	ldi	r25, 0x3E	; 62
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	f1 f7       	brne	.-4      	; 0x3a62 <TMP112Read+0xaa>
    3a66:	00 c0       	rjmp	.+0      	; 0x3a68 <TMP112Read+0xb0>
    3a68:	00 00       	nop
    3a6a:	80 91 b1 20 	lds	r24, 0x20B1
    3a6e:	81 30       	cpi	r24, 0x01	; 1
    3a70:	91 f5       	brne	.+100    	; 0x3ad6 <TMP112Read+0x11e>
    3a72:	80 91 b6 20 	lds	r24, 0x20B6
    3a76:	82 30       	cpi	r24, 0x02	; 2
    3a78:	71 f5       	brne	.+92     	; 0x3ad6 <TMP112Read+0x11e>
    3a7a:	60 91 90 20 	lds	r22, 0x2090
    3a7e:	80 91 91 20 	lds	r24, 0x2091
    3a82:	82 95       	swap	r24
    3a84:	8f 70       	andi	r24, 0x0F	; 15
    3a86:	90 e1       	ldi	r25, 0x10	; 16
    3a88:	69 9f       	mul	r22, r25
    3a8a:	b0 01       	movw	r22, r0
    3a8c:	11 24       	eor	r1, r1
    3a8e:	68 2b       	or	r22, r24
    3a90:	61 15       	cp	r22, r1
    3a92:	88 e0       	ldi	r24, 0x08	; 8
    3a94:	78 07       	cpc	r23, r24
    3a96:	98 f4       	brcc	.+38     	; 0x3abe <TMP112Read+0x106>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__floatunsisf>
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5d e3       	ldi	r21, 0x3D	; 61
    3aa8:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__mulsf3>
    3aac:	60 93 be 20 	sts	0x20BE, r22
    3ab0:	70 93 bf 20 	sts	0x20BF, r23
    3ab4:	80 93 c0 20 	sts	0x20C0, r24
    3ab8:	90 93 c1 20 	sts	0x20C1, r25
    3abc:	08 95       	ret
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	a0 e8       	ldi	r26, 0x80	; 128
    3ac4:	bf eb       	ldi	r27, 0xBF	; 191
    3ac6:	80 93 be 20 	sts	0x20BE, r24
    3aca:	90 93 bf 20 	sts	0x20BF, r25
    3ace:	a0 93 c0 20 	sts	0x20C0, r26
    3ad2:	b0 93 c1 20 	sts	0x20C1, r27
    3ad6:	08 95       	ret

00003ad8 <ledBlueEnable>:
    3ad8:	e0 ec       	ldi	r30, 0xC0	; 192
    3ada:	f7 e0       	ldi	r31, 0x07	; 7
    3adc:	88 e0       	ldi	r24, 0x08	; 8
    3ade:	81 83       	std	Z+1, r24	; 0x01
    3ae0:	86 83       	std	Z+6, r24	; 0x06
    3ae2:	08 95       	ret

00003ae4 <ledBlueDisable>:
    3ae4:	e0 ec       	ldi	r30, 0xC0	; 192
    3ae6:	f7 e0       	ldi	r31, 0x07	; 7
    3ae8:	88 e0       	ldi	r24, 0x08	; 8
    3aea:	81 83       	std	Z+1, r24	; 0x01
    3aec:	85 83       	std	Z+5, r24	; 0x05
    3aee:	08 95       	ret

00003af0 <ledController>:
    3af0:	80 91 87 23 	lds	r24, 0x2387
    3af4:	88 23       	and	r24, r24
    3af6:	d1 f0       	breq	.+52     	; 0x3b2c <ledController+0x3c>
    3af8:	90 91 85 23 	lds	r25, 0x2385
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	89 27       	eor	r24, r25
    3b00:	80 93 85 23 	sts	0x2385, r24
    3b04:	88 23       	and	r24, r24
    3b06:	89 f0       	breq	.+34     	; 0x3b2a <ledController+0x3a>
    3b08:	e7 df       	rcall	.-50     	; 0x3ad8 <ledBlueEnable>
    3b0a:	88 e7       	ldi	r24, 0x78	; 120
    3b0c:	9d e1       	ldi	r25, 0x1D	; 29
    3b0e:	0e 94 0f 28 	call	0x501e	; 0x501e <eventFind>
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	59 f0       	breq	.+22     	; 0x3b2c <ledController+0x3c>
    3b16:	4a e0       	ldi	r20, 0x0A	; 10
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	70 e0       	ldi	r23, 0x00	; 0
    3b1e:	fc 01       	movw	r30, r24
    3b20:	46 83       	std	Z+6, r20	; 0x06
    3b22:	57 83       	std	Z+7, r21	; 0x07
    3b24:	60 87       	std	Z+8, r22	; 0x08
    3b26:	71 87       	std	Z+9, r23	; 0x09
    3b28:	08 95       	ret
    3b2a:	dc cf       	rjmp	.-72     	; 0x3ae4 <ledBlueDisable>
    3b2c:	08 95       	ret

00003b2e <EVENT_USB_Device_Connect>:
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	80 93 87 23 	sts	0x2387, r24
    3b34:	08 95       	ret

00003b36 <EVENT_USB_Device_Disconnect>:
    3b36:	10 92 87 23 	sts	0x2387, r1
    3b3a:	08 95       	ret

00003b3c <EVENT_USB_Device_Reset>:
	
}

void EVENT_USB_Device_Reset()
{
    3b3c:	08 95       	ret

00003b3e <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged()
{
	CDC_Device_ConfigureEndpoints(&USBSerialClass);
    3b3e:	83 ec       	ldi	r24, 0xC3	; 195
    3b40:	90 e2       	ldi	r25, 0x20	; 32
    3b42:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <CDC_Device_ConfigureEndpoints>
    3b46:	08 95       	ret

00003b48 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
	CDC_Device_ProcessControlRequest(&USBSerialClass);
    3b48:	83 ec       	ldi	r24, 0xC3	; 195
    3b4a:	90 e2       	ldi	r25, 0x20	; 32
    3b4c:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <CDC_Device_ProcessControlRequest>
    3b50:	08 95       	ret

00003b52 <remoteSetDataGPIO>:
static uint16_t rebootDevices_bm = 0;


static void remoteSetDataGPIO(bool state, bool hiZ, uint16_t devices_bm)
{
	if (hiZ)
    3b52:	66 23       	and	r22, r22
    3b54:	79 f0       	breq	.+30     	; 0x3b74 <remoteSetDataGPIO+0x22>
	{
		PORTJ.DIRCLR = devices_bm & 0x00FF;
    3b56:	a0 e0       	ldi	r26, 0x00	; 0
    3b58:	b7 e0       	ldi	r27, 0x07	; 7
    3b5a:	12 96       	adiw	r26, 0x02	; 2
    3b5c:	4c 93       	st	X, r20
    3b5e:	12 97       	sbiw	r26, 0x02	; 2
		PORTK.DIRCLR = (devices_bm & 0x0F00) >> 8;
    3b60:	ca 01       	movw	r24, r20
    3b62:	88 27       	eor	r24, r24
    3b64:	9f 70       	andi	r25, 0x0F	; 15
    3b66:	e0 e2       	ldi	r30, 0x20	; 32
    3b68:	f7 e0       	ldi	r31, 0x07	; 7
    3b6a:	92 83       	std	Z+2, r25	; 0x02
		
		PORTJ.OUTCLR = devices_bm & 0x00FF;
    3b6c:	16 96       	adiw	r26, 0x06	; 6
    3b6e:	4c 93       	st	X, r20
		PORTK.OUTCLR = (devices_bm & 0x0F00) >> 8;
    3b70:	96 83       	std	Z+6, r25	; 0x06
    3b72:	08 95       	ret
	}
	else if (state)
    3b74:	88 23       	and	r24, r24
    3b76:	79 f0       	breq	.+30     	; 0x3b96 <remoteSetDataGPIO+0x44>
	{
		PORTJ.DIRSET = devices_bm & 0x00FF;
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b7 e0       	ldi	r27, 0x07	; 7
    3b7c:	11 96       	adiw	r26, 0x01	; 1
    3b7e:	4c 93       	st	X, r20
    3b80:	11 97       	sbiw	r26, 0x01	; 1
		PORTK.DIRSET = (devices_bm & 0x0F00) >> 8;
    3b82:	ca 01       	movw	r24, r20
    3b84:	88 27       	eor	r24, r24
    3b86:	9f 70       	andi	r25, 0x0F	; 15
    3b88:	e0 e2       	ldi	r30, 0x20	; 32
    3b8a:	f7 e0       	ldi	r31, 0x07	; 7
    3b8c:	91 83       	std	Z+1, r25	; 0x01
		
		PORTJ.OUTSET = devices_bm & 0x00FF;
    3b8e:	15 96       	adiw	r26, 0x05	; 5
    3b90:	4c 93       	st	X, r20
		PORTK.OUTSET = (devices_bm & 0x0F00) >> 8;
    3b92:	95 83       	std	Z+5, r25	; 0x05
    3b94:	08 95       	ret
	}
	else
	{
		PORTJ.DIRSET = devices_bm & 0x00FF;
    3b96:	a0 e0       	ldi	r26, 0x00	; 0
    3b98:	b7 e0       	ldi	r27, 0x07	; 7
    3b9a:	11 96       	adiw	r26, 0x01	; 1
    3b9c:	4c 93       	st	X, r20
    3b9e:	11 97       	sbiw	r26, 0x01	; 1
		PORTK.DIRSET = (devices_bm & 0x0F00) >> 8;
    3ba0:	ca 01       	movw	r24, r20
    3ba2:	88 27       	eor	r24, r24
    3ba4:	9f 70       	andi	r25, 0x0F	; 15
    3ba6:	e0 e2       	ldi	r30, 0x20	; 32
    3ba8:	f7 e0       	ldi	r31, 0x07	; 7
    3baa:	91 83       	std	Z+1, r25	; 0x01
		
		PORTJ.OUTCLR = devices_bm & 0x00FF;
    3bac:	16 96       	adiw	r26, 0x06	; 6
    3bae:	4c 93       	st	X, r20
		PORTK.OUTCLR = (devices_bm & 0x0F00) >> 8;
    3bb0:	96 83       	std	Z+6, r25	; 0x06
    3bb2:	08 95       	ret

00003bb4 <getKeyCode>:
	}
}


static uint32_t getKeyCode(const remoteCommand_t *cmd)
{
    3bb4:	fc 01       	movw	r30, r24
	uint32_t keycode = 0;
	
	if (cmd->device_type == device_humax)
    3bb6:	90 81       	ld	r25, Z
    3bb8:	91 30       	cpi	r25, 0x01	; 1
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <getKeyCode+0xa>
    3bbc:	e5 c0       	rjmp	.+458    	; 0x3d88 <getKeyCode+0x1d4>
	{
		switch (cmd->key)
    3bbe:	85 81       	ldd	r24, Z+5	; 0x05
    3bc0:	82 31       	cpi	r24, 0x12	; 18
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <getKeyCode+0x12>
    3bc4:	92 c0       	rjmp	.+292    	; 0x3cea <getKeyCode+0x136>
    3bc6:	40 f5       	brcc	.+80     	; 0x3c18 <getKeyCode+0x64>
    3bc8:	89 30       	cpi	r24, 0x09	; 9
    3bca:	09 f4       	brne	.+2      	; 0x3bce <getKeyCode+0x1a>
    3bcc:	66 c0       	rjmp	.+204    	; 0x3c9a <getKeyCode+0xe6>
    3bce:	88 f4       	brcc	.+34     	; 0x3bf2 <getKeyCode+0x3e>
    3bd0:	85 30       	cpi	r24, 0x05	; 5
    3bd2:	09 f4       	brne	.+2      	; 0x3bd6 <getKeyCode+0x22>
    3bd4:	4e c0       	rjmp	.+156    	; 0x3c72 <getKeyCode+0xbe>
    3bd6:	38 f4       	brcc	.+14     	; 0x3be6 <getKeyCode+0x32>
    3bd8:	83 30       	cpi	r24, 0x03	; 3
    3bda:	09 f4       	brne	.+2      	; 0x3bde <getKeyCode+0x2a>
    3bdc:	b2 c2       	rjmp	.+1380   	; 0x4142 <__stack+0x143>
    3bde:	84 30       	cpi	r24, 0x04	; 4
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <getKeyCode+0x30>
    3be2:	42 c0       	rjmp	.+132    	; 0x3c68 <getKeyCode+0xb4>
    3be4:	cd c0       	rjmp	.+410    	; 0x3d80 <getKeyCode+0x1cc>
    3be6:	87 30       	cpi	r24, 0x07	; 7
    3be8:	09 f4       	brne	.+2      	; 0x3bec <getKeyCode+0x38>
    3bea:	4d c0       	rjmp	.+154    	; 0x3c86 <getKeyCode+0xd2>
    3bec:	08 f4       	brcc	.+2      	; 0x3bf0 <getKeyCode+0x3c>
    3bee:	46 c0       	rjmp	.+140    	; 0x3c7c <getKeyCode+0xc8>
    3bf0:	4f c0       	rjmp	.+158    	; 0x3c90 <getKeyCode+0xdc>
    3bf2:	8e 30       	cpi	r24, 0x0E	; 14
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <getKeyCode+0x44>
    3bf6:	65 c0       	rjmp	.+202    	; 0x3cc2 <getKeyCode+0x10e>
    3bf8:	48 f4       	brcc	.+18     	; 0x3c0c <getKeyCode+0x58>
    3bfa:	8c 30       	cpi	r24, 0x0C	; 12
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <getKeyCode+0x4c>
    3bfe:	57 c0       	rjmp	.+174    	; 0x3cae <getKeyCode+0xfa>
    3c00:	08 f0       	brcs	.+2      	; 0x3c04 <getKeyCode+0x50>
    3c02:	5a c0       	rjmp	.+180    	; 0x3cb8 <getKeyCode+0x104>
    3c04:	8a 30       	cpi	r24, 0x0A	; 10
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <getKeyCode+0x56>
    3c08:	4d c0       	rjmp	.+154    	; 0x3ca4 <getKeyCode+0xf0>
    3c0a:	ba c0       	rjmp	.+372    	; 0x3d80 <getKeyCode+0x1cc>
    3c0c:	80 31       	cpi	r24, 0x10	; 16
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <getKeyCode+0x5e>
    3c10:	62 c0       	rjmp	.+196    	; 0x3cd6 <getKeyCode+0x122>
    3c12:	08 f4       	brcc	.+2      	; 0x3c16 <getKeyCode+0x62>
    3c14:	5b c0       	rjmp	.+182    	; 0x3ccc <getKeyCode+0x118>
    3c16:	64 c0       	rjmp	.+200    	; 0x3ce0 <getKeyCode+0x12c>
    3c18:	8b 31       	cpi	r24, 0x1B	; 27
    3c1a:	09 f4       	brne	.+2      	; 0x3c1e <getKeyCode+0x6a>
    3c1c:	89 c0       	rjmp	.+274    	; 0x3d30 <getKeyCode+0x17c>
    3c1e:	88 f4       	brcc	.+34     	; 0x3c42 <getKeyCode+0x8e>
    3c20:	87 31       	cpi	r24, 0x17	; 23
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <getKeyCode+0x72>
    3c24:	71 c0       	rjmp	.+226    	; 0x3d08 <getKeyCode+0x154>
    3c26:	38 f4       	brcc	.+14     	; 0x3c36 <getKeyCode+0x82>
    3c28:	85 31       	cpi	r24, 0x15	; 21
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <getKeyCode+0x7a>
    3c2c:	63 c0       	rjmp	.+198    	; 0x3cf4 <getKeyCode+0x140>
    3c2e:	86 31       	cpi	r24, 0x16	; 22
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <getKeyCode+0x80>
    3c32:	65 c0       	rjmp	.+202    	; 0x3cfe <getKeyCode+0x14a>
    3c34:	a5 c0       	rjmp	.+330    	; 0x3d80 <getKeyCode+0x1cc>
    3c36:	89 31       	cpi	r24, 0x19	; 25
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <getKeyCode+0x88>
    3c3a:	70 c0       	rjmp	.+224    	; 0x3d1c <getKeyCode+0x168>
    3c3c:	08 f4       	brcc	.+2      	; 0x3c40 <getKeyCode+0x8c>
    3c3e:	69 c0       	rjmp	.+210    	; 0x3d12 <getKeyCode+0x15e>
    3c40:	72 c0       	rjmp	.+228    	; 0x3d26 <getKeyCode+0x172>
    3c42:	8f 31       	cpi	r24, 0x1F	; 31
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <getKeyCode+0x94>
    3c46:	88 c0       	rjmp	.+272    	; 0x3d58 <getKeyCode+0x1a4>
    3c48:	30 f4       	brcc	.+12     	; 0x3c56 <getKeyCode+0xa2>
    3c4a:	8d 31       	cpi	r24, 0x1D	; 29
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <getKeyCode+0x9c>
    3c4e:	7a c0       	rjmp	.+244    	; 0x3d44 <getKeyCode+0x190>
    3c50:	08 f4       	brcc	.+2      	; 0x3c54 <getKeyCode+0xa0>
    3c52:	73 c0       	rjmp	.+230    	; 0x3d3a <getKeyCode+0x186>
    3c54:	7c c0       	rjmp	.+248    	; 0x3d4e <getKeyCode+0x19a>
    3c56:	81 32       	cpi	r24, 0x21	; 33
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <getKeyCode+0xa8>
    3c5a:	88 c0       	rjmp	.+272    	; 0x3d6c <getKeyCode+0x1b8>
    3c5c:	08 f4       	brcc	.+2      	; 0x3c60 <getKeyCode+0xac>
    3c5e:	81 c0       	rjmp	.+258    	; 0x3d62 <getKeyCode+0x1ae>
    3c60:	82 32       	cpi	r24, 0x22	; 34
    3c62:	09 f4       	brne	.+2      	; 0x3c66 <getKeyCode+0xb2>
    3c64:	88 c0       	rjmp	.+272    	; 0x3d76 <getKeyCode+0x1c2>
    3c66:	8c c0       	rjmp	.+280    	; 0x3d80 <getKeyCode+0x1cc>
		{
			case power:				keycode = 0b10000000000011111111;	break;
			case arrow_up:			keycode = 0b10001000100001110111;	break;
    3c68:	67 e7       	ldi	r22, 0x77	; 119
    3c6a:	78 e8       	ldi	r23, 0x88	; 136
    3c6c:	88 e0       	ldi	r24, 0x08	; 8
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	08 95       	ret
			case arrow_down:		keycode = 0b10001010100001010111;	break;
    3c72:	67 e5       	ldi	r22, 0x57	; 87
    3c74:	78 ea       	ldi	r23, 0xA8	; 168
    3c76:	88 e0       	ldi	r24, 0x08	; 8
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	08 95       	ret
			case arrow_right:		keycode = 0b10000010100011010111;	break;
    3c7c:	67 ed       	ldi	r22, 0xD7	; 215
    3c7e:	78 e2       	ldi	r23, 0x28	; 40
    3c80:	88 e0       	ldi	r24, 0x08	; 8
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	08 95       	ret
			case arrow_left:		keycode = 0b10000100100010110111;	break;
    3c86:	67 eb       	ldi	r22, 0xB7	; 183
    3c88:	78 e4       	ldi	r23, 0x48	; 72
    3c8a:	88 e0       	ldi	r24, 0x08	; 8
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	08 95       	ret
			case confirm:			keycode = 0b10001100100000110111;	break;
    3c90:	67 e3       	ldi	r22, 0x37	; 55
    3c92:	78 ec       	ldi	r23, 0xC8	; 200
    3c94:	88 e0       	ldi	r24, 0x08	; 8
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	08 95       	ret
			case back:				keycode = 0b10001000001001111101;	break;
    3c9a:	6d e7       	ldi	r22, 0x7D	; 125
    3c9c:	72 e8       	ldi	r23, 0x82	; 130
    3c9e:	88 e0       	ldi	r24, 0x08	; 8
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	08 95       	ret
			case cancel:			keycode = 0b10000110100010010111;	break;
    3ca4:	67 e9       	ldi	r22, 0x97	; 151
    3ca6:	78 e6       	ldi	r23, 0x68	; 104
    3ca8:	88 e0       	ldi	r24, 0x08	; 8
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	08 95       	ret
			//case home:			keycode = 0;						break;
			case menu:				keycode = 0b10000111000010001111;	break;
    3cae:	6f e8       	ldi	r22, 0x8F	; 143
    3cb0:	70 e7       	ldi	r23, 0x70	; 112
    3cb2:	88 e0       	ldi	r24, 0x08	; 8
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	08 95       	ret
			case channel_up:		keycode = 0b10000000100011110111;	break;
    3cb8:	67 ef       	ldi	r22, 0xF7	; 247
    3cba:	78 e0       	ldi	r23, 0x08	; 8
    3cbc:	88 e0       	ldi	r24, 0x08	; 8
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	08 95       	ret
			case channel_down:		keycode = 0b10001111000000001111;	break;
    3cc2:	6f e0       	ldi	r22, 0x0F	; 15
    3cc4:	70 ef       	ldi	r23, 0xF0	; 240
    3cc6:	88 e0       	ldi	r24, 0x08	; 8
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	08 95       	ret
			case volume_up:			keycode = 0b10001111100000000111;	break;
    3ccc:	67 e0       	ldi	r22, 0x07	; 7
    3cce:	78 ef       	ldi	r23, 0xF8	; 248
    3cd0:	88 e0       	ldi	r24, 0x08	; 8
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	08 95       	ret
			
			case audio:				keycode = 0b10001010001001011101;	break;
    3cd6:	6d e5       	ldi	r22, 0x5D	; 93
    3cd8:	72 ea       	ldi	r23, 0xA2	; 162
    3cda:	88 e0       	ldi	r24, 0x08	; 8
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	08 95       	ret
			case subs:				keycode = 0b10000110001010011101;	break;
    3ce0:	6d e9       	ldi	r22, 0x9D	; 157
    3ce2:	72 e6       	ldi	r23, 0x62	; 98
    3ce4:	88 e0       	ldi	r24, 0x08	; 8
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	08 95       	ret
			case option:			keycode = 0b10000100001010111101;	break;
    3cea:	6d eb       	ldi	r22, 0xBD	; 189
    3cec:	72 e4       	ldi	r23, 0x42	; 66
    3cee:	88 e0       	ldi	r24, 0x08	; 8
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	08 95       	ret
			//case favorite:		keycode = 0;	break;
			//case schedule:		keycode = 0;	break;
			
			case red:				keycode = 0b10000011100011000111;	break;
    3cf4:	67 ec       	ldi	r22, 0xC7	; 199
    3cf6:	78 e3       	ldi	r23, 0x38	; 56
    3cf8:	88 e0       	ldi	r24, 0x08	; 8
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	08 95       	ret
			case green:				keycode = 0b10001011100001000111;	break;
    3cfe:	67 e4       	ldi	r22, 0x47	; 71
    3d00:	78 eb       	ldi	r23, 0xB8	; 184
    3d02:	88 e0       	ldi	r24, 0x08	; 8
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	08 95       	ret
			case yellow:			keycode = 0b10000101100010100111;	break;
    3d08:	67 ea       	ldi	r22, 0xA7	; 167
    3d0a:	78 e5       	ldi	r23, 0x58	; 88
    3d0c:	88 e0       	ldi	r24, 0x08	; 8
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	08 95       	ret
			case blue:				keycode = 0b10000111100010000111;	break;
    3d12:	67 e8       	ldi	r22, 0x87	; 135
    3d14:	78 e7       	ldi	r23, 0x78	; 120
    3d16:	88 e0       	ldi	r24, 0x08	; 8
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	08 95       	ret
			
			case zero:				keycode = 0b10000011000011001111;	break;
    3d1c:	6f ec       	ldi	r22, 0xCF	; 207
    3d1e:	70 e3       	ldi	r23, 0x30	; 48
    3d20:	88 e0       	ldi	r24, 0x08	; 8
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	08 95       	ret
			case one:				keycode = 0b10001100000000111111;	break;
    3d26:	6f e3       	ldi	r22, 0x3F	; 63
    3d28:	70 ec       	ldi	r23, 0xC0	; 192
    3d2a:	88 e0       	ldi	r24, 0x08	; 8
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	08 95       	ret
			case two:				keycode = 0b10000010000011011111;	break;
    3d30:	6f ed       	ldi	r22, 0xDF	; 223
    3d32:	70 e2       	ldi	r23, 0x20	; 32
    3d34:	88 e0       	ldi	r24, 0x08	; 8
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	08 95       	ret
			case three:				keycode = 0b10001010000001011111;	break;
    3d3a:	6f e5       	ldi	r22, 0x5F	; 95
    3d3c:	70 ea       	ldi	r23, 0xA0	; 160
    3d3e:	88 e0       	ldi	r24, 0x08	; 8
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	08 95       	ret
			case four:				keycode = 0b10000110000010011111;	break;
    3d44:	6f e9       	ldi	r22, 0x9F	; 159
    3d46:	70 e6       	ldi	r23, 0x60	; 96
    3d48:	88 e0       	ldi	r24, 0x08	; 8
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	08 95       	ret
			case five:				keycode = 0b10001110000000011111;	break;
    3d4e:	6f e1       	ldi	r22, 0x1F	; 31
    3d50:	70 ee       	ldi	r23, 0xE0	; 224
    3d52:	88 e0       	ldi	r24, 0x08	; 8
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	08 95       	ret
			case six:				keycode = 0b10000001000011101111;	break;
    3d58:	6f ee       	ldi	r22, 0xEF	; 239
    3d5a:	70 e1       	ldi	r23, 0x10	; 16
    3d5c:	88 e0       	ldi	r24, 0x08	; 8
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	08 95       	ret
			case seven:				keycode = 0b10001001000001101111;	break;
    3d62:	6f e6       	ldi	r22, 0x6F	; 111
    3d64:	70 e9       	ldi	r23, 0x90	; 144
    3d66:	88 e0       	ldi	r24, 0x08	; 8
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	08 95       	ret
			case eight:				keycode = 0b10000101000010101111;	break;
    3d6c:	6f ea       	ldi	r22, 0xAF	; 175
    3d6e:	70 e5       	ldi	r23, 0x50	; 80
    3d70:	88 e0       	ldi	r24, 0x08	; 8
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	08 95       	ret
			case nine:				keycode = 0b10001101000000101111;	break;
    3d76:	6f e2       	ldi	r22, 0x2F	; 47
    3d78:	70 ed       	ldi	r23, 0xD0	; 208
    3d7a:	88 e0       	ldi	r24, 0x08	; 8
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	08 95       	ret
			
			default:				keycode = 0;						break;
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	cb 01       	movw	r24, r22
    3d86:	08 95       	ret
		}
	}
	else if (cmd->device_type == device_mbc)
    3d88:	93 30       	cpi	r25, 0x03	; 3
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <getKeyCode+0x1da>
    3d8c:	ee c0       	rjmp	.+476    	; 0x3f6a <getKeyCode+0x3b6>
	{
		switch (cmd->key)
    3d8e:	85 81       	ldd	r24, Z+5	; 0x05
    3d90:	82 31       	cpi	r24, 0x12	; 18
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <getKeyCode+0x1e2>
    3d94:	97 c0       	rjmp	.+302    	; 0x3ec4 <getKeyCode+0x310>
    3d96:	38 f5       	brcc	.+78     	; 0x3de6 <getKeyCode+0x232>
    3d98:	8a 30       	cpi	r24, 0x0A	; 10
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <getKeyCode+0x1ea>
    3d9c:	6c c0       	rjmp	.+216    	; 0x3e76 <getKeyCode+0x2c2>
    3d9e:	98 f4       	brcc	.+38     	; 0x3dc6 <getKeyCode+0x212>
    3da0:	86 30       	cpi	r24, 0x06	; 6
    3da2:	09 f4       	brne	.+2      	; 0x3da6 <getKeyCode+0x1f2>
    3da4:	54 c0       	rjmp	.+168    	; 0x3e4e <getKeyCode+0x29a>
    3da6:	48 f4       	brcc	.+18     	; 0x3dba <getKeyCode+0x206>
    3da8:	84 30       	cpi	r24, 0x04	; 4
    3daa:	09 f4       	brne	.+2      	; 0x3dae <getKeyCode+0x1fa>
    3dac:	46 c0       	rjmp	.+140    	; 0x3e3a <getKeyCode+0x286>
    3dae:	08 f0       	brcs	.+2      	; 0x3db2 <getKeyCode+0x1fe>
    3db0:	49 c0       	rjmp	.+146    	; 0x3e44 <getKeyCode+0x290>
    3db2:	83 30       	cpi	r24, 0x03	; 3
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <getKeyCode+0x204>
    3db6:	ca c1       	rjmp	.+916    	; 0x414c <__stack+0x14d>
    3db8:	d4 c0       	rjmp	.+424    	; 0x3f62 <getKeyCode+0x3ae>
    3dba:	88 30       	cpi	r24, 0x08	; 8
    3dbc:	09 f4       	brne	.+2      	; 0x3dc0 <getKeyCode+0x20c>
    3dbe:	51 c0       	rjmp	.+162    	; 0x3e62 <getKeyCode+0x2ae>
    3dc0:	08 f4       	brcc	.+2      	; 0x3dc4 <getKeyCode+0x210>
    3dc2:	4a c0       	rjmp	.+148    	; 0x3e58 <getKeyCode+0x2a4>
    3dc4:	53 c0       	rjmp	.+166    	; 0x3e6c <getKeyCode+0x2b8>
    3dc6:	8e 30       	cpi	r24, 0x0E	; 14
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <getKeyCode+0x218>
    3dca:	69 c0       	rjmp	.+210    	; 0x3e9e <getKeyCode+0x2ea>
    3dcc:	30 f4       	brcc	.+12     	; 0x3dda <getKeyCode+0x226>
    3dce:	8c 30       	cpi	r24, 0x0C	; 12
    3dd0:	09 f4       	brne	.+2      	; 0x3dd4 <getKeyCode+0x220>
    3dd2:	5b c0       	rjmp	.+182    	; 0x3e8a <getKeyCode+0x2d6>
    3dd4:	08 f4       	brcc	.+2      	; 0x3dd8 <getKeyCode+0x224>
    3dd6:	54 c0       	rjmp	.+168    	; 0x3e80 <getKeyCode+0x2cc>
    3dd8:	5d c0       	rjmp	.+186    	; 0x3e94 <getKeyCode+0x2e0>
    3dda:	80 31       	cpi	r24, 0x10	; 16
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <getKeyCode+0x22c>
    3dde:	69 c0       	rjmp	.+210    	; 0x3eb2 <getKeyCode+0x2fe>
    3de0:	08 f4       	brcc	.+2      	; 0x3de4 <getKeyCode+0x230>
    3de2:	62 c0       	rjmp	.+196    	; 0x3ea8 <getKeyCode+0x2f4>
    3de4:	6a c0       	rjmp	.+212    	; 0x3eba <getKeyCode+0x306>
    3de6:	8b 31       	cpi	r24, 0x1B	; 27
    3de8:	09 f4       	brne	.+2      	; 0x3dec <getKeyCode+0x238>
    3dea:	93 c0       	rjmp	.+294    	; 0x3f12 <getKeyCode+0x35e>
    3dec:	98 f4       	brcc	.+38     	; 0x3e14 <getKeyCode+0x260>
    3dee:	87 31       	cpi	r24, 0x17	; 23
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <getKeyCode+0x240>
    3df2:	7b c0       	rjmp	.+246    	; 0x3eea <getKeyCode+0x336>
    3df4:	48 f4       	brcc	.+18     	; 0x3e08 <getKeyCode+0x254>
    3df6:	85 31       	cpi	r24, 0x15	; 21
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <getKeyCode+0x248>
    3dfa:	6d c0       	rjmp	.+218    	; 0x3ed6 <getKeyCode+0x322>
    3dfc:	08 f0       	brcs	.+2      	; 0x3e00 <getKeyCode+0x24c>
    3dfe:	70 c0       	rjmp	.+224    	; 0x3ee0 <getKeyCode+0x32c>
    3e00:	83 31       	cpi	r24, 0x13	; 19
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <getKeyCode+0x252>
    3e04:	63 c0       	rjmp	.+198    	; 0x3ecc <getKeyCode+0x318>
    3e06:	ad c0       	rjmp	.+346    	; 0x3f62 <getKeyCode+0x3ae>
    3e08:	89 31       	cpi	r24, 0x19	; 25
    3e0a:	09 f4       	brne	.+2      	; 0x3e0e <getKeyCode+0x25a>
    3e0c:	78 c0       	rjmp	.+240    	; 0x3efe <getKeyCode+0x34a>
    3e0e:	08 f4       	brcc	.+2      	; 0x3e12 <getKeyCode+0x25e>
    3e10:	71 c0       	rjmp	.+226    	; 0x3ef4 <getKeyCode+0x340>
    3e12:	7a c0       	rjmp	.+244    	; 0x3f08 <getKeyCode+0x354>
    3e14:	8f 31       	cpi	r24, 0x1F	; 31
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <getKeyCode+0x266>
    3e18:	90 c0       	rjmp	.+288    	; 0x3f3a <getKeyCode+0x386>
    3e1a:	30 f4       	brcc	.+12     	; 0x3e28 <getKeyCode+0x274>
    3e1c:	8d 31       	cpi	r24, 0x1D	; 29
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <getKeyCode+0x26e>
    3e20:	82 c0       	rjmp	.+260    	; 0x3f26 <getKeyCode+0x372>
    3e22:	08 f4       	brcc	.+2      	; 0x3e26 <getKeyCode+0x272>
    3e24:	7b c0       	rjmp	.+246    	; 0x3f1c <getKeyCode+0x368>
    3e26:	84 c0       	rjmp	.+264    	; 0x3f30 <getKeyCode+0x37c>
    3e28:	81 32       	cpi	r24, 0x21	; 33
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <getKeyCode+0x27a>
    3e2c:	90 c0       	rjmp	.+288    	; 0x3f4e <getKeyCode+0x39a>
    3e2e:	08 f4       	brcc	.+2      	; 0x3e32 <getKeyCode+0x27e>
    3e30:	89 c0       	rjmp	.+274    	; 0x3f44 <getKeyCode+0x390>
    3e32:	82 32       	cpi	r24, 0x22	; 34
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <getKeyCode+0x284>
    3e36:	90 c0       	rjmp	.+288    	; 0x3f58 <getKeyCode+0x3a4>
    3e38:	94 c0       	rjmp	.+296    	; 0x3f62 <getKeyCode+0x3ae>
		{
			case power:				keycode = 0b10000010111000000100000010111111;	break;
			case arrow_up:			keycode = 0b10000010111000001100100000110111;	break;
    3e3a:	67 e3       	ldi	r22, 0x37	; 55
    3e3c:	78 ec       	ldi	r23, 0xC8	; 200
    3e3e:	80 ee       	ldi	r24, 0xE0	; 224
    3e40:	92 e8       	ldi	r25, 0x82	; 130
    3e42:	08 95       	ret
			case arrow_down:		keycode = 0b10000010111000001110100000010111;	break;
    3e44:	67 e1       	ldi	r22, 0x17	; 23
    3e46:	78 ee       	ldi	r23, 0xE8	; 232
    3e48:	80 ee       	ldi	r24, 0xE0	; 224
    3e4a:	92 e8       	ldi	r25, 0x82	; 130
    3e4c:	08 95       	ret
			case arrow_right:		keycode = 0b10000010111000000110100010010111;	break;
    3e4e:	67 e9       	ldi	r22, 0x97	; 151
    3e50:	78 e6       	ldi	r23, 0x68	; 104
    3e52:	80 ee       	ldi	r24, 0xE0	; 224
    3e54:	92 e8       	ldi	r25, 0x82	; 130
    3e56:	08 95       	ret
			case arrow_left:		keycode = 0b10000010111000000010100011010111;	break;
    3e58:	67 ed       	ldi	r22, 0xD7	; 215
    3e5a:	78 e2       	ldi	r23, 0x28	; 40
    3e5c:	80 ee       	ldi	r24, 0xE0	; 224
    3e5e:	92 e8       	ldi	r25, 0x82	; 130
    3e60:	08 95       	ret
			case confirm:			keycode = 0b10000010111000001010100001010111;	break;
    3e62:	67 e5       	ldi	r22, 0x57	; 87
    3e64:	78 ea       	ldi	r23, 0xA8	; 168
    3e66:	80 ee       	ldi	r24, 0xE0	; 224
    3e68:	92 e8       	ldi	r25, 0x82	; 130
    3e6a:	08 95       	ret
			case back:				keycode = 0b10000010111000000100100010110111;	break; // same as cancel
    3e6c:	67 eb       	ldi	r22, 0xB7	; 183
    3e6e:	78 e4       	ldi	r23, 0x48	; 72
    3e70:	80 ee       	ldi	r24, 0xE0	; 224
    3e72:	92 e8       	ldi	r25, 0x82	; 130
    3e74:	08 95       	ret
			case cancel:			keycode = 0b10000010111000000100100010110111;	break;
    3e76:	67 eb       	ldi	r22, 0xB7	; 183
    3e78:	78 e4       	ldi	r23, 0x48	; 72
    3e7a:	80 ee       	ldi	r24, 0xE0	; 224
    3e7c:	92 e8       	ldi	r25, 0x82	; 130
    3e7e:	08 95       	ret
			case home:				keycode = 0b10000010111000001100000000111111;						break;
    3e80:	6f e3       	ldi	r22, 0x3F	; 63
    3e82:	70 ec       	ldi	r23, 0xC0	; 192
    3e84:	80 ee       	ldi	r24, 0xE0	; 224
    3e86:	92 e8       	ldi	r25, 0x82	; 130
    3e88:	08 95       	ret
			case menu:				keycode = 0b10000010111000001111000000001111;	break;
    3e8a:	6f e0       	ldi	r22, 0x0F	; 15
    3e8c:	70 ef       	ldi	r23, 0xF0	; 240
    3e8e:	80 ee       	ldi	r24, 0xE0	; 224
    3e90:	92 e8       	ldi	r25, 0x82	; 130
    3e92:	08 95       	ret
			case channel_up:		keycode = 0b10000010111000001101100000100111;	break;
    3e94:	67 e2       	ldi	r22, 0x27	; 39
    3e96:	78 ed       	ldi	r23, 0xD8	; 216
    3e98:	80 ee       	ldi	r24, 0xE0	; 224
    3e9a:	92 e8       	ldi	r25, 0x82	; 130
    3e9c:	08 95       	ret
			case channel_down:		keycode = 0b10000010111000001111100000000111;	break;
    3e9e:	67 e0       	ldi	r22, 0x07	; 7
    3ea0:	78 ef       	ldi	r23, 0xF8	; 248
    3ea2:	80 ee       	ldi	r24, 0xE0	; 224
    3ea4:	92 e8       	ldi	r25, 0x82	; 130
    3ea6:	08 95       	ret
			case volume_up:			keycode = 0b10000010111000000001100011100111;	break;
    3ea8:	67 ee       	ldi	r22, 0xE7	; 231
    3eaa:	78 e1       	ldi	r23, 0x18	; 24
    3eac:	80 ee       	ldi	r24, 0xE0	; 224
    3eae:	92 e8       	ldi	r25, 0x82	; 130
    3eb0:	08 95       	ret
			
			case audio:				keycode = 0;	break;
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	08 95       	ret
			case subs:				keycode = 0b10000010111000000000010011111011;	break;
    3eba:	6b ef       	ldi	r22, 0xFB	; 251
    3ebc:	74 e0       	ldi	r23, 0x04	; 4
    3ebe:	80 ee       	ldi	r24, 0xE0	; 224
    3ec0:	92 e8       	ldi	r25, 0x82	; 130
    3ec2:	08 95       	ret
			case option:			keycode = 0;	break;
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	cb 01       	movw	r24, r22
    3eca:	08 95       	ret
			case favorite:			keycode = 0b10000010111000000101100010100111;	break;
    3ecc:	67 ea       	ldi	r22, 0xA7	; 167
    3ece:	78 e5       	ldi	r23, 0x58	; 88
    3ed0:	80 ee       	ldi	r24, 0xE0	; 224
    3ed2:	92 e8       	ldi	r25, 0x82	; 130
    3ed4:	08 95       	ret
			//case schedule:		keycode = 0;	break;
			
			case red:				keycode = 0b10000010111000000110010010011011;	break;
    3ed6:	6b e9       	ldi	r22, 0x9B	; 155
    3ed8:	74 e6       	ldi	r23, 0x64	; 100
    3eda:	80 ee       	ldi	r24, 0xE0	; 224
    3edc:	92 e8       	ldi	r25, 0x82	; 130
    3ede:	08 95       	ret
			case green:				keycode = 0b10000010111000001110010000011011;	break;
    3ee0:	6b e1       	ldi	r22, 0x1B	; 27
    3ee2:	74 ee       	ldi	r23, 0xE4	; 228
    3ee4:	80 ee       	ldi	r24, 0xE0	; 224
    3ee6:	92 e8       	ldi	r25, 0x82	; 130
    3ee8:	08 95       	ret
			case yellow:			keycode = 0b10000010111000000001010011101011;	break;
    3eea:	6b ee       	ldi	r22, 0xEB	; 235
    3eec:	74 e1       	ldi	r23, 0x14	; 20
    3eee:	80 ee       	ldi	r24, 0xE0	; 224
    3ef0:	92 e8       	ldi	r25, 0x82	; 130
    3ef2:	08 95       	ret
			case blue:				keycode = 0b10000010111000001001010001101011;	break;
    3ef4:	6b e6       	ldi	r22, 0x6B	; 107
    3ef6:	74 e9       	ldi	r23, 0x94	; 148
    3ef8:	80 ee       	ldi	r24, 0xE0	; 224
    3efa:	92 e8       	ldi	r25, 0x82	; 130
    3efc:	08 95       	ret
			
			case zero:				keycode = 0b10000010111000000111000010001111;	break;
    3efe:	6f e8       	ldi	r22, 0x8F	; 143
    3f00:	70 e7       	ldi	r23, 0x70	; 112
    3f02:	80 ee       	ldi	r24, 0xE0	; 224
    3f04:	92 e8       	ldi	r25, 0x82	; 130
    3f06:	08 95       	ret
			case one:				keycode = 0b10000010111000000010000011011111;	break;
    3f08:	6f ed       	ldi	r22, 0xDF	; 223
    3f0a:	70 e2       	ldi	r23, 0x20	; 32
    3f0c:	80 ee       	ldi	r24, 0xE0	; 224
    3f0e:	92 e8       	ldi	r25, 0x82	; 130
    3f10:	08 95       	ret
			case two:				keycode = 0b10000010111000001010000001011111;	break;
    3f12:	6f e5       	ldi	r22, 0x5F	; 95
    3f14:	70 ea       	ldi	r23, 0xA0	; 160
    3f16:	80 ee       	ldi	r24, 0xE0	; 224
    3f18:	92 e8       	ldi	r25, 0x82	; 130
    3f1a:	08 95       	ret
			case three:				keycode = 0b10000010111000000110000010011111;	break;
    3f1c:	6f e9       	ldi	r22, 0x9F	; 159
    3f1e:	70 e6       	ldi	r23, 0x60	; 96
    3f20:	80 ee       	ldi	r24, 0xE0	; 224
    3f22:	92 e8       	ldi	r25, 0x82	; 130
    3f24:	08 95       	ret
			case four:				keycode = 0b10000010111000001110000000011111;	break;
    3f26:	6f e1       	ldi	r22, 0x1F	; 31
    3f28:	70 ee       	ldi	r23, 0xE0	; 224
    3f2a:	80 ee       	ldi	r24, 0xE0	; 224
    3f2c:	92 e8       	ldi	r25, 0x82	; 130
    3f2e:	08 95       	ret
			case five:				keycode = 0b10000010111000000001000011101111;	break;
    3f30:	6f ee       	ldi	r22, 0xEF	; 239
    3f32:	70 e1       	ldi	r23, 0x10	; 16
    3f34:	80 ee       	ldi	r24, 0xE0	; 224
    3f36:	92 e8       	ldi	r25, 0x82	; 130
    3f38:	08 95       	ret
			case six:				keycode = 0b10000010111000001001000001101111;	break;
    3f3a:	6f e6       	ldi	r22, 0x6F	; 111
    3f3c:	70 e9       	ldi	r23, 0x90	; 144
    3f3e:	80 ee       	ldi	r24, 0xE0	; 224
    3f40:	92 e8       	ldi	r25, 0x82	; 130
    3f42:	08 95       	ret
			case seven:				keycode = 0b10000010111000000101000010101111;	break;
    3f44:	6f ea       	ldi	r22, 0xAF	; 175
    3f46:	70 e5       	ldi	r23, 0x50	; 80
    3f48:	80 ee       	ldi	r24, 0xE0	; 224
    3f4a:	92 e8       	ldi	r25, 0x82	; 130
    3f4c:	08 95       	ret
			case eight:				keycode = 0b10000010111000001101000000101111;	break;
    3f4e:	6f e2       	ldi	r22, 0x2F	; 47
    3f50:	70 ed       	ldi	r23, 0xD0	; 208
    3f52:	80 ee       	ldi	r24, 0xE0	; 224
    3f54:	92 e8       	ldi	r25, 0x82	; 130
    3f56:	08 95       	ret
			case nine:				keycode = 0b10000010111000000011000011001111;	break;
    3f58:	6f ec       	ldi	r22, 0xCF	; 207
    3f5a:	70 e3       	ldi	r23, 0x30	; 48
    3f5c:	80 ee       	ldi	r24, 0xE0	; 224
    3f5e:	92 e8       	ldi	r25, 0x82	; 130
    3f60:	08 95       	ret
			//MUTE 0b10000010111000001000000001111111
			//VOLDOWN 0b10000010111000000011100011000111
			//MEDIA	0b10000010111000001001100001100111
			//INFO	0b10000010111000000000100011110111
			//LIST	0b10000010111000001000100001110111
			default:				keycode = 0;						break;
    3f62:	60 e0       	ldi	r22, 0x00	; 0
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	cb 01       	movw	r24, r22
    3f68:	08 95       	ret
		}
	}
	else if (cmd->device_type == device_bein)
    3f6a:	92 30       	cpi	r25, 0x02	; 2
    3f6c:	09 f0       	breq	.+2      	; 0x3f70 <getKeyCode+0x3bc>
    3f6e:	f3 c0       	rjmp	.+486    	; 0x4156 <__stack+0x157>
	{
		switch (cmd->key)
    3f70:	85 81       	ldd	r24, Z+5	; 0x05
    3f72:	83 31       	cpi	r24, 0x13	; 19
    3f74:	09 f4       	brne	.+2      	; 0x3f78 <getKeyCode+0x3c4>
    3f76:	91 c0       	rjmp	.+290    	; 0x409a <__stack+0x9b>
    3f78:	40 f5       	brcc	.+80     	; 0x3fca <getKeyCode+0x416>
    3f7a:	89 30       	cpi	r24, 0x09	; 9
    3f7c:	09 f4       	brne	.+2      	; 0x3f80 <getKeyCode+0x3cc>
    3f7e:	65 c0       	rjmp	.+202    	; 0x404a <__stack+0x4b>
    3f80:	88 f4       	brcc	.+34     	; 0x3fa4 <getKeyCode+0x3f0>
    3f82:	85 30       	cpi	r24, 0x05	; 5
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <getKeyCode+0x3d4>
    3f86:	4d c0       	rjmp	.+154    	; 0x4022 <__stack+0x23>
    3f88:	38 f4       	brcc	.+14     	; 0x3f98 <getKeyCode+0x3e4>
    3f8a:	83 30       	cpi	r24, 0x03	; 3
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <getKeyCode+0x3dc>
    3f8e:	e7 c0       	rjmp	.+462    	; 0x415e <__stack+0x15f>
    3f90:	84 30       	cpi	r24, 0x04	; 4
    3f92:	09 f4       	brne	.+2      	; 0x3f96 <getKeyCode+0x3e2>
    3f94:	41 c0       	rjmp	.+130    	; 0x4018 <__stack+0x19>
    3f96:	d1 c0       	rjmp	.+418    	; 0x413a <__stack+0x13b>
    3f98:	87 30       	cpi	r24, 0x07	; 7
    3f9a:	09 f4       	brne	.+2      	; 0x3f9e <getKeyCode+0x3ea>
    3f9c:	4c c0       	rjmp	.+152    	; 0x4036 <__stack+0x37>
    3f9e:	08 f4       	brcc	.+2      	; 0x3fa2 <getKeyCode+0x3ee>
    3fa0:	45 c0       	rjmp	.+138    	; 0x402c <__stack+0x2d>
    3fa2:	4e c0       	rjmp	.+156    	; 0x4040 <__stack+0x41>
    3fa4:	8d 30       	cpi	r24, 0x0D	; 13
    3fa6:	09 f4       	brne	.+2      	; 0x3faa <getKeyCode+0x3f6>
    3fa8:	64 c0       	rjmp	.+200    	; 0x4072 <__stack+0x73>
    3faa:	30 f4       	brcc	.+12     	; 0x3fb8 <getKeyCode+0x404>
    3fac:	8b 30       	cpi	r24, 0x0B	; 11
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <getKeyCode+0x3fe>
    3fb0:	56 c0       	rjmp	.+172    	; 0x405e <__stack+0x5f>
    3fb2:	08 f4       	brcc	.+2      	; 0x3fb6 <getKeyCode+0x402>
    3fb4:	4f c0       	rjmp	.+158    	; 0x4054 <__stack+0x55>
    3fb6:	58 c0       	rjmp	.+176    	; 0x4068 <__stack+0x69>
    3fb8:	8f 30       	cpi	r24, 0x0F	; 15
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <getKeyCode+0x40a>
    3fbc:	64 c0       	rjmp	.+200    	; 0x4086 <__stack+0x87>
    3fbe:	08 f4       	brcc	.+2      	; 0x3fc2 <getKeyCode+0x40e>
    3fc0:	5d c0       	rjmp	.+186    	; 0x407c <__stack+0x7d>
    3fc2:	82 31       	cpi	r24, 0x12	; 18
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <getKeyCode+0x414>
    3fc6:	64 c0       	rjmp	.+200    	; 0x4090 <__stack+0x91>
    3fc8:	b8 c0       	rjmp	.+368    	; 0x413a <__stack+0x13b>
    3fca:	8b 31       	cpi	r24, 0x1B	; 27
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <getKeyCode+0x41c>
    3fce:	8d c0       	rjmp	.+282    	; 0x40ea <__stack+0xeb>
    3fd0:	80 f4       	brcc	.+32     	; 0x3ff2 <getKeyCode+0x43e>
    3fd2:	87 31       	cpi	r24, 0x17	; 23
    3fd4:	09 f4       	brne	.+2      	; 0x3fd8 <getKeyCode+0x424>
    3fd6:	75 c0       	rjmp	.+234    	; 0x40c2 <__stack+0xc3>
    3fd8:	30 f4       	brcc	.+12     	; 0x3fe6 <getKeyCode+0x432>
    3fda:	85 31       	cpi	r24, 0x15	; 21
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <getKeyCode+0x42c>
    3fde:	67 c0       	rjmp	.+206    	; 0x40ae <__stack+0xaf>
    3fe0:	08 f4       	brcc	.+2      	; 0x3fe4 <getKeyCode+0x430>
    3fe2:	60 c0       	rjmp	.+192    	; 0x40a4 <__stack+0xa5>
    3fe4:	69 c0       	rjmp	.+210    	; 0x40b8 <__stack+0xb9>
    3fe6:	89 31       	cpi	r24, 0x19	; 25
    3fe8:	09 f4       	brne	.+2      	; 0x3fec <getKeyCode+0x438>
    3fea:	75 c0       	rjmp	.+234    	; 0x40d6 <__stack+0xd7>
    3fec:	08 f4       	brcc	.+2      	; 0x3ff0 <getKeyCode+0x43c>
    3fee:	6e c0       	rjmp	.+220    	; 0x40cc <__stack+0xcd>
    3ff0:	77 c0       	rjmp	.+238    	; 0x40e0 <__stack+0xe1>
    3ff2:	8f 31       	cpi	r24, 0x1F	; 31
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <getKeyCode+0x444>
    3ff6:	8d c0       	rjmp	.+282    	; 0x4112 <__stack+0x113>
    3ff8:	30 f4       	brcc	.+12     	; 0x4006 <__stack+0x7>
    3ffa:	8d 31       	cpi	r24, 0x1D	; 29
    3ffc:	09 f4       	brne	.+2      	; 0x4000 <__stack+0x1>
    3ffe:	7f c0       	rjmp	.+254    	; 0x40fe <__stack+0xff>
    4000:	08 f4       	brcc	.+2      	; 0x4004 <__stack+0x5>
    4002:	78 c0       	rjmp	.+240    	; 0x40f4 <__stack+0xf5>
    4004:	81 c0       	rjmp	.+258    	; 0x4108 <__stack+0x109>
    4006:	81 32       	cpi	r24, 0x21	; 33
    4008:	09 f4       	brne	.+2      	; 0x400c <__stack+0xd>
    400a:	8d c0       	rjmp	.+282    	; 0x4126 <__stack+0x127>
    400c:	08 f4       	brcc	.+2      	; 0x4010 <__stack+0x11>
    400e:	86 c0       	rjmp	.+268    	; 0x411c <__stack+0x11d>
    4010:	82 32       	cpi	r24, 0x22	; 34
    4012:	09 f4       	brne	.+2      	; 0x4016 <__stack+0x17>
    4014:	8d c0       	rjmp	.+282    	; 0x4130 <__stack+0x131>
    4016:	91 c0       	rjmp	.+290    	; 0x413a <__stack+0x13b>
		{
			case power:				keycode = 0b11101010001100;			break; 
			case arrow_up:			keycode = 0b10101010010000;			break; 
    4018:	60 e9       	ldi	r22, 0x90	; 144
    401a:	7a e2       	ldi	r23, 0x2A	; 42
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	08 95       	ret
			case arrow_down:		keycode = 0b10101010010001;			break; 
    4022:	61 e9       	ldi	r22, 0x91	; 145
    4024:	7a e2       	ldi	r23, 0x2A	; 42
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	08 95       	ret
			case arrow_right:		keycode = 0b10101010010110;			break; 
    402c:	66 e9       	ldi	r22, 0x96	; 150
    402e:	7a e2       	ldi	r23, 0x2A	; 42
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	08 95       	ret
			case arrow_left:		keycode = 0b10101010010101;			break; 
    4036:	65 e9       	ldi	r22, 0x95	; 149
    4038:	7a e2       	ldi	r23, 0x2A	; 42
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	08 95       	ret
			case confirm:			keycode = 0b10101010010111;			break; 
    4040:	67 e9       	ldi	r22, 0x97	; 151
    4042:	7a e2       	ldi	r23, 0x2A	; 42
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	08 95       	ret
			case back:				keycode = 0b10101010010011;			break; 
    404a:	63 e9       	ldi	r22, 0x93	; 147
    404c:	7a e2       	ldi	r23, 0x2A	; 42
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	08 95       	ret
			case cancel:			keycode = 0b10101010110101;			break; 
    4054:	65 eb       	ldi	r22, 0xB5	; 181
    4056:	7a e2       	ldi	r23, 0x2A	; 42
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	08 95       	ret
			case home:				keycode = 0b10010101101010;			break;
    405e:	6a e6       	ldi	r22, 0x6A	; 106
    4060:	75 e2       	ldi	r23, 0x25	; 37
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	08 95       	ret
			case menu:				keycode = 0b10101010010010;			break;
    4068:	62 e9       	ldi	r22, 0x92	; 146
    406a:	7a e2       	ldi	r23, 0x2A	; 42
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	08 95       	ret
			case channel_up:		keycode = 0b11101010100000;			break;
    4072:	60 ea       	ldi	r22, 0xA0	; 160
    4074:	7a e3       	ldi	r23, 0x3A	; 58
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	08 95       	ret
			case channel_down:		keycode = 0b11101010100001;			break;
    407c:	61 ea       	ldi	r22, 0xA1	; 161
    407e:	7a e3       	ldi	r23, 0x3A	; 58
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	08 95       	ret
			case volume_up:			keycode = 0b11101010010000;			break; // fixed: started with 0b11
    4086:	60 e9       	ldi	r22, 0x90	; 144
    4088:	7a e3       	ldi	r23, 0x3A	; 58
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	08 95       	ret
			
			//case audio:				keycode = 0;	break;
			//case subs:				keycode = 0;	break;
			case option:			keycode = 0b11101010001110;			break;
    4090:	6e e8       	ldi	r22, 0x8E	; 142
    4092:	7a e3       	ldi	r23, 0x3A	; 58
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	08 95       	ret
			case favorite:			keycode = 0b10101010001100;			break;
    409a:	6c e8       	ldi	r22, 0x8C	; 140
    409c:	7a e2       	ldi	r23, 0x2A	; 42
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	08 95       	ret
			case schedule:			keycode = 0b10101010101000;			break;
    40a4:	68 ea       	ldi	r22, 0xA8	; 168
    40a6:	7a e2       	ldi	r23, 0x2A	; 42
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	08 95       	ret
			
			case red:				keycode = 0b10101010101011;			break;
    40ae:	6b ea       	ldi	r22, 0xAB	; 171
    40b0:	7a e2       	ldi	r23, 0x2A	; 42
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	08 95       	ret
			case green:				keycode = 0b10101010101100;			break;
    40b8:	6c ea       	ldi	r22, 0xAC	; 172
    40ba:	7a e2       	ldi	r23, 0x2A	; 42
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	08 95       	ret
			case yellow:			keycode = 0b10101010101101;			break;
    40c2:	6d ea       	ldi	r22, 0xAD	; 173
    40c4:	7a e2       	ldi	r23, 0x2A	; 42
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	08 95       	ret
			case blue:				keycode = 0b10101010101110;			break;
    40cc:	6e ea       	ldi	r22, 0xAE	; 174
    40ce:	7a e2       	ldi	r23, 0x2A	; 42
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	08 95       	ret
			
			case zero:				keycode = 0b11101010000000;			break; 
    40d6:	60 e8       	ldi	r22, 0x80	; 128
    40d8:	7a e3       	ldi	r23, 0x3A	; 58
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	08 95       	ret
			case one:				keycode = 0b11101010000001;			break; 
    40e0:	61 e8       	ldi	r22, 0x81	; 129
    40e2:	7a e3       	ldi	r23, 0x3A	; 58
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	08 95       	ret
			case two:				keycode = 0b11101010000010;			break; 
    40ea:	62 e8       	ldi	r22, 0x82	; 130
    40ec:	7a e3       	ldi	r23, 0x3A	; 58
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	08 95       	ret
			case three:				keycode = 0b11101010000011;			break; 
    40f4:	63 e8       	ldi	r22, 0x83	; 131
    40f6:	7a e3       	ldi	r23, 0x3A	; 58
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	08 95       	ret
			case four:				keycode = 0b11101010000100;			break; 
    40fe:	64 e8       	ldi	r22, 0x84	; 132
    4100:	7a e3       	ldi	r23, 0x3A	; 58
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	08 95       	ret
			case five:				keycode = 0b11101010000101;			break; 
    4108:	65 e8       	ldi	r22, 0x85	; 133
    410a:	7a e3       	ldi	r23, 0x3A	; 58
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	08 95       	ret
			case six:				keycode = 0b11101010000110;			break; 
    4112:	66 e8       	ldi	r22, 0x86	; 134
    4114:	7a e3       	ldi	r23, 0x3A	; 58
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	08 95       	ret
			case seven:				keycode = 0b11101010000111;			break; 
    411c:	67 e8       	ldi	r22, 0x87	; 135
    411e:	7a e3       	ldi	r23, 0x3A	; 58
    4120:	80 e0       	ldi	r24, 0x00	; 0
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	08 95       	ret
			case eight:				keycode = 0b11101010001000;			break; 
    4126:	68 e8       	ldi	r22, 0x88	; 136
    4128:	7a e3       	ldi	r23, 0x3A	; 58
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	08 95       	ret
			case nine:				keycode = 0b11101010001001;			break; 
    4130:	69 e8       	ldi	r22, 0x89	; 137
    4132:	7a e3       	ldi	r23, 0x3A	; 58
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	08 95       	ret
			
			default:				keycode = 0;						break; 
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	cb 01       	movw	r24, r22
    4140:	08 95       	ret
	
	if (cmd->device_type == device_humax)
	{
		switch (cmd->key)
		{
			case power:				keycode = 0b10000000000011111111;	break;
    4142:	6f ef       	ldi	r22, 0xFF	; 255
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	88 e0       	ldi	r24, 0x08	; 8
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	08 95       	ret
	}
	else if (cmd->device_type == device_mbc)
	{
		switch (cmd->key)
		{
			case power:				keycode = 0b10000010111000000100000010111111;	break;
    414c:	6f eb       	ldi	r22, 0xBF	; 191
    414e:	70 e4       	ldi	r23, 0x40	; 64
    4150:	80 ee       	ldi	r24, 0xE0	; 224
    4152:	92 e8       	ldi	r25, 0x82	; 130
    4154:	08 95       	ret
}


static uint32_t getKeyCode(const remoteCommand_t *cmd)
{
	uint32_t keycode = 0;
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	70 e0       	ldi	r23, 0x00	; 0
    415a:	cb 01       	movw	r24, r22
    415c:	08 95       	ret
	}
	else if (cmd->device_type == device_bein)
	{
		switch (cmd->key)
		{
			case power:				keycode = 0b11101010001100;			break; 
    415e:	6c e8       	ldi	r22, 0x8C	; 140
    4160:	7a e3       	ldi	r23, 0x3A	; 58
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
			
			default:				keycode = 0;						break; 
		}
	}
	return keycode;
}
    4166:	08 95       	ret

00004168 <remoteSend_HUMAX>:
	remoteSetDataGPIO(1, 0, 0xFFF);
}


static void remoteSend_HUMAX(const remoteCommand_t *cmd) 
{
    4168:	bf 92       	push	r11
    416a:	cf 92       	push	r12
    416c:	df 92       	push	r13
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	ec 01       	movw	r28, r24
	uint32_t keycode = getKeyCode(cmd);
    417c:	1b dd       	rcall	.-1482   	; 0x3bb4 <getKeyCode>
    417e:	6b 01       	movw	r12, r22
    4180:	7c 01       	movw	r14, r24
	uint16_t pins = cmd->devices_bm;
    4182:	09 81       	ldd	r16, Y+1	; 0x01
    4184:	1a 81       	ldd	r17, Y+2	; 0x02
	
	/* Transmit code x times */
	//for (uint8_t j = 0; j < BEIN_RETRANSMISSIONS_REDUNDANT; j++)
	//{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4186:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4188:	f8 94       	cli
		{
			/* Start bit */
			remoteSetDataGPIO(0, 0, pins);
    418a:	a8 01       	movw	r20, r16
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	e0 dc       	rcall	.-1600   	; 0x3b52 <remoteSetDataGPIO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4192:	2f ef       	ldi	r18, 0xFF	; 255
    4194:	80 ee       	ldi	r24, 0xE0	; 224
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	21 50       	subi	r18, 0x01	; 1
    419a:	80 40       	sbci	r24, 0x00	; 0
    419c:	90 40       	sbci	r25, 0x00	; 0
    419e:	e1 f7       	brne	.-8      	; 0x4198 <remoteSend_HUMAX+0x30>
    41a0:	00 c0       	rjmp	.+0      	; 0x41a2 <remoteSend_HUMAX+0x3a>
    41a2:	00 00       	nop
			_delay_us(9000);
			remoteSetDataGPIO(1, 0, pins);
    41a4:	a8 01       	movw	r20, r16
    41a6:	60 e0       	ldi	r22, 0x00	; 0
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	d3 dc       	rcall	.-1626   	; 0x3b52 <remoteSetDataGPIO>
    41ac:	8f e9       	ldi	r24, 0x9F	; 159
    41ae:	9c e8       	ldi	r25, 0x8C	; 140
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	f1 f7       	brne	.-4      	; 0x41b0 <remoteSend_HUMAX+0x48>
    41b4:	00 c0       	rjmp	.+0      	; 0x41b6 <remoteSend_HUMAX+0x4e>
    41b6:	00 00       	nop
    41b8:	cf e1       	ldi	r28, 0x1F	; 31
    41ba:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_us(4500);
		
			/* keycode */
			for (int8_t i = 31; i >= 0; i--) 
			{
				uint8_t bit = (uint8_t)(((uint32_t)keycode >> i) & 1);
    41bc:	d7 01       	movw	r26, r14
    41be:	c6 01       	movw	r24, r12
    41c0:	0c 2e       	mov	r0, r28
    41c2:	04 c0       	rjmp	.+8      	; 0x41cc <remoteSend_HUMAX+0x64>
    41c4:	b6 95       	lsr	r27
    41c6:	a7 95       	ror	r26
    41c8:	97 95       	ror	r25
    41ca:	87 95       	ror	r24
    41cc:	0a 94       	dec	r0
    41ce:	d2 f7       	brpl	.-12     	; 0x41c4 <remoteSend_HUMAX+0x5c>
			
				if (bit) {
    41d0:	80 ff       	sbrs	r24, 0
    41d2:	15 c0       	rjmp	.+42     	; 0x41fe <remoteSend_HUMAX+0x96>
					remoteSetDataGPIO(0, 0, pins);
    41d4:	a8 01       	movw	r20, r16
    41d6:	60 e0       	ldi	r22, 0x00	; 0
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	bb dc       	rcall	.-1674   	; 0x3b52 <remoteSetDataGPIO>
    41dc:	8f e8       	ldi	r24, 0x8F	; 143
    41de:	91 e1       	ldi	r25, 0x11	; 17
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <remoteSend_HUMAX+0x78>
    41e4:	00 c0       	rjmp	.+0      	; 0x41e6 <remoteSend_HUMAX+0x7e>
    41e6:	00 00       	nop
					_delay_us(562);
					remoteSetDataGPIO(1, 0, pins);
    41e8:	a8 01       	movw	r20, r16
    41ea:	60 e0       	ldi	r22, 0x00	; 0
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	b1 dc       	rcall	.-1694   	; 0x3b52 <remoteSetDataGPIO>
    41f0:	87 eb       	ldi	r24, 0xB7	; 183
    41f2:	94 e3       	ldi	r25, 0x34	; 52
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <remoteSend_HUMAX+0x8c>
    41f8:	00 c0       	rjmp	.+0      	; 0x41fa <remoteSend_HUMAX+0x92>
    41fa:	00 00       	nop
    41fc:	14 c0       	rjmp	.+40     	; 0x4226 <remoteSend_HUMAX+0xbe>
					_delay_us(1687);
				} else {
					remoteSetDataGPIO(0, 0, pins);
    41fe:	a8 01       	movw	r20, r16
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	a6 dc       	rcall	.-1716   	; 0x3b52 <remoteSetDataGPIO>
    4206:	8f e8       	ldi	r24, 0x8F	; 143
    4208:	91 e1       	ldi	r25, 0x11	; 17
    420a:	01 97       	sbiw	r24, 0x01	; 1
    420c:	f1 f7       	brne	.-4      	; 0x420a <remoteSend_HUMAX+0xa2>
    420e:	00 c0       	rjmp	.+0      	; 0x4210 <remoteSend_HUMAX+0xa8>
    4210:	00 00       	nop
					_delay_us(562);
					remoteSetDataGPIO(1, 0, pins);
    4212:	a8 01       	movw	r20, r16
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	9c dc       	rcall	.-1736   	; 0x3b52 <remoteSetDataGPIO>
    421a:	8f e8       	ldi	r24, 0x8F	; 143
    421c:	91 e1       	ldi	r25, 0x11	; 17
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	f1 f7       	brne	.-4      	; 0x421e <remoteSend_HUMAX+0xb6>
    4222:	00 c0       	rjmp	.+0      	; 0x4224 <remoteSend_HUMAX+0xbc>
    4224:	00 00       	nop
    4226:	21 97       	sbiw	r28, 0x01	; 1
    4228:	48 f6       	brcc	.-110    	; 0x41bc <remoteSend_HUMAX+0x54>
					_delay_us(562);
				}
			}
		
			/* Stop bit */
			remoteSetDataGPIO(0, 0, pins);
    422a:	a8 01       	movw	r20, r16
    422c:	60 e0       	ldi	r22, 0x00	; 0
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	90 dc       	rcall	.-1760   	; 0x3b52 <remoteSetDataGPIO>
    4232:	8f e8       	ldi	r24, 0x8F	; 143
    4234:	91 e1       	ldi	r25, 0x11	; 17
    4236:	01 97       	sbiw	r24, 0x01	; 1
    4238:	f1 f7       	brne	.-4      	; 0x4236 <remoteSend_HUMAX+0xce>
    423a:	00 c0       	rjmp	.+0      	; 0x423c <remoteSend_HUMAX+0xd4>
    423c:	00 00       	nop
			_delay_us(562);
		
			/* Floating pin */
			remoteSetDataGPIO(1, 1, pins);
    423e:	a8 01       	movw	r20, r16
    4240:	61 e0       	ldi	r22, 0x01	; 1
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	86 dc       	rcall	.-1780   	; 0x3b52 <remoteSetDataGPIO>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4246:	bf be       	out	0x3f, r11	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4248:	9f ef       	ldi	r25, 0xFF	; 255
    424a:	27 e9       	ldi	r18, 0x97	; 151
    424c:	88 e0       	ldi	r24, 0x08	; 8
    424e:	91 50       	subi	r25, 0x01	; 1
    4250:	20 40       	sbci	r18, 0x00	; 0
    4252:	80 40       	sbci	r24, 0x00	; 0
    4254:	e1 f7       	brne	.-8      	; 0x424e <remoteSend_HUMAX+0xe6>
    4256:	00 c0       	rjmp	.+0      	; 0x4258 <remoteSend_HUMAX+0xf0>
    4258:	00 00       	nop
		}
		//if (j != BEIN_RETRANSMISSIONS_REDUNDANT - 1) _delay_ms(88);
		_delay_ms(88);
	//}
}
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	1f 91       	pop	r17
    4260:	0f 91       	pop	r16
    4262:	ff 90       	pop	r15
    4264:	ef 90       	pop	r14
    4266:	df 90       	pop	r13
    4268:	cf 90       	pop	r12
    426a:	bf 90       	pop	r11
    426c:	08 95       	ret

0000426e <remoteSend>:
	appUIPrintln(" done.\r\n")
}


static void remoteSend(const remoteCommand_t *cmd)
{
    426e:	6f 92       	push	r6
    4270:	7f 92       	push	r7
    4272:	8f 92       	push	r8
    4274:	9f 92       	push	r9
    4276:	af 92       	push	r10
    4278:	bf 92       	push	r11
    427a:	cf 92       	push	r12
    427c:	df 92       	push	r13
    427e:	ef 92       	push	r14
    4280:	ff 92       	push	r15
    4282:	0f 93       	push	r16
    4284:	1f 93       	push	r17
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	ec 01       	movw	r28, r24
	remoteSetDataGPIO(1, 0, 0xFFF);
    428c:	4f ef       	ldi	r20, 0xFF	; 255
    428e:	5f e0       	ldi	r21, 0x0F	; 15
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	5e dc       	rcall	.-1860   	; 0x3b52 <remoteSetDataGPIO>
	
	switch (cmd->device_type)
    4296:	88 81       	ld	r24, Y
    4298:	82 30       	cpi	r24, 0x02	; 2
    429a:	49 f0       	breq	.+18     	; 0x42ae <remoteSend+0x40>
    429c:	83 30       	cpi	r24, 0x03	; 3
    429e:	09 f4       	brne	.+2      	; 0x42a2 <remoteSend+0x34>
    42a0:	79 c0       	rjmp	.+242    	; 0x4394 <remoteSend+0x126>
    42a2:	81 30       	cpi	r24, 0x01	; 1
    42a4:	09 f0       	breq	.+2      	; 0x42a8 <remoteSend+0x3a>
    42a6:	79 c0       	rjmp	.+242    	; 0x439a <remoteSend+0x12c>
	{
		case device_humax:		remoteSend_HUMAX(cmd); break;
    42a8:	ce 01       	movw	r24, r28
    42aa:	5e df       	rcall	.-324    	; 0x4168 <remoteSend_HUMAX>
    42ac:	7e c0       	rjmp	.+252    	; 0x43aa <remoteSend+0x13c>
	Transmission starts at MSB. Fifth bit is ignored and inverted every *new* key press. */

static void remoteSend_BEIN(const remoteCommand_t *cmd)
{
	static bool invert = false;
	uint16_t keycode = getKeyCode(cmd) & 0x37FF;
    42ae:	ce 01       	movw	r24, r28
    42b0:	81 dc       	rcall	.-1790   	; 0x3bb4 <getKeyCode>
    42b2:	8b 01       	movw	r16, r22
    42b4:	17 73       	andi	r17, 0x37	; 55
	uint8_t pins = cmd->devices_bm;
    42b6:	99 81       	ldd	r25, Y+1	; 0x01
	uint8_t transmitTotal = 3;
			
	invert = !invert;
    42b8:	20 91 88 23 	lds	r18, 0x2388
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	82 27       	eor	r24, r18
    42c0:	80 93 88 23 	sts	0x2388, r24
	if (invert) {
    42c4:	81 11       	cpse	r24, r1
		keycode |= 0x0800;
    42c6:	18 60       	ori	r17, 0x08	; 8
	}
	
	if (cmd->key == volume_up) 
    42c8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ca:	8f 30       	cpi	r24, 0x0F	; 15
    42cc:	09 f0       	breq	.+2      	; 0x42d0 <remoteSend+0x62>
    42ce:	73 c0       	rjmp	.+230    	; 0x43b6 <remoteSend+0x148>
	{
		transmitTotal = 20;
    42d0:	0f 2e       	mov	r0, r31
    42d2:	f4 e1       	ldi	r31, 0x14	; 20
    42d4:	6f 2e       	mov	r6, r31
    42d6:	f0 2d       	mov	r31, r0
    42d8:	72 c0       	rjmp	.+228    	; 0x43be <remoteSend+0x150>
	}
	
	/* Transmit code x times */
	for (uint8_t j = 0; j < transmitTotal; j++)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    42da:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    42dc:	f8 94       	cli
    42de:	0f 2e       	mov	r0, r31
    42e0:	fd e0       	ldi	r31, 0x0D	; 13
    42e2:	8f 2e       	mov	r8, r31
    42e4:	91 2c       	mov	r9, r1
    42e6:	f0 2d       	mov	r31, r0
		{
			/* Transmit bit by bit */
			for (int8_t i = 13; i >= 0; i--) 
			{
				uint8_t bit = ((keycode & (1 << i)) >> i);
    42e8:	c7 01       	movw	r24, r14
    42ea:	08 2c       	mov	r0, r8
    42ec:	02 c0       	rjmp	.+4      	; 0x42f2 <remoteSend+0x84>
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	0a 94       	dec	r0
    42f4:	e2 f7       	brpl	.-8      	; 0x42ee <remoteSend+0x80>
    42f6:	80 23       	and	r24, r16
    42f8:	91 23       	and	r25, r17
    42fa:	08 2c       	mov	r0, r8
    42fc:	02 c0       	rjmp	.+4      	; 0x4302 <remoteSend+0x94>
    42fe:	96 95       	lsr	r25
    4300:	87 95       	ror	r24
    4302:	0a 94       	dec	r0
    4304:	e2 f7       	brpl	.-8      	; 0x42fe <remoteSend+0x90>
		
				if (bit) {
    4306:	88 23       	and	r24, r24
    4308:	a9 f0       	breq	.+42     	; 0x4334 <remoteSend+0xc6>
					remoteSetDataGPIO(1, 0, pins);
    430a:	ae 01       	movw	r20, r28
    430c:	60 e0       	ldi	r22, 0x00	; 0
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	20 dc       	rcall	.-1984   	; 0x3b52 <remoteSetDataGPIO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4312:	87 eb       	ldi	r24, 0xB7	; 183
    4314:	9b e1       	ldi	r25, 0x1B	; 27
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <remoteSend+0xa8>
    431a:	00 c0       	rjmp	.+0      	; 0x431c <remoteSend+0xae>
    431c:	00 00       	nop
					_delay_us(887);
					remoteSetDataGPIO(0, 0, pins);
    431e:	ae 01       	movw	r20, r28
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	16 dc       	rcall	.-2004   	; 0x3b52 <remoteSetDataGPIO>
    4326:	87 eb       	ldi	r24, 0xB7	; 183
    4328:	9b e1       	ldi	r25, 0x1B	; 27
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <remoteSend+0xbc>
    432e:	00 c0       	rjmp	.+0      	; 0x4330 <remoteSend+0xc2>
    4330:	00 00       	nop
    4332:	14 c0       	rjmp	.+40     	; 0x435c <remoteSend+0xee>
					_delay_us(887);
				} else {
					remoteSetDataGPIO(0, 0, pins);
    4334:	ae 01       	movw	r20, r28
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	0b dc       	rcall	.-2026   	; 0x3b52 <remoteSetDataGPIO>
    433c:	87 eb       	ldi	r24, 0xB7	; 183
    433e:	9b e1       	ldi	r25, 0x1B	; 27
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <remoteSend+0xd2>
    4344:	00 c0       	rjmp	.+0      	; 0x4346 <remoteSend+0xd8>
    4346:	00 00       	nop
					_delay_us(887);
					remoteSetDataGPIO(1, 0, pins);
    4348:	ae 01       	movw	r20, r28
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	01 dc       	rcall	.-2046   	; 0x3b52 <remoteSetDataGPIO>
    4350:	87 eb       	ldi	r24, 0xB7	; 183
    4352:	9b e1       	ldi	r25, 0x1B	; 27
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <remoteSend+0xe6>
    4358:	00 c0       	rjmp	.+0      	; 0x435a <remoteSend+0xec>
    435a:	00 00       	nop
    435c:	91 e0       	ldi	r25, 0x01	; 1
    435e:	89 1a       	sub	r8, r25
    4360:	91 08       	sbc	r9, r1
    4362:	10 f6       	brcc	.-124    	; 0x42e8 <remoteSend+0x7a>
					_delay_us(887);
				}
			}
			
			remoteSetDataGPIO(1, 1, pins);
    4364:	ae 01       	movw	r20, r28
    4366:	61 e0       	ldi	r22, 0x01	; 1
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	f3 db       	rcall	.-2074   	; 0x3b52 <remoteSetDataGPIO>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    436c:	7f be       	out	0x3f, r7	; 63
		}
		if (j != transmitTotal - 1) _delay_ms(88);
    436e:	ca 14       	cp	r12, r10
    4370:	db 04       	cpc	r13, r11
    4372:	49 f0       	breq	.+18     	; 0x4386 <remoteSend+0x118>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4374:	8f ef       	ldi	r24, 0xFF	; 255
    4376:	97 e9       	ldi	r25, 0x97	; 151
    4378:	28 e0       	ldi	r18, 0x08	; 8
    437a:	81 50       	subi	r24, 0x01	; 1
    437c:	90 40       	sbci	r25, 0x00	; 0
    437e:	20 40       	sbci	r18, 0x00	; 0
    4380:	e1 f7       	brne	.-8      	; 0x437a <remoteSend+0x10c>
    4382:	00 c0       	rjmp	.+0      	; 0x4384 <remoteSend+0x116>
    4384:	00 00       	nop
    4386:	8f ef       	ldi	r24, 0xFF	; 255
    4388:	c8 1a       	sub	r12, r24
    438a:	d8 0a       	sbc	r13, r24
	{
		transmitTotal = 20;
	}
	
	/* Transmit code x times */
	for (uint8_t j = 0; j < transmitTotal; j++)
    438c:	c6 14       	cp	r12, r6
    438e:	08 f4       	brcc	.+2      	; 0x4392 <remoteSend+0x124>
    4390:	a4 cf       	rjmp	.-184    	; 0x42da <remoteSend+0x6c>
    4392:	0b c0       	rjmp	.+22     	; 0x43aa <remoteSend+0x13c>
	
	switch (cmd->device_type)
	{
		case device_humax:		remoteSend_HUMAX(cmd); break;
		case device_bein:		remoteSend_BEIN(cmd); break;
		case device_mbc:		remoteSend_HUMAX(cmd); break;
    4394:	ce 01       	movw	r24, r28
    4396:	e8 de       	rcall	.-560    	; 0x4168 <remoteSend_HUMAX>
    4398:	08 c0       	rjmp	.+16     	; 0x43aa <remoteSend+0x13c>
		default:				appUIPrintln(" Error: unknown device type!"); break;
    439a:	83 ef       	ldi	r24, 0xF3	; 243
    439c:	99 e0       	ldi	r25, 0x09	; 9
    439e:	9f 93       	push	r25
    43a0:	8f 93       	push	r24
    43a2:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    43a6:	0f 90       	pop	r0
    43a8:	0f 90       	pop	r0
	}
	
	remoteSetDataGPIO(1, 0, 0xFFF);
    43aa:	4f ef       	ldi	r20, 0xFF	; 255
    43ac:	5f e0       	ldi	r21, 0x0F	; 15
    43ae:	60 e0       	ldi	r22, 0x00	; 0
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	cf db       	rcall	.-2146   	; 0x3b52 <remoteSetDataGPIO>
    43b4:	11 c0       	rjmp	.+34     	; 0x43d8 <remoteSend+0x16a>
static void remoteSend_BEIN(const remoteCommand_t *cmd)
{
	static bool invert = false;
	uint16_t keycode = getKeyCode(cmd) & 0x37FF;
	uint8_t pins = cmd->devices_bm;
	uint8_t transmitTotal = 3;
    43b6:	0f 2e       	mov	r0, r31
    43b8:	f3 e0       	ldi	r31, 0x03	; 3
    43ba:	6f 2e       	mov	r6, r31
    43bc:	f0 2d       	mov	r31, r0
	appUIPrintln(" done.\r\n")
}


static void remoteSend(const remoteCommand_t *cmd)
{
    43be:	c1 2c       	mov	r12, r1
    43c0:	d1 2c       	mov	r13, r1
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			/* Transmit bit by bit */
			for (int8_t i = 13; i >= 0; i--) 
			{
				uint8_t bit = ((keycode & (1 << i)) >> i);
    43c2:	ee 24       	eor	r14, r14
    43c4:	e3 94       	inc	r14
    43c6:	f1 2c       	mov	r15, r1
					remoteSetDataGPIO(1, 0, pins);
					_delay_us(887);
					remoteSetDataGPIO(0, 0, pins);
					_delay_us(887);
				} else {
					remoteSetDataGPIO(0, 0, pins);
    43c8:	c9 2f       	mov	r28, r25
    43ca:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			
			remoteSetDataGPIO(1, 1, pins);
		}
		if (j != transmitTotal - 1) _delay_ms(88);
    43cc:	a6 2c       	mov	r10, r6
    43ce:	b1 2c       	mov	r11, r1
    43d0:	91 e0       	ldi	r25, 0x01	; 1
    43d2:	a9 1a       	sub	r10, r25
    43d4:	b1 08       	sbc	r11, r1
    43d6:	81 cf       	rjmp	.-254    	; 0x42da <remoteSend+0x6c>
		case device_mbc:		remoteSend_HUMAX(cmd); break;
		default:				appUIPrintln(" Error: unknown device type!"); break;
	}
	
	remoteSetDataGPIO(1, 0, 0xFFF);
}
    43d8:	df 91       	pop	r29
    43da:	cf 91       	pop	r28
    43dc:	1f 91       	pop	r17
    43de:	0f 91       	pop	r16
    43e0:	ff 90       	pop	r15
    43e2:	ef 90       	pop	r14
    43e4:	df 90       	pop	r13
    43e6:	cf 90       	pop	r12
    43e8:	bf 90       	pop	r11
    43ea:	af 90       	pop	r10
    43ec:	9f 90       	pop	r9
    43ee:	8f 90       	pop	r8
    43f0:	7f 90       	pop	r7
    43f2:	6f 90       	pop	r6
    43f4:	08 95       	ret

000043f6 <remoteSetPowerGPIO>:
{
	// Device E0: CH0B, E1: CH0A, E2: CH1B, F0: CH4B, H0: CH8B, etc.

	uint8_t part1, part2, part3;
	
	part1 = ((devices_bm & 0x001) ? (group << 0) : (0)) |
    43f6:	40 ff       	sbrs	r20, 0
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <remoteSetPowerGPIO+0x8>
    43fa:	96 2f       	mov	r25, r22
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <remoteSetPowerGPIO+0xa>
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	41 ff       	sbrs	r20, 1
    4402:	04 c0       	rjmp	.+8      	; 0x440c <remoteSetPowerGPIO+0x16>
    4404:	36 2f       	mov	r19, r22
    4406:	33 0f       	add	r19, r19
    4408:	33 0f       	add	r19, r19
    440a:	01 c0       	rjmp	.+2      	; 0x440e <remoteSetPowerGPIO+0x18>
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	39 2b       	or	r19, r25
    4410:	42 ff       	sbrs	r20, 2
    4412:	04 c0       	rjmp	.+8      	; 0x441c <remoteSetPowerGPIO+0x26>
    4414:	96 2f       	mov	r25, r22
    4416:	92 95       	swap	r25
    4418:	90 7f       	andi	r25, 0xF0	; 240
    441a:	01 c0       	rjmp	.+2      	; 0x441e <remoteSetPowerGPIO+0x28>
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	39 2b       	or	r19, r25
    4420:	43 ff       	sbrs	r20, 3
    4422:	06 c0       	rjmp	.+12     	; 0x4430 <remoteSetPowerGPIO+0x3a>
    4424:	96 2f       	mov	r25, r22
    4426:	92 95       	swap	r25
    4428:	99 0f       	add	r25, r25
    442a:	99 0f       	add	r25, r25
    442c:	90 7c       	andi	r25, 0xC0	; 192
    442e:	01 c0       	rjmp	.+2      	; 0x4432 <remoteSetPowerGPIO+0x3c>
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	39 2b       	or	r19, r25
			((devices_bm & 0x002) ? (group << 2) : (0)) |
			((devices_bm & 0x004) ? (group << 4) : (0)) |
			((devices_bm & 0x008) ? (group << 6) : (0));
	
	part2 = ((devices_bm & 0x010) ? (group << 0) : (0)) |
    4434:	44 ff       	sbrs	r20, 4
    4436:	02 c0       	rjmp	.+4      	; 0x443c <remoteSetPowerGPIO+0x46>
    4438:	96 2f       	mov	r25, r22
    443a:	01 c0       	rjmp	.+2      	; 0x443e <remoteSetPowerGPIO+0x48>
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	45 ff       	sbrs	r20, 5
    4440:	04 c0       	rjmp	.+8      	; 0x444a <remoteSetPowerGPIO+0x54>
    4442:	26 2f       	mov	r18, r22
    4444:	22 0f       	add	r18, r18
    4446:	22 0f       	add	r18, r18
    4448:	01 c0       	rjmp	.+2      	; 0x444c <remoteSetPowerGPIO+0x56>
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	92 2b       	or	r25, r18
    444e:	46 ff       	sbrs	r20, 6
    4450:	04 c0       	rjmp	.+8      	; 0x445a <remoteSetPowerGPIO+0x64>
    4452:	26 2f       	mov	r18, r22
    4454:	22 95       	swap	r18
    4456:	20 7f       	andi	r18, 0xF0	; 240
    4458:	01 c0       	rjmp	.+2      	; 0x445c <remoteSetPowerGPIO+0x66>
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	92 2b       	or	r25, r18
    445e:	47 ff       	sbrs	r20, 7
    4460:	06 c0       	rjmp	.+12     	; 0x446e <remoteSetPowerGPIO+0x78>
    4462:	26 2f       	mov	r18, r22
    4464:	22 95       	swap	r18
    4466:	22 0f       	add	r18, r18
    4468:	22 0f       	add	r18, r18
    446a:	20 7c       	andi	r18, 0xC0	; 192
    446c:	01 c0       	rjmp	.+2      	; 0x4470 <remoteSetPowerGPIO+0x7a>
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	92 2b       	or	r25, r18
			((devices_bm & 0x020) ? (group << 2) : (0)) |
			((devices_bm & 0x040) ? (group << 4) : (0)) |
			((devices_bm & 0x080) ? (group << 6) : (0));
	
	part3 = ((devices_bm & 0x100) ? (group << 0) : (0)) |
    4472:	50 ff       	sbrs	r21, 0
    4474:	02 c0       	rjmp	.+4      	; 0x447a <remoteSetPowerGPIO+0x84>
    4476:	26 2f       	mov	r18, r22
    4478:	01 c0       	rjmp	.+2      	; 0x447c <remoteSetPowerGPIO+0x86>
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	51 ff       	sbrs	r21, 1
    447e:	04 c0       	rjmp	.+8      	; 0x4488 <remoteSetPowerGPIO+0x92>
    4480:	76 2f       	mov	r23, r22
    4482:	77 0f       	add	r23, r23
    4484:	77 0f       	add	r23, r23
    4486:	01 c0       	rjmp	.+2      	; 0x448a <remoteSetPowerGPIO+0x94>
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	27 2b       	or	r18, r23
    448c:	52 ff       	sbrs	r21, 2
    448e:	04 c0       	rjmp	.+8      	; 0x4498 <remoteSetPowerGPIO+0xa2>
    4490:	76 2f       	mov	r23, r22
    4492:	72 95       	swap	r23
    4494:	70 7f       	andi	r23, 0xF0	; 240
    4496:	01 c0       	rjmp	.+2      	; 0x449a <remoteSetPowerGPIO+0xa4>
    4498:	70 e0       	ldi	r23, 0x00	; 0
    449a:	27 2b       	or	r18, r23
    449c:	53 ff       	sbrs	r21, 3
    449e:	05 c0       	rjmp	.+10     	; 0x44aa <remoteSetPowerGPIO+0xb4>
    44a0:	62 95       	swap	r22
    44a2:	66 0f       	add	r22, r22
    44a4:	66 0f       	add	r22, r22
    44a6:	60 7c       	andi	r22, 0xC0	; 192
    44a8:	01 c0       	rjmp	.+2      	; 0x44ac <remoteSetPowerGPIO+0xb6>
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	62 2b       	or	r22, r18
			((devices_bm & 0x200) ? (group << 2) : (0)) |
			((devices_bm & 0x400) ? (group << 4) : (0)) |
			((devices_bm & 0x800) ? (group << 6) : (0));
	
	if (isPowerOn)
    44ae:	88 23       	and	r24, r24
    44b0:	39 f0       	breq	.+14     	; 0x44c0 <remoteSetPowerGPIO+0xca>
	{
		PORTE.OUTSET = part1;
    44b2:	30 93 85 06 	sts	0x0685, r19
		PORTF.OUTSET = part2;
    44b6:	90 93 a5 06 	sts	0x06A5, r25
		PORTH.OUTSET = part3;
    44ba:	60 93 e5 06 	sts	0x06E5, r22
    44be:	08 95       	ret
	}
	else
	{
		PORTE.OUTCLR = part1;
    44c0:	30 93 86 06 	sts	0x0686, r19
		PORTF.OUTCLR = part2;
    44c4:	90 93 a6 06 	sts	0x06A6, r25
		PORTH.OUTCLR = part3;
    44c8:	60 93 e6 06 	sts	0x06E6, r22
    44cc:	08 95       	ret

000044ce <remoteRebootCallback>:
{
	static uint16_t devices_bm = 0;
	static uint8_t device_number = 0;
	static bool phasePowerOn = false;
	
	if (rebootDevices_bm != 0)
    44ce:	80 91 8d 23 	lds	r24, 0x238D
    44d2:	90 91 8e 23 	lds	r25, 0x238E
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	61 f0       	breq	.+24     	; 0x44f2 <remoteRebootCallback+0x24>
	{
		devices_bm = rebootDevices_bm;
    44da:	80 93 8b 23 	sts	0x238B, r24
    44de:	90 93 8c 23 	sts	0x238C, r25
		device_number = 0;
    44e2:	10 92 8a 23 	sts	0x238A, r1
		phasePowerOn = false;
    44e6:	10 92 89 23 	sts	0x2389, r1
		rebootDevices_bm = 0;
    44ea:	10 92 8d 23 	sts	0x238D, r1
    44ee:	10 92 8e 23 	sts	0x238E, r1
	}
	
	if (devices_bm & (1 << device_number))
    44f2:	20 91 8a 23 	lds	r18, 0x238A
    44f6:	42 2f       	mov	r20, r18
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	02 c0       	rjmp	.+4      	; 0x4504 <remoteRebootCallback+0x36>
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	2a 95       	dec	r18
    4506:	e2 f7       	brpl	.-8      	; 0x4500 <remoteRebootCallback+0x32>
    4508:	20 91 8b 23 	lds	r18, 0x238B
    450c:	30 91 8c 23 	lds	r19, 0x238C
    4510:	82 23       	and	r24, r18
    4512:	93 23       	and	r25, r19
    4514:	89 2b       	or	r24, r25
    4516:	71 f1       	breq	.+92     	; 0x4574 <remoteRebootCallback+0xa6>
	{
		if (phasePowerOn)
    4518:	80 91 89 23 	lds	r24, 0x2389
    451c:	88 23       	and	r24, r24
    451e:	79 f0       	breq	.+30     	; 0x453e <remoteRebootCallback+0x70>
		{
			appUIPrintln("Powering On device %u A+B", device_number + 1);
    4520:	4f 5f       	subi	r20, 0xFF	; 255
    4522:	5f 4f       	sbci	r21, 0xFF	; 255
    4524:	5f 93       	push	r21
    4526:	4f 93       	push	r20
    4528:	81 e3       	ldi	r24, 0x31	; 49
    452a:	9b e0       	ldi	r25, 0x0B	; 11
    452c:	9f 93       	push	r25
    452e:	8f 93       	push	r24
    4530:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	0e c0       	rjmp	.+28     	; 0x455a <remoteRebootCallback+0x8c>
		}
		else
		{
			appUIPrintln("Powering Off device %u A+B", device_number + 1);
    453e:	4f 5f       	subi	r20, 0xFF	; 255
    4540:	5f 4f       	sbci	r21, 0xFF	; 255
    4542:	5f 93       	push	r21
    4544:	4f 93       	push	r20
    4546:	86 e1       	ldi	r24, 0x16	; 22
    4548:	9b e0       	ldi	r25, 0x0B	; 11
    454a:	9f 93       	push	r25
    454c:	8f 93       	push	r24
    454e:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
		}
		remoteSetPowerGPIO(phasePowerOn, devicegroup_AB, (1 << device_number));
    455a:	41 e0       	ldi	r20, 0x01	; 1
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	00 90 8a 23 	lds	r0, 0x238A
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <remoteRebootCallback+0x9a>
    4564:	44 0f       	add	r20, r20
    4566:	55 1f       	adc	r21, r21
    4568:	0a 94       	dec	r0
    456a:	e2 f7       	brpl	.-8      	; 0x4564 <remoteRebootCallback+0x96>
    456c:	63 e0       	ldi	r22, 0x03	; 3
    456e:	80 91 89 23 	lds	r24, 0x2389
    4572:	41 df       	rcall	.-382    	; 0x43f6 <remoteSetPowerGPIO>
	}
	
	if (++device_number > hardware.device.numberTotal - 1) 
    4574:	80 91 8a 23 	lds	r24, 0x238A
    4578:	8f 5f       	subi	r24, 0xFF	; 255
    457a:	80 93 8a 23 	sts	0x238A, r24
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	20 91 bb 20 	lds	r18, 0x20BB
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	21 50       	subi	r18, 0x01	; 1
    4588:	31 09       	sbc	r19, r1
    458a:	28 17       	cp	r18, r24
    458c:	39 07       	cpc	r19, r25
    458e:	64 f4       	brge	.+24     	; 0x45a8 <remoteRebootCallback+0xda>
	{
		if (phasePowerOn) 
    4590:	80 91 89 23 	lds	r24, 0x2389
    4594:	88 23       	and	r24, r24
    4596:	19 f0       	breq	.+6      	; 0x459e <remoteRebootCallback+0xd0>
		{
			eventRemove(&remoteRebootCallback);
    4598:	87 e6       	ldi	r24, 0x67	; 103
    459a:	92 e2       	ldi	r25, 0x22	; 34
    459c:	11 d5       	rcall	.+2594   	; 0x4fc0 <eventRemove>
			phasePowerOn = false;
		}
		phasePowerOn = true;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	80 93 89 23 	sts	0x2389, r24
		device_number = 0;
    45a4:	10 92 8a 23 	sts	0x238A, r1
    45a8:	08 95       	ret

000045aa <remoteSendCommand>:
	}
}


void remoteSendCommand(const remoteCommand_t *cmd)
{
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
    45b6:	25 97       	sbiw	r28, 0x05	; 5
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	8c 01       	movw	r16, r24
}


static void remotePrintCommand(const remoteCommand_t *cmd)
{
	appUIPrint("Remote to %s, 0x%03x, ", (cmd->device_type == device_bein) ? ("bein") : ((cmd->device_type == device_humax) ? ("humax") : ((cmd->device_type == device_mbc) ? ("mbc") : ("unknown"))), cmd->devices_bm);
    45be:	fc 01       	movw	r30, r24
    45c0:	21 81       	ldd	r18, Z+1	; 0x01
    45c2:	32 81       	ldd	r19, Z+2	; 0x02
    45c4:	80 81       	ld	r24, Z
    45c6:	82 30       	cpi	r24, 0x02	; 2
    45c8:	39 f0       	breq	.+14     	; 0x45d8 <remoteSendCommand+0x2e>
    45ca:	81 30       	cpi	r24, 0x01	; 1
    45cc:	41 f0       	breq	.+16     	; 0x45de <remoteSendCommand+0x34>
    45ce:	83 30       	cpi	r24, 0x03	; 3
    45d0:	49 f0       	breq	.+18     	; 0x45e4 <remoteSendCommand+0x3a>
    45d2:	80 ef       	ldi	r24, 0xF0	; 240
    45d4:	90 e2       	ldi	r25, 0x20	; 32
    45d6:	08 c0       	rjmp	.+16     	; 0x45e8 <remoteSendCommand+0x3e>
    45d8:	8b ee       	ldi	r24, 0xEB	; 235
    45da:	90 e2       	ldi	r25, 0x20	; 32
    45dc:	05 c0       	rjmp	.+10     	; 0x45e8 <remoteSendCommand+0x3e>
    45de:	88 ef       	ldi	r24, 0xF8	; 248
    45e0:	90 e2       	ldi	r25, 0x20	; 32
    45e2:	02 c0       	rjmp	.+4      	; 0x45e8 <remoteSendCommand+0x3e>
    45e4:	8e ef       	ldi	r24, 0xFE	; 254
    45e6:	90 e2       	ldi	r25, 0x20	; 32
    45e8:	3f 93       	push	r19
    45ea:	2f 93       	push	r18
    45ec:	9f 93       	push	r25
    45ee:	8f 93       	push	r24
    45f0:	8f ef       	ldi	r24, 0xFF	; 255
    45f2:	9a e0       	ldi	r25, 0x0A	; 10
    45f4:	9f 93       	push	r25
    45f6:	8f 93       	push	r24
    45f8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
	
	switch (cmd->key)
    45fc:	0f 90       	pop	r0
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	f8 01       	movw	r30, r16
    460a:	95 81       	ldd	r25, Z+5	; 0x05
    460c:	91 31       	cpi	r25, 0x11	; 17
    460e:	09 f4       	brne	.+2      	; 0x4612 <remoteSendCommand+0x68>
    4610:	18 c1       	rjmp	.+560    	; 0x4842 <remoteSendCommand+0x298>
    4612:	60 f5       	brcc	.+88     	; 0x466c <remoteSendCommand+0xc2>
    4614:	98 30       	cpi	r25, 0x08	; 8
    4616:	09 f4       	brne	.+2      	; 0x461a <remoteSendCommand+0x70>
    4618:	8f c0       	rjmp	.+286    	; 0x4738 <remoteSendCommand+0x18e>
    461a:	98 f4       	brcc	.+38     	; 0x4642 <remoteSendCommand+0x98>
    461c:	94 30       	cpi	r25, 0x04	; 4
    461e:	09 f4       	brne	.+2      	; 0x4622 <remoteSendCommand+0x78>
    4620:	67 c0       	rjmp	.+206    	; 0x46f0 <remoteSendCommand+0x146>
    4622:	48 f4       	brcc	.+18     	; 0x4636 <remoteSendCommand+0x8c>
    4624:	92 30       	cpi	r25, 0x02	; 2
    4626:	09 f4       	brne	.+2      	; 0x462a <remoteSendCommand+0x80>
    4628:	cf c0       	rjmp	.+414    	; 0x47c8 <remoteSendCommand+0x21e>
    462a:	08 f0       	brcs	.+2      	; 0x462e <remoteSendCommand+0x84>
    462c:	b2 c0       	rjmp	.+356    	; 0x4792 <remoteSendCommand+0x1e8>
    462e:	91 30       	cpi	r25, 0x01	; 1
    4630:	09 f4       	brne	.+2      	; 0x4634 <remoteSendCommand+0x8a>
    4632:	c1 c0       	rjmp	.+386    	; 0x47b6 <remoteSendCommand+0x20c>
    4634:	84 c1       	rjmp	.+776    	; 0x493e <remoteSendCommand+0x394>
    4636:	96 30       	cpi	r25, 0x06	; 6
    4638:	09 f4       	brne	.+2      	; 0x463c <remoteSendCommand+0x92>
    463a:	75 c0       	rjmp	.+234    	; 0x4726 <remoteSendCommand+0x17c>
    463c:	08 f4       	brcc	.+2      	; 0x4640 <remoteSendCommand+0x96>
    463e:	6a c0       	rjmp	.+212    	; 0x4714 <remoteSendCommand+0x16a>
    4640:	60 c0       	rjmp	.+192    	; 0x4702 <remoteSendCommand+0x158>
    4642:	9c 30       	cpi	r25, 0x0C	; 12
    4644:	09 f4       	brne	.+2      	; 0x4648 <remoteSendCommand+0x9e>
    4646:	9c c0       	rjmp	.+312    	; 0x4780 <remoteSendCommand+0x1d6>
    4648:	30 f4       	brcc	.+12     	; 0x4656 <remoteSendCommand+0xac>
    464a:	9a 30       	cpi	r25, 0x0A	; 10
    464c:	09 f4       	brne	.+2      	; 0x4650 <remoteSendCommand+0xa6>
    464e:	86 c0       	rjmp	.+268    	; 0x475c <remoteSendCommand+0x1b2>
    4650:	08 f4       	brcc	.+2      	; 0x4654 <remoteSendCommand+0xaa>
    4652:	7b c0       	rjmp	.+246    	; 0x474a <remoteSendCommand+0x1a0>
    4654:	8c c0       	rjmp	.+280    	; 0x476e <remoteSendCommand+0x1c4>
    4656:	9e 30       	cpi	r25, 0x0E	; 14
    4658:	c9 f1       	breq	.+114    	; 0x46cc <remoteSendCommand+0x122>
    465a:	08 f4       	brcc	.+2      	; 0x465e <remoteSendCommand+0xb4>
    465c:	40 c0       	rjmp	.+128    	; 0x46de <remoteSendCommand+0x134>
    465e:	9f 30       	cpi	r25, 0x0F	; 15
    4660:	09 f4       	brne	.+2      	; 0x4664 <remoteSendCommand+0xba>
    4662:	a0 c0       	rjmp	.+320    	; 0x47a4 <remoteSendCommand+0x1fa>
    4664:	90 31       	cpi	r25, 0x10	; 16
    4666:	09 f4       	brne	.+2      	; 0x466a <remoteSendCommand+0xc0>
    4668:	e3 c0       	rjmp	.+454    	; 0x4830 <remoteSendCommand+0x286>
    466a:	69 c1       	rjmp	.+722    	; 0x493e <remoteSendCommand+0x394>
    466c:	9a 31       	cpi	r25, 0x1A	; 26
    466e:	09 f4       	brne	.+2      	; 0x4672 <remoteSendCommand+0xc8>
    4670:	15 c1       	rjmp	.+554    	; 0x489c <remoteSendCommand+0x2f2>
    4672:	b0 f4       	brcc	.+44     	; 0x46a0 <remoteSendCommand+0xf6>
    4674:	95 31       	cpi	r25, 0x15	; 21
    4676:	09 f4       	brne	.+2      	; 0x467a <remoteSendCommand+0xd0>
    4678:	b7 c0       	rjmp	.+366    	; 0x47e8 <remoteSendCommand+0x23e>
    467a:	30 f4       	brcc	.+12     	; 0x4688 <remoteSendCommand+0xde>
    467c:	93 31       	cpi	r25, 0x13	; 19
    467e:	09 f4       	brne	.+2      	; 0x4682 <remoteSendCommand+0xd8>
    4680:	e9 c0       	rjmp	.+466    	; 0x4854 <remoteSendCommand+0x2aa>
    4682:	08 f4       	brcc	.+2      	; 0x4686 <remoteSendCommand+0xdc>
    4684:	f0 c0       	rjmp	.+480    	; 0x4866 <remoteSendCommand+0x2bc>
    4686:	f8 c0       	rjmp	.+496    	; 0x4878 <remoteSendCommand+0x2ce>
    4688:	97 31       	cpi	r25, 0x17	; 23
    468a:	09 f4       	brne	.+2      	; 0x468e <remoteSendCommand+0xe4>
    468c:	bf c0       	rjmp	.+382    	; 0x480c <remoteSendCommand+0x262>
    468e:	08 f4       	brcc	.+2      	; 0x4692 <remoteSendCommand+0xe8>
    4690:	b4 c0       	rjmp	.+360    	; 0x47fa <remoteSendCommand+0x250>
    4692:	98 31       	cpi	r25, 0x18	; 24
    4694:	09 f4       	brne	.+2      	; 0x4698 <remoteSendCommand+0xee>
    4696:	c3 c0       	rjmp	.+390    	; 0x481e <remoteSendCommand+0x274>
    4698:	99 31       	cpi	r25, 0x19	; 25
    469a:	09 f4       	brne	.+2      	; 0x469e <remoteSendCommand+0xf4>
    469c:	f6 c0       	rjmp	.+492    	; 0x488a <remoteSendCommand+0x2e0>
    469e:	4f c1       	rjmp	.+670    	; 0x493e <remoteSendCommand+0x394>
    46a0:	9e 31       	cpi	r25, 0x1E	; 30
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <remoteSendCommand+0xfc>
    46a4:	1f c1       	rjmp	.+574    	; 0x48e4 <remoteSendCommand+0x33a>
    46a6:	30 f4       	brcc	.+12     	; 0x46b4 <remoteSendCommand+0x10a>
    46a8:	9c 31       	cpi	r25, 0x1C	; 28
    46aa:	09 f4       	brne	.+2      	; 0x46ae <remoteSendCommand+0x104>
    46ac:	09 c1       	rjmp	.+530    	; 0x48c0 <remoteSendCommand+0x316>
    46ae:	08 f4       	brcc	.+2      	; 0x46b2 <remoteSendCommand+0x108>
    46b0:	fe c0       	rjmp	.+508    	; 0x48ae <remoteSendCommand+0x304>
    46b2:	0f c1       	rjmp	.+542    	; 0x48d2 <remoteSendCommand+0x328>
    46b4:	90 32       	cpi	r25, 0x20	; 32
    46b6:	09 f4       	brne	.+2      	; 0x46ba <remoteSendCommand+0x110>
    46b8:	27 c1       	rjmp	.+590    	; 0x4908 <remoteSendCommand+0x35e>
    46ba:	08 f4       	brcc	.+2      	; 0x46be <remoteSendCommand+0x114>
    46bc:	1c c1       	rjmp	.+568    	; 0x48f6 <remoteSendCommand+0x34c>
    46be:	91 32       	cpi	r25, 0x21	; 33
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <remoteSendCommand+0x11a>
    46c2:	2b c1       	rjmp	.+598    	; 0x491a <remoteSendCommand+0x370>
    46c4:	92 32       	cpi	r25, 0x22	; 34
    46c6:	09 f4       	brne	.+2      	; 0x46ca <remoteSendCommand+0x120>
    46c8:	31 c1       	rjmp	.+610    	; 0x492c <remoteSendCommand+0x382>
    46ca:	39 c1       	rjmp	.+626    	; 0x493e <remoteSendCommand+0x394>
	{
		case channel_down:		appUIPrint("channel down");		break;
    46cc:	82 ef       	ldi	r24, 0xF2	; 242
    46ce:	9a e0       	ldi	r25, 0x0A	; 10
    46d0:	9f 93       	push	r25
    46d2:	8f 93       	push	r24
    46d4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	38 c1       	rjmp	.+624    	; 0x494e <remoteSendCommand+0x3a4>
		case channel_up:		appUIPrint("channel up");		break;
    46de:	87 ee       	ldi	r24, 0xE7	; 231
    46e0:	9a e0       	ldi	r25, 0x0A	; 10
    46e2:	9f 93       	push	r25
    46e4:	8f 93       	push	r24
    46e6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    46ea:	0f 90       	pop	r0
    46ec:	0f 90       	pop	r0
    46ee:	2f c1       	rjmp	.+606    	; 0x494e <remoteSendCommand+0x3a4>
		
		case arrow_up:			appUIPrint("arrow up");			break;
    46f0:	8e ed       	ldi	r24, 0xDE	; 222
    46f2:	9a e0       	ldi	r25, 0x0A	; 10
    46f4:	9f 93       	push	r25
    46f6:	8f 93       	push	r24
    46f8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	26 c1       	rjmp	.+588    	; 0x494e <remoteSendCommand+0x3a4>
		case arrow_left:		appUIPrint("arrow left");		break;
    4702:	83 ed       	ldi	r24, 0xD3	; 211
    4704:	9a e0       	ldi	r25, 0x0A	; 10
    4706:	9f 93       	push	r25
    4708:	8f 93       	push	r24
    470a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	1d c1       	rjmp	.+570    	; 0x494e <remoteSendCommand+0x3a4>
		case arrow_down:		appUIPrint("arrow down");		break;
    4714:	88 ec       	ldi	r24, 0xC8	; 200
    4716:	9a e0       	ldi	r25, 0x0A	; 10
    4718:	9f 93       	push	r25
    471a:	8f 93       	push	r24
    471c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4720:	0f 90       	pop	r0
    4722:	0f 90       	pop	r0
    4724:	14 c1       	rjmp	.+552    	; 0x494e <remoteSendCommand+0x3a4>
		case arrow_right:		appUIPrint("arrow right");		break;
    4726:	8c eb       	ldi	r24, 0xBC	; 188
    4728:	9a e0       	ldi	r25, 0x0A	; 10
    472a:	9f 93       	push	r25
    472c:	8f 93       	push	r24
    472e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4732:	0f 90       	pop	r0
    4734:	0f 90       	pop	r0
    4736:	0b c1       	rjmp	.+534    	; 0x494e <remoteSendCommand+0x3a4>
		case confirm:			appUIPrint("confirm");			break;
    4738:	84 eb       	ldi	r24, 0xB4	; 180
    473a:	9a e0       	ldi	r25, 0x0A	; 10
    473c:	9f 93       	push	r25
    473e:	8f 93       	push	r24
    4740:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
    4748:	02 c1       	rjmp	.+516    	; 0x494e <remoteSendCommand+0x3a4>
		case back:				appUIPrint("back");				break;
    474a:	8f ea       	ldi	r24, 0xAF	; 175
    474c:	9a e0       	ldi	r25, 0x0A	; 10
    474e:	9f 93       	push	r25
    4750:	8f 93       	push	r24
    4752:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4756:	0f 90       	pop	r0
    4758:	0f 90       	pop	r0
    475a:	f9 c0       	rjmp	.+498    	; 0x494e <remoteSendCommand+0x3a4>
		case cancel:			appUIPrint("cancel");			break;
    475c:	88 ea       	ldi	r24, 0xA8	; 168
    475e:	9a e0       	ldi	r25, 0x0A	; 10
    4760:	9f 93       	push	r25
    4762:	8f 93       	push	r24
    4764:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
    476c:	f0 c0       	rjmp	.+480    	; 0x494e <remoteSendCommand+0x3a4>
		case home:				appUIPrint("home");				break;
    476e:	83 ea       	ldi	r24, 0xA3	; 163
    4770:	9a e0       	ldi	r25, 0x0A	; 10
    4772:	9f 93       	push	r25
    4774:	8f 93       	push	r24
    4776:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	e7 c0       	rjmp	.+462    	; 0x494e <remoteSendCommand+0x3a4>
		case menu:				appUIPrint("menu");				break;
    4780:	8e e9       	ldi	r24, 0x9E	; 158
    4782:	9a e0       	ldi	r25, 0x0A	; 10
    4784:	9f 93       	push	r25
    4786:	8f 93       	push	r24
    4788:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    478c:	0f 90       	pop	r0
    478e:	0f 90       	pop	r0
    4790:	de c0       	rjmp	.+444    	; 0x494e <remoteSendCommand+0x3a4>
		case power:				appUIPrint("power");			break;
    4792:	88 e9       	ldi	r24, 0x98	; 152
    4794:	9a e0       	ldi	r25, 0x0A	; 10
    4796:	9f 93       	push	r25
    4798:	8f 93       	push	r24
    479a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    479e:	0f 90       	pop	r0
    47a0:	0f 90       	pop	r0
    47a2:	d5 c0       	rjmp	.+426    	; 0x494e <remoteSendCommand+0x3a4>
		case volume_up:			appUIPrint("volume up");		break;
    47a4:	8e e8       	ldi	r24, 0x8E	; 142
    47a6:	9a e0       	ldi	r25, 0x0A	; 10
    47a8:	9f 93       	push	r25
    47aa:	8f 93       	push	r24
    47ac:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    47b0:	0f 90       	pop	r0
    47b2:	0f 90       	pop	r0
    47b4:	cc c0       	rjmp	.+408    	; 0x494e <remoteSendCommand+0x3a4>
		
		case power_switch:		appUIPrint("force reboot");		break;
    47b6:	81 e8       	ldi	r24, 0x81	; 129
    47b8:	9a e0       	ldi	r25, 0x0A	; 10
    47ba:	9f 93       	push	r25
    47bc:	8f 93       	push	r24
    47be:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	c3 c0       	rjmp	.+390    	; 0x494e <remoteSendCommand+0x3a4>
		case channel_number:	appUIPrint("set channel %u", cmd->channelNumber);		break;
    47c8:	f8 01       	movw	r30, r16
    47ca:	84 81       	ldd	r24, Z+4	; 0x04
    47cc:	8f 93       	push	r24
    47ce:	83 81       	ldd	r24, Z+3	; 0x03
    47d0:	8f 93       	push	r24
    47d2:	82 e7       	ldi	r24, 0x72	; 114
    47d4:	9a e0       	ldi	r25, 0x0A	; 10
    47d6:	9f 93       	push	r25
    47d8:	8f 93       	push	r24
    47da:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	b3 c0       	rjmp	.+358    	; 0x494e <remoteSendCommand+0x3a4>
		//case auto_solver:		appUIPrint("fix everything");	break;
		
		
		
		case red:				appUIPrint("red");			break;
    47e8:	8e e6       	ldi	r24, 0x6E	; 110
    47ea:	9a e0       	ldi	r25, 0x0A	; 10
    47ec:	9f 93       	push	r25
    47ee:	8f 93       	push	r24
    47f0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	aa c0       	rjmp	.+340    	; 0x494e <remoteSendCommand+0x3a4>
		case green:				appUIPrint("green");		break;
    47fa:	88 e6       	ldi	r24, 0x68	; 104
    47fc:	9a e0       	ldi	r25, 0x0A	; 10
    47fe:	9f 93       	push	r25
    4800:	8f 93       	push	r24
    4802:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	a1 c0       	rjmp	.+322    	; 0x494e <remoteSendCommand+0x3a4>
		case yellow:			appUIPrint("yellow");		break;
    480c:	81 e6       	ldi	r24, 0x61	; 97
    480e:	9a e0       	ldi	r25, 0x0A	; 10
    4810:	9f 93       	push	r25
    4812:	8f 93       	push	r24
    4814:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	98 c0       	rjmp	.+304    	; 0x494e <remoteSendCommand+0x3a4>
		case blue:				appUIPrint("blue");			break;
    481e:	8c e5       	ldi	r24, 0x5C	; 92
    4820:	9a e0       	ldi	r25, 0x0A	; 10
    4822:	9f 93       	push	r25
    4824:	8f 93       	push	r24
    4826:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	8f c0       	rjmp	.+286    	; 0x494e <remoteSendCommand+0x3a4>
		
		case audio:				appUIPrint("audio");		break;
    4830:	86 e5       	ldi	r24, 0x56	; 86
    4832:	9a e0       	ldi	r25, 0x0A	; 10
    4834:	9f 93       	push	r25
    4836:	8f 93       	push	r24
    4838:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	86 c0       	rjmp	.+268    	; 0x494e <remoteSendCommand+0x3a4>
		case subs:				appUIPrint("subs");			break;
    4842:	81 e5       	ldi	r24, 0x51	; 81
    4844:	9a e0       	ldi	r25, 0x0A	; 10
    4846:	9f 93       	push	r25
    4848:	8f 93       	push	r24
    484a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	7d c0       	rjmp	.+250    	; 0x494e <remoteSendCommand+0x3a4>
		case favorite:			appUIPrint("favorite");			break;
    4854:	88 e4       	ldi	r24, 0x48	; 72
    4856:	9a e0       	ldi	r25, 0x0A	; 10
    4858:	9f 93       	push	r25
    485a:	8f 93       	push	r24
    485c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	74 c0       	rjmp	.+232    	; 0x494e <remoteSendCommand+0x3a4>
		case option:			appUIPrint("option");			break;
    4866:	81 e4       	ldi	r24, 0x41	; 65
    4868:	9a e0       	ldi	r25, 0x0A	; 10
    486a:	9f 93       	push	r25
    486c:	8f 93       	push	r24
    486e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4872:	0f 90       	pop	r0
    4874:	0f 90       	pop	r0
    4876:	6b c0       	rjmp	.+214    	; 0x494e <remoteSendCommand+0x3a4>
		case schedule:			appUIPrint("schedule");			break;
    4878:	88 e3       	ldi	r24, 0x38	; 56
    487a:	9a e0       	ldi	r25, 0x0A	; 10
    487c:	9f 93       	push	r25
    487e:	8f 93       	push	r24
    4880:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	62 c0       	rjmp	.+196    	; 0x494e <remoteSendCommand+0x3a4>
		
		case zero:				appUIPrint("0");					break;
    488a:	86 e3       	ldi	r24, 0x36	; 54
    488c:	9a e0       	ldi	r25, 0x0A	; 10
    488e:	9f 93       	push	r25
    4890:	8f 93       	push	r24
    4892:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4896:	0f 90       	pop	r0
    4898:	0f 90       	pop	r0
    489a:	59 c0       	rjmp	.+178    	; 0x494e <remoteSendCommand+0x3a4>
		case one:				appUIPrint("1");					break;
    489c:	84 e3       	ldi	r24, 0x34	; 52
    489e:	9a e0       	ldi	r25, 0x0A	; 10
    48a0:	9f 93       	push	r25
    48a2:	8f 93       	push	r24
    48a4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	50 c0       	rjmp	.+160    	; 0x494e <remoteSendCommand+0x3a4>
		case two:				appUIPrint("2");					break;
    48ae:	82 e3       	ldi	r24, 0x32	; 50
    48b0:	9a e0       	ldi	r25, 0x0A	; 10
    48b2:	9f 93       	push	r25
    48b4:	8f 93       	push	r24
    48b6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	47 c0       	rjmp	.+142    	; 0x494e <remoteSendCommand+0x3a4>
		case three:				appUIPrint("3");					break;
    48c0:	80 e3       	ldi	r24, 0x30	; 48
    48c2:	9a e0       	ldi	r25, 0x0A	; 10
    48c4:	9f 93       	push	r25
    48c6:	8f 93       	push	r24
    48c8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	3e c0       	rjmp	.+124    	; 0x494e <remoteSendCommand+0x3a4>
		case four:				appUIPrint("4");					break;
    48d2:	8e e2       	ldi	r24, 0x2E	; 46
    48d4:	9a e0       	ldi	r25, 0x0A	; 10
    48d6:	9f 93       	push	r25
    48d8:	8f 93       	push	r24
    48da:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    48de:	0f 90       	pop	r0
    48e0:	0f 90       	pop	r0
    48e2:	35 c0       	rjmp	.+106    	; 0x494e <remoteSendCommand+0x3a4>
		case five:				appUIPrint("5");					break;
    48e4:	8c e2       	ldi	r24, 0x2C	; 44
    48e6:	9a e0       	ldi	r25, 0x0A	; 10
    48e8:	9f 93       	push	r25
    48ea:	8f 93       	push	r24
    48ec:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	2c c0       	rjmp	.+88     	; 0x494e <remoteSendCommand+0x3a4>
		case six:				appUIPrint("6");					break;
    48f6:	8a e2       	ldi	r24, 0x2A	; 42
    48f8:	9a e0       	ldi	r25, 0x0A	; 10
    48fa:	9f 93       	push	r25
    48fc:	8f 93       	push	r24
    48fe:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	23 c0       	rjmp	.+70     	; 0x494e <remoteSendCommand+0x3a4>
		case seven:				appUIPrint("7");					break;
    4908:	88 e2       	ldi	r24, 0x28	; 40
    490a:	9a e0       	ldi	r25, 0x0A	; 10
    490c:	9f 93       	push	r25
    490e:	8f 93       	push	r24
    4910:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	1a c0       	rjmp	.+52     	; 0x494e <remoteSendCommand+0x3a4>
		case eight:				appUIPrint("8");					break;
    491a:	86 e2       	ldi	r24, 0x26	; 38
    491c:	9a e0       	ldi	r25, 0x0A	; 10
    491e:	9f 93       	push	r25
    4920:	8f 93       	push	r24
    4922:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	11 c0       	rjmp	.+34     	; 0x494e <remoteSendCommand+0x3a4>
		case nine:				appUIPrint("9");					break;
    492c:	84 e2       	ldi	r24, 0x24	; 36
    492e:	9a e0       	ldi	r25, 0x0A	; 10
    4930:	9f 93       	push	r25
    4932:	8f 93       	push	r24
    4934:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4938:	0f 90       	pop	r0
    493a:	0f 90       	pop	r0
    493c:	08 c0       	rjmp	.+16     	; 0x494e <remoteSendCommand+0x3a4>
		
		default:				appUIPrint("Error: unknown key!");	return;
    493e:	80 e1       	ldi	r24, 0x10	; 16
    4940:	9a e0       	ldi	r25, 0x0A	; 10
    4942:	9f 93       	push	r25
    4944:	8f 93       	push	r24
    4946:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0

void remoteSendCommand(const remoteCommand_t *cmd)
{
	remotePrintCommand(cmd);
	
	if (cmd->key == noone) 
    494e:	f8 01       	movw	r30, r16
    4950:	85 81       	ldd	r24, Z+5	; 0x05
    4952:	81 11       	cpse	r24, r1
    4954:	09 c0       	rjmp	.+18     	; 0x4968 <remoteSendCommand+0x3be>
	{
		appUIPrintln(" Error: empty command!");
    4956:	8c eb       	ldi	r24, 0xBC	; 188
    4958:	9b e0       	ldi	r25, 0x0B	; 11
    495a:	9f 93       	push	r25
    495c:	8f 93       	push	r24
    495e:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
		return;	
    4962:	0f 90       	pop	r0
    4964:	0f 90       	pop	r0
    4966:	86 c0       	rjmp	.+268    	; 0x4a74 <remoteSendCommand+0x4ca>
	}
	
	if (cmd->key == power_switch)
    4968:	81 30       	cpi	r24, 0x01	; 1
    496a:	01 f5       	brne	.+64     	; 0x49ac <remoteSendCommand+0x402>
	{
		//Start callback timer
		if (eventFindCount(&remoteRebootCallback) == 0) 
    496c:	87 e6       	ldi	r24, 0x67	; 103
    496e:	92 e2       	ldi	r25, 0x22	; 34
    4970:	9a d3       	rcall	.+1844   	; 0x50a6 <eventFindCount>
    4972:	81 11       	cpse	r24, r1
    4974:	12 c0       	rjmp	.+36     	; 0x499a <remoteSendCommand+0x3f0>
		{
			if (eventAdd(200, -1, &remoteRebootCallback))
    4976:	27 e6       	ldi	r18, 0x67	; 103
    4978:	32 e2       	ldi	r19, 0x22	; 34
    497a:	4f ef       	ldi	r20, 0xFF	; 255
    497c:	68 ec       	ldi	r22, 0xC8	; 200
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	c4 d2       	rcall	.+1416   	; 0x4f0e <eventAdd>
    4986:	88 23       	and	r24, r24
    4988:	41 f0       	breq	.+16     	; 0x499a <remoteSendCommand+0x3f0>
			{
				rebootDevices_bm = cmd->devices_bm;
    498a:	f8 01       	movw	r30, r16
    498c:	81 81       	ldd	r24, Z+1	; 0x01
    498e:	92 81       	ldd	r25, Z+2	; 0x02
    4990:	80 93 8d 23 	sts	0x238D, r24
    4994:	90 93 8e 23 	sts	0x238E, r25
				return;
    4998:	6d c0       	rjmp	.+218    	; 0x4a74 <remoteSendCommand+0x4ca>
			}
		}
		appUIPrintln("Error: reboot is aborted! Already busy rebooting or internal error.");
    499a:	88 e7       	ldi	r24, 0x78	; 120
    499c:	9b e0       	ldi	r25, 0x0B	; 11
    499e:	9f 93       	push	r25
    49a0:	8f 93       	push	r24
    49a2:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
		return;
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	64 c0       	rjmp	.+200    	; 0x4a74 <remoteSendCommand+0x4ca>
	}
	
	if (cmd->key == channel_number)
    49ac:	82 30       	cpi	r24, 0x02	; 2
    49ae:	b1 f5       	brne	.+108    	; 0x4a1c <remoteSendCommand+0x472>
	{
		remoteCommand_t cmd_temp = *cmd;
    49b0:	f8 01       	movw	r30, r16
    49b2:	63 81       	ldd	r22, Z+3	; 0x03
    49b4:	74 81       	ldd	r23, Z+4	; 0x04
		
		for (uint8_t i = 0; i < 8; i++)
		{
			if (cmd->devices_bm & (1 << i))
    49b6:	41 81       	ldd	r20, Z+1	; 0x01
    49b8:	52 81       	ldd	r21, Z+2	; 0x02
    49ba:	40 fd       	sbrc	r20, 0
    49bc:	0f c0       	rjmp	.+30     	; 0x49dc <remoteSendCommand+0x432>
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	e1 e0       	ldi	r30, 0x01	; 1
    49c4:	f0 e0       	ldi	r31, 0x00	; 0
    49c6:	9f 01       	movw	r18, r30
    49c8:	08 2e       	mov	r0, r24
    49ca:	02 c0       	rjmp	.+4      	; 0x49d0 <remoteSendCommand+0x426>
    49cc:	22 0f       	add	r18, r18
    49ce:	33 1f       	adc	r19, r19
    49d0:	0a 94       	dec	r0
    49d2:	e2 f7       	brpl	.-8      	; 0x49cc <remoteSendCommand+0x422>
    49d4:	24 23       	and	r18, r20
    49d6:	35 23       	and	r19, r21
    49d8:	23 2b       	or	r18, r19
    49da:	d9 f0       	breq	.+54     	; 0x4a12 <remoteSendCommand+0x468>
			{
				cmd_temp.devices_bm = 1 << i;
				
				char digits[5];
				snprintf_P(digits, sizeof digits, PSTR("%u"), cmd_temp.channelNumber);
    49dc:	7f 93       	push	r23
    49de:	6f 93       	push	r22
    49e0:	85 e7       	ldi	r24, 0x75	; 117
    49e2:	9b e0       	ldi	r25, 0x0B	; 11
    49e4:	9f 93       	push	r25
    49e6:	8f 93       	push	r24
    49e8:	1f 92       	push	r1
    49ea:	85 e0       	ldi	r24, 0x05	; 5
    49ec:	8f 93       	push	r24
    49ee:	ce 01       	movw	r24, r28
    49f0:	01 96       	adiw	r24, 0x01	; 1
    49f2:	9f 93       	push	r25
    49f4:	8f 93       	push	r24
    49f6:	0e 94 17 34 	call	0x682e	; 0x682e <snprintf_P>
				
				for (int8_t j = sizeof digits - 1; j >= 0; i--)
    49fa:	cd bf       	out	0x3d, r28	; 61
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	9f ef       	ldi	r25, 0xFF	; 255
    4a00:	eb e4       	ldi	r30, 0x4B	; 75
    4a02:	fd e1       	ldi	r31, 0x1D	; 29
    4a04:	91 50       	subi	r25, 0x01	; 1
    4a06:	e0 40       	sbci	r30, 0x00	; 0
    4a08:	f0 40       	sbci	r31, 0x00	; 0
    4a0a:	e1 f7       	brne	.-8      	; 0x4a04 <remoteSendCommand+0x45a>
    4a0c:	00 c0       	rjmp	.+0      	; 0x4a0e <remoteSendCommand+0x464>
    4a0e:	00 00       	nop
    4a10:	f6 cf       	rjmp	.-20     	; 0x49fe <remoteSendCommand+0x454>
    4a12:	01 96       	adiw	r24, 0x01	; 1
	
	if (cmd->key == channel_number)
	{
		remoteCommand_t cmd_temp = *cmd;
		
		for (uint8_t i = 0; i < 8; i++)
    4a14:	88 30       	cpi	r24, 0x08	; 8
    4a16:	91 05       	cpc	r25, r1
    4a18:	b1 f6       	brne	.-84     	; 0x49c6 <remoteSendCommand+0x41c>
    4a1a:	2c c0       	rjmp	.+88     	; 0x4a74 <remoteSendCommand+0x4ca>
			}
		}
		return;
	}
	
	appUIPrint(", devices 0x%03x, keycode 0x%08x", cmd->devices_bm, getKeyCode(cmd));
    4a1c:	c8 01       	movw	r24, r16
    4a1e:	ca d8       	rcall	.-3692   	; 0x3bb4 <getKeyCode>
    4a20:	9f 93       	push	r25
    4a22:	8f 93       	push	r24
    4a24:	7f 93       	push	r23
    4a26:	6f 93       	push	r22
    4a28:	f8 01       	movw	r30, r16
    4a2a:	82 81       	ldd	r24, Z+2	; 0x02
    4a2c:	8f 93       	push	r24
    4a2e:	81 81       	ldd	r24, Z+1	; 0x01
    4a30:	8f 93       	push	r24
    4a32:	84 e5       	ldi	r24, 0x54	; 84
    4a34:	9b e0       	ldi	r25, 0x0B	; 11
    4a36:	9f 93       	push	r25
    4a38:	8f 93       	push	r24
    4a3a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
	
	if (cmd->key == power && (cmd->device_type == device_humax || cmd->device_type == device_mbc))
    4a3e:	cd bf       	out	0x3d, r28	; 61
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	f8 01       	movw	r30, r16
    4a44:	85 81       	ldd	r24, Z+5	; 0x05
    4a46:	83 30       	cpi	r24, 0x03	; 3
    4a48:	59 f4       	brne	.+22     	; 0x4a60 <remoteSendCommand+0x4b6>
    4a4a:	80 81       	ld	r24, Z
    4a4c:	8d 7f       	andi	r24, 0xFD	; 253
    4a4e:	81 30       	cpi	r24, 0x01	; 1
    4a50:	39 f4       	brne	.+14     	; 0x4a60 <remoteSendCommand+0x4b6>
	{
		for (uint8_t i = 0; i < 3; i++)
		{
			remoteSend(cmd);
    4a52:	c8 01       	movw	r24, r16
    4a54:	0c dc       	rcall	.-2024   	; 0x426e <remoteSend>
    4a56:	c8 01       	movw	r24, r16
    4a58:	0a dc       	rcall	.-2028   	; 0x426e <remoteSend>
    4a5a:	c8 01       	movw	r24, r16
    4a5c:	08 dc       	rcall	.-2032   	; 0x426e <remoteSend>
    4a5e:	0a c0       	rjmp	.+20     	; 0x4a74 <remoteSendCommand+0x4ca>
		}
		return;
	}
	
	remoteSend(cmd);
    4a60:	c8 01       	movw	r24, r16
    4a62:	05 dc       	rcall	.-2038   	; 0x426e <remoteSend>
	appUIPrintln(" done.\r\n")
    4a64:	8b e4       	ldi	r24, 0x4B	; 75
    4a66:	9b e0       	ldi	r25, 0x0B	; 11
    4a68:	9f 93       	push	r25
    4a6a:	8f 93       	push	r24
    4a6c:	0e 94 97 09 	call	0x132e	; 0x132e <appUIPrintln_P>
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
}
    4a74:	25 96       	adiw	r28, 0x05	; 5
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	df 91       	pop	r29
    4a7c:	cf 91       	pop	r28
    4a7e:	1f 91       	pop	r17
    4a80:	0f 91       	pop	r16
    4a82:	08 95       	ret

00004a84 <RTCPrintDate>:
// 	else if ((year % 400) != 0)
// 	{
// 		return false;
// 	}
	return true;
}
    4a84:	fc 01       	movw	r30, r24
    4a86:	82 81       	ldd	r24, Z+2	; 0x02
    4a88:	1f 92       	push	r1
    4a8a:	8f 93       	push	r24
    4a8c:	81 81       	ldd	r24, Z+1	; 0x01
    4a8e:	1f 92       	push	r1
    4a90:	8f 93       	push	r24
    4a92:	80 81       	ld	r24, Z
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	80 53       	subi	r24, 0x30	; 48
    4a98:	98 4f       	sbci	r25, 0xF8	; 248
    4a9a:	9f 93       	push	r25
    4a9c:	8f 93       	push	r24
    4a9e:	83 ee       	ldi	r24, 0xE3	; 227
    4aa0:	9b e0       	ldi	r25, 0x0B	; 11
    4aa2:	9f 93       	push	r25
    4aa4:	8f 93       	push	r24
    4aa6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4aaa:	8d b7       	in	r24, 0x3d	; 61
    4aac:	9e b7       	in	r25, 0x3e	; 62
    4aae:	08 96       	adiw	r24, 0x08	; 8
    4ab0:	8d bf       	out	0x3d, r24	; 61
    4ab2:	9e bf       	out	0x3e, r25	; 62
    4ab4:	08 95       	ret

00004ab6 <RTCPrintTime>:
    4ab6:	fc 01       	movw	r30, r24
    4ab8:	85 81       	ldd	r24, Z+5	; 0x05
    4aba:	1f 92       	push	r1
    4abc:	8f 93       	push	r24
    4abe:	84 81       	ldd	r24, Z+4	; 0x04
    4ac0:	1f 92       	push	r1
    4ac2:	8f 93       	push	r24
    4ac4:	83 81       	ldd	r24, Z+3	; 0x03
    4ac6:	1f 92       	push	r1
    4ac8:	8f 93       	push	r24
    4aca:	83 ed       	ldi	r24, 0xD3	; 211
    4acc:	9b e0       	ldi	r25, 0x0B	; 11
    4ace:	9f 93       	push	r25
    4ad0:	8f 93       	push	r24
    4ad2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <appUIPrint_P>
    4ad6:	8d b7       	in	r24, 0x3d	; 61
    4ad8:	9e b7       	in	r25, 0x3e	; 62
    4ada:	08 96       	adiw	r24, 0x08	; 8
    4adc:	8d bf       	out	0x3d, r24	; 61
    4ade:	9e bf       	out	0x3e, r25	; 62
    4ae0:	08 95       	ret

00004ae2 <RTCPrintAll>:
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	ec 01       	movw	r28, r24
    4ae8:	cd df       	rcall	.-102    	; 0x4a84 <RTCPrintDate>
    4aea:	ce 01       	movw	r24, r28
    4aec:	e4 df       	rcall	.-56     	; 0x4ab6 <RTCPrintTime>
    4aee:	df 91       	pop	r29
    4af0:	cf 91       	pop	r28
    4af2:	08 95       	ret

00004af4 <RTCUpdateTime>:
    4af4:	68 31       	cpi	r22, 0x18	; 24
    4af6:	68 f4       	brcc	.+26     	; 0x4b12 <RTCUpdateTime+0x1e>
    4af8:	4c 33       	cpi	r20, 0x3C	; 60
    4afa:	68 f4       	brcc	.+26     	; 0x4b16 <RTCUpdateTime+0x22>
    4afc:	2c 33       	cpi	r18, 0x3C	; 60
    4afe:	68 f4       	brcc	.+26     	; 0x4b1a <RTCUpdateTime+0x26>
    4b00:	3f b7       	in	r19, 0x3f	; 63
    4b02:	f8 94       	cli
    4b04:	fc 01       	movw	r30, r24
    4b06:	63 83       	std	Z+3, r22	; 0x03
    4b08:	44 83       	std	Z+4, r20	; 0x04
    4b0a:	25 83       	std	Z+5, r18	; 0x05
    4b0c:	3f bf       	out	0x3f, r19	; 63
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	08 95       	ret
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	08 95       	ret
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	08 95       	ret
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	08 95       	ret

00004b1e <RTCIsSurpassed>:
    4b1e:	dc 01       	movw	r26, r24
    4b20:	fb 01       	movw	r30, r22
    4b22:	3f b7       	in	r19, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	91 e0       	ldi	r25, 0x01	; 1
    4b28:	2d c0       	rjmp	.+90     	; 0x4b84 <RTCIsSurpassed+0x66>
    4b2a:	29 17       	cp	r18, r25
    4b2c:	c8 f1       	brcs	.+114    	; 0x4ba0 <RTCIsSurpassed+0x82>
    4b2e:	11 96       	adiw	r26, 0x01	; 1
    4b30:	4c 91       	ld	r20, X
    4b32:	11 97       	sbiw	r26, 0x01	; 1
    4b34:	21 81       	ldd	r18, Z+1	; 0x01
    4b36:	24 17       	cp	r18, r20
    4b38:	58 f1       	brcs	.+86     	; 0x4b90 <RTCIsSurpassed+0x72>
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	42 17       	cp	r20, r18
    4b40:	20 f1       	brcs	.+72     	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b42:	12 96       	adiw	r26, 0x02	; 2
    4b44:	4c 91       	ld	r20, X
    4b46:	12 97       	sbiw	r26, 0x02	; 2
    4b48:	22 81       	ldd	r18, Z+2	; 0x02
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	24 17       	cp	r18, r20
    4b4e:	e8 f0       	brcs	.+58     	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	42 17       	cp	r20, r18
    4b54:	d0 f0       	brcs	.+52     	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b56:	13 96       	adiw	r26, 0x03	; 3
    4b58:	2c 91       	ld	r18, X
    4b5a:	13 97       	sbiw	r26, 0x03	; 3
    4b5c:	43 81       	ldd	r20, Z+3	; 0x03
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	42 17       	cp	r20, r18
    4b62:	98 f0       	brcs	.+38     	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	24 17       	cp	r18, r20
    4b68:	80 f0       	brcs	.+32     	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	14 96       	adiw	r26, 0x04	; 4
    4b6e:	4c 91       	ld	r20, X
    4b70:	14 97       	sbiw	r26, 0x04	; 4
    4b72:	24 81       	ldd	r18, Z+4	; 0x04
    4b74:	24 17       	cp	r18, r20
    4b76:	48 f0       	brcs	.+18     	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b78:	15 96       	adiw	r26, 0x05	; 5
    4b7a:	4c 91       	ld	r20, X
    4b7c:	15 97       	sbiw	r26, 0x05	; 5
    4b7e:	25 81       	ldd	r18, Z+5	; 0x05
    4b80:	24 17       	cp	r18, r20
    4b82:	10 f0       	brcs	.+4      	; 0x4b88 <RTCIsSurpassed+0x6a>
    4b84:	80 e0       	ldi	r24, 0x00	; 0
    4b86:	01 c0       	rjmp	.+2      	; 0x4b8a <RTCIsSurpassed+0x6c>
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	91 11       	cpse	r25, r1
    4b8c:	03 c0       	rjmp	.+6      	; 0x4b94 <RTCIsSurpassed+0x76>
    4b8e:	09 c0       	rjmp	.+18     	; 0x4ba2 <RTCIsSurpassed+0x84>
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	07 c0       	rjmp	.+14     	; 0x4ba2 <RTCIsSurpassed+0x84>
    4b94:	2c 91       	ld	r18, X
    4b96:	90 81       	ld	r25, Z
    4b98:	92 17       	cp	r25, r18
    4b9a:	38 f6       	brcc	.-114    	; 0x4b2a <RTCIsSurpassed+0xc>
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	01 c0       	rjmp	.+2      	; 0x4ba2 <RTCIsSurpassed+0x84>
    4ba0:	80 e0       	ldi	r24, 0x00	; 0
    4ba2:	3f bf       	out	0x3f, r19	; 63
    4ba4:	08 95       	ret

00004ba6 <RTCGetDaysInMonth>:
    4ba6:	85 30       	cpi	r24, 0x05	; 5
    4ba8:	b9 f0       	breq	.+46     	; 0x4bd8 <RTCGetDaysInMonth+0x32>
    4baa:	38 f4       	brcc	.+14     	; 0x4bba <RTCGetDaysInMonth+0x14>
    4bac:	82 30       	cpi	r24, 0x02	; 2
    4bae:	81 f0       	breq	.+32     	; 0x4bd0 <RTCGetDaysInMonth+0x2a>
    4bb0:	83 30       	cpi	r24, 0x03	; 3
    4bb2:	91 f0       	breq	.+36     	; 0x4bd8 <RTCGetDaysInMonth+0x32>
    4bb4:	81 30       	cpi	r24, 0x01	; 1
    4bb6:	51 f4       	brne	.+20     	; 0x4bcc <RTCGetDaysInMonth+0x26>
    4bb8:	0f c0       	rjmp	.+30     	; 0x4bd8 <RTCGetDaysInMonth+0x32>
    4bba:	8a 30       	cpi	r24, 0x0A	; 10
    4bbc:	69 f0       	breq	.+26     	; 0x4bd8 <RTCGetDaysInMonth+0x32>
    4bbe:	20 f4       	brcc	.+8      	; 0x4bc8 <RTCGetDaysInMonth+0x22>
    4bc0:	87 50       	subi	r24, 0x07	; 7
    4bc2:	82 30       	cpi	r24, 0x02	; 2
    4bc4:	18 f4       	brcc	.+6      	; 0x4bcc <RTCGetDaysInMonth+0x26>
    4bc6:	08 c0       	rjmp	.+16     	; 0x4bd8 <RTCGetDaysInMonth+0x32>
    4bc8:	8c 30       	cpi	r24, 0x0C	; 12
    4bca:	31 f0       	breq	.+12     	; 0x4bd8 <RTCGetDaysInMonth+0x32>
    4bcc:	8e e1       	ldi	r24, 0x1E	; 30
    4bce:	08 95       	ret
    4bd0:	63 70       	andi	r22, 0x03	; 3
    4bd2:	21 f0       	breq	.+8      	; 0x4bdc <RTCGetDaysInMonth+0x36>
    4bd4:	8c e1       	ldi	r24, 0x1C	; 28
    4bd6:	08 95       	ret
    4bd8:	8f e1       	ldi	r24, 0x1F	; 31
    4bda:	08 95       	ret
    4bdc:	8d e1       	ldi	r24, 0x1D	; 29
    4bde:	08 95       	ret

00004be0 <RTCProcessOverflow>:
    4be0:	ff 92       	push	r15
    4be2:	0f 93       	push	r16
    4be4:	1f 93       	push	r17
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	ec 01       	movw	r28, r24
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	8c 33       	cpi	r24, 0x3C	; 60
    4bf0:	58 f0       	brcs	.+22     	; 0x4c08 <RTCProcessOverflow+0x28>
    4bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf4:	9f 5f       	subi	r25, 0xFF	; 255
    4bf6:	01 c0       	rjmp	.+2      	; 0x4bfa <RTCProcessOverflow+0x1a>
    4bf8:	92 2f       	mov	r25, r18
    4bfa:	8c 53       	subi	r24, 0x3C	; 60
    4bfc:	21 e0       	ldi	r18, 0x01	; 1
    4bfe:	29 0f       	add	r18, r25
    4c00:	8c 33       	cpi	r24, 0x3C	; 60
    4c02:	d0 f7       	brcc	.-12     	; 0x4bf8 <RTCProcessOverflow+0x18>
    4c04:	9c 83       	std	Y+4, r25	; 0x04
    4c06:	8d 83       	std	Y+5, r24	; 0x05
    4c08:	8c 81       	ldd	r24, Y+4	; 0x04
    4c0a:	8c 33       	cpi	r24, 0x3C	; 60
    4c0c:	38 f0       	brcs	.+14     	; 0x4c1c <RTCProcessOverflow+0x3c>
    4c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c10:	8c 53       	subi	r24, 0x3C	; 60
    4c12:	9f 5f       	subi	r25, 0xFF	; 255
    4c14:	8c 33       	cpi	r24, 0x3C	; 60
    4c16:	e0 f7       	brcc	.-8      	; 0x4c10 <RTCProcessOverflow+0x30>
    4c18:	9b 83       	std	Y+3, r25	; 0x03
    4c1a:	8c 83       	std	Y+4, r24	; 0x04
    4c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1e:	88 31       	cpi	r24, 0x18	; 24
    4c20:	38 f0       	brcs	.+14     	; 0x4c30 <RTCProcessOverflow+0x50>
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	88 51       	subi	r24, 0x18	; 24
    4c26:	9f 5f       	subi	r25, 0xFF	; 255
    4c28:	88 31       	cpi	r24, 0x18	; 24
    4c2a:	e0 f7       	brcc	.-8      	; 0x4c24 <RTCProcessOverflow+0x44>
    4c2c:	9a 83       	std	Y+2, r25	; 0x02
    4c2e:	8b 83       	std	Y+3, r24	; 0x03
    4c30:	f8 80       	ld	r15, Y
    4c32:	05 c0       	rjmp	.+10     	; 0x4c3e <RTCProcessOverflow+0x5e>
    4c34:	08 1b       	sub	r16, r24
    4c36:	0a 83       	std	Y+2, r16	; 0x02
    4c38:	89 81       	ldd	r24, Y+1	; 0x01
    4c3a:	8f 5f       	subi	r24, 0xFF	; 255
    4c3c:	89 83       	std	Y+1, r24	; 0x01
    4c3e:	0a 81       	ldd	r16, Y+2	; 0x02
    4c40:	19 81       	ldd	r17, Y+1	; 0x01
    4c42:	6f 2d       	mov	r22, r15
    4c44:	81 2f       	mov	r24, r17
    4c46:	af df       	rcall	.-162    	; 0x4ba6 <RTCGetDaysInMonth>
    4c48:	80 17       	cp	r24, r16
    4c4a:	a0 f3       	brcs	.-24     	; 0x4c34 <RTCProcessOverflow+0x54>
    4c4c:	1d 30       	cpi	r17, 0x0D	; 13
    4c4e:	38 f0       	brcs	.+14     	; 0x4c5e <RTCProcessOverflow+0x7e>
    4c50:	88 81       	ld	r24, Y
    4c52:	1c 50       	subi	r17, 0x0C	; 12
    4c54:	8f 5f       	subi	r24, 0xFF	; 255
    4c56:	1d 30       	cpi	r17, 0x0D	; 13
    4c58:	e0 f7       	brcc	.-8      	; 0x4c52 <RTCProcessOverflow+0x72>
    4c5a:	19 83       	std	Y+1, r17	; 0x01
    4c5c:	88 83       	st	Y, r24
    4c5e:	df 91       	pop	r29
    4c60:	cf 91       	pop	r28
    4c62:	1f 91       	pop	r17
    4c64:	0f 91       	pop	r16
    4c66:	ff 90       	pop	r15
    4c68:	08 95       	ret

00004c6a <__vector_10>:
    4c6a:	1f 92       	push	r1
    4c6c:	0f 92       	push	r0
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	0f 92       	push	r0
    4c72:	11 24       	eor	r1, r1
    4c74:	08 b6       	in	r0, 0x38	; 56
    4c76:	0f 92       	push	r0
    4c78:	18 be       	out	0x38, r1	; 56
    4c7a:	09 b6       	in	r0, 0x39	; 57
    4c7c:	0f 92       	push	r0
    4c7e:	19 be       	out	0x39, r1	; 57
    4c80:	0b b6       	in	r0, 0x3b	; 59
    4c82:	0f 92       	push	r0
    4c84:	1b be       	out	0x3b, r1	; 59
    4c86:	2f 93       	push	r18
    4c88:	3f 93       	push	r19
    4c8a:	4f 93       	push	r20
    4c8c:	5f 93       	push	r21
    4c8e:	6f 93       	push	r22
    4c90:	7f 93       	push	r23
    4c92:	8f 93       	push	r24
    4c94:	9f 93       	push	r25
    4c96:	af 93       	push	r26
    4c98:	bf 93       	push	r27
    4c9a:	ef 93       	push	r30
    4c9c:	ff 93       	push	r31
    4c9e:	80 91 90 23 	lds	r24, 0x2390
    4ca2:	90 91 91 23 	lds	r25, 0x2391
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	35 81       	ldd	r19, Z+5	; 0x05
    4caa:	20 91 8f 23 	lds	r18, 0x238F
    4cae:	23 0f       	add	r18, r19
    4cb0:	25 83       	std	Z+5, r18	; 0x05
    4cb2:	96 df       	rcall	.-212    	; 0x4be0 <RTCProcessOverflow>
    4cb4:	ff 91       	pop	r31
    4cb6:	ef 91       	pop	r30
    4cb8:	bf 91       	pop	r27
    4cba:	af 91       	pop	r26
    4cbc:	9f 91       	pop	r25
    4cbe:	8f 91       	pop	r24
    4cc0:	7f 91       	pop	r23
    4cc2:	6f 91       	pop	r22
    4cc4:	5f 91       	pop	r21
    4cc6:	4f 91       	pop	r20
    4cc8:	3f 91       	pop	r19
    4cca:	2f 91       	pop	r18
    4ccc:	0f 90       	pop	r0
    4cce:	0b be       	out	0x3b, r0	; 59
    4cd0:	0f 90       	pop	r0
    4cd2:	09 be       	out	0x39, r0	; 57
    4cd4:	0f 90       	pop	r0
    4cd6:	08 be       	out	0x38, r0	; 56
    4cd8:	0f 90       	pop	r0
    4cda:	0f be       	out	0x3f, r0	; 63
    4cdc:	0f 90       	pop	r0
    4cde:	1f 90       	pop	r1
    4ce0:	18 95       	reti

00004ce2 <RTCAddDate>:
    4ce2:	cf 93       	push	r28
    4ce4:	fc 01       	movw	r30, r24
    4ce6:	cf b7       	in	r28, 0x3f	; 63
    4ce8:	f8 94       	cli
    4cea:	80 81       	ld	r24, Z
    4cec:	68 0f       	add	r22, r24
    4cee:	60 83       	st	Z, r22
    4cf0:	81 81       	ldd	r24, Z+1	; 0x01
    4cf2:	48 0f       	add	r20, r24
    4cf4:	41 83       	std	Z+1, r20	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	28 0f       	add	r18, r24
    4cfa:	22 83       	std	Z+2, r18	; 0x02
    4cfc:	cf 01       	movw	r24, r30
    4cfe:	70 df       	rcall	.-288    	; 0x4be0 <RTCProcessOverflow>
    4d00:	cf bf       	out	0x3f, r28	; 63
    4d02:	cf 91       	pop	r28
    4d04:	08 95       	ret

00004d06 <RTCUpdateAll>:
    4d06:	af 92       	push	r10
    4d08:	bf 92       	push	r11
    4d0a:	cf 92       	push	r12
    4d0c:	ef 92       	push	r14
    4d0e:	0f 93       	push	r16
    4d10:	1f 93       	push	r17
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	65 36       	cpi	r22, 0x65	; 101
    4d18:	08 f5       	brcc	.+66     	; 0x4d5c <RTCUpdateAll+0x56>
    4d1a:	3f ef       	ldi	r19, 0xFF	; 255
    4d1c:	34 0f       	add	r19, r20
    4d1e:	3c 30       	cpi	r19, 0x0C	; 12
    4d20:	f8 f4       	brcc	.+62     	; 0x4d60 <RTCUpdateAll+0x5a>
    4d22:	22 23       	and	r18, r18
    4d24:	f9 f0       	breq	.+62     	; 0x4d64 <RTCUpdateAll+0x5e>
    4d26:	12 2f       	mov	r17, r18
    4d28:	d4 2f       	mov	r29, r20
    4d2a:	c6 2f       	mov	r28, r22
    4d2c:	5c 01       	movw	r10, r24
    4d2e:	84 2f       	mov	r24, r20
    4d30:	3a df       	rcall	.-396    	; 0x4ba6 <RTCGetDaysInMonth>
    4d32:	81 17       	cp	r24, r17
    4d34:	c8 f0       	brcs	.+50     	; 0x4d68 <RTCUpdateAll+0x62>
    4d36:	08 31       	cpi	r16, 0x18	; 24
    4d38:	c8 f4       	brcc	.+50     	; 0x4d6c <RTCUpdateAll+0x66>
    4d3a:	8b e3       	ldi	r24, 0x3B	; 59
    4d3c:	8e 15       	cp	r24, r14
    4d3e:	c0 f0       	brcs	.+48     	; 0x4d70 <RTCUpdateAll+0x6a>
    4d40:	8c 15       	cp	r24, r12
    4d42:	c0 f0       	brcs	.+48     	; 0x4d74 <RTCUpdateAll+0x6e>
    4d44:	8f b7       	in	r24, 0x3f	; 63
    4d46:	f8 94       	cli
    4d48:	f5 01       	movw	r30, r10
    4d4a:	c0 83       	st	Z, r28
    4d4c:	d1 83       	std	Z+1, r29	; 0x01
    4d4e:	12 83       	std	Z+2, r17	; 0x02
    4d50:	03 83       	std	Z+3, r16	; 0x03
    4d52:	e4 82       	std	Z+4, r14	; 0x04
    4d54:	c5 82       	std	Z+5, r12	; 0x05
    4d56:	8f bf       	out	0x3f, r24	; 63
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	0d c0       	rjmp	.+26     	; 0x4d76 <RTCUpdateAll+0x70>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	0b c0       	rjmp	.+22     	; 0x4d76 <RTCUpdateAll+0x70>
    4d60:	80 e0       	ldi	r24, 0x00	; 0
    4d62:	09 c0       	rjmp	.+18     	; 0x4d76 <RTCUpdateAll+0x70>
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	07 c0       	rjmp	.+14     	; 0x4d76 <RTCUpdateAll+0x70>
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	05 c0       	rjmp	.+10     	; 0x4d76 <RTCUpdateAll+0x70>
    4d6c:	80 e0       	ldi	r24, 0x00	; 0
    4d6e:	03 c0       	rjmp	.+6      	; 0x4d76 <RTCUpdateAll+0x70>
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	01 c0       	rjmp	.+2      	; 0x4d76 <RTCUpdateAll+0x70>
    4d74:	80 e0       	ldi	r24, 0x00	; 0
    4d76:	df 91       	pop	r29
    4d78:	cf 91       	pop	r28
    4d7a:	1f 91       	pop	r17
    4d7c:	0f 91       	pop	r16
    4d7e:	ef 90       	pop	r14
    4d80:	cf 90       	pop	r12
    4d82:	bf 90       	pop	r11
    4d84:	af 90       	pop	r10
    4d86:	08 95       	ret

00004d88 <RTCUpdateDate>:
    4d88:	ef 92       	push	r14
    4d8a:	ff 92       	push	r15
    4d8c:	1f 93       	push	r17
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	65 36       	cpi	r22, 0x65	; 101
    4d94:	b8 f4       	brcc	.+46     	; 0x4dc4 <RTCUpdateDate+0x3c>
    4d96:	3f ef       	ldi	r19, 0xFF	; 255
    4d98:	34 0f       	add	r19, r20
    4d9a:	3c 30       	cpi	r19, 0x0C	; 12
    4d9c:	a8 f4       	brcc	.+42     	; 0x4dc8 <RTCUpdateDate+0x40>
    4d9e:	22 23       	and	r18, r18
    4da0:	a9 f0       	breq	.+42     	; 0x4dcc <RTCUpdateDate+0x44>
    4da2:	12 2f       	mov	r17, r18
    4da4:	d4 2f       	mov	r29, r20
    4da6:	c6 2f       	mov	r28, r22
    4da8:	7c 01       	movw	r14, r24
    4daa:	84 2f       	mov	r24, r20
    4dac:	fc de       	rcall	.-520    	; 0x4ba6 <RTCGetDaysInMonth>
    4dae:	81 17       	cp	r24, r17
    4db0:	78 f0       	brcs	.+30     	; 0x4dd0 <RTCUpdateDate+0x48>
    4db2:	8f b7       	in	r24, 0x3f	; 63
    4db4:	f8 94       	cli
    4db6:	f7 01       	movw	r30, r14
    4db8:	c0 83       	st	Z, r28
    4dba:	d1 83       	std	Z+1, r29	; 0x01
    4dbc:	12 83       	std	Z+2, r17	; 0x02
    4dbe:	8f bf       	out	0x3f, r24	; 63
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	07 c0       	rjmp	.+14     	; 0x4dd2 <RTCUpdateDate+0x4a>
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	05 c0       	rjmp	.+10     	; 0x4dd2 <RTCUpdateDate+0x4a>
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	03 c0       	rjmp	.+6      	; 0x4dd2 <RTCUpdateDate+0x4a>
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	01 c0       	rjmp	.+2      	; 0x4dd2 <RTCUpdateDate+0x4a>
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	df 91       	pop	r29
    4dd4:	cf 91       	pop	r28
    4dd6:	1f 91       	pop	r17
    4dd8:	ff 90       	pop	r15
    4dda:	ef 90       	pop	r14
    4ddc:	08 95       	ret

00004dde <RTCIsValid>:
    4dde:	cf 93       	push	r28
    4de0:	df 93       	push	r29
    4de2:	fc 01       	movw	r30, r24
    4de4:	60 81       	ld	r22, Z
    4de6:	86 ef       	ldi	r24, 0xF6	; 246
    4de8:	86 0f       	add	r24, r22
    4dea:	8a 35       	cpi	r24, 0x5A	; 90
    4dec:	a0 f4       	brcc	.+40     	; 0x4e16 <RTCIsValid+0x38>
    4dee:	81 81       	ldd	r24, Z+1	; 0x01
    4df0:	8d 30       	cpi	r24, 0x0D	; 13
    4df2:	98 f4       	brcc	.+38     	; 0x4e1a <RTCIsValid+0x3c>
    4df4:	ef 01       	movw	r28, r30
    4df6:	d7 de       	rcall	.-594    	; 0x4ba6 <RTCGetDaysInMonth>
    4df8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfa:	89 17       	cp	r24, r25
    4dfc:	80 f0       	brcs	.+32     	; 0x4e1e <RTCIsValid+0x40>
    4dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    4e00:	88 31       	cpi	r24, 0x18	; 24
    4e02:	78 f4       	brcc	.+30     	; 0x4e22 <RTCIsValid+0x44>
    4e04:	8c 81       	ldd	r24, Y+4	; 0x04
    4e06:	8c 33       	cpi	r24, 0x3C	; 60
    4e08:	70 f4       	brcc	.+28     	; 0x4e26 <RTCIsValid+0x48>
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e0e:	9c 33       	cpi	r25, 0x3C	; 60
    4e10:	58 f0       	brcs	.+22     	; 0x4e28 <RTCIsValid+0x4a>
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	09 c0       	rjmp	.+18     	; 0x4e28 <RTCIsValid+0x4a>
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	07 c0       	rjmp	.+14     	; 0x4e28 <RTCIsValid+0x4a>
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	05 c0       	rjmp	.+10     	; 0x4e28 <RTCIsValid+0x4a>
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	03 c0       	rjmp	.+6      	; 0x4e28 <RTCIsValid+0x4a>
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	01 c0       	rjmp	.+2      	; 0x4e28 <RTCIsValid+0x4a>
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	08 95       	ret

00004e2e <RTCInit>:

void RTCInit(time_t * time, CLK_RTCSRC_t clkSrc, RTC_OVFINTLVL_t ovfIntLevel, RTC_PRESCALER_t prescaler, uint16_t period, uint8_t seconds)
{
    4e2e:	8f 92       	push	r8
    4e30:	9f 92       	push	r9
    4e32:	af 92       	push	r10
    4e34:	bf 92       	push	r11
    4e36:	cf 92       	push	r12
    4e38:	ef 92       	push	r14
    4e3a:	ff 92       	push	r15
    4e3c:	0f 93       	push	r16
    4e3e:	1f 93       	push	r17
    4e40:	cf 93       	push	r28
    4e42:	df 93       	push	r29
    4e44:	4c 01       	movw	r8, r24
    4e46:	d6 2f       	mov	r29, r22
    4e48:	f4 2e       	mov	r15, r20
    4e4a:	c2 2f       	mov	r28, r18
    4e4c:	58 01       	movw	r10, r16
	addSecond = seconds;
    4e4e:	e0 92 8f 23 	sts	0x238F, r14
	timeInt = time;
    4e52:	80 93 90 23 	sts	0x2390, r24
    4e56:	90 93 91 23 	sts	0x2391, r25
	
	if (!RTCIsValid(time)) {
    4e5a:	c1 df       	rcall	.-126    	; 0x4dde <RTCIsValid>
    4e5c:	81 11       	cpse	r24, r1
    4e5e:	08 c0       	rjmp	.+16     	; 0x4e70 <RTCInit+0x42>
		RTCUpdateAll(time, RTC_MIN_VALID_YEAR, 1, 1, 0, 0, 0); //Reset date and time
    4e60:	c1 2c       	mov	r12, r1
    4e62:	e1 2c       	mov	r14, r1
    4e64:	00 e0       	ldi	r16, 0x00	; 0
    4e66:	21 e0       	ldi	r18, 0x01	; 1
    4e68:	41 e0       	ldi	r20, 0x01	; 1
    4e6a:	6a e0       	ldi	r22, 0x0A	; 10
    4e6c:	c4 01       	movw	r24, r8
    4e6e:	4b df       	rcall	.-362    	; 0x4d06 <RTCUpdateAll>
	}
	
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) | clkSrc | CLK_RTCEN_bm;
    4e70:	e0 e4       	ldi	r30, 0x40	; 64
    4e72:	f0 e0       	ldi	r31, 0x00	; 0
    4e74:	83 81       	ldd	r24, Z+3	; 0x03
    4e76:	81 7f       	andi	r24, 0xF1	; 241
    4e78:	81 60       	ori	r24, 0x01	; 1
    4e7a:	8d 2b       	or	r24, r29
    4e7c:	83 83       	std	Z+3, r24	; 0x03
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4e7e:	e0 e0       	ldi	r30, 0x00	; 0
    4e80:	f4 e0       	ldi	r31, 0x04	; 4
    4e82:	81 81       	ldd	r24, Z+1	; 0x01
    4e84:	80 fd       	sbrc	r24, 0
    4e86:	fd cf       	rjmp	.-6      	; 0x4e82 <RTCInit+0x54>
	RTC.INTCTRL = (RTC.INTCTRL & ~(RTC_COMPINTLVL_gm | RTC_OVFINTLVL_gm ) ) | ovfIntLevel;
    4e88:	e0 e0       	ldi	r30, 0x00	; 0
    4e8a:	f4 e0       	ldi	r31, 0x04	; 4
    4e8c:	82 81       	ldd	r24, Z+2	; 0x02
    4e8e:	80 7f       	andi	r24, 0xF0	; 240
    4e90:	4f 2d       	mov	r20, r15
    4e92:	48 2b       	or	r20, r24
    4e94:	42 83       	std	Z+2, r20	; 0x02
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4e96:	81 81       	ldd	r24, Z+1	; 0x01
    4e98:	80 fd       	sbrc	r24, 0
    4e9a:	fd cf       	rjmp	.-6      	; 0x4e96 <RTCInit+0x68>
	RTC.CTRL = RTC_PRESCALER_OFF_gc;
    4e9c:	10 92 00 04 	sts	0x0400, r1
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4ea0:	e0 e0       	ldi	r30, 0x00	; 0
    4ea2:	f4 e0       	ldi	r31, 0x04	; 4
    4ea4:	81 81       	ldd	r24, Z+1	; 0x01
    4ea6:	80 fd       	sbrc	r24, 0
    4ea8:	fd cf       	rjmp	.-6      	; 0x4ea4 <RTCInit+0x76>
	RTC.PER = period;
    4eaa:	a0 92 0a 04 	sts	0x040A, r10
    4eae:	b0 92 0b 04 	sts	0x040B, r11
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4eb2:	e0 e0       	ldi	r30, 0x00	; 0
    4eb4:	f4 e0       	ldi	r31, 0x04	; 4
    4eb6:	81 81       	ldd	r24, Z+1	; 0x01
    4eb8:	80 fd       	sbrc	r24, 0
    4eba:	fd cf       	rjmp	.-6      	; 0x4eb6 <RTCInit+0x88>
	RTC.COMP = 0;
    4ebc:	10 92 0c 04 	sts	0x040C, r1
    4ec0:	10 92 0d 04 	sts	0x040D, r1
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4ec4:	e0 e0       	ldi	r30, 0x00	; 0
    4ec6:	f4 e0       	ldi	r31, 0x04	; 4
    4ec8:	81 81       	ldd	r24, Z+1	; 0x01
    4eca:	80 fd       	sbrc	r24, 0
    4ecc:	fd cf       	rjmp	.-6      	; 0x4ec8 <RTCInit+0x9a>
	RTC.CNT = 0;
    4ece:	10 92 08 04 	sts	0x0408, r1
    4ed2:	10 92 09 04 	sts	0x0409, r1
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4ed6:	e0 e0       	ldi	r30, 0x00	; 0
    4ed8:	f4 e0       	ldi	r31, 0x04	; 4
    4eda:	81 81       	ldd	r24, Z+1	; 0x01
    4edc:	80 fd       	sbrc	r24, 0
    4ede:	fd cf       	rjmp	.-6      	; 0x4eda <RTCInit+0xac>
	RTC.CTRL = (RTC.CTRL & ~RTC_PRESCALER_gm ) | prescaler;
    4ee0:	e0 e0       	ldi	r30, 0x00	; 0
    4ee2:	f4 e0       	ldi	r31, 0x04	; 4
    4ee4:	80 81       	ld	r24, Z
    4ee6:	88 7f       	andi	r24, 0xF8	; 248
    4ee8:	c8 2b       	or	r28, r24
    4eea:	c0 83       	st	Z, r28
}
    4eec:	df 91       	pop	r29
    4eee:	cf 91       	pop	r28
    4ef0:	1f 91       	pop	r17
    4ef2:	0f 91       	pop	r16
    4ef4:	ff 90       	pop	r15
    4ef6:	ef 90       	pop	r14
    4ef8:	cf 90       	pop	r12
    4efa:	bf 90       	pop	r11
    4efc:	af 90       	pop	r10
    4efe:	9f 90       	pop	r9
    4f00:	8f 90       	pop	r8
    4f02:	08 95       	ret

00004f04 <eventInit>:
	{
		ev->repeation = repeation;
		return true;
	}
	return false;
}
    4f04:	80 93 92 23 	sts	0x2392, r24
    4f08:	90 93 93 23 	sts	0x2393, r25
    4f0c:	08 95       	ret

00004f0e <eventAdd>:
    4f0e:	8f 92       	push	r8
    4f10:	9f 92       	push	r9
    4f12:	af 92       	push	r10
    4f14:	bf 92       	push	r11
    4f16:	ef 92       	push	r14
    4f18:	ff 92       	push	r15
    4f1a:	0f 93       	push	r16
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	4b 01       	movw	r8, r22
    4f24:	5c 01       	movw	r10, r24
    4f26:	79 01       	movw	r14, r18
    4f28:	80 91 96 23 	lds	r24, 0x2396
    4f2c:	90 91 97 23 	lds	r25, 0x2397
    4f30:	a0 91 98 23 	lds	r26, 0x2398
    4f34:	b0 91 99 23 	lds	r27, 0x2399
    4f38:	89 2b       	or	r24, r25
    4f3a:	8a 2b       	or	r24, r26
    4f3c:	8b 2b       	or	r24, r27
    4f3e:	81 f0       	breq	.+32     	; 0x4f60 <eventAdd+0x52>
    4f40:	e1 ea       	ldi	r30, 0xA1	; 161
    4f42:	f3 e2       	ldi	r31, 0x23	; 35
    4f44:	a2 e7       	ldi	r26, 0x72	; 114
    4f46:	b4 e2       	ldi	r27, 0x24	; 36
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	ec 01       	movw	r28, r24
    4f4e:	00 81       	ld	r16, Z
    4f50:	11 81       	ldd	r17, Z+1	; 0x01
    4f52:	22 81       	ldd	r18, Z+2	; 0x02
    4f54:	33 81       	ldd	r19, Z+3	; 0x03
    4f56:	01 2b       	or	r16, r17
    4f58:	02 2b       	or	r16, r18
    4f5a:	03 2b       	or	r16, r19
    4f5c:	c1 f4       	brne	.+48     	; 0x4f8e <eventAdd+0x80>
    4f5e:	02 c0       	rjmp	.+4      	; 0x4f64 <eventAdd+0x56>
    4f60:	c0 e0       	ldi	r28, 0x00	; 0
    4f62:	d0 e0       	ldi	r29, 0x00	; 0
    4f64:	8b e0       	ldi	r24, 0x0B	; 11
    4f66:	8c 9f       	mul	r24, r28
    4f68:	f0 01       	movw	r30, r0
    4f6a:	8d 9f       	mul	r24, r29
    4f6c:	f0 0d       	add	r31, r0
    4f6e:	11 24       	eor	r1, r1
    4f70:	ec 56       	subi	r30, 0x6C	; 108
    4f72:	fc 4d       	sbci	r31, 0xDC	; 220
    4f74:	e0 82       	st	Z, r14
    4f76:	f1 82       	std	Z+1, r15	; 0x01
    4f78:	82 82       	std	Z+2, r8	; 0x02
    4f7a:	93 82       	std	Z+3, r9	; 0x03
    4f7c:	a4 82       	std	Z+4, r10	; 0x04
    4f7e:	b5 82       	std	Z+5, r11	; 0x05
    4f80:	86 82       	std	Z+6, r8	; 0x06
    4f82:	97 82       	std	Z+7, r9	; 0x07
    4f84:	a0 86       	std	Z+8, r10	; 0x08
    4f86:	b1 86       	std	Z+9, r11	; 0x09
    4f88:	42 87       	std	Z+10, r20	; 0x0a
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	0e c0       	rjmp	.+28     	; 0x4faa <eventAdd+0x9c>
    4f8e:	01 96       	adiw	r24, 0x01	; 1
    4f90:	3b 96       	adiw	r30, 0x0b	; 11
    4f92:	ea 17       	cp	r30, r26
    4f94:	fb 07       	cpc	r31, r27
    4f96:	d1 f6       	brne	.-76     	; 0x4f4c <eventAdd+0x3e>
    4f98:	8e e0       	ldi	r24, 0x0E	; 14
    4f9a:	9c e0       	ldi	r25, 0x0C	; 12
    4f9c:	9f 93       	push	r25
    4f9e:	8f 93       	push	r24
    4fa0:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    4fa4:	0f 90       	pop	r0
    4fa6:	0f 90       	pop	r0
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	1f 91       	pop	r17
    4fb0:	0f 91       	pop	r16
    4fb2:	ff 90       	pop	r15
    4fb4:	ef 90       	pop	r14
    4fb6:	bf 90       	pop	r11
    4fb8:	af 90       	pop	r10
    4fba:	9f 90       	pop	r9
    4fbc:	8f 90       	pop	r8
    4fbe:	08 95       	ret

00004fc0 <eventRemove>:
    4fc0:	0f 93       	push	r16
    4fc2:	1f 93       	push	r17
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	e4 e9       	ldi	r30, 0x94	; 148
    4fca:	f3 e2       	ldi	r31, 0x23	; 35
    4fcc:	ae e9       	ldi	r26, 0x9E	; 158
    4fce:	b3 e2       	ldi	r27, 0x23	; 35
    4fd0:	40 e7       	ldi	r20, 0x70	; 112
    4fd2:	54 e2       	ldi	r21, 0x24	; 36
    4fd4:	60 e0       	ldi	r22, 0x00	; 0
    4fd6:	20 81       	ld	r18, Z
    4fd8:	31 81       	ldd	r19, Z+1	; 0x01
    4fda:	28 17       	cp	r18, r24
    4fdc:	39 07       	cpc	r19, r25
    4fde:	a1 f4       	brne	.+40     	; 0x5008 <eventRemove+0x48>
    4fe0:	02 81       	ldd	r16, Z+2	; 0x02
    4fe2:	13 81       	ldd	r17, Z+3	; 0x03
    4fe4:	24 81       	ldd	r18, Z+4	; 0x04
    4fe6:	35 81       	ldd	r19, Z+5	; 0x05
    4fe8:	01 2b       	or	r16, r17
    4fea:	02 2b       	or	r16, r18
    4fec:	03 2b       	or	r16, r19
    4fee:	61 f0       	breq	.+24     	; 0x5008 <eventRemove+0x48>
    4ff0:	10 82       	st	Z, r1
    4ff2:	11 82       	std	Z+1, r1	; 0x01
    4ff4:	12 82       	std	Z+2, r1	; 0x02
    4ff6:	13 82       	std	Z+3, r1	; 0x03
    4ff8:	14 82       	std	Z+4, r1	; 0x04
    4ffa:	15 82       	std	Z+5, r1	; 0x05
    4ffc:	16 82       	std	Z+6, r1	; 0x06
    4ffe:	17 82       	std	Z+7, r1	; 0x07
    5000:	10 86       	std	Z+8, r1	; 0x08
    5002:	11 86       	std	Z+9, r1	; 0x09
    5004:	1c 92       	st	X, r1
    5006:	6f 5f       	subi	r22, 0xFF	; 255
    5008:	3b 96       	adiw	r30, 0x0b	; 11
    500a:	1b 96       	adiw	r26, 0x0b	; 11
    500c:	e4 17       	cp	r30, r20
    500e:	f5 07       	cpc	r31, r21
    5010:	11 f7       	brne	.-60     	; 0x4fd6 <eventRemove+0x16>
    5012:	86 2f       	mov	r24, r22
    5014:	df 91       	pop	r29
    5016:	cf 91       	pop	r28
    5018:	1f 91       	pop	r17
    501a:	0f 91       	pop	r16
    501c:	08 95       	ret

0000501e <eventFind>:
    501e:	20 91 94 23 	lds	r18, 0x2394
    5022:	30 91 95 23 	lds	r19, 0x2395
    5026:	28 17       	cp	r18, r24
    5028:	39 07       	cpc	r19, r25
    502a:	69 f0       	breq	.+26     	; 0x5046 <eventFind+0x28>
    502c:	ef e9       	ldi	r30, 0x9F	; 159
    502e:	f3 e2       	ldi	r31, 0x23	; 35
    5030:	60 e7       	ldi	r22, 0x70	; 112
    5032:	74 e2       	ldi	r23, 0x24	; 36
    5034:	21 e0       	ldi	r18, 0x01	; 1
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	d9 01       	movw	r26, r18
    503a:	40 81       	ld	r20, Z
    503c:	51 81       	ldd	r21, Z+1	; 0x01
    503e:	48 17       	cp	r20, r24
    5040:	59 07       	cpc	r21, r25
    5042:	61 f4       	brne	.+24     	; 0x505c <eventFind+0x3e>
    5044:	02 c0       	rjmp	.+4      	; 0x504a <eventFind+0x2c>
    5046:	a0 e0       	ldi	r26, 0x00	; 0
    5048:	b0 e0       	ldi	r27, 0x00	; 0
    504a:	2b e0       	ldi	r18, 0x0B	; 11
    504c:	2a 9f       	mul	r18, r26
    504e:	c0 01       	movw	r24, r0
    5050:	2b 9f       	mul	r18, r27
    5052:	90 0d       	add	r25, r0
    5054:	11 24       	eor	r1, r1
    5056:	8c 56       	subi	r24, 0x6C	; 108
    5058:	9c 4d       	sbci	r25, 0xDC	; 220
    505a:	08 95       	ret
    505c:	2f 5f       	subi	r18, 0xFF	; 255
    505e:	3f 4f       	sbci	r19, 0xFF	; 255
    5060:	3b 96       	adiw	r30, 0x0b	; 11
    5062:	e6 17       	cp	r30, r22
    5064:	f7 07       	cpc	r31, r23
    5066:	41 f7       	brne	.-48     	; 0x5038 <eventFind+0x1a>
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	08 95       	ret

0000506e <eventTimerRestart>:
    506e:	d7 df       	rcall	.-82     	; 0x501e <eventFind>
    5070:	00 97       	sbiw	r24, 0x00	; 0
    5072:	59 f0       	breq	.+22     	; 0x508a <eventTimerRestart+0x1c>
    5074:	fc 01       	movw	r30, r24
    5076:	42 81       	ldd	r20, Z+2	; 0x02
    5078:	53 81       	ldd	r21, Z+3	; 0x03
    507a:	64 81       	ldd	r22, Z+4	; 0x04
    507c:	75 81       	ldd	r23, Z+5	; 0x05
    507e:	46 83       	std	Z+6, r20	; 0x06
    5080:	57 83       	std	Z+7, r21	; 0x07
    5082:	60 87       	std	Z+8, r22	; 0x08
    5084:	71 87       	std	Z+9, r23	; 0x09
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	08 95       	ret
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	08 95       	ret

0000508e <eventTimerTrigger>:
    508e:	c7 df       	rcall	.-114    	; 0x501e <eventFind>
    5090:	00 97       	sbiw	r24, 0x00	; 0
    5092:	39 f0       	breq	.+14     	; 0x50a2 <eventTimerTrigger+0x14>
    5094:	fc 01       	movw	r30, r24
    5096:	16 82       	std	Z+6, r1	; 0x06
    5098:	17 82       	std	Z+7, r1	; 0x07
    509a:	10 86       	std	Z+8, r1	; 0x08
    509c:	11 86       	std	Z+9, r1	; 0x09
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	08 95       	ret
    50a2:	80 e0       	ldi	r24, 0x00	; 0
    50a4:	08 95       	ret

000050a6 <eventFindCount>:
    50a6:	e4 e9       	ldi	r30, 0x94	; 148
    50a8:	f3 e2       	ldi	r31, 0x23	; 35
    50aa:	40 e7       	ldi	r20, 0x70	; 112
    50ac:	54 e2       	ldi	r21, 0x24	; 36
    50ae:	60 e0       	ldi	r22, 0x00	; 0
    50b0:	20 81       	ld	r18, Z
    50b2:	31 81       	ldd	r19, Z+1	; 0x01
    50b4:	28 17       	cp	r18, r24
    50b6:	39 07       	cpc	r19, r25
    50b8:	09 f4       	brne	.+2      	; 0x50bc <eventFindCount+0x16>
    50ba:	6f 5f       	subi	r22, 0xFF	; 255
    50bc:	3b 96       	adiw	r30, 0x0b	; 11
    50be:	e4 17       	cp	r30, r20
    50c0:	f5 07       	cpc	r31, r21
    50c2:	b1 f7       	brne	.-20     	; 0x50b0 <eventFindCount+0xa>
    50c4:	86 2f       	mov	r24, r22
    50c6:	08 95       	ret

000050c8 <eventGetInterval>:
    50c8:	aa df       	rcall	.-172    	; 0x501e <eventFind>
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	31 f0       	breq	.+12     	; 0x50da <eventGetInterval+0x12>
    50ce:	fc 01       	movw	r30, r24
    50d0:	62 81       	ldd	r22, Z+2	; 0x02
    50d2:	73 81       	ldd	r23, Z+3	; 0x03
    50d4:	84 81       	ldd	r24, Z+4	; 0x04
    50d6:	95 81       	ldd	r25, Z+5	; 0x05
    50d8:	08 95       	ret
    50da:	60 e0       	ldi	r22, 0x00	; 0
    50dc:	70 e0       	ldi	r23, 0x00	; 0
    50de:	cb 01       	movw	r24, r22
    50e0:	08 95       	ret

000050e2 <eventSetTimeleft>:
    50e2:	cf 92       	push	r12
    50e4:	df 92       	push	r13
    50e6:	ef 92       	push	r14
    50e8:	ff 92       	push	r15
    50ea:	6a 01       	movw	r12, r20
    50ec:	7b 01       	movw	r14, r22
    50ee:	97 df       	rcall	.-210    	; 0x501e <eventFind>
    50f0:	00 97       	sbiw	r24, 0x00	; 0
    50f2:	39 f0       	breq	.+14     	; 0x5102 <eventSetTimeleft+0x20>
    50f4:	fc 01       	movw	r30, r24
    50f6:	c6 82       	std	Z+6, r12	; 0x06
    50f8:	d7 82       	std	Z+7, r13	; 0x07
    50fa:	e0 86       	std	Z+8, r14	; 0x08
    50fc:	f1 86       	std	Z+9, r15	; 0x09
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	01 c0       	rjmp	.+2      	; 0x5104 <eventSetTimeleft+0x22>
    5102:	80 e0       	ldi	r24, 0x00	; 0
    5104:	ff 90       	pop	r15
    5106:	ef 90       	pop	r14
    5108:	df 90       	pop	r13
    510a:	cf 90       	pop	r12
    510c:	08 95       	ret

0000510e <eventControllerLoop>:


// Timer Event Controller
void eventControllerLoop(void) 
{
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	cd b7       	in	r28, 0x3d	; 61
    5114:	de b7       	in	r29, 0x3e	; 62
    5116:	29 97       	sbiw	r28, 0x09	; 9
    5118:	cd bf       	out	0x3d, r28	; 61
    511a:	de bf       	out	0x3e, r29	; 62
	//uint16_t cpu_on_sample = 0, cpu_off_sample = 0;
	uint32_t cpu_on_sum = 0,	cpu_off_sum = 0;
	uint32_t cpu_total_sample = 0, cpu_total_sum = 0;
	uint16_t timer_temp_sample = 0;
	uint8_t second_processed = hardware.time.second, i;
    511c:	90 90 1e 20 	lds	r9, 0x201E
	
	TC_CPU.PER = 65535;
    5120:	e0 e0       	ldi	r30, 0x00	; 0
    5122:	f9 e0       	ldi	r31, 0x09	; 9
    5124:	8f ef       	ldi	r24, 0xFF	; 255
    5126:	9f ef       	ldi	r25, 0xFF	; 255
    5128:	86 a3       	std	Z+38, r24	; 0x26
    512a:	97 a3       	std	Z+39, r25	; 0x27
	TC_CPU.CCA = TC_CCA_INT_TIME;
    512c:	8f e0       	ldi	r24, 0x0F	; 15
    512e:	97 e2       	ldi	r25, 0x27	; 39
    5130:	80 a7       	std	Z+40, r24	; 0x28
    5132:	91 a7       	std	Z+41, r25	; 0x29
	TC_CPU.CTRLA = TC_CLKSEL_DIV64_gc;
    5134:	85 e0       	ldi	r24, 0x05	; 5
    5136:	80 83       	st	Z, r24
	TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    5138:	88 e0       	ldi	r24, 0x08	; 8
    513a:	81 87       	std	Z+9, r24	; 0x09
	TC_CPU.INTCTRLB = TC_CCAINTLVL_LO_gc;
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	87 83       	std	Z+7, r24	; 0x07
	
	// Initialise
	set_sleep_mode(SLEEP_MODE_IDLE);
    5140:	e8 e4       	ldi	r30, 0x48	; 72
    5142:	f0 e0       	ldi	r31, 0x00	; 0
    5144:	80 81       	ld	r24, Z
    5146:	81 7f       	andi	r24, 0xF1	; 241
    5148:	80 83       	st	Z, r24
	println("Application Started!");
    514a:	83 ef       	ldi	r24, 0xF3	; 243
    514c:	9b e0       	ldi	r25, 0x0B	; 11
    514e:	9f 93       	push	r25
    5150:	8f 93       	push	r24
    5152:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <printf_P>
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
// Timer Event Controller
void eventControllerLoop(void) 
{
	//uint16_t cpu_on_sample = 0, cpu_off_sample = 0;
	uint32_t cpu_on_sum = 0,	cpu_off_sum = 0;
	uint32_t cpu_total_sample = 0, cpu_total_sum = 0;
    515a:	41 2c       	mov	r4, r1
    515c:	51 2c       	mov	r5, r1
    515e:	32 01       	movw	r6, r4

// Timer Event Controller
void eventControllerLoop(void) 
{
	//uint16_t cpu_on_sample = 0, cpu_off_sample = 0;
	uint32_t cpu_on_sum = 0,	cpu_off_sum = 0;
    5160:	19 82       	std	Y+1, r1	; 0x01
    5162:	1a 82       	std	Y+2, r1	; 0x02
    5164:	1b 82       	std	Y+3, r1	; 0x03
    5166:	1c 82       	std	Y+4, r1	; 0x04
    5168:	c1 2c       	mov	r12, r1
    516a:	d1 2c       	mov	r13, r1
    516c:	76 01       	movw	r14, r12
	
	while(1) 
	{
		// Read CPU off value
		timer_temp_sample = TC_CPU.CNT + 1; // raw timer unit
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    516e:	68 94       	set
    5170:	88 24       	eor	r8, r8
    5172:	83 f8       	bld	r8, 3
    5174:	89 86       	std	Y+9, r8	; 0x09
			cpu_off_sum = 0;
		}
		
		//Sleep till interrupt
		WDT_RESET();
		sleep_enable();
    5176:	0f 2e       	mov	r0, r31
    5178:	f8 e4       	ldi	r31, 0x48	; 72
    517a:	2f 2e       	mov	r2, r31
    517c:	31 2c       	mov	r3, r1
    517e:	f0 2d       	mov	r31, r0
	println("Application Started!");
	
	while(1) 
	{
		// Read CPU off value
		timer_temp_sample = TC_CPU.CNT + 1; // raw timer unit
    5180:	60 91 20 09 	lds	r22, 0x0920
    5184:	70 91 21 09 	lds	r23, 0x0921
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    5188:	29 85       	ldd	r18, Y+9	; 0x09
    518a:	20 93 09 09 	sts	0x0909, r18
	println("Application Started!");
	
	while(1) 
	{
		// Read CPU off value
		timer_temp_sample = TC_CPU.CNT + 1; // raw timer unit
    518e:	6f 5f       	subi	r22, 0xFF	; 255
    5190:	7f 4f       	sbci	r23, 0xFF	; 255
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
		cpu_off_sum += (uint32_t)timer_temp_sample; // raw timer unit
    5192:	cb 01       	movw	r24, r22
    5194:	a0 e0       	ldi	r26, 0x00	; 0
    5196:	b0 e0       	ldi	r27, 0x00	; 0
    5198:	29 81       	ldd	r18, Y+1	; 0x01
    519a:	3a 81       	ldd	r19, Y+2	; 0x02
    519c:	4b 81       	ldd	r20, Y+3	; 0x03
    519e:	5c 81       	ldd	r21, Y+4	; 0x04
    51a0:	28 0f       	add	r18, r24
    51a2:	39 1f       	adc	r19, r25
    51a4:	4a 1f       	adc	r20, r26
    51a6:	5b 1f       	adc	r21, r27
    51a8:	29 83       	std	Y+1, r18	; 0x01
    51aa:	3a 83       	std	Y+2, r19	; 0x02
    51ac:	4b 83       	std	Y+3, r20	; 0x03
    51ae:	5c 83       	std	Y+4, r21	; 0x04
		cpu_total_sample += (uint32_t)timer_temp_sample; // raw timer unit
    51b0:	bc 01       	movw	r22, r24
    51b2:	cd 01       	movw	r24, r26
    51b4:	6c 0d       	add	r22, r12
    51b6:	7d 1d       	adc	r23, r13
    51b8:	8e 1d       	adc	r24, r14
    51ba:	9f 1d       	adc	r25, r15
		CONVERT_TO_MS(cpu_total_sample); // convert to time per 1 ms
    51bc:	24 ef       	ldi	r18, 0xF4	; 244
    51be:	31 e0       	ldi	r19, 0x01	; 1
    51c0:	40 e0       	ldi	r20, 0x00	; 0
    51c2:	50 e0       	ldi	r21, 0x00	; 0
    51c4:	0e 94 6f 32 	call	0x64de	; 0x64de <__udivmodsi4>
    51c8:	69 01       	movw	r12, r18
    51ca:	7a 01       	movw	r14, r20
    51cc:	04 e9       	ldi	r16, 0x94	; 148
    51ce:	13 e2       	ldi	r17, 0x23	; 35
    51d0:	0f 2e       	mov	r0, r31
    51d2:	fe e9       	ldi	r31, 0x9E	; 158
    51d4:	af 2e       	mov	r10, r31
    51d6:	f3 e2       	ldi	r31, 0x23	; 35
    51d8:	bf 2e       	mov	r11, r31
    51da:	f0 2d       	mov	r31, r0
    51dc:	98 01       	movw	r18, r16
{
	//Loop through all events
	for (uint8_t i = 0; i < EVENT_MAX; i++)
	{
		//Check if event is valid
		if (events[i].interval == 0) continue;
    51de:	d8 01       	movw	r26, r16
    51e0:	12 96       	adiw	r26, 0x02	; 2
    51e2:	4d 91       	ld	r20, X+
    51e4:	5d 91       	ld	r21, X+
    51e6:	6d 91       	ld	r22, X+
    51e8:	7c 91       	ld	r23, X
    51ea:	15 97       	sbiw	r26, 0x05	; 5
    51ec:	41 15       	cp	r20, r1
    51ee:	51 05       	cpc	r21, r1
    51f0:	61 05       	cpc	r22, r1
    51f2:	71 05       	cpc	r23, r1
    51f4:	09 f4       	brne	.+2      	; 0x51f8 <eventControllerLoop+0xea>
    51f6:	44 c0       	rjmp	.+136    	; 0x5280 <eventControllerLoop+0x172>
		
		if (events[i].timeLeft <= cpu_total_sample)
    51f8:	16 96       	adiw	r26, 0x06	; 6
    51fa:	8d 91       	ld	r24, X+
    51fc:	9d 91       	ld	r25, X+
    51fe:	0d 90       	ld	r0, X+
    5200:	bc 91       	ld	r27, X
    5202:	a0 2d       	mov	r26, r0
    5204:	c8 16       	cp	r12, r24
    5206:	d9 06       	cpc	r13, r25
    5208:	ea 06       	cpc	r14, r26
    520a:	fb 06       	cpc	r15, r27
    520c:	80 f1       	brcs	.+96     	; 0x526e <eventControllerLoop+0x160>
    520e:	d5 01       	movw	r26, r10
		{
			//Delete event if finished
			if (events[i].repeation == 1)
    5210:	8c 91       	ld	r24, X
    5212:	81 30       	cpi	r24, 0x01	; 1
    5214:	71 f4       	brne	.+28     	; 0x5232 <eventControllerLoop+0x124>
			{
				events[i].funcPtr = 0;
    5216:	f8 01       	movw	r30, r16
    5218:	10 82       	st	Z, r1
    521a:	11 82       	std	Z+1, r1	; 0x01
				events[i].interval = 0;
    521c:	12 82       	std	Z+2, r1	; 0x02
    521e:	13 82       	std	Z+3, r1	; 0x03
    5220:	14 82       	std	Z+4, r1	; 0x04
    5222:	15 82       	std	Z+5, r1	; 0x05
				events[i].timeLeft = 0;
    5224:	16 82       	std	Z+6, r1	; 0x06
    5226:	17 82       	std	Z+7, r1	; 0x07
    5228:	10 86       	std	Z+8, r1	; 0x08
    522a:	11 86       	std	Z+9, r1	; 0x09
				events[i].repeation = 0;
    522c:	d5 01       	movw	r26, r10
    522e:	1c 92       	st	X, r1
    5230:	17 c0       	rjmp	.+46     	; 0x5260 <eventControllerLoop+0x152>
			}
			else 
			{
				if (events[i].repeation > 1) 
    5232:	82 30       	cpi	r24, 0x02	; 2
    5234:	14 f0       	brlt	.+4      	; 0x523a <eventControllerLoop+0x12c>
				{
					events[i].repeation--;
    5236:	81 50       	subi	r24, 0x01	; 1
    5238:	8c 93       	st	X, r24
    523a:	f9 01       	movw	r30, r18
    523c:	86 81       	ldd	r24, Z+6	; 0x06
    523e:	97 81       	ldd	r25, Z+7	; 0x07
    5240:	a0 85       	ldd	r26, Z+8	; 0x08
    5242:	b1 85       	ldd	r27, Z+9	; 0x09
				}
				
				//Recalculate interval time
				do {
					events[i].timeLeft += events[i].interval;		// inefficient workaround for underflow bug...
    5244:	84 0f       	add	r24, r20
    5246:	95 1f       	adc	r25, r21
    5248:	a6 1f       	adc	r26, r22
    524a:	b7 1f       	adc	r27, r23
				} while (events[i].timeLeft < cpu_total_sample);
    524c:	8c 15       	cp	r24, r12
    524e:	9d 05       	cpc	r25, r13
    5250:	ae 05       	cpc	r26, r14
    5252:	bf 05       	cpc	r27, r15
    5254:	b8 f3       	brcs	.-18     	; 0x5244 <eventControllerLoop+0x136>
    5256:	9f 01       	movw	r18, r30
    5258:	86 83       	std	Z+6, r24	; 0x06
    525a:	97 83       	std	Z+7, r25	; 0x07
    525c:	a0 87       	std	Z+8, r26	; 0x08
    525e:	b1 87       	std	Z+9, r27	; 0x09
			//Perform function and count CPU-time
			#ifdef MEASURE_EVENTS_CPU
			uint16_t temp = TC_CPU.CNT;
			#endif
			
			WDT_RESET();
    5260:	a8 95       	wdr
			events[i].funcPtr();
    5262:	d9 01       	movw	r26, r18
    5264:	ed 91       	ld	r30, X+
    5266:	fc 91       	ld	r31, X
    5268:	19 95       	eicall
			WDT_RESET();
    526a:	a8 95       	wdr
    526c:	09 c0       	rjmp	.+18     	; 0x5280 <eventControllerLoop+0x172>
			#ifdef MEASURE_EVENTS_CPU
			events[i].cputime_temp += TC_CPU.CNT - temp
			#endif
		}
		else {
			events[i].timeLeft -= cpu_total_sample;
    526e:	8c 19       	sub	r24, r12
    5270:	9d 09       	sbc	r25, r13
    5272:	ae 09       	sbc	r26, r14
    5274:	bf 09       	sbc	r27, r15
    5276:	f8 01       	movw	r30, r16
    5278:	86 83       	std	Z+6, r24	; 0x06
    527a:	97 83       	std	Z+7, r25	; 0x07
    527c:	a0 87       	std	Z+8, r26	; 0x08
    527e:	b1 87       	std	Z+9, r27	; 0x09
    5280:	05 5f       	subi	r16, 0xF5	; 245
    5282:	1f 4f       	sbci	r17, 0xFF	; 255
    5284:	fb e0       	ldi	r31, 0x0B	; 11
    5286:	af 0e       	add	r10, r31
    5288:	b1 1c       	adc	r11, r1


static void eventsPerform(TimeEvent_t cpu_total_sample)
{
	//Loop through all events
	for (uint8_t i = 0; i < EVENT_MAX; i++)
    528a:	24 e2       	ldi	r18, 0x24	; 36
    528c:	00 37       	cpi	r16, 0x70	; 112
    528e:	12 07       	cpc	r17, r18
    5290:	09 f0       	breq	.+2      	; 0x5294 <eventControllerLoop+0x186>
    5292:	a4 cf       	rjmp	.-184    	; 0x51dc <eventControllerLoop+0xce>
		
		// Perform all events
		eventsPerform(cpu_total_sample);
		
		// Read CPU on value
		timer_temp_sample = TC_CPU.CNT + 1; // raw timer unit
    5294:	60 91 20 09 	lds	r22, 0x0920
    5298:	70 91 21 09 	lds	r23, 0x0921
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    529c:	80 92 09 09 	sts	0x0909, r8
		
		// Perform all events
		eventsPerform(cpu_total_sample);
		
		// Read CPU on value
		timer_temp_sample = TC_CPU.CNT + 1; // raw timer unit
    52a0:	6f 5f       	subi	r22, 0xFF	; 255
    52a2:	7f 4f       	sbci	r23, 0xFF	; 255
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
		cpu_on_sum += (uint32_t)timer_temp_sample; // raw timer unit
    52a4:	6b 01       	movw	r12, r22
    52a6:	e1 2c       	mov	r14, r1
    52a8:	f1 2c       	mov	r15, r1
    52aa:	4c 0c       	add	r4, r12
    52ac:	5d 1c       	adc	r5, r13
    52ae:	6e 1c       	adc	r6, r14
    52b0:	7f 1c       	adc	r7, r15
		cpu_total_sample = (uint32_t)timer_temp_sample;
		
		i = hardware.time.second;
    52b2:	b0 90 1e 20 	lds	r11, 0x201E
		if (second_processed != i) 
    52b6:	9b 14       	cp	r9, r11
    52b8:	09 f4       	brne	.+2      	; 0x52bc <eventControllerLoop+0x1ae>
    52ba:	59 c0       	rjmp	.+178    	; 0x536e <eventControllerLoop+0x260>
				events[i].cputime_temp = 0;
				CONVERT_TO_MS(events[i].cputime);
			}
			#endif
			
			cpu_total_sum = cpu_off_sum + cpu_on_sum; // raw timer unit
    52bc:	69 81       	ldd	r22, Y+1	; 0x01
    52be:	7a 81       	ldd	r23, Y+2	; 0x02
    52c0:	8b 81       	ldd	r24, Y+3	; 0x03
    52c2:	9c 81       	ldd	r25, Y+4	; 0x04
    52c4:	64 0d       	add	r22, r4
    52c6:	75 1d       	adc	r23, r5
    52c8:	86 1d       	adc	r24, r6
    52ca:	97 1d       	adc	r25, r7
			
			// Convert to units of 1 ms
			CONVERT_TO_MS(cpu_total_sum);
    52cc:	24 ef       	ldi	r18, 0xF4	; 244
    52ce:	31 e0       	ldi	r19, 0x01	; 1
    52d0:	40 e0       	ldi	r20, 0x00	; 0
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	0e 94 6f 32 	call	0x64de	; 0x64de <__udivmodsi4>
    52d8:	2d 83       	std	Y+5, r18	; 0x05
    52da:	3e 83       	std	Y+6, r19	; 0x06
    52dc:	4f 83       	std	Y+7, r20	; 0x07
    52de:	58 87       	std	Y+8, r21	; 0x08
			CONVERT_TO_MS(cpu_on_sum);
    52e0:	c3 01       	movw	r24, r6
    52e2:	b2 01       	movw	r22, r4
    52e4:	24 ef       	ldi	r18, 0xF4	; 244
    52e6:	31 e0       	ldi	r19, 0x01	; 1
    52e8:	40 e0       	ldi	r20, 0x00	; 0
    52ea:	50 e0       	ldi	r21, 0x00	; 0
    52ec:	0e 94 6f 32 	call	0x64de	; 0x64de <__udivmodsi4>
    52f0:	29 01       	movw	r4, r18
    52f2:	3a 01       	movw	r6, r20
			CONVERT_TO_MS(cpu_off_sum);
			
			// Save measured data
			cpu->total = cpu_total_sum;
    52f4:	00 91 92 23 	lds	r16, 0x2392
    52f8:	10 91 93 23 	lds	r17, 0x2393
    52fc:	ed 81       	ldd	r30, Y+5	; 0x05
    52fe:	fe 81       	ldd	r31, Y+6	; 0x06
    5300:	d8 01       	movw	r26, r16
    5302:	ed 93       	st	X+, r30
    5304:	fc 93       	st	X, r31
    5306:	11 97       	sbiw	r26, 0x01	; 1
			cpu->on = cpu_on_sum;
    5308:	12 96       	adiw	r26, 0x02	; 2
    530a:	2d 93       	st	X+, r18
    530c:	3c 93       	st	X, r19
    530e:	13 97       	sbiw	r26, 0x03	; 3
			cpu_total_sum = cpu_off_sum + cpu_on_sum; // raw timer unit
			
			// Convert to units of 1 ms
			CONVERT_TO_MS(cpu_total_sum);
			CONVERT_TO_MS(cpu_on_sum);
			CONVERT_TO_MS(cpu_off_sum);
    5310:	69 81       	ldd	r22, Y+1	; 0x01
    5312:	7a 81       	ldd	r23, Y+2	; 0x02
    5314:	8b 81       	ldd	r24, Y+3	; 0x03
    5316:	9c 81       	ldd	r25, Y+4	; 0x04
    5318:	24 ef       	ldi	r18, 0xF4	; 244
    531a:	31 e0       	ldi	r19, 0x01	; 1
    531c:	40 e0       	ldi	r20, 0x00	; 0
    531e:	50 e0       	ldi	r21, 0x00	; 0
    5320:	0e 94 6f 32 	call	0x64de	; 0x64de <__udivmodsi4>
			
			// Save measured data
			cpu->total = cpu_total_sum;
			cpu->on = cpu_on_sum;
			cpu->off = cpu_off_sum;
    5324:	d8 01       	movw	r26, r16
    5326:	14 96       	adiw	r26, 0x04	; 4
    5328:	2d 93       	st	X+, r18
    532a:	3c 93       	st	X, r19
    532c:	15 97       	sbiw	r26, 0x05	; 5
			
			// Calc CPU usage in percent
			cpu->usage = (float) 100 * cpu_on_sum / cpu_total_sum;
    532e:	c3 01       	movw	r24, r6
    5330:	b2 01       	movw	r22, r4
    5332:	62 d4       	rcall	.+2244   	; 0x5bf8 <__floatunsisf>
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	48 ec       	ldi	r20, 0xC8	; 200
    533a:	52 e4       	ldi	r21, 0x42	; 66
    533c:	eb d4       	rcall	.+2518   	; 0x5d14 <__mulsf3>
    533e:	2b 01       	movw	r4, r22
    5340:	3c 01       	movw	r6, r24
    5342:	6d 81       	ldd	r22, Y+5	; 0x05
    5344:	7e 81       	ldd	r23, Y+6	; 0x06
    5346:	8f 81       	ldd	r24, Y+7	; 0x07
    5348:	98 85       	ldd	r25, Y+8	; 0x08
    534a:	56 d4       	rcall	.+2220   	; 0x5bf8 <__floatunsisf>
    534c:	9b 01       	movw	r18, r22
    534e:	ac 01       	movw	r20, r24
    5350:	c3 01       	movw	r24, r6
    5352:	b2 01       	movw	r22, r4
    5354:	b8 d3       	rcall	.+1904   	; 0x5ac6 <__divsf3>
    5356:	f8 01       	movw	r30, r16
    5358:	66 83       	std	Z+6, r22	; 0x06
    535a:	77 83       	std	Z+7, r23	; 0x07
    535c:	80 87       	std	Z+8, r24	; 0x08
    535e:	91 87       	std	Z+9, r25	; 0x09
			
			// Reset counters
			//cpu_total_sum = 0; // not necessary
			cpu_on_sum = 0;
			cpu_off_sum = 0;
    5360:	19 82       	std	Y+1, r1	; 0x01
    5362:	1a 82       	std	Y+2, r1	; 0x02
    5364:	1b 82       	std	Y+3, r1	; 0x03
    5366:	1c 82       	std	Y+4, r1	; 0x04
			// Calc CPU usage in percent
			cpu->usage = (float) 100 * cpu_on_sum / cpu_total_sum;
			
			// Reset counters
			//cpu_total_sum = 0; // not necessary
			cpu_on_sum = 0;
    5368:	41 2c       	mov	r4, r1
    536a:	51 2c       	mov	r5, r1
    536c:	32 01       	movw	r6, r4
			cpu_off_sum = 0;
		}
		
		//Sleep till interrupt
		WDT_RESET();
    536e:	a8 95       	wdr
		sleep_enable();
    5370:	d1 01       	movw	r26, r2
    5372:	8c 91       	ld	r24, X
    5374:	81 60       	ori	r24, 0x01	; 1
    5376:	8c 93       	st	X, r24
		sei();
    5378:	78 94       	sei
		sleep_cpu();
    537a:	88 95       	sleep
		sleep_disable();
    537c:	f1 01       	movw	r30, r2
    537e:	80 81       	ld	r24, Z
    5380:	8e 7f       	andi	r24, 0xFE	; 254
    5382:	80 83       	st	Z, r24
		WDT_RESET();
    5384:	a8 95       	wdr
	}
    5386:	9b 2c       	mov	r9, r11
    5388:	fb ce       	rjmp	.-522    	; 0x5180 <eventControllerLoop+0x72>

0000538a <__vector_79>:
}


//EMPTY_INTERRUPT(TCD0_CCA_vect)
ISR(TCD0_CCA_vect)
{
    538a:	1f 92       	push	r1
    538c:	0f 92       	push	r0
    538e:	0f b6       	in	r0, 0x3f	; 63
    5390:	0f 92       	push	r0
    5392:	11 24       	eor	r1, r1
    5394:	08 b6       	in	r0, 0x38	; 56
    5396:	0f 92       	push	r0
    5398:	18 be       	out	0x38, r1	; 56
    539a:	09 b6       	in	r0, 0x39	; 57
    539c:	0f 92       	push	r0
    539e:	19 be       	out	0x39, r1	; 57
    53a0:	0b b6       	in	r0, 0x3b	; 59
    53a2:	0f 92       	push	r0
    53a4:	1b be       	out	0x3b, r1	; 59
    53a6:	2f 93       	push	r18
    53a8:	3f 93       	push	r19
    53aa:	4f 93       	push	r20
    53ac:	5f 93       	push	r21
    53ae:	6f 93       	push	r22
    53b0:	7f 93       	push	r23
    53b2:	8f 93       	push	r24
    53b4:	9f 93       	push	r25
    53b6:	af 93       	push	r26
    53b8:	bf 93       	push	r27
    53ba:	ef 93       	push	r30
    53bc:	ff 93       	push	r31
	CDC_Device_USBTask(&USBSerialClass);
    53be:	83 ec       	ldi	r24, 0xC3	; 195
    53c0:	90 e2       	ldi	r25, 0x20	; 32
    53c2:	0e 94 28 0b 	call	0x1650	; 0x1650 <CDC_Device_USBTask>
	USB_USBTask();
    53c6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <USB_USBTask>
	freeRam();
    53ca:	0e 94 24 1c 	call	0x3848	; 0x3848 <freeRam>
}
    53ce:	ff 91       	pop	r31
    53d0:	ef 91       	pop	r30
    53d2:	bf 91       	pop	r27
    53d4:	af 91       	pop	r26
    53d6:	9f 91       	pop	r25
    53d8:	8f 91       	pop	r24
    53da:	7f 91       	pop	r23
    53dc:	6f 91       	pop	r22
    53de:	5f 91       	pop	r21
    53e0:	4f 91       	pop	r20
    53e2:	3f 91       	pop	r19
    53e4:	2f 91       	pop	r18
    53e6:	0f 90       	pop	r0
    53e8:	0b be       	out	0x3b, r0	; 59
    53ea:	0f 90       	pop	r0
    53ec:	09 be       	out	0x39, r0	; 57
    53ee:	0f 90       	pop	r0
    53f0:	08 be       	out	0x38, r0	; 56
    53f2:	0f 90       	pop	r0
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	0f 90       	pop	r0
    53f8:	1f 90       	pop	r1
    53fa:	18 95       	reti

000053fc <twiInterruptHandler>:
	}
}


static void twiInterruptHandler()
{
    53fc:	cf 93       	push	r28
    53fe:	df 93       	push	r29
	if (twi_driver->isMaster)
    5400:	e0 91 70 24 	lds	r30, 0x2470
    5404:	f0 91 71 24 	lds	r31, 0x2471
    5408:	84 81       	ldd	r24, Z+4	; 0x04
    540a:	88 23       	and	r24, r24
    540c:	09 f4       	brne	.+2      	; 0x5410 <twiInterruptHandler+0x14>
    540e:	b6 c0       	rjmp	.+364    	; 0x557c <twiInterruptHandler+0x180>
	{
		uint8_t status = twi_driver->twi->MASTER.STATUS;
    5410:	a0 81       	ld	r26, Z
    5412:	b1 81       	ldd	r27, Z+1	; 0x01
    5414:	14 96       	adiw	r26, 0x04	; 4
    5416:	8c 91       	ld	r24, X
    5418:	14 97       	sbiw	r26, 0x04	; 4
	
		if (status & TWI_MASTER_BUSERR_bm) {
    541a:	82 ff       	sbrs	r24, 2
    541c:	0c c0       	rjmp	.+24     	; 0x5436 <twiInterruptHandler+0x3a>
			twi_driver->result = TWIM_RESULT_BUS_ERROR;
    541e:	ef 01       	movw	r28, r30
    5420:	c8 5b       	subi	r28, 0xB8	; 184
    5422:	df 4f       	sbci	r29, 0xFF	; 255
    5424:	94 e0       	ldi	r25, 0x04	; 4
    5426:	98 83       	st	Y, r25
			twi_driver->status = TWI_STATUS_READY;
    5428:	e9 5b       	subi	r30, 0xB9	; 185
    542a:	ff 4f       	sbci	r31, 0xFF	; 255
    542c:	10 82       	st	Z, r1
			twi_driver->twi->MASTER.STATUS = status | TWI_MASTER_BUSERR_bm;
    542e:	84 60       	ori	r24, 0x04	; 4
    5430:	14 96       	adiw	r26, 0x04	; 4
    5432:	8c 93       	st	X, r24
    5434:	7a c1       	rjmp	.+756    	; 0x572a <twiInterruptHandler+0x32e>
		}
	
		else if (status & TWI_MASTER_ARBLOST_bm) {
    5436:	83 ff       	sbrs	r24, 3
    5438:	0c c0       	rjmp	.+24     	; 0x5452 <twiInterruptHandler+0x56>
			twi_driver->result = TWIM_RESULT_ARBITRATION_LOST;
    543a:	ef 01       	movw	r28, r30
    543c:	c8 5b       	subi	r28, 0xB8	; 184
    543e:	df 4f       	sbci	r29, 0xFF	; 255
    5440:	93 e0       	ldi	r25, 0x03	; 3
    5442:	98 83       	st	Y, r25
			twi_driver->status = TWI_STATUS_READY;
    5444:	e9 5b       	subi	r30, 0xB9	; 185
    5446:	ff 4f       	sbci	r31, 0xFF	; 255
    5448:	10 82       	st	Z, r1
			twi_driver->twi->MASTER.STATUS = status | TWI_MASTER_ARBLOST_bm;
    544a:	88 60       	ori	r24, 0x08	; 8
    544c:	14 96       	adiw	r26, 0x04	; 4
    544e:	8c 93       	st	X, r24
    5450:	6c c1       	rjmp	.+728    	; 0x572a <twiInterruptHandler+0x32e>
		}

		/* If master write interrupt. */
		else if (status & TWI_MASTER_WIF_bm) {
    5452:	86 ff       	sbrs	r24, 6
    5454:	46 c0       	rjmp	.+140    	; 0x54e2 <twiInterruptHandler+0xe6>


static void twiMasterWriteHandler()
{
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi_driver->bytesToWrite;
    5456:	ef 01       	movw	r28, r30
    5458:	c6 5b       	subi	r28, 0xB6	; 182
    545a:	df 4f       	sbci	r29, 0xFF	; 255
    545c:	98 81       	ld	r25, Y
	uint8_t bytesToRead   = twi_driver->bytesToRead;
    545e:	21 96       	adiw	r28, 0x01	; 1
    5460:	28 81       	ld	r18, Y

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi_driver->twi->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    5462:	14 96       	adiw	r26, 0x04	; 4
    5464:	8c 91       	ld	r24, X
    5466:	14 97       	sbiw	r26, 0x04	; 4
    5468:	84 ff       	sbrs	r24, 4
    546a:	0c c0       	rjmp	.+24     	; 0x5484 <twiInterruptHandler+0x88>
		twi_driver->twi->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    546c:	83 e0       	ldi	r24, 0x03	; 3
    546e:	13 96       	adiw	r26, 0x03	; 3
    5470:	8c 93       	st	X, r24
		twi_driver->result = TWIM_RESULT_NACK_RECEIVED;
    5472:	df 01       	movw	r26, r30
    5474:	a8 5b       	subi	r26, 0xB8	; 184
    5476:	bf 4f       	sbci	r27, 0xFF	; 255
    5478:	85 e0       	ldi	r24, 0x05	; 5
    547a:	8c 93       	st	X, r24
		twi_driver->status = TWI_STATUS_READY;
    547c:	e9 5b       	subi	r30, 0xB9	; 185
    547e:	ff 4f       	sbci	r31, 0xFF	; 255
    5480:	10 82       	st	Z, r1
    5482:	53 c1       	rjmp	.+678    	; 0x572a <twiInterruptHandler+0x32e>
	}

	/* If more bytes to write, send data. */
	else if (twi_driver->bytesWritten < bytesToWrite) {
    5484:	ef 01       	movw	r28, r30
    5486:	c4 5b       	subi	r28, 0xB4	; 180
    5488:	df 4f       	sbci	r29, 0xFF	; 255
    548a:	88 81       	ld	r24, Y
    548c:	89 17       	cp	r24, r25
    548e:	50 f4       	brcc	.+20     	; 0x54a4 <twiInterruptHandler+0xa8>
		twi_driver->twi->MASTER.DATA = twi_driver->outputData[twi_driver->bytesWritten++];
    5490:	88 81       	ld	r24, Y
    5492:	91 e0       	ldi	r25, 0x01	; 1
    5494:	98 0f       	add	r25, r24
    5496:	98 83       	st	Y, r25
    5498:	e8 0f       	add	r30, r24
    549a:	f1 1d       	adc	r31, r1
    549c:	87 81       	ldd	r24, Z+7	; 0x07
    549e:	17 96       	adiw	r26, 0x07	; 7
    54a0:	8c 93       	st	X, r24
    54a2:	43 c1       	rjmp	.+646    	; 0x572a <twiInterruptHandler+0x32e>
		//twi_driver->outputData[twi_driver->bytesWritten] = 0;	// clear data that is already sent
	}

	/* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
	else if (twi_driver->bytesRead < bytesToRead) {
    54a4:	ef 01       	movw	r28, r30
    54a6:	c3 5b       	subi	r28, 0xB3	; 179
    54a8:	df 4f       	sbci	r29, 0xFF	; 255
    54aa:	88 81       	ld	r24, Y
    54ac:	82 17       	cp	r24, r18
    54ae:	38 f4       	brcc	.+14     	; 0x54be <twiInterruptHandler+0xc2>
		uint8_t readAddress = twi_driver->address | 0x01;
    54b0:	e7 5b       	subi	r30, 0xB7	; 183
    54b2:	ff 4f       	sbci	r31, 0xFF	; 255
    54b4:	80 81       	ld	r24, Z
    54b6:	81 60       	ori	r24, 0x01	; 1
		twi_driver->twi->MASTER.ADDR = readAddress;
    54b8:	16 96       	adiw	r26, 0x06	; 6
    54ba:	8c 93       	st	X, r24
    54bc:	36 c1       	rjmp	.+620    	; 0x572a <twiInterruptHandler+0x32e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi_driver->twi->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    54be:	83 e0       	ldi	r24, 0x03	; 3
    54c0:	13 96       	adiw	r26, 0x03	; 3
    54c2:	8c 93       	st	X, r24
		twi_driver->result = TWIM_RESULT_OK;
    54c4:	df 01       	movw	r26, r30
    54c6:	a8 5b       	subi	r26, 0xB8	; 184
    54c8:	bf 4f       	sbci	r27, 0xFF	; 255
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	8c 93       	st	X, r24
		twi_driver->status = TWI_STATUS_READY;
    54ce:	11 97       	sbiw	r26, 0x01	; 1
    54d0:	1c 92       	st	X, r1
		
		if (twi_driver->transmissionFinished != NULL) {
    54d2:	05 80       	ldd	r0, Z+5	; 0x05
    54d4:	f6 81       	ldd	r31, Z+6	; 0x06
    54d6:	e0 2d       	mov	r30, r0
    54d8:	30 97       	sbiw	r30, 0x00	; 0
    54da:	09 f4       	brne	.+2      	; 0x54de <twiInterruptHandler+0xe2>
    54dc:	26 c1       	rjmp	.+588    	; 0x572a <twiInterruptHandler+0x32e>
			twi_driver->transmissionFinished();
    54de:	19 95       	eicall
    54e0:	24 c1       	rjmp	.+584    	; 0x572a <twiInterruptHandler+0x32e>
		else if (status & TWI_MASTER_WIF_bm) {
			twiMasterWriteHandler();
		}

		/* If master read interrupt. */
		else if (status & TWI_MASTER_RIF_bm) {
    54e2:	88 23       	and	r24, r24
    54e4:	0c f0       	brlt	.+2      	; 0x54e8 <twiInterruptHandler+0xec>
    54e6:	41 c0       	rjmp	.+130    	; 0x556a <twiInterruptHandler+0x16e>


static void twiMasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi_driver->bytesRead < TWI_INPUT_BUFSIZE) {
    54e8:	ef 01       	movw	r28, r30
    54ea:	c3 5b       	subi	r28, 0xB3	; 179
    54ec:	df 4f       	sbci	r29, 0xFF	; 255
    54ee:	88 81       	ld	r24, Y
    54f0:	80 32       	cpi	r24, 0x20	; 32
    54f2:	50 f4       	brcc	.+20     	; 0x5508 <twiInterruptHandler+0x10c>
		twi_driver->inputData[twi_driver->bytesRead++] = twi_driver->twi->MASTER.DATA;
    54f4:	88 81       	ld	r24, Y
    54f6:	91 e0       	ldi	r25, 0x01	; 1
    54f8:	98 0f       	add	r25, r24
    54fa:	98 83       	st	Y, r25
    54fc:	17 96       	adiw	r26, 0x07	; 7
    54fe:	9c 91       	ld	r25, X
    5500:	e8 0f       	add	r30, r24
    5502:	f1 1d       	adc	r31, r1
    5504:	97 a3       	std	Z+39, r25	; 0x27
    5506:	0b c0       	rjmp	.+22     	; 0x551e <twiInterruptHandler+0x122>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi_driver->twi->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5508:	83 e0       	ldi	r24, 0x03	; 3
    550a:	13 96       	adiw	r26, 0x03	; 3
    550c:	8c 93       	st	X, r24
		twi_driver->result = TWIM_RESULT_BUFFER_OVERFLOW;
    550e:	df 01       	movw	r26, r30
    5510:	a8 5b       	subi	r26, 0xB8	; 184
    5512:	bf 4f       	sbci	r27, 0xFF	; 255
    5514:	82 e0       	ldi	r24, 0x02	; 2
    5516:	8c 93       	st	X, r24
		twi_driver->status = TWI_STATUS_READY;
    5518:	e9 5b       	subi	r30, 0xB9	; 185
    551a:	ff 4f       	sbci	r31, 0xFF	; 255
    551c:	10 82       	st	Z, r1
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi_driver->bytesToRead;
    551e:	e0 91 70 24 	lds	r30, 0x2470
    5522:	f0 91 71 24 	lds	r31, 0x2471
    5526:	df 01       	movw	r26, r30
    5528:	a5 5b       	subi	r26, 0xB5	; 181
    552a:	bf 4f       	sbci	r27, 0xFF	; 255
    552c:	9c 91       	ld	r25, X

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi_driver->bytesRead < bytesToRead) {
    552e:	12 96       	adiw	r26, 0x02	; 2
    5530:	8c 91       	ld	r24, X
    5532:	89 17       	cp	r24, r25
    5534:	30 f4       	brcc	.+12     	; 0x5542 <twiInterruptHandler+0x146>
		twi_driver->twi->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5536:	01 90       	ld	r0, Z+
    5538:	f0 81       	ld	r31, Z
    553a:	e0 2d       	mov	r30, r0
    553c:	82 e0       	ldi	r24, 0x02	; 2
    553e:	83 83       	std	Z+3, r24	; 0x03
    5540:	f4 c0       	rjmp	.+488    	; 0x572a <twiInterruptHandler+0x32e>
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi_driver->twi->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    5542:	a0 81       	ld	r26, Z
    5544:	b1 81       	ldd	r27, Z+1	; 0x01
    5546:	87 e0       	ldi	r24, 0x07	; 7
    5548:	13 96       	adiw	r26, 0x03	; 3
    554a:	8c 93       	st	X, r24
		twi_driver->result = TWIM_RESULT_OK;
    554c:	df 01       	movw	r26, r30
    554e:	a8 5b       	subi	r26, 0xB8	; 184
    5550:	bf 4f       	sbci	r27, 0xFF	; 255
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	8c 93       	st	X, r24
		twi_driver->status = TWI_STATUS_READY;
    5556:	11 97       	sbiw	r26, 0x01	; 1
    5558:	1c 92       	st	X, r1
		
		if (twi_driver->transmissionFinished != NULL) {
    555a:	05 80       	ldd	r0, Z+5	; 0x05
    555c:	f6 81       	ldd	r31, Z+6	; 0x06
    555e:	e0 2d       	mov	r30, r0
    5560:	30 97       	sbiw	r30, 0x00	; 0
    5562:	09 f4       	brne	.+2      	; 0x5566 <twiInterruptHandler+0x16a>
    5564:	e2 c0       	rjmp	.+452    	; 0x572a <twiInterruptHandler+0x32e>
			twi_driver->transmissionFinished();
    5566:	19 95       	eicall
    5568:	e0 c0       	rjmp	.+448    	; 0x572a <twiInterruptHandler+0x32e>
			twiMasterReadHandler();
		}
	
		/* If unexpected state. */
		else {
			twi_driver->result = TWIM_RESULT_FAIL;
    556a:	df 01       	movw	r26, r30
    556c:	a8 5b       	subi	r26, 0xB8	; 184
    556e:	bf 4f       	sbci	r27, 0xFF	; 255
    5570:	86 e0       	ldi	r24, 0x06	; 6
    5572:	8c 93       	st	X, r24
			twi_driver->status = TWI_STATUS_READY;
    5574:	e9 5b       	subi	r30, 0xB9	; 185
    5576:	ff 4f       	sbci	r31, 0xFF	; 255
    5578:	10 82       	st	Z, r1
    557a:	d7 c0       	rjmp	.+430    	; 0x572a <twiInterruptHandler+0x32e>
		}
	}
	else
	{
		uint8_t status = twi_driver->twi->SLAVE.STATUS;
    557c:	a0 81       	ld	r26, Z
    557e:	b1 81       	ldd	r27, Z+1	; 0x01
    5580:	1a 96       	adiw	r26, 0x0a	; 10
    5582:	8c 91       	ld	r24, X
    5584:	1a 97       	sbiw	r26, 0x0a	; 10

		/* If bus error. */
		if (status & TWI_SLAVE_BUSERR_bm) {
    5586:	82 ff       	sbrs	r24, 2
    5588:	0d c0       	rjmp	.+26     	; 0x55a4 <twiInterruptHandler+0x1a8>
			twi_driver->bytesReceived = 0;
    558a:	df 01       	movw	r26, r30
    558c:	a2 5b       	subi	r26, 0xB2	; 178
    558e:	bf 4f       	sbci	r27, 0xFF	; 255
    5590:	1c 92       	st	X, r1
			twi_driver->bytesSent = 0;
    5592:	11 96       	adiw	r26, 0x01	; 1
    5594:	1c 92       	st	X, r1
			twi_driver->result = TWIS_RESULT_BUS_ERROR;
    5596:	17 97       	sbiw	r26, 0x07	; 7
    5598:	84 e0       	ldi	r24, 0x04	; 4
    559a:	8c 93       	st	X, r24
			twi_driver->status = TWI_STATUS_READY;
    559c:	e9 5b       	subi	r30, 0xB9	; 185
    559e:	ff 4f       	sbci	r31, 0xFF	; 255
    55a0:	10 82       	st	Z, r1
    55a2:	c3 c0       	rjmp	.+390    	; 0x572a <twiInterruptHandler+0x32e>
		}

		/* If transmit collision. */
		else if (status & TWI_SLAVE_COLL_bm) {
    55a4:	83 ff       	sbrs	r24, 3
    55a6:	0d c0       	rjmp	.+26     	; 0x55c2 <twiInterruptHandler+0x1c6>
			twi_driver->bytesReceived = 0;
    55a8:	df 01       	movw	r26, r30
    55aa:	a2 5b       	subi	r26, 0xB2	; 178
    55ac:	bf 4f       	sbci	r27, 0xFF	; 255
    55ae:	1c 92       	st	X, r1
			twi_driver->bytesSent = 0;
    55b0:	11 96       	adiw	r26, 0x01	; 1
    55b2:	1c 92       	st	X, r1
			twi_driver->result = TWIS_RESULT_TRANSMIT_COLLISION;
    55b4:	17 97       	sbiw	r26, 0x07	; 7
    55b6:	83 e0       	ldi	r24, 0x03	; 3
    55b8:	8c 93       	st	X, r24
			twi_driver->status = TWI_STATUS_READY;
    55ba:	e9 5b       	subi	r30, 0xB9	; 185
    55bc:	ff 4f       	sbci	r31, 0xFF	; 255
    55be:	10 82       	st	Z, r1
    55c0:	b4 c0       	rjmp	.+360    	; 0x572a <twiInterruptHandler+0x32e>
		}

		/* If address match. */
		else if ((status & TWI_SLAVE_APIF_bm) && (status & TWI_SLAVE_AP_bm)) {
    55c2:	28 2f       	mov	r18, r24
    55c4:	20 74       	andi	r18, 0x40	; 64
    55c6:	98 2f       	mov	r25, r24
    55c8:	91 74       	andi	r25, 0x41	; 65
    55ca:	91 34       	cpi	r25, 0x41	; 65
    55cc:	b9 f4       	brne	.+46     	; 0x55fc <twiInterruptHandler+0x200>
			twi_driver->status = TWI_STATUS_BUSY;
    55ce:	ef 01       	movw	r28, r30
    55d0:	c9 5b       	subi	r28, 0xB9	; 185
    55d2:	df 4f       	sbci	r29, 0xFF	; 255
    55d4:	81 e0       	ldi	r24, 0x01	; 1
    55d6:	88 83       	st	Y, r24
			twi_driver->result = TWIS_RESULT_UNKNOWN;
    55d8:	21 96       	adiw	r28, 0x01	; 1
    55da:	18 82       	st	Y, r1

			/* Disable stop interrupt. */
			uint8_t currentCtrlA = twi_driver->twi->SLAVE.CTRLA;
    55dc:	18 96       	adiw	r26, 0x08	; 8
    55de:	8c 91       	ld	r24, X
    55e0:	18 97       	sbiw	r26, 0x08	; 8
			twi_driver->twi->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    55e2:	8b 7f       	andi	r24, 0xFB	; 251
    55e4:	18 96       	adiw	r26, 0x08	; 8
    55e6:	8c 93       	st	X, r24

			//twi_driver->bytesReceived = 0;
			twi_driver->bytesSent = 0;
    55e8:	df 01       	movw	r26, r30
    55ea:	a1 5b       	subi	r26, 0xB1	; 177
    55ec:	bf 4f       	sbci	r27, 0xFF	; 255
    55ee:	1c 92       	st	X, r1

			/* Send ACK, wait for data interrupt. */
			twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    55f0:	01 90       	ld	r0, Z+
    55f2:	f0 81       	ld	r31, Z
    55f4:	e0 2d       	mov	r30, r0
    55f6:	83 e0       	ldi	r24, 0x03	; 3
    55f8:	81 87       	std	Z+9, r24	; 0x09
			twi_driver->result = TWIS_RESULT_TRANSMIT_COLLISION;
			twi_driver->status = TWI_STATUS_READY;
		}

		/* If address match. */
		else if ((status & TWI_SLAVE_APIF_bm) && (status & TWI_SLAVE_AP_bm)) {
    55fa:	97 c0       	rjmp	.+302    	; 0x572a <twiInterruptHandler+0x32e>
			/* Send ACK, wait for data interrupt. */
			twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
		}

		/* If stop (only enabled through slave read transaction). */
		else if (status & TWI_SLAVE_APIF_bm) {
    55fc:	22 23       	and	r18, r18
    55fe:	e9 f0       	breq	.+58     	; 0x563a <twiInterruptHandler+0x23e>
			uint8_t currentCtrlA = twi_driver->twi->SLAVE.CTRLA;
    5600:	18 96       	adiw	r26, 0x08	; 8
    5602:	8c 91       	ld	r24, X
    5604:	18 97       	sbiw	r26, 0x08	; 8
			twi_driver->twi->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    5606:	8b 7f       	andi	r24, 0xFB	; 251
    5608:	18 96       	adiw	r26, 0x08	; 8
    560a:	8c 93       	st	X, r24
			
			/* Clear APIF, according to flowchart don't ACK or NACK */
			uint8_t status = twi_driver->twi->SLAVE.STATUS;
    560c:	a0 81       	ld	r26, Z
    560e:	b1 81       	ldd	r27, Z+1	; 0x01
    5610:	1a 96       	adiw	r26, 0x0a	; 10
    5612:	8c 91       	ld	r24, X
    5614:	1a 97       	sbiw	r26, 0x0a	; 10
			twi_driver->twi->SLAVE.STATUS = status | TWI_SLAVE_APIF_bm;
    5616:	80 64       	ori	r24, 0x40	; 64
    5618:	1a 96       	adiw	r26, 0x0a	; 10
    561a:	8c 93       	st	X, r24
			
			twi_driver->result = TWIS_RESULT_OK;
    561c:	df 01       	movw	r26, r30
    561e:	a8 5b       	subi	r26, 0xB8	; 184
    5620:	bf 4f       	sbci	r27, 0xFF	; 255
    5622:	81 e0       	ldi	r24, 0x01	; 1
    5624:	8c 93       	st	X, r24
			twi_driver->status = TWI_STATUS_READY;
    5626:	11 97       	sbiw	r26, 0x01	; 1
    5628:	1c 92       	st	X, r1
			
			if (twi_driver->transmissionFinished != NULL) {
    562a:	05 80       	ldd	r0, Z+5	; 0x05
    562c:	f6 81       	ldd	r31, Z+6	; 0x06
    562e:	e0 2d       	mov	r30, r0
    5630:	30 97       	sbiw	r30, 0x00	; 0
    5632:	09 f4       	brne	.+2      	; 0x5636 <twiInterruptHandler+0x23a>
    5634:	7a c0       	rjmp	.+244    	; 0x572a <twiInterruptHandler+0x32e>
				twi_driver->transmissionFinished();
    5636:	19 95       	eicall
    5638:	78 c0       	rjmp	.+240    	; 0x572a <twiInterruptHandler+0x32e>
			}
		}

		/* If data interrupt. */
		else if (status & TWI_SLAVE_DIF_bm) {
    563a:	88 23       	and	r24, r24
    563c:	0c f0       	brlt	.+2      	; 0x5640 <twiInterruptHandler+0x244>
    563e:	6d c0       	rjmp	.+218    	; 0x571a <twiInterruptHandler+0x31e>
			if (twi_driver->twi->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
    5640:	1a 96       	adiw	r26, 0x0a	; 10
    5642:	8c 91       	ld	r24, X
    5644:	1a 97       	sbiw	r26, 0x0a	; 10
    5646:	81 ff       	sbrs	r24, 1
    5648:	3e c0       	rjmp	.+124    	; 0x56c6 <twiInterruptHandler+0x2ca>
 *  \param twi The TWI_Slave_t struct instance.
 */
static void twiSlaveWriteHandler()
{
	/* If NACK, slave write transaction finished. */
	if ((twi_driver->bytesSent > 0) && (twi_driver->twi->SLAVE.STATUS & TWI_SLAVE_RXACK_bm)) {
    564a:	ef 01       	movw	r28, r30
    564c:	c1 5b       	subi	r28, 0xB1	; 177
    564e:	df 4f       	sbci	r29, 0xFF	; 255
    5650:	88 81       	ld	r24, Y
    5652:	88 23       	and	r24, r24
    5654:	b9 f0       	breq	.+46     	; 0x5684 <twiInterruptHandler+0x288>
    5656:	1a 96       	adiw	r26, 0x0a	; 10
    5658:	8c 91       	ld	r24, X
    565a:	1a 97       	sbiw	r26, 0x0a	; 10
    565c:	84 ff       	sbrs	r24, 4
    565e:	12 c0       	rjmp	.+36     	; 0x5684 <twiInterruptHandler+0x288>
		twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    5660:	82 e0       	ldi	r24, 0x02	; 2
    5662:	19 96       	adiw	r26, 0x09	; 9
    5664:	8c 93       	st	X, r24
		twi_driver->result = TWIS_RESULT_OK;
    5666:	df 01       	movw	r26, r30
    5668:	a8 5b       	subi	r26, 0xB8	; 184
    566a:	bf 4f       	sbci	r27, 0xFF	; 255
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	8c 93       	st	X, r24
		twi_driver->status = TWI_STATUS_READY;
    5670:	11 97       	sbiw	r26, 0x01	; 1
    5672:	1c 92       	st	X, r1
		
		if (twi_driver->transmissionFinished != NULL) {
    5674:	05 80       	ldd	r0, Z+5	; 0x05
    5676:	f6 81       	ldd	r31, Z+6	; 0x06
    5678:	e0 2d       	mov	r30, r0
    567a:	30 97       	sbiw	r30, 0x00	; 0
    567c:	09 f4       	brne	.+2      	; 0x5680 <twiInterruptHandler+0x284>
    567e:	55 c0       	rjmp	.+170    	; 0x572a <twiInterruptHandler+0x32e>
			twi_driver->transmissionFinished();
    5680:	19 95       	eicall
    5682:	53 c0       	rjmp	.+166    	; 0x572a <twiInterruptHandler+0x32e>
		}
	}
	/* If ACK, master expects more data. */
	else {
		if (twi_driver->bytesSent < TWI_OUTPUT_BUFSIZE) {
    5684:	ef 01       	movw	r28, r30
    5686:	c1 5b       	subi	r28, 0xB1	; 177
    5688:	df 4f       	sbci	r29, 0xFF	; 255
    568a:	88 81       	ld	r24, Y
    568c:	80 32       	cpi	r24, 0x20	; 32
    568e:	80 f4       	brcc	.+32     	; 0x56b0 <twiInterruptHandler+0x2b4>
			twi_driver->twi->SLAVE.DATA = twi_driver->outputData[twi_driver->bytesSent++];
    5690:	88 81       	ld	r24, Y
    5692:	91 e0       	ldi	r25, 0x01	; 1
    5694:	98 0f       	add	r25, r24
    5696:	98 83       	st	Y, r25
    5698:	ef 01       	movw	r28, r30
    569a:	c8 0f       	add	r28, r24
    569c:	d1 1d       	adc	r29, r1
    569e:	8f 81       	ldd	r24, Y+7	; 0x07
    56a0:	1c 96       	adiw	r26, 0x0c	; 12
    56a2:	8c 93       	st	X, r24

			/* Send data, wait for data interrupt. */
			twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    56a4:	01 90       	ld	r0, Z+
    56a6:	f0 81       	ld	r31, Z
    56a8:	e0 2d       	mov	r30, r0
    56aa:	83 e0       	ldi	r24, 0x03	; 3
    56ac:	81 87       	std	Z+9, r24	; 0x09
    56ae:	3d c0       	rjmp	.+122    	; 0x572a <twiInterruptHandler+0x32e>
		}
		/* If buffer overflow. */
		else {
			twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    56b0:	82 e0       	ldi	r24, 0x02	; 2
    56b2:	19 96       	adiw	r26, 0x09	; 9
    56b4:	8c 93       	st	X, r24
			twi_driver->result = TWIS_RESULT_BUFFER_OVERFLOW;
    56b6:	df 01       	movw	r26, r30
    56b8:	a8 5b       	subi	r26, 0xB8	; 184
    56ba:	bf 4f       	sbci	r27, 0xFF	; 255
    56bc:	8c 93       	st	X, r24
			twi_driver->status = TWI_STATUS_READY;
    56be:	e9 5b       	subi	r30, 0xB9	; 185
    56c0:	ff 4f       	sbci	r31, 0xFF	; 255
    56c2:	10 82       	st	Z, r1
    56c4:	32 c0       	rjmp	.+100    	; 0x572a <twiInterruptHandler+0x32e>


static void twiSlaveReadHandler()
{
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi_driver->twi->SLAVE.CTRLA;
    56c6:	18 96       	adiw	r26, 0x08	; 8
    56c8:	8c 91       	ld	r24, X
    56ca:	18 97       	sbiw	r26, 0x08	; 8
	twi_driver->twi->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
    56cc:	84 60       	ori	r24, 0x04	; 4
    56ce:	18 96       	adiw	r26, 0x08	; 8
    56d0:	8c 93       	st	X, r24

	/* If free space in buffer. */
	if (twi_driver->bytesReceived < TWI_INPUT_BUFSIZE) {
    56d2:	df 01       	movw	r26, r30
    56d4:	a2 5b       	subi	r26, 0xB2	; 178
    56d6:	bf 4f       	sbci	r27, 0xFF	; 255
    56d8:	8c 91       	ld	r24, X
    56da:	80 32       	cpi	r24, 0x20	; 32
    56dc:	80 f4       	brcc	.+32     	; 0x56fe <twiInterruptHandler+0x302>
		/* Fetch data */
		twi_driver->inputData[twi_driver->bytesReceived++] = twi_driver->twi->SLAVE.DATA;
    56de:	8c 91       	ld	r24, X
    56e0:	91 e0       	ldi	r25, 0x01	; 1
    56e2:	98 0f       	add	r25, r24
    56e4:	9c 93       	st	X, r25
    56e6:	a0 81       	ld	r26, Z
    56e8:	b1 81       	ldd	r27, Z+1	; 0x01
    56ea:	1c 96       	adiw	r26, 0x0c	; 12
    56ec:	9c 91       	ld	r25, X
    56ee:	1c 97       	sbiw	r26, 0x0c	; 12
    56f0:	e8 0f       	add	r30, r24
    56f2:	f1 1d       	adc	r31, r1
    56f4:	97 a3       	std	Z+39, r25	; 0x27
		twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    56f6:	83 e0       	ldi	r24, 0x03	; 3
    56f8:	19 96       	adiw	r26, 0x09	; 9
    56fa:	8c 93       	st	X, r24
    56fc:	16 c0       	rjmp	.+44     	; 0x572a <twiInterruptHandler+0x32e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi_driver->twi->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
    56fe:	a0 81       	ld	r26, Z
    5700:	b1 81       	ldd	r27, Z+1	; 0x01
    5702:	86 e0       	ldi	r24, 0x06	; 6
    5704:	19 96       	adiw	r26, 0x09	; 9
    5706:	8c 93       	st	X, r24
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		twi_driver->result = TWIS_RESULT_BUFFER_OVERFLOW;
    5708:	df 01       	movw	r26, r30
    570a:	a8 5b       	subi	r26, 0xB8	; 184
    570c:	bf 4f       	sbci	r27, 0xFF	; 255
    570e:	82 e0       	ldi	r24, 0x02	; 2
    5710:	8c 93       	st	X, r24
		twi_driver->status = TWI_STATUS_READY;
    5712:	e9 5b       	subi	r30, 0xB9	; 185
    5714:	ff 4f       	sbci	r31, 0xFF	; 255
    5716:	10 82       	st	Z, r1
    5718:	08 c0       	rjmp	.+16     	; 0x572a <twiInterruptHandler+0x32e>
			}
		}

		/* If unexpected state. */
		else {
			twi_driver->result = TWIS_RESULT_FAIL;
    571a:	df 01       	movw	r26, r30
    571c:	a8 5b       	subi	r26, 0xB8	; 184
    571e:	bf 4f       	sbci	r27, 0xFF	; 255
    5720:	85 e0       	ldi	r24, 0x05	; 5
    5722:	8c 93       	st	X, r24
			twi_driver->status = TWI_STATUS_READY;
    5724:	e9 5b       	subi	r30, 0xB9	; 185
    5726:	ff 4f       	sbci	r31, 0xFF	; 255
    5728:	10 82       	st	Z, r1
		}
	}
}
    572a:	df 91       	pop	r29
    572c:	cf 91       	pop	r28
    572e:	08 95       	ret

00005730 <twiInit>:
static void twiSlaveReadHandler();



void twiInit(twi_driver_t * twi, TWI_t * twiModule, PORT_t * port, bool isMaster, uint8_t address, void (*transmissionFinished)(), TWI_MASTER_INTLVL_t intlvl, const uint32_t cpu, const uint32_t baud)
{
    5730:	6f 92       	push	r6
    5732:	7f 92       	push	r7
    5734:	8f 92       	push	r8
    5736:	9f 92       	push	r9
    5738:	af 92       	push	r10
    573a:	bf 92       	push	r11
    573c:	cf 92       	push	r12
    573e:	ef 92       	push	r14
    5740:	ff 92       	push	r15
    5742:	0f 93       	push	r16
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	cd b7       	in	r28, 0x3d	; 61
    574a:	de b7       	in	r29, 0x3e	; 62
    574c:	3c 01       	movw	r6, r24
    574e:	fa 01       	movw	r30, r20
	port->PIN0CTRL = /*PORT_SRLEN_bm |*/ PORT_OPC_WIREDANDPULL_gc;
    5750:	88 e3       	ldi	r24, 0x38	; 56
    5752:	80 8b       	std	Z+16, r24	; 0x10
	port->PIN1CTRL = /*PORT_SRLEN_bm |*/ PORT_OPC_WIREDANDPULL_gc;
    5754:	81 8b       	std	Z+17, r24	; 0x11
	port->OUTSET = PIN0_bm | PIN1_bm;
    5756:	83 e0       	ldi	r24, 0x03	; 3
    5758:	85 83       	std	Z+5, r24	; 0x05
	port->DIRSET = PIN0_bm | PIN1_bm;
    575a:	81 83       	std	Z+1, r24	; 0x01
	
	//memset(twi_driver, 0, sizeof (twi_driver_t));
	twi_driver = twi;
    575c:	60 92 70 24 	sts	0x2470, r6
    5760:	70 92 71 24 	sts	0x2471, r7
	twi_driver->port = port;
    5764:	d3 01       	movw	r26, r6
    5766:	12 96       	adiw	r26, 0x02	; 2
    5768:	4d 93       	st	X+, r20
    576a:	5c 93       	st	X, r21
    576c:	13 97       	sbiw	r26, 0x03	; 3
	twi_driver->isMaster = isMaster;
    576e:	14 96       	adiw	r26, 0x04	; 4
    5770:	2c 93       	st	X, r18
    5772:	14 97       	sbiw	r26, 0x04	; 4
	twi_driver->transmissionFinished = transmissionFinished;
    5774:	15 96       	adiw	r26, 0x05	; 5
    5776:	ed 92       	st	X+, r14
    5778:	fc 92       	st	X, r15
    577a:	16 97       	sbiw	r26, 0x06	; 6
	twi_driver->twi = twiModule;
    577c:	6d 93       	st	X+, r22
    577e:	7c 93       	st	X, r23
    5780:	11 97       	sbiw	r26, 0x01	; 1
	
	if (twi_driver->isMaster)
    5782:	22 23       	and	r18, r18
    5784:	29 f1       	breq	.+74     	; 0x57d0 <twiInit+0xa0>
	{
		twi_driver->twi->CTRL = 0x00;
    5786:	fb 01       	movw	r30, r22
    5788:	10 82       	st	Z, r1
		twi_driver->twi->MASTER.BAUD = (uint16_t)(TWI_BAUD(cpu, baud));
    578a:	ed 90       	ld	r14, X+
    578c:	fc 90       	ld	r15, X
    578e:	88 89       	ldd	r24, Y+16	; 0x10
    5790:	99 89       	ldd	r25, Y+17	; 0x11
    5792:	aa 89       	ldd	r26, Y+18	; 0x12
    5794:	bb 89       	ldd	r27, Y+19	; 0x13
    5796:	9c 01       	movw	r18, r24
    5798:	ad 01       	movw	r20, r26
    579a:	22 0f       	add	r18, r18
    579c:	33 1f       	adc	r19, r19
    579e:	44 1f       	adc	r20, r20
    57a0:	55 1f       	adc	r21, r21
    57a2:	c5 01       	movw	r24, r10
    57a4:	b4 01       	movw	r22, r8
    57a6:	9b d6       	rcall	.+3382   	; 0x64de <__udivmodsi4>
    57a8:	25 50       	subi	r18, 0x05	; 5
    57aa:	d7 01       	movw	r26, r14
    57ac:	15 96       	adiw	r26, 0x05	; 5
    57ae:	2c 93       	st	X, r18
		twi_driver->twi->MASTER.CTRLA = intlvl | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
    57b0:	d3 01       	movw	r26, r6
    57b2:	ed 91       	ld	r30, X+
    57b4:	fc 91       	ld	r31, X
    57b6:	11 97       	sbiw	r26, 0x01	; 1
    57b8:	8c 2d       	mov	r24, r12
    57ba:	88 63       	ori	r24, 0x38	; 56
    57bc:	81 83       	std	Z+1, r24	; 0x01
		twi_driver->twi->MASTER.CTRLB = 0;
    57be:	ed 91       	ld	r30, X+
    57c0:	fc 91       	ld	r31, X
    57c2:	11 97       	sbiw	r26, 0x01	; 1
    57c4:	12 82       	std	Z+2, r1	; 0x02
		twi_driver->twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    57c6:	ed 91       	ld	r30, X+
    57c8:	fc 91       	ld	r31, X
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	84 83       	std	Z+4, r24	; 0x04
    57ce:	13 c0       	rjmp	.+38     	; 0x57f6 <twiInit+0xc6>
	}
	else
	{
		twi_driver->bytesReceived = 0;
    57d0:	f3 01       	movw	r30, r6
    57d2:	e2 5b       	subi	r30, 0xB2	; 178
    57d4:	ff 4f       	sbci	r31, 0xFF	; 255
    57d6:	10 82       	st	Z, r1
		twi_driver->bytesSent = 0;
    57d8:	31 96       	adiw	r30, 0x01	; 1
    57da:	10 82       	st	Z, r1
		twi_driver->status = TWI_STATUS_READY;
    57dc:	38 97       	sbiw	r30, 0x08	; 8
    57de:	10 82       	st	Z, r1
		twi_driver->result = TWIS_RESULT_UNKNOWN;
    57e0:	31 96       	adiw	r30, 0x01	; 1
    57e2:	10 82       	st	Z, r1
		twi_driver->twi->SLAVE.CTRLA = intlvl | TWI_SLAVE_DIEN_bm | TWI_SLAVE_APIEN_bm | TWI_SLAVE_ENABLE_bm;
    57e4:	8c 2d       	mov	r24, r12
    57e6:	88 63       	ori	r24, 0x38	; 56
    57e8:	fb 01       	movw	r30, r22
    57ea:	80 87       	std	Z+8, r24	; 0x08
		twi_driver->twi->SLAVE.ADDR = (address << 1);
    57ec:	d3 01       	movw	r26, r6
    57ee:	ed 91       	ld	r30, X+
    57f0:	fc 91       	ld	r31, X
    57f2:	00 0f       	add	r16, r16
    57f4:	03 87       	std	Z+11, r16	; 0x0b
	}
}
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	0f 91       	pop	r16
    57fc:	ff 90       	pop	r15
    57fe:	ef 90       	pop	r14
    5800:	cf 90       	pop	r12
    5802:	bf 90       	pop	r11
    5804:	af 90       	pop	r10
    5806:	9f 90       	pop	r9
    5808:	8f 90       	pop	r8
    580a:	7f 90       	pop	r7
    580c:	6f 90       	pop	r6
    580e:	08 95       	ret

00005810 <twiMasterWriteRead>:
}


void twiMasterWriteRead(uint8_t address, /*uint8_t *outputData,*/ uint8_t bytesToWrite, uint8_t bytesToRead)
{
	if (twi_driver->status != TWI_STATUS_READY) {
    5810:	e0 91 70 24 	lds	r30, 0x2470
    5814:	f0 91 71 24 	lds	r31, 0x2471
    5818:	df 01       	movw	r26, r30
    581a:	a9 5b       	subi	r26, 0xB9	; 185
    581c:	bf 4f       	sbci	r27, 0xFF	; 255
    581e:	9c 91       	ld	r25, X
    5820:	91 11       	cpse	r25, r1
    5822:	24 c0       	rjmp	.+72     	; 0x586c <twiMasterWriteRead+0x5c>
		return;
	}

	twi_driver->status = TWI_STATUS_BUSY;
    5824:	91 e0       	ldi	r25, 0x01	; 1
    5826:	9c 93       	st	X, r25
	twi_driver->result = TWIM_RESULT_UNKNOWN;
    5828:	11 96       	adiw	r26, 0x01	; 1
    582a:	1c 92       	st	X, r1
	twi_driver->address = address<<1;
    582c:	88 0f       	add	r24, r24
    582e:	11 96       	adiw	r26, 0x01	; 1
    5830:	8c 93       	st	X, r24
	
	twi_driver->bytesToWrite = bytesToWrite;
    5832:	11 96       	adiw	r26, 0x01	; 1
    5834:	6c 93       	st	X, r22
	twi_driver->bytesToRead = bytesToRead;
    5836:	11 96       	adiw	r26, 0x01	; 1
    5838:	4c 93       	st	X, r20
	twi_driver->bytesWritten = 0;
    583a:	11 96       	adiw	r26, 0x01	; 1
    583c:	1c 92       	st	X, r1
	twi_driver->bytesRead = 0;
    583e:	11 96       	adiw	r26, 0x01	; 1
    5840:	1c 92       	st	X, r1
// 	for (uint8_t i=0; i < bytesToWrite; i++) {
// 		twi_driver->outputData[i] = outputData[i];
// 	}
	
	/* If write command, send the START condition + Address + 'R/_W = 0' */
	if (bytesToWrite) {
    5842:	66 23       	and	r22, r22
    5844:	41 f0       	breq	.+16     	; 0x5856 <twiMasterWriteRead+0x46>
		uint8_t writeAddress = twi_driver->address & ~0x01;
    5846:	14 97       	sbiw	r26, 0x04	; 4
    5848:	8c 91       	ld	r24, X
    584a:	8e 7f       	andi	r24, 0xFE	; 254
		twi_driver->twi->MASTER.ADDR = writeAddress;
    584c:	01 90       	ld	r0, Z+
    584e:	f0 81       	ld	r31, Z
    5850:	e0 2d       	mov	r30, r0
    5852:	86 83       	std	Z+6, r24	; 0x06
    5854:	08 95       	ret
	}

	/* If read command, send the START condition + Address + 'R/_W = 1' */
	else if (bytesToRead) {
    5856:	44 23       	and	r20, r20
    5858:	49 f0       	breq	.+18     	; 0x586c <twiMasterWriteRead+0x5c>
		uint8_t readAddress = twi_driver->address | 0x01;
    585a:	df 01       	movw	r26, r30
    585c:	a7 5b       	subi	r26, 0xB7	; 183
    585e:	bf 4f       	sbci	r27, 0xFF	; 255
    5860:	8c 91       	ld	r24, X
    5862:	81 60       	ori	r24, 0x01	; 1
		twi_driver->twi->MASTER.ADDR = readAddress;
    5864:	01 90       	ld	r0, Z+
    5866:	f0 81       	ld	r31, Z
    5868:	e0 2d       	mov	r30, r0
    586a:	86 83       	std	Z+6, r24	; 0x06
    586c:	08 95       	ret

0000586e <__vector_13>:
	}
}


#ifdef TWIC_TWIM_vect
ISR(TWIC_TWIM_vect) {
    586e:	1f 92       	push	r1
    5870:	0f 92       	push	r0
    5872:	0f b6       	in	r0, 0x3f	; 63
    5874:	0f 92       	push	r0
    5876:	11 24       	eor	r1, r1
    5878:	08 b6       	in	r0, 0x38	; 56
    587a:	0f 92       	push	r0
    587c:	18 be       	out	0x38, r1	; 56
    587e:	09 b6       	in	r0, 0x39	; 57
    5880:	0f 92       	push	r0
    5882:	19 be       	out	0x39, r1	; 57
    5884:	0b b6       	in	r0, 0x3b	; 59
    5886:	0f 92       	push	r0
    5888:	1b be       	out	0x3b, r1	; 59
    588a:	2f 93       	push	r18
    588c:	3f 93       	push	r19
    588e:	4f 93       	push	r20
    5890:	5f 93       	push	r21
    5892:	6f 93       	push	r22
    5894:	7f 93       	push	r23
    5896:	8f 93       	push	r24
    5898:	9f 93       	push	r25
    589a:	af 93       	push	r26
    589c:	bf 93       	push	r27
    589e:	ef 93       	push	r30
    58a0:	ff 93       	push	r31
	twiInterruptHandler();
    58a2:	ac dd       	rcall	.-1192   	; 0x53fc <twiInterruptHandler>
}
    58a4:	ff 91       	pop	r31
    58a6:	ef 91       	pop	r30
    58a8:	bf 91       	pop	r27
    58aa:	af 91       	pop	r26
    58ac:	9f 91       	pop	r25
    58ae:	8f 91       	pop	r24
    58b0:	7f 91       	pop	r23
    58b2:	6f 91       	pop	r22
    58b4:	5f 91       	pop	r21
    58b6:	4f 91       	pop	r20
    58b8:	3f 91       	pop	r19
    58ba:	2f 91       	pop	r18
    58bc:	0f 90       	pop	r0
    58be:	0b be       	out	0x3b, r0	; 59
    58c0:	0f 90       	pop	r0
    58c2:	09 be       	out	0x39, r0	; 57
    58c4:	0f 90       	pop	r0
    58c6:	08 be       	out	0x38, r0	; 56
    58c8:	0f 90       	pop	r0
    58ca:	0f be       	out	0x3f, r0	; 63
    58cc:	0f 90       	pop	r0
    58ce:	1f 90       	pop	r1
    58d0:	18 95       	reti

000058d2 <__vector_12>:
#endif

#ifdef TWIC_TWIS_vect
ISR(TWIC_TWIS_vect) {
    58d2:	1f 92       	push	r1
    58d4:	0f 92       	push	r0
    58d6:	0f b6       	in	r0, 0x3f	; 63
    58d8:	0f 92       	push	r0
    58da:	11 24       	eor	r1, r1
    58dc:	08 b6       	in	r0, 0x38	; 56
    58de:	0f 92       	push	r0
    58e0:	18 be       	out	0x38, r1	; 56
    58e2:	09 b6       	in	r0, 0x39	; 57
    58e4:	0f 92       	push	r0
    58e6:	19 be       	out	0x39, r1	; 57
    58e8:	0b b6       	in	r0, 0x3b	; 59
    58ea:	0f 92       	push	r0
    58ec:	1b be       	out	0x3b, r1	; 59
    58ee:	2f 93       	push	r18
    58f0:	3f 93       	push	r19
    58f2:	4f 93       	push	r20
    58f4:	5f 93       	push	r21
    58f6:	6f 93       	push	r22
    58f8:	7f 93       	push	r23
    58fa:	8f 93       	push	r24
    58fc:	9f 93       	push	r25
    58fe:	af 93       	push	r26
    5900:	bf 93       	push	r27
    5902:	ef 93       	push	r30
    5904:	ff 93       	push	r31
	twiInterruptHandler();
    5906:	7a dd       	rcall	.-1292   	; 0x53fc <twiInterruptHandler>
}
    5908:	ff 91       	pop	r31
    590a:	ef 91       	pop	r30
    590c:	bf 91       	pop	r27
    590e:	af 91       	pop	r26
    5910:	9f 91       	pop	r25
    5912:	8f 91       	pop	r24
    5914:	7f 91       	pop	r23
    5916:	6f 91       	pop	r22
    5918:	5f 91       	pop	r21
    591a:	4f 91       	pop	r20
    591c:	3f 91       	pop	r19
    591e:	2f 91       	pop	r18
    5920:	0f 90       	pop	r0
    5922:	0b be       	out	0x3b, r0	; 59
    5924:	0f 90       	pop	r0
    5926:	09 be       	out	0x39, r0	; 57
    5928:	0f 90       	pop	r0
    592a:	08 be       	out	0x38, r0	; 56
    592c:	0f 90       	pop	r0
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	0f 90       	pop	r0
    5932:	1f 90       	pop	r1
    5934:	18 95       	reti

00005936 <__vector_76>:
#endif



#ifdef TWID_TWIM_vect
ISR(TWID_TWIM_vect) {
    5936:	1f 92       	push	r1
    5938:	0f 92       	push	r0
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	0f 92       	push	r0
    593e:	11 24       	eor	r1, r1
    5940:	08 b6       	in	r0, 0x38	; 56
    5942:	0f 92       	push	r0
    5944:	18 be       	out	0x38, r1	; 56
    5946:	09 b6       	in	r0, 0x39	; 57
    5948:	0f 92       	push	r0
    594a:	19 be       	out	0x39, r1	; 57
    594c:	0b b6       	in	r0, 0x3b	; 59
    594e:	0f 92       	push	r0
    5950:	1b be       	out	0x3b, r1	; 59
    5952:	2f 93       	push	r18
    5954:	3f 93       	push	r19
    5956:	4f 93       	push	r20
    5958:	5f 93       	push	r21
    595a:	6f 93       	push	r22
    595c:	7f 93       	push	r23
    595e:	8f 93       	push	r24
    5960:	9f 93       	push	r25
    5962:	af 93       	push	r26
    5964:	bf 93       	push	r27
    5966:	ef 93       	push	r30
    5968:	ff 93       	push	r31
	twiInterruptHandler();
    596a:	48 dd       	rcall	.-1392   	; 0x53fc <twiInterruptHandler>
}
    596c:	ff 91       	pop	r31
    596e:	ef 91       	pop	r30
    5970:	bf 91       	pop	r27
    5972:	af 91       	pop	r26
    5974:	9f 91       	pop	r25
    5976:	8f 91       	pop	r24
    5978:	7f 91       	pop	r23
    597a:	6f 91       	pop	r22
    597c:	5f 91       	pop	r21
    597e:	4f 91       	pop	r20
    5980:	3f 91       	pop	r19
    5982:	2f 91       	pop	r18
    5984:	0f 90       	pop	r0
    5986:	0b be       	out	0x3b, r0	; 59
    5988:	0f 90       	pop	r0
    598a:	09 be       	out	0x39, r0	; 57
    598c:	0f 90       	pop	r0
    598e:	08 be       	out	0x38, r0	; 56
    5990:	0f 90       	pop	r0
    5992:	0f be       	out	0x3f, r0	; 63
    5994:	0f 90       	pop	r0
    5996:	1f 90       	pop	r1
    5998:	18 95       	reti

0000599a <__vector_75>:
#endif

#ifdef TWID_TWIS_vect
ISR(TWID_TWIS_vect) {
    599a:	1f 92       	push	r1
    599c:	0f 92       	push	r0
    599e:	0f b6       	in	r0, 0x3f	; 63
    59a0:	0f 92       	push	r0
    59a2:	11 24       	eor	r1, r1
    59a4:	08 b6       	in	r0, 0x38	; 56
    59a6:	0f 92       	push	r0
    59a8:	18 be       	out	0x38, r1	; 56
    59aa:	09 b6       	in	r0, 0x39	; 57
    59ac:	0f 92       	push	r0
    59ae:	19 be       	out	0x39, r1	; 57
    59b0:	0b b6       	in	r0, 0x3b	; 59
    59b2:	0f 92       	push	r0
    59b4:	1b be       	out	0x3b, r1	; 59
    59b6:	2f 93       	push	r18
    59b8:	3f 93       	push	r19
    59ba:	4f 93       	push	r20
    59bc:	5f 93       	push	r21
    59be:	6f 93       	push	r22
    59c0:	7f 93       	push	r23
    59c2:	8f 93       	push	r24
    59c4:	9f 93       	push	r25
    59c6:	af 93       	push	r26
    59c8:	bf 93       	push	r27
    59ca:	ef 93       	push	r30
    59cc:	ff 93       	push	r31
	twiInterruptHandler();
    59ce:	16 dd       	rcall	.-1492   	; 0x53fc <twiInterruptHandler>
}
    59d0:	ff 91       	pop	r31
    59d2:	ef 91       	pop	r30
    59d4:	bf 91       	pop	r27
    59d6:	af 91       	pop	r26
    59d8:	9f 91       	pop	r25
    59da:	8f 91       	pop	r24
    59dc:	7f 91       	pop	r23
    59de:	6f 91       	pop	r22
    59e0:	5f 91       	pop	r21
    59e2:	4f 91       	pop	r20
    59e4:	3f 91       	pop	r19
    59e6:	2f 91       	pop	r18
    59e8:	0f 90       	pop	r0
    59ea:	0b be       	out	0x3b, r0	; 59
    59ec:	0f 90       	pop	r0
    59ee:	09 be       	out	0x39, r0	; 57
    59f0:	0f 90       	pop	r0
    59f2:	08 be       	out	0x38, r0	; 56
    59f4:	0f 90       	pop	r0
    59f6:	0f be       	out	0x3f, r0	; 63
    59f8:	0f 90       	pop	r0
    59fa:	1f 90       	pop	r1
    59fc:	18 95       	reti

000059fe <__vector_46>:
#endif


#ifdef TWIE_TWIM_vect
ISR(TWIE_TWIM_vect) {
    59fe:	1f 92       	push	r1
    5a00:	0f 92       	push	r0
    5a02:	0f b6       	in	r0, 0x3f	; 63
    5a04:	0f 92       	push	r0
    5a06:	11 24       	eor	r1, r1
    5a08:	08 b6       	in	r0, 0x38	; 56
    5a0a:	0f 92       	push	r0
    5a0c:	18 be       	out	0x38, r1	; 56
    5a0e:	09 b6       	in	r0, 0x39	; 57
    5a10:	0f 92       	push	r0
    5a12:	19 be       	out	0x39, r1	; 57
    5a14:	0b b6       	in	r0, 0x3b	; 59
    5a16:	0f 92       	push	r0
    5a18:	1b be       	out	0x3b, r1	; 59
    5a1a:	2f 93       	push	r18
    5a1c:	3f 93       	push	r19
    5a1e:	4f 93       	push	r20
    5a20:	5f 93       	push	r21
    5a22:	6f 93       	push	r22
    5a24:	7f 93       	push	r23
    5a26:	8f 93       	push	r24
    5a28:	9f 93       	push	r25
    5a2a:	af 93       	push	r26
    5a2c:	bf 93       	push	r27
    5a2e:	ef 93       	push	r30
    5a30:	ff 93       	push	r31
	twiInterruptHandler();
    5a32:	e4 dc       	rcall	.-1592   	; 0x53fc <twiInterruptHandler>
}
    5a34:	ff 91       	pop	r31
    5a36:	ef 91       	pop	r30
    5a38:	bf 91       	pop	r27
    5a3a:	af 91       	pop	r26
    5a3c:	9f 91       	pop	r25
    5a3e:	8f 91       	pop	r24
    5a40:	7f 91       	pop	r23
    5a42:	6f 91       	pop	r22
    5a44:	5f 91       	pop	r21
    5a46:	4f 91       	pop	r20
    5a48:	3f 91       	pop	r19
    5a4a:	2f 91       	pop	r18
    5a4c:	0f 90       	pop	r0
    5a4e:	0b be       	out	0x3b, r0	; 59
    5a50:	0f 90       	pop	r0
    5a52:	09 be       	out	0x39, r0	; 57
    5a54:	0f 90       	pop	r0
    5a56:	08 be       	out	0x38, r0	; 56
    5a58:	0f 90       	pop	r0
    5a5a:	0f be       	out	0x3f, r0	; 63
    5a5c:	0f 90       	pop	r0
    5a5e:	1f 90       	pop	r1
    5a60:	18 95       	reti

00005a62 <__vector_45>:
#endif


#ifdef TWIE_TWIS_vect
ISR(TWIE_TWIS_vect) {
    5a62:	1f 92       	push	r1
    5a64:	0f 92       	push	r0
    5a66:	0f b6       	in	r0, 0x3f	; 63
    5a68:	0f 92       	push	r0
    5a6a:	11 24       	eor	r1, r1
    5a6c:	08 b6       	in	r0, 0x38	; 56
    5a6e:	0f 92       	push	r0
    5a70:	18 be       	out	0x38, r1	; 56
    5a72:	09 b6       	in	r0, 0x39	; 57
    5a74:	0f 92       	push	r0
    5a76:	19 be       	out	0x39, r1	; 57
    5a78:	0b b6       	in	r0, 0x3b	; 59
    5a7a:	0f 92       	push	r0
    5a7c:	1b be       	out	0x3b, r1	; 59
    5a7e:	2f 93       	push	r18
    5a80:	3f 93       	push	r19
    5a82:	4f 93       	push	r20
    5a84:	5f 93       	push	r21
    5a86:	6f 93       	push	r22
    5a88:	7f 93       	push	r23
    5a8a:	8f 93       	push	r24
    5a8c:	9f 93       	push	r25
    5a8e:	af 93       	push	r26
    5a90:	bf 93       	push	r27
    5a92:	ef 93       	push	r30
    5a94:	ff 93       	push	r31
	twiInterruptHandler();
    5a96:	b2 dc       	rcall	.-1692   	; 0x53fc <twiInterruptHandler>
}
    5a98:	ff 91       	pop	r31
    5a9a:	ef 91       	pop	r30
    5a9c:	bf 91       	pop	r27
    5a9e:	af 91       	pop	r26
    5aa0:	9f 91       	pop	r25
    5aa2:	8f 91       	pop	r24
    5aa4:	7f 91       	pop	r23
    5aa6:	6f 91       	pop	r22
    5aa8:	5f 91       	pop	r21
    5aaa:	4f 91       	pop	r20
    5aac:	3f 91       	pop	r19
    5aae:	2f 91       	pop	r18
    5ab0:	0f 90       	pop	r0
    5ab2:	0b be       	out	0x3b, r0	; 59
    5ab4:	0f 90       	pop	r0
    5ab6:	09 be       	out	0x39, r0	; 57
    5ab8:	0f 90       	pop	r0
    5aba:	08 be       	out	0x38, r0	; 56
    5abc:	0f 90       	pop	r0
    5abe:	0f be       	out	0x3f, r0	; 63
    5ac0:	0f 90       	pop	r0
    5ac2:	1f 90       	pop	r1
    5ac4:	18 95       	reti

00005ac6 <__divsf3>:
    5ac6:	0c d0       	rcall	.+24     	; 0x5ae0 <__divsf3x>
    5ac8:	eb c0       	rjmp	.+470    	; 0x5ca0 <__fp_round>
    5aca:	e3 d0       	rcall	.+454    	; 0x5c92 <__fp_pscB>
    5acc:	40 f0       	brcs	.+16     	; 0x5ade <__divsf3+0x18>
    5ace:	da d0       	rcall	.+436    	; 0x5c84 <__fp_pscA>
    5ad0:	30 f0       	brcs	.+12     	; 0x5ade <__divsf3+0x18>
    5ad2:	21 f4       	brne	.+8      	; 0x5adc <__divsf3+0x16>
    5ad4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ad6:	19 f0       	breq	.+6      	; 0x5ade <__divsf3+0x18>
    5ad8:	cc c0       	rjmp	.+408    	; 0x5c72 <__fp_inf>
    5ada:	51 11       	cpse	r21, r1
    5adc:	15 c1       	rjmp	.+554    	; 0x5d08 <__fp_szero>
    5ade:	cf c0       	rjmp	.+414    	; 0x5c7e <__fp_nan>

00005ae0 <__divsf3x>:
    5ae0:	f0 d0       	rcall	.+480    	; 0x5cc2 <__fp_split3>
    5ae2:	98 f3       	brcs	.-26     	; 0x5aca <__divsf3+0x4>

00005ae4 <__divsf3_pse>:
    5ae4:	99 23       	and	r25, r25
    5ae6:	c9 f3       	breq	.-14     	; 0x5ada <__divsf3+0x14>
    5ae8:	55 23       	and	r21, r21
    5aea:	b1 f3       	breq	.-20     	; 0x5ad8 <__divsf3+0x12>
    5aec:	95 1b       	sub	r25, r21
    5aee:	55 0b       	sbc	r21, r21
    5af0:	bb 27       	eor	r27, r27
    5af2:	aa 27       	eor	r26, r26
    5af4:	62 17       	cp	r22, r18
    5af6:	73 07       	cpc	r23, r19
    5af8:	84 07       	cpc	r24, r20
    5afa:	38 f0       	brcs	.+14     	; 0x5b0a <__divsf3_pse+0x26>
    5afc:	9f 5f       	subi	r25, 0xFF	; 255
    5afe:	5f 4f       	sbci	r21, 0xFF	; 255
    5b00:	22 0f       	add	r18, r18
    5b02:	33 1f       	adc	r19, r19
    5b04:	44 1f       	adc	r20, r20
    5b06:	aa 1f       	adc	r26, r26
    5b08:	a9 f3       	breq	.-22     	; 0x5af4 <__divsf3_pse+0x10>
    5b0a:	33 d0       	rcall	.+102    	; 0x5b72 <__divsf3_pse+0x8e>
    5b0c:	0e 2e       	mov	r0, r30
    5b0e:	3a f0       	brmi	.+14     	; 0x5b1e <__divsf3_pse+0x3a>
    5b10:	e0 e8       	ldi	r30, 0x80	; 128
    5b12:	30 d0       	rcall	.+96     	; 0x5b74 <__divsf3_pse+0x90>
    5b14:	91 50       	subi	r25, 0x01	; 1
    5b16:	50 40       	sbci	r21, 0x00	; 0
    5b18:	e6 95       	lsr	r30
    5b1a:	00 1c       	adc	r0, r0
    5b1c:	ca f7       	brpl	.-14     	; 0x5b10 <__divsf3_pse+0x2c>
    5b1e:	29 d0       	rcall	.+82     	; 0x5b72 <__divsf3_pse+0x8e>
    5b20:	fe 2f       	mov	r31, r30
    5b22:	27 d0       	rcall	.+78     	; 0x5b72 <__divsf3_pse+0x8e>
    5b24:	66 0f       	add	r22, r22
    5b26:	77 1f       	adc	r23, r23
    5b28:	88 1f       	adc	r24, r24
    5b2a:	bb 1f       	adc	r27, r27
    5b2c:	26 17       	cp	r18, r22
    5b2e:	37 07       	cpc	r19, r23
    5b30:	48 07       	cpc	r20, r24
    5b32:	ab 07       	cpc	r26, r27
    5b34:	b0 e8       	ldi	r27, 0x80	; 128
    5b36:	09 f0       	breq	.+2      	; 0x5b3a <__divsf3_pse+0x56>
    5b38:	bb 0b       	sbc	r27, r27
    5b3a:	80 2d       	mov	r24, r0
    5b3c:	bf 01       	movw	r22, r30
    5b3e:	ff 27       	eor	r31, r31
    5b40:	93 58       	subi	r25, 0x83	; 131
    5b42:	5f 4f       	sbci	r21, 0xFF	; 255
    5b44:	2a f0       	brmi	.+10     	; 0x5b50 <__divsf3_pse+0x6c>
    5b46:	9e 3f       	cpi	r25, 0xFE	; 254
    5b48:	51 05       	cpc	r21, r1
    5b4a:	68 f0       	brcs	.+26     	; 0x5b66 <__divsf3_pse+0x82>
    5b4c:	92 c0       	rjmp	.+292    	; 0x5c72 <__fp_inf>
    5b4e:	dc c0       	rjmp	.+440    	; 0x5d08 <__fp_szero>
    5b50:	5f 3f       	cpi	r21, 0xFF	; 255
    5b52:	ec f3       	brlt	.-6      	; 0x5b4e <__divsf3_pse+0x6a>
    5b54:	98 3e       	cpi	r25, 0xE8	; 232
    5b56:	dc f3       	brlt	.-10     	; 0x5b4e <__divsf3_pse+0x6a>
    5b58:	86 95       	lsr	r24
    5b5a:	77 95       	ror	r23
    5b5c:	67 95       	ror	r22
    5b5e:	b7 95       	ror	r27
    5b60:	f7 95       	ror	r31
    5b62:	9f 5f       	subi	r25, 0xFF	; 255
    5b64:	c9 f7       	brne	.-14     	; 0x5b58 <__divsf3_pse+0x74>
    5b66:	88 0f       	add	r24, r24
    5b68:	91 1d       	adc	r25, r1
    5b6a:	96 95       	lsr	r25
    5b6c:	87 95       	ror	r24
    5b6e:	97 f9       	bld	r25, 7
    5b70:	08 95       	ret
    5b72:	e1 e0       	ldi	r30, 0x01	; 1
    5b74:	66 0f       	add	r22, r22
    5b76:	77 1f       	adc	r23, r23
    5b78:	88 1f       	adc	r24, r24
    5b7a:	bb 1f       	adc	r27, r27
    5b7c:	62 17       	cp	r22, r18
    5b7e:	73 07       	cpc	r23, r19
    5b80:	84 07       	cpc	r24, r20
    5b82:	ba 07       	cpc	r27, r26
    5b84:	20 f0       	brcs	.+8      	; 0x5b8e <__divsf3_pse+0xaa>
    5b86:	62 1b       	sub	r22, r18
    5b88:	73 0b       	sbc	r23, r19
    5b8a:	84 0b       	sbc	r24, r20
    5b8c:	ba 0b       	sbc	r27, r26
    5b8e:	ee 1f       	adc	r30, r30
    5b90:	88 f7       	brcc	.-30     	; 0x5b74 <__divsf3_pse+0x90>
    5b92:	e0 95       	com	r30
    5b94:	08 95       	ret

00005b96 <__fixsfsi>:
    5b96:	04 d0       	rcall	.+8      	; 0x5ba0 <__fixunssfsi>
    5b98:	68 94       	set
    5b9a:	b1 11       	cpse	r27, r1
    5b9c:	b5 c0       	rjmp	.+362    	; 0x5d08 <__fp_szero>
    5b9e:	08 95       	ret

00005ba0 <__fixunssfsi>:
    5ba0:	98 d0       	rcall	.+304    	; 0x5cd2 <__fp_splitA>
    5ba2:	88 f0       	brcs	.+34     	; 0x5bc6 <__fixunssfsi+0x26>
    5ba4:	9f 57       	subi	r25, 0x7F	; 127
    5ba6:	90 f0       	brcs	.+36     	; 0x5bcc <__fixunssfsi+0x2c>
    5ba8:	b9 2f       	mov	r27, r25
    5baa:	99 27       	eor	r25, r25
    5bac:	b7 51       	subi	r27, 0x17	; 23
    5bae:	a0 f0       	brcs	.+40     	; 0x5bd8 <__fixunssfsi+0x38>
    5bb0:	d1 f0       	breq	.+52     	; 0x5be6 <__fixunssfsi+0x46>
    5bb2:	66 0f       	add	r22, r22
    5bb4:	77 1f       	adc	r23, r23
    5bb6:	88 1f       	adc	r24, r24
    5bb8:	99 1f       	adc	r25, r25
    5bba:	1a f0       	brmi	.+6      	; 0x5bc2 <__fixunssfsi+0x22>
    5bbc:	ba 95       	dec	r27
    5bbe:	c9 f7       	brne	.-14     	; 0x5bb2 <__fixunssfsi+0x12>
    5bc0:	12 c0       	rjmp	.+36     	; 0x5be6 <__fixunssfsi+0x46>
    5bc2:	b1 30       	cpi	r27, 0x01	; 1
    5bc4:	81 f0       	breq	.+32     	; 0x5be6 <__fixunssfsi+0x46>
    5bc6:	9f d0       	rcall	.+318    	; 0x5d06 <__fp_zero>
    5bc8:	b1 e0       	ldi	r27, 0x01	; 1
    5bca:	08 95       	ret
    5bcc:	9c c0       	rjmp	.+312    	; 0x5d06 <__fp_zero>
    5bce:	67 2f       	mov	r22, r23
    5bd0:	78 2f       	mov	r23, r24
    5bd2:	88 27       	eor	r24, r24
    5bd4:	b8 5f       	subi	r27, 0xF8	; 248
    5bd6:	39 f0       	breq	.+14     	; 0x5be6 <__fixunssfsi+0x46>
    5bd8:	b9 3f       	cpi	r27, 0xF9	; 249
    5bda:	cc f3       	brlt	.-14     	; 0x5bce <__fixunssfsi+0x2e>
    5bdc:	86 95       	lsr	r24
    5bde:	77 95       	ror	r23
    5be0:	67 95       	ror	r22
    5be2:	b3 95       	inc	r27
    5be4:	d9 f7       	brne	.-10     	; 0x5bdc <__fixunssfsi+0x3c>
    5be6:	3e f4       	brtc	.+14     	; 0x5bf6 <__fixunssfsi+0x56>
    5be8:	90 95       	com	r25
    5bea:	80 95       	com	r24
    5bec:	70 95       	com	r23
    5bee:	61 95       	neg	r22
    5bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bf6:	08 95       	ret

00005bf8 <__floatunsisf>:
    5bf8:	e8 94       	clt
    5bfa:	09 c0       	rjmp	.+18     	; 0x5c0e <__floatsisf+0x12>

00005bfc <__floatsisf>:
    5bfc:	97 fb       	bst	r25, 7
    5bfe:	3e f4       	brtc	.+14     	; 0x5c0e <__floatsisf+0x12>
    5c00:	90 95       	com	r25
    5c02:	80 95       	com	r24
    5c04:	70 95       	com	r23
    5c06:	61 95       	neg	r22
    5c08:	7f 4f       	sbci	r23, 0xFF	; 255
    5c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0e:	99 23       	and	r25, r25
    5c10:	a9 f0       	breq	.+42     	; 0x5c3c <__floatsisf+0x40>
    5c12:	f9 2f       	mov	r31, r25
    5c14:	96 e9       	ldi	r25, 0x96	; 150
    5c16:	bb 27       	eor	r27, r27
    5c18:	93 95       	inc	r25
    5c1a:	f6 95       	lsr	r31
    5c1c:	87 95       	ror	r24
    5c1e:	77 95       	ror	r23
    5c20:	67 95       	ror	r22
    5c22:	b7 95       	ror	r27
    5c24:	f1 11       	cpse	r31, r1
    5c26:	f8 cf       	rjmp	.-16     	; 0x5c18 <__floatsisf+0x1c>
    5c28:	fa f4       	brpl	.+62     	; 0x5c68 <__floatsisf+0x6c>
    5c2a:	bb 0f       	add	r27, r27
    5c2c:	11 f4       	brne	.+4      	; 0x5c32 <__floatsisf+0x36>
    5c2e:	60 ff       	sbrs	r22, 0
    5c30:	1b c0       	rjmp	.+54     	; 0x5c68 <__floatsisf+0x6c>
    5c32:	6f 5f       	subi	r22, 0xFF	; 255
    5c34:	7f 4f       	sbci	r23, 0xFF	; 255
    5c36:	8f 4f       	sbci	r24, 0xFF	; 255
    5c38:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3a:	16 c0       	rjmp	.+44     	; 0x5c68 <__floatsisf+0x6c>
    5c3c:	88 23       	and	r24, r24
    5c3e:	11 f0       	breq	.+4      	; 0x5c44 <__floatsisf+0x48>
    5c40:	96 e9       	ldi	r25, 0x96	; 150
    5c42:	11 c0       	rjmp	.+34     	; 0x5c66 <__floatsisf+0x6a>
    5c44:	77 23       	and	r23, r23
    5c46:	21 f0       	breq	.+8      	; 0x5c50 <__floatsisf+0x54>
    5c48:	9e e8       	ldi	r25, 0x8E	; 142
    5c4a:	87 2f       	mov	r24, r23
    5c4c:	76 2f       	mov	r23, r22
    5c4e:	05 c0       	rjmp	.+10     	; 0x5c5a <__floatsisf+0x5e>
    5c50:	66 23       	and	r22, r22
    5c52:	71 f0       	breq	.+28     	; 0x5c70 <__floatsisf+0x74>
    5c54:	96 e8       	ldi	r25, 0x86	; 134
    5c56:	86 2f       	mov	r24, r22
    5c58:	70 e0       	ldi	r23, 0x00	; 0
    5c5a:	60 e0       	ldi	r22, 0x00	; 0
    5c5c:	2a f0       	brmi	.+10     	; 0x5c68 <__floatsisf+0x6c>
    5c5e:	9a 95       	dec	r25
    5c60:	66 0f       	add	r22, r22
    5c62:	77 1f       	adc	r23, r23
    5c64:	88 1f       	adc	r24, r24
    5c66:	da f7       	brpl	.-10     	; 0x5c5e <__floatsisf+0x62>
    5c68:	88 0f       	add	r24, r24
    5c6a:	96 95       	lsr	r25
    5c6c:	87 95       	ror	r24
    5c6e:	97 f9       	bld	r25, 7
    5c70:	08 95       	ret

00005c72 <__fp_inf>:
    5c72:	97 f9       	bld	r25, 7
    5c74:	9f 67       	ori	r25, 0x7F	; 127
    5c76:	80 e8       	ldi	r24, 0x80	; 128
    5c78:	70 e0       	ldi	r23, 0x00	; 0
    5c7a:	60 e0       	ldi	r22, 0x00	; 0
    5c7c:	08 95       	ret

00005c7e <__fp_nan>:
    5c7e:	9f ef       	ldi	r25, 0xFF	; 255
    5c80:	80 ec       	ldi	r24, 0xC0	; 192
    5c82:	08 95       	ret

00005c84 <__fp_pscA>:
    5c84:	00 24       	eor	r0, r0
    5c86:	0a 94       	dec	r0
    5c88:	16 16       	cp	r1, r22
    5c8a:	17 06       	cpc	r1, r23
    5c8c:	18 06       	cpc	r1, r24
    5c8e:	09 06       	cpc	r0, r25
    5c90:	08 95       	ret

00005c92 <__fp_pscB>:
    5c92:	00 24       	eor	r0, r0
    5c94:	0a 94       	dec	r0
    5c96:	12 16       	cp	r1, r18
    5c98:	13 06       	cpc	r1, r19
    5c9a:	14 06       	cpc	r1, r20
    5c9c:	05 06       	cpc	r0, r21
    5c9e:	08 95       	ret

00005ca0 <__fp_round>:
    5ca0:	09 2e       	mov	r0, r25
    5ca2:	03 94       	inc	r0
    5ca4:	00 0c       	add	r0, r0
    5ca6:	11 f4       	brne	.+4      	; 0x5cac <__fp_round+0xc>
    5ca8:	88 23       	and	r24, r24
    5caa:	52 f0       	brmi	.+20     	; 0x5cc0 <__fp_round+0x20>
    5cac:	bb 0f       	add	r27, r27
    5cae:	40 f4       	brcc	.+16     	; 0x5cc0 <__fp_round+0x20>
    5cb0:	bf 2b       	or	r27, r31
    5cb2:	11 f4       	brne	.+4      	; 0x5cb8 <__fp_round+0x18>
    5cb4:	60 ff       	sbrs	r22, 0
    5cb6:	04 c0       	rjmp	.+8      	; 0x5cc0 <__fp_round+0x20>
    5cb8:	6f 5f       	subi	r22, 0xFF	; 255
    5cba:	7f 4f       	sbci	r23, 0xFF	; 255
    5cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	08 95       	ret

00005cc2 <__fp_split3>:
    5cc2:	57 fd       	sbrc	r21, 7
    5cc4:	90 58       	subi	r25, 0x80	; 128
    5cc6:	44 0f       	add	r20, r20
    5cc8:	55 1f       	adc	r21, r21
    5cca:	59 f0       	breq	.+22     	; 0x5ce2 <__fp_splitA+0x10>
    5ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    5cce:	71 f0       	breq	.+28     	; 0x5cec <__fp_splitA+0x1a>
    5cd0:	47 95       	ror	r20

00005cd2 <__fp_splitA>:
    5cd2:	88 0f       	add	r24, r24
    5cd4:	97 fb       	bst	r25, 7
    5cd6:	99 1f       	adc	r25, r25
    5cd8:	61 f0       	breq	.+24     	; 0x5cf2 <__fp_splitA+0x20>
    5cda:	9f 3f       	cpi	r25, 0xFF	; 255
    5cdc:	79 f0       	breq	.+30     	; 0x5cfc <__fp_splitA+0x2a>
    5cde:	87 95       	ror	r24
    5ce0:	08 95       	ret
    5ce2:	12 16       	cp	r1, r18
    5ce4:	13 06       	cpc	r1, r19
    5ce6:	14 06       	cpc	r1, r20
    5ce8:	55 1f       	adc	r21, r21
    5cea:	f2 cf       	rjmp	.-28     	; 0x5cd0 <__fp_split3+0xe>
    5cec:	46 95       	lsr	r20
    5cee:	f1 df       	rcall	.-30     	; 0x5cd2 <__fp_splitA>
    5cf0:	08 c0       	rjmp	.+16     	; 0x5d02 <__fp_splitA+0x30>
    5cf2:	16 16       	cp	r1, r22
    5cf4:	17 06       	cpc	r1, r23
    5cf6:	18 06       	cpc	r1, r24
    5cf8:	99 1f       	adc	r25, r25
    5cfa:	f1 cf       	rjmp	.-30     	; 0x5cde <__fp_splitA+0xc>
    5cfc:	86 95       	lsr	r24
    5cfe:	71 05       	cpc	r23, r1
    5d00:	61 05       	cpc	r22, r1
    5d02:	08 94       	sec
    5d04:	08 95       	ret

00005d06 <__fp_zero>:
    5d06:	e8 94       	clt

00005d08 <__fp_szero>:
    5d08:	bb 27       	eor	r27, r27
    5d0a:	66 27       	eor	r22, r22
    5d0c:	77 27       	eor	r23, r23
    5d0e:	cb 01       	movw	r24, r22
    5d10:	97 f9       	bld	r25, 7
    5d12:	08 95       	ret

00005d14 <__mulsf3>:
    5d14:	0b d0       	rcall	.+22     	; 0x5d2c <__mulsf3x>
    5d16:	c4 cf       	rjmp	.-120    	; 0x5ca0 <__fp_round>
    5d18:	b5 df       	rcall	.-150    	; 0x5c84 <__fp_pscA>
    5d1a:	28 f0       	brcs	.+10     	; 0x5d26 <__mulsf3+0x12>
    5d1c:	ba df       	rcall	.-140    	; 0x5c92 <__fp_pscB>
    5d1e:	18 f0       	brcs	.+6      	; 0x5d26 <__mulsf3+0x12>
    5d20:	95 23       	and	r25, r21
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <__mulsf3+0x12>
    5d24:	a6 cf       	rjmp	.-180    	; 0x5c72 <__fp_inf>
    5d26:	ab cf       	rjmp	.-170    	; 0x5c7e <__fp_nan>
    5d28:	11 24       	eor	r1, r1
    5d2a:	ee cf       	rjmp	.-36     	; 0x5d08 <__fp_szero>

00005d2c <__mulsf3x>:
    5d2c:	ca df       	rcall	.-108    	; 0x5cc2 <__fp_split3>
    5d2e:	a0 f3       	brcs	.-24     	; 0x5d18 <__mulsf3+0x4>

00005d30 <__mulsf3_pse>:
    5d30:	95 9f       	mul	r25, r21
    5d32:	d1 f3       	breq	.-12     	; 0x5d28 <__mulsf3+0x14>
    5d34:	95 0f       	add	r25, r21
    5d36:	50 e0       	ldi	r21, 0x00	; 0
    5d38:	55 1f       	adc	r21, r21
    5d3a:	62 9f       	mul	r22, r18
    5d3c:	f0 01       	movw	r30, r0
    5d3e:	72 9f       	mul	r23, r18
    5d40:	bb 27       	eor	r27, r27
    5d42:	f0 0d       	add	r31, r0
    5d44:	b1 1d       	adc	r27, r1
    5d46:	63 9f       	mul	r22, r19
    5d48:	aa 27       	eor	r26, r26
    5d4a:	f0 0d       	add	r31, r0
    5d4c:	b1 1d       	adc	r27, r1
    5d4e:	aa 1f       	adc	r26, r26
    5d50:	64 9f       	mul	r22, r20
    5d52:	66 27       	eor	r22, r22
    5d54:	b0 0d       	add	r27, r0
    5d56:	a1 1d       	adc	r26, r1
    5d58:	66 1f       	adc	r22, r22
    5d5a:	82 9f       	mul	r24, r18
    5d5c:	22 27       	eor	r18, r18
    5d5e:	b0 0d       	add	r27, r0
    5d60:	a1 1d       	adc	r26, r1
    5d62:	62 1f       	adc	r22, r18
    5d64:	73 9f       	mul	r23, r19
    5d66:	b0 0d       	add	r27, r0
    5d68:	a1 1d       	adc	r26, r1
    5d6a:	62 1f       	adc	r22, r18
    5d6c:	83 9f       	mul	r24, r19
    5d6e:	a0 0d       	add	r26, r0
    5d70:	61 1d       	adc	r22, r1
    5d72:	22 1f       	adc	r18, r18
    5d74:	74 9f       	mul	r23, r20
    5d76:	33 27       	eor	r19, r19
    5d78:	a0 0d       	add	r26, r0
    5d7a:	61 1d       	adc	r22, r1
    5d7c:	23 1f       	adc	r18, r19
    5d7e:	84 9f       	mul	r24, r20
    5d80:	60 0d       	add	r22, r0
    5d82:	21 1d       	adc	r18, r1
    5d84:	82 2f       	mov	r24, r18
    5d86:	76 2f       	mov	r23, r22
    5d88:	6a 2f       	mov	r22, r26
    5d8a:	11 24       	eor	r1, r1
    5d8c:	9f 57       	subi	r25, 0x7F	; 127
    5d8e:	50 40       	sbci	r21, 0x00	; 0
    5d90:	8a f0       	brmi	.+34     	; 0x5db4 <__mulsf3_pse+0x84>
    5d92:	e1 f0       	breq	.+56     	; 0x5dcc <__mulsf3_pse+0x9c>
    5d94:	88 23       	and	r24, r24
    5d96:	4a f0       	brmi	.+18     	; 0x5daa <__mulsf3_pse+0x7a>
    5d98:	ee 0f       	add	r30, r30
    5d9a:	ff 1f       	adc	r31, r31
    5d9c:	bb 1f       	adc	r27, r27
    5d9e:	66 1f       	adc	r22, r22
    5da0:	77 1f       	adc	r23, r23
    5da2:	88 1f       	adc	r24, r24
    5da4:	91 50       	subi	r25, 0x01	; 1
    5da6:	50 40       	sbci	r21, 0x00	; 0
    5da8:	a9 f7       	brne	.-22     	; 0x5d94 <__mulsf3_pse+0x64>
    5daa:	9e 3f       	cpi	r25, 0xFE	; 254
    5dac:	51 05       	cpc	r21, r1
    5dae:	70 f0       	brcs	.+28     	; 0x5dcc <__mulsf3_pse+0x9c>
    5db0:	60 cf       	rjmp	.-320    	; 0x5c72 <__fp_inf>
    5db2:	aa cf       	rjmp	.-172    	; 0x5d08 <__fp_szero>
    5db4:	5f 3f       	cpi	r21, 0xFF	; 255
    5db6:	ec f3       	brlt	.-6      	; 0x5db2 <__mulsf3_pse+0x82>
    5db8:	98 3e       	cpi	r25, 0xE8	; 232
    5dba:	dc f3       	brlt	.-10     	; 0x5db2 <__mulsf3_pse+0x82>
    5dbc:	86 95       	lsr	r24
    5dbe:	77 95       	ror	r23
    5dc0:	67 95       	ror	r22
    5dc2:	b7 95       	ror	r27
    5dc4:	f7 95       	ror	r31
    5dc6:	e7 95       	ror	r30
    5dc8:	9f 5f       	subi	r25, 0xFF	; 255
    5dca:	c1 f7       	brne	.-16     	; 0x5dbc <__mulsf3_pse+0x8c>
    5dcc:	fe 2b       	or	r31, r30
    5dce:	88 0f       	add	r24, r24
    5dd0:	91 1d       	adc	r25, r1
    5dd2:	96 95       	lsr	r25
    5dd4:	87 95       	ror	r24
    5dd6:	97 f9       	bld	r25, 7
    5dd8:	08 95       	ret

00005dda <vfprintf>:
    5dda:	2f 92       	push	r2
    5ddc:	3f 92       	push	r3
    5dde:	4f 92       	push	r4
    5de0:	5f 92       	push	r5
    5de2:	6f 92       	push	r6
    5de4:	7f 92       	push	r7
    5de6:	8f 92       	push	r8
    5de8:	9f 92       	push	r9
    5dea:	af 92       	push	r10
    5dec:	bf 92       	push	r11
    5dee:	cf 92       	push	r12
    5df0:	df 92       	push	r13
    5df2:	ef 92       	push	r14
    5df4:	ff 92       	push	r15
    5df6:	0f 93       	push	r16
    5df8:	1f 93       	push	r17
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
    5e02:	63 97       	sbiw	r28, 0x13	; 19
    5e04:	cd bf       	out	0x3d, r28	; 61
    5e06:	de bf       	out	0x3e, r29	; 62
    5e08:	6c 01       	movw	r12, r24
    5e0a:	4b 01       	movw	r8, r22
    5e0c:	2a 01       	movw	r4, r20
    5e0e:	fc 01       	movw	r30, r24
    5e10:	16 82       	std	Z+6, r1	; 0x06
    5e12:	17 82       	std	Z+7, r1	; 0x07
    5e14:	83 81       	ldd	r24, Z+3	; 0x03
    5e16:	81 ff       	sbrs	r24, 1
    5e18:	29 c3       	rjmp	.+1618   	; 0x646c <vfprintf+0x692>
    5e1a:	ae 01       	movw	r20, r28
    5e1c:	4f 5f       	subi	r20, 0xFF	; 255
    5e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e20:	3a 01       	movw	r6, r20
    5e22:	f6 01       	movw	r30, r12
    5e24:	93 81       	ldd	r25, Z+3	; 0x03
    5e26:	f4 01       	movw	r30, r8
    5e28:	93 fd       	sbrc	r25, 3
    5e2a:	85 91       	lpm	r24, Z+
    5e2c:	93 ff       	sbrs	r25, 3
    5e2e:	81 91       	ld	r24, Z+
    5e30:	4f 01       	movw	r8, r30
    5e32:	88 23       	and	r24, r24
    5e34:	09 f4       	brne	.+2      	; 0x5e38 <vfprintf+0x5e>
    5e36:	16 c3       	rjmp	.+1580   	; 0x6464 <vfprintf+0x68a>
    5e38:	85 32       	cpi	r24, 0x25	; 37
    5e3a:	39 f4       	brne	.+14     	; 0x5e4a <vfprintf+0x70>
    5e3c:	93 fd       	sbrc	r25, 3
    5e3e:	85 91       	lpm	r24, Z+
    5e40:	93 ff       	sbrs	r25, 3
    5e42:	81 91       	ld	r24, Z+
    5e44:	4f 01       	movw	r8, r30
    5e46:	85 32       	cpi	r24, 0x25	; 37
    5e48:	31 f4       	brne	.+12     	; 0x5e56 <vfprintf+0x7c>
    5e4a:	b6 01       	movw	r22, r12
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	90 d4       	rcall	.+2336   	; 0x6770 <fputc>
    5e50:	52 01       	movw	r10, r4
    5e52:	25 01       	movw	r4, r10
    5e54:	e6 cf       	rjmp	.-52     	; 0x5e22 <vfprintf+0x48>
    5e56:	10 e0       	ldi	r17, 0x00	; 0
    5e58:	f1 2c       	mov	r15, r1
    5e5a:	20 e0       	ldi	r18, 0x00	; 0
    5e5c:	20 32       	cpi	r18, 0x20	; 32
    5e5e:	a0 f4       	brcc	.+40     	; 0x5e88 <vfprintf+0xae>
    5e60:	8b 32       	cpi	r24, 0x2B	; 43
    5e62:	69 f0       	breq	.+26     	; 0x5e7e <vfprintf+0xa4>
    5e64:	30 f4       	brcc	.+12     	; 0x5e72 <vfprintf+0x98>
    5e66:	80 32       	cpi	r24, 0x20	; 32
    5e68:	59 f0       	breq	.+22     	; 0x5e80 <vfprintf+0xa6>
    5e6a:	83 32       	cpi	r24, 0x23	; 35
    5e6c:	69 f4       	brne	.+26     	; 0x5e88 <vfprintf+0xae>
    5e6e:	20 61       	ori	r18, 0x10	; 16
    5e70:	2c c0       	rjmp	.+88     	; 0x5eca <vfprintf+0xf0>
    5e72:	8d 32       	cpi	r24, 0x2D	; 45
    5e74:	39 f0       	breq	.+14     	; 0x5e84 <vfprintf+0xaa>
    5e76:	80 33       	cpi	r24, 0x30	; 48
    5e78:	39 f4       	brne	.+14     	; 0x5e88 <vfprintf+0xae>
    5e7a:	21 60       	ori	r18, 0x01	; 1
    5e7c:	26 c0       	rjmp	.+76     	; 0x5eca <vfprintf+0xf0>
    5e7e:	22 60       	ori	r18, 0x02	; 2
    5e80:	24 60       	ori	r18, 0x04	; 4
    5e82:	23 c0       	rjmp	.+70     	; 0x5eca <vfprintf+0xf0>
    5e84:	28 60       	ori	r18, 0x08	; 8
    5e86:	21 c0       	rjmp	.+66     	; 0x5eca <vfprintf+0xf0>
    5e88:	27 fd       	sbrc	r18, 7
    5e8a:	27 c0       	rjmp	.+78     	; 0x5eda <vfprintf+0x100>
    5e8c:	30 ed       	ldi	r19, 0xD0	; 208
    5e8e:	38 0f       	add	r19, r24
    5e90:	3a 30       	cpi	r19, 0x0A	; 10
    5e92:	78 f4       	brcc	.+30     	; 0x5eb2 <vfprintf+0xd8>
    5e94:	26 ff       	sbrs	r18, 6
    5e96:	06 c0       	rjmp	.+12     	; 0x5ea4 <vfprintf+0xca>
    5e98:	fa e0       	ldi	r31, 0x0A	; 10
    5e9a:	1f 9f       	mul	r17, r31
    5e9c:	30 0d       	add	r19, r0
    5e9e:	11 24       	eor	r1, r1
    5ea0:	13 2f       	mov	r17, r19
    5ea2:	13 c0       	rjmp	.+38     	; 0x5eca <vfprintf+0xf0>
    5ea4:	4a e0       	ldi	r20, 0x0A	; 10
    5ea6:	f4 9e       	mul	r15, r20
    5ea8:	30 0d       	add	r19, r0
    5eaa:	11 24       	eor	r1, r1
    5eac:	f3 2e       	mov	r15, r19
    5eae:	20 62       	ori	r18, 0x20	; 32
    5eb0:	0c c0       	rjmp	.+24     	; 0x5eca <vfprintf+0xf0>
    5eb2:	8e 32       	cpi	r24, 0x2E	; 46
    5eb4:	21 f4       	brne	.+8      	; 0x5ebe <vfprintf+0xe4>
    5eb6:	26 fd       	sbrc	r18, 6
    5eb8:	d5 c2       	rjmp	.+1450   	; 0x6464 <vfprintf+0x68a>
    5eba:	20 64       	ori	r18, 0x40	; 64
    5ebc:	06 c0       	rjmp	.+12     	; 0x5eca <vfprintf+0xf0>
    5ebe:	8c 36       	cpi	r24, 0x6C	; 108
    5ec0:	11 f4       	brne	.+4      	; 0x5ec6 <vfprintf+0xec>
    5ec2:	20 68       	ori	r18, 0x80	; 128
    5ec4:	02 c0       	rjmp	.+4      	; 0x5eca <vfprintf+0xf0>
    5ec6:	88 36       	cpi	r24, 0x68	; 104
    5ec8:	41 f4       	brne	.+16     	; 0x5eda <vfprintf+0x100>
    5eca:	f4 01       	movw	r30, r8
    5ecc:	93 fd       	sbrc	r25, 3
    5ece:	85 91       	lpm	r24, Z+
    5ed0:	93 ff       	sbrs	r25, 3
    5ed2:	81 91       	ld	r24, Z+
    5ed4:	4f 01       	movw	r8, r30
    5ed6:	81 11       	cpse	r24, r1
    5ed8:	c1 cf       	rjmp	.-126    	; 0x5e5c <vfprintf+0x82>
    5eda:	9b eb       	ldi	r25, 0xBB	; 187
    5edc:	98 0f       	add	r25, r24
    5ede:	93 30       	cpi	r25, 0x03	; 3
    5ee0:	18 f4       	brcc	.+6      	; 0x5ee8 <vfprintf+0x10e>
    5ee2:	20 61       	ori	r18, 0x10	; 16
    5ee4:	80 5e       	subi	r24, 0xE0	; 224
    5ee6:	06 c0       	rjmp	.+12     	; 0x5ef4 <vfprintf+0x11a>
    5ee8:	9b e9       	ldi	r25, 0x9B	; 155
    5eea:	98 0f       	add	r25, r24
    5eec:	93 30       	cpi	r25, 0x03	; 3
    5eee:	08 f0       	brcs	.+2      	; 0x5ef2 <vfprintf+0x118>
    5ef0:	64 c1       	rjmp	.+712    	; 0x61ba <vfprintf+0x3e0>
    5ef2:	2f 7e       	andi	r18, 0xEF	; 239
    5ef4:	26 ff       	sbrs	r18, 6
    5ef6:	16 e0       	ldi	r17, 0x06	; 6
    5ef8:	2f 73       	andi	r18, 0x3F	; 63
    5efa:	32 2e       	mov	r3, r18
    5efc:	85 36       	cpi	r24, 0x65	; 101
    5efe:	19 f4       	brne	.+6      	; 0x5f06 <vfprintf+0x12c>
    5f00:	20 64       	ori	r18, 0x40	; 64
    5f02:	32 2e       	mov	r3, r18
    5f04:	08 c0       	rjmp	.+16     	; 0x5f16 <vfprintf+0x13c>
    5f06:	86 36       	cpi	r24, 0x66	; 102
    5f08:	21 f4       	brne	.+8      	; 0x5f12 <vfprintf+0x138>
    5f0a:	f2 2f       	mov	r31, r18
    5f0c:	f0 68       	ori	r31, 0x80	; 128
    5f0e:	3f 2e       	mov	r3, r31
    5f10:	02 c0       	rjmp	.+4      	; 0x5f16 <vfprintf+0x13c>
    5f12:	11 11       	cpse	r17, r1
    5f14:	11 50       	subi	r17, 0x01	; 1
    5f16:	37 fe       	sbrs	r3, 7
    5f18:	07 c0       	rjmp	.+14     	; 0x5f28 <vfprintf+0x14e>
    5f1a:	1c 33       	cpi	r17, 0x3C	; 60
    5f1c:	50 f4       	brcc	.+20     	; 0x5f32 <vfprintf+0x158>
    5f1e:	ee 24       	eor	r14, r14
    5f20:	e3 94       	inc	r14
    5f22:	e1 0e       	add	r14, r17
    5f24:	27 e0       	ldi	r18, 0x07	; 7
    5f26:	0b c0       	rjmp	.+22     	; 0x5f3e <vfprintf+0x164>
    5f28:	18 30       	cpi	r17, 0x08	; 8
    5f2a:	38 f0       	brcs	.+14     	; 0x5f3a <vfprintf+0x160>
    5f2c:	27 e0       	ldi	r18, 0x07	; 7
    5f2e:	17 e0       	ldi	r17, 0x07	; 7
    5f30:	05 c0       	rjmp	.+10     	; 0x5f3c <vfprintf+0x162>
    5f32:	27 e0       	ldi	r18, 0x07	; 7
    5f34:	4c e3       	ldi	r20, 0x3C	; 60
    5f36:	e4 2e       	mov	r14, r20
    5f38:	02 c0       	rjmp	.+4      	; 0x5f3e <vfprintf+0x164>
    5f3a:	21 2f       	mov	r18, r17
    5f3c:	e1 2c       	mov	r14, r1
    5f3e:	52 01       	movw	r10, r4
    5f40:	44 e0       	ldi	r20, 0x04	; 4
    5f42:	a4 0e       	add	r10, r20
    5f44:	b1 1c       	adc	r11, r1
    5f46:	f2 01       	movw	r30, r4
    5f48:	60 81       	ld	r22, Z
    5f4a:	71 81       	ldd	r23, Z+1	; 0x01
    5f4c:	82 81       	ldd	r24, Z+2	; 0x02
    5f4e:	93 81       	ldd	r25, Z+3	; 0x03
    5f50:	0e 2d       	mov	r16, r14
    5f52:	a3 01       	movw	r20, r6
    5f54:	e6 d2       	rcall	.+1484   	; 0x6522 <__ftoa_engine>
    5f56:	2c 01       	movw	r4, r24
    5f58:	09 81       	ldd	r16, Y+1	; 0x01
    5f5a:	00 ff       	sbrs	r16, 0
    5f5c:	02 c0       	rjmp	.+4      	; 0x5f62 <vfprintf+0x188>
    5f5e:	03 ff       	sbrs	r16, 3
    5f60:	07 c0       	rjmp	.+14     	; 0x5f70 <vfprintf+0x196>
    5f62:	31 fc       	sbrc	r3, 1
    5f64:	08 c0       	rjmp	.+16     	; 0x5f76 <vfprintf+0x19c>
    5f66:	32 fe       	sbrs	r3, 2
    5f68:	09 c0       	rjmp	.+18     	; 0x5f7c <vfprintf+0x1a2>
    5f6a:	30 e2       	ldi	r19, 0x20	; 32
    5f6c:	23 2e       	mov	r2, r19
    5f6e:	07 c0       	rjmp	.+14     	; 0x5f7e <vfprintf+0x1a4>
    5f70:	2d e2       	ldi	r18, 0x2D	; 45
    5f72:	22 2e       	mov	r2, r18
    5f74:	04 c0       	rjmp	.+8      	; 0x5f7e <vfprintf+0x1a4>
    5f76:	9b e2       	ldi	r25, 0x2B	; 43
    5f78:	29 2e       	mov	r2, r25
    5f7a:	01 c0       	rjmp	.+2      	; 0x5f7e <vfprintf+0x1a4>
    5f7c:	21 2c       	mov	r2, r1
    5f7e:	80 2f       	mov	r24, r16
    5f80:	8c 70       	andi	r24, 0x0C	; 12
    5f82:	19 f0       	breq	.+6      	; 0x5f8a <vfprintf+0x1b0>
    5f84:	21 10       	cpse	r2, r1
    5f86:	51 c2       	rjmp	.+1186   	; 0x642a <vfprintf+0x650>
    5f88:	8d c2       	rjmp	.+1306   	; 0x64a4 <vfprintf+0x6ca>
    5f8a:	37 fe       	sbrs	r3, 7
    5f8c:	0f c0       	rjmp	.+30     	; 0x5fac <vfprintf+0x1d2>
    5f8e:	e4 0c       	add	r14, r4
    5f90:	04 ff       	sbrs	r16, 4
    5f92:	04 c0       	rjmp	.+8      	; 0x5f9c <vfprintf+0x1c2>
    5f94:	8a 81       	ldd	r24, Y+2	; 0x02
    5f96:	81 33       	cpi	r24, 0x31	; 49
    5f98:	09 f4       	brne	.+2      	; 0x5f9c <vfprintf+0x1c2>
    5f9a:	ea 94       	dec	r14
    5f9c:	1e 14       	cp	r1, r14
    5f9e:	74 f5       	brge	.+92     	; 0x5ffc <vfprintf+0x222>
    5fa0:	f8 e0       	ldi	r31, 0x08	; 8
    5fa2:	fe 15       	cp	r31, r14
    5fa4:	78 f5       	brcc	.+94     	; 0x6004 <vfprintf+0x22a>
    5fa6:	88 e0       	ldi	r24, 0x08	; 8
    5fa8:	e8 2e       	mov	r14, r24
    5faa:	2c c0       	rjmp	.+88     	; 0x6004 <vfprintf+0x22a>
    5fac:	36 fc       	sbrc	r3, 6
    5fae:	2a c0       	rjmp	.+84     	; 0x6004 <vfprintf+0x22a>
    5fb0:	81 2f       	mov	r24, r17
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	84 15       	cp	r24, r4
    5fb6:	95 05       	cpc	r25, r5
    5fb8:	9c f0       	brlt	.+38     	; 0x5fe0 <vfprintf+0x206>
    5fba:	2c ef       	ldi	r18, 0xFC	; 252
    5fbc:	42 16       	cp	r4, r18
    5fbe:	2f ef       	ldi	r18, 0xFF	; 255
    5fc0:	52 06       	cpc	r5, r18
    5fc2:	74 f0       	brlt	.+28     	; 0x5fe0 <vfprintf+0x206>
    5fc4:	43 2d       	mov	r20, r3
    5fc6:	40 68       	ori	r20, 0x80	; 128
    5fc8:	34 2e       	mov	r3, r20
    5fca:	0a c0       	rjmp	.+20     	; 0x5fe0 <vfprintf+0x206>
    5fcc:	e2 e0       	ldi	r30, 0x02	; 2
    5fce:	f0 e0       	ldi	r31, 0x00	; 0
    5fd0:	ec 0f       	add	r30, r28
    5fd2:	fd 1f       	adc	r31, r29
    5fd4:	e1 0f       	add	r30, r17
    5fd6:	f1 1d       	adc	r31, r1
    5fd8:	80 81       	ld	r24, Z
    5fda:	80 33       	cpi	r24, 0x30	; 48
    5fdc:	19 f4       	brne	.+6      	; 0x5fe4 <vfprintf+0x20a>
    5fde:	11 50       	subi	r17, 0x01	; 1
    5fe0:	11 11       	cpse	r17, r1
    5fe2:	f4 cf       	rjmp	.-24     	; 0x5fcc <vfprintf+0x1f2>
    5fe4:	37 fe       	sbrs	r3, 7
    5fe6:	0e c0       	rjmp	.+28     	; 0x6004 <vfprintf+0x22a>
    5fe8:	ee 24       	eor	r14, r14
    5fea:	e3 94       	inc	r14
    5fec:	e1 0e       	add	r14, r17
    5fee:	81 2f       	mov	r24, r17
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	48 16       	cp	r4, r24
    5ff4:	59 06       	cpc	r5, r25
    5ff6:	2c f4       	brge	.+10     	; 0x6002 <vfprintf+0x228>
    5ff8:	14 19       	sub	r17, r4
    5ffa:	04 c0       	rjmp	.+8      	; 0x6004 <vfprintf+0x22a>
    5ffc:	ee 24       	eor	r14, r14
    5ffe:	e3 94       	inc	r14
    6000:	01 c0       	rjmp	.+2      	; 0x6004 <vfprintf+0x22a>
    6002:	10 e0       	ldi	r17, 0x00	; 0
    6004:	37 fe       	sbrs	r3, 7
    6006:	06 c0       	rjmp	.+12     	; 0x6014 <vfprintf+0x23a>
    6008:	14 14       	cp	r1, r4
    600a:	15 04       	cpc	r1, r5
    600c:	34 f4       	brge	.+12     	; 0x601a <vfprintf+0x240>
    600e:	c2 01       	movw	r24, r4
    6010:	01 96       	adiw	r24, 0x01	; 1
    6012:	05 c0       	rjmp	.+10     	; 0x601e <vfprintf+0x244>
    6014:	85 e0       	ldi	r24, 0x05	; 5
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	02 c0       	rjmp	.+4      	; 0x601e <vfprintf+0x244>
    601a:	81 e0       	ldi	r24, 0x01	; 1
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	21 10       	cpse	r2, r1
    6020:	01 96       	adiw	r24, 0x01	; 1
    6022:	11 23       	and	r17, r17
    6024:	31 f0       	breq	.+12     	; 0x6032 <vfprintf+0x258>
    6026:	21 2f       	mov	r18, r17
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	2f 5f       	subi	r18, 0xFF	; 255
    602c:	3f 4f       	sbci	r19, 0xFF	; 255
    602e:	82 0f       	add	r24, r18
    6030:	93 1f       	adc	r25, r19
    6032:	2f 2d       	mov	r18, r15
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	82 17       	cp	r24, r18
    6038:	93 07       	cpc	r25, r19
    603a:	14 f4       	brge	.+4      	; 0x6040 <vfprintf+0x266>
    603c:	f8 1a       	sub	r15, r24
    603e:	01 c0       	rjmp	.+2      	; 0x6042 <vfprintf+0x268>
    6040:	f1 2c       	mov	r15, r1
    6042:	83 2d       	mov	r24, r3
    6044:	89 70       	andi	r24, 0x09	; 9
    6046:	41 f4       	brne	.+16     	; 0x6058 <vfprintf+0x27e>
    6048:	ff 20       	and	r15, r15
    604a:	31 f0       	breq	.+12     	; 0x6058 <vfprintf+0x27e>
    604c:	b6 01       	movw	r22, r12
    604e:	80 e2       	ldi	r24, 0x20	; 32
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	8e d3       	rcall	.+1820   	; 0x6770 <fputc>
    6054:	fa 94       	dec	r15
    6056:	f8 cf       	rjmp	.-16     	; 0x6048 <vfprintf+0x26e>
    6058:	22 20       	and	r2, r2
    605a:	21 f0       	breq	.+8      	; 0x6064 <vfprintf+0x28a>
    605c:	b6 01       	movw	r22, r12
    605e:	82 2d       	mov	r24, r2
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	86 d3       	rcall	.+1804   	; 0x6770 <fputc>
    6064:	33 fc       	sbrc	r3, 3
    6066:	08 c0       	rjmp	.+16     	; 0x6078 <vfprintf+0x29e>
    6068:	ff 20       	and	r15, r15
    606a:	31 f0       	breq	.+12     	; 0x6078 <vfprintf+0x29e>
    606c:	b6 01       	movw	r22, r12
    606e:	80 e3       	ldi	r24, 0x30	; 48
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	7e d3       	rcall	.+1788   	; 0x6770 <fputc>
    6074:	fa 94       	dec	r15
    6076:	f8 cf       	rjmp	.-16     	; 0x6068 <vfprintf+0x28e>
    6078:	37 fe       	sbrs	r3, 7
    607a:	58 c0       	rjmp	.+176    	; 0x612c <vfprintf+0x352>
    607c:	94 2d       	mov	r25, r4
    607e:	85 2d       	mov	r24, r5
    6080:	57 fe       	sbrs	r5, 7
    6082:	02 c0       	rjmp	.+4      	; 0x6088 <vfprintf+0x2ae>
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	80 e0       	ldi	r24, 0x00	; 0
    6088:	29 2e       	mov	r2, r25
    608a:	38 2e       	mov	r3, r24
    608c:	20 e0       	ldi	r18, 0x00	; 0
    608e:	30 e0       	ldi	r19, 0x00	; 0
    6090:	a2 01       	movw	r20, r4
    6092:	4e 19       	sub	r20, r14
    6094:	51 09       	sbc	r21, r1
    6096:	4c 87       	std	Y+12, r20	; 0x0c
    6098:	5d 87       	std	Y+13, r21	; 0x0d
    609a:	a2 01       	movw	r20, r4
    609c:	42 19       	sub	r20, r2
    609e:	53 09       	sbc	r21, r3
    60a0:	4e 87       	std	Y+14, r20	; 0x0e
    60a2:	5f 87       	std	Y+15, r21	; 0x0f
    60a4:	61 2f       	mov	r22, r17
    60a6:	70 e0       	ldi	r23, 0x00	; 0
    60a8:	44 27       	eor	r20, r20
    60aa:	55 27       	eor	r21, r21
    60ac:	46 1b       	sub	r20, r22
    60ae:	57 0b       	sbc	r21, r23
    60b0:	48 8b       	std	Y+16, r20	; 0x10
    60b2:	59 8b       	std	Y+17, r21	; 0x11
    60b4:	5f ef       	ldi	r21, 0xFF	; 255
    60b6:	25 16       	cp	r2, r21
    60b8:	35 06       	cpc	r3, r21
    60ba:	41 f4       	brne	.+16     	; 0x60cc <vfprintf+0x2f2>
    60bc:	b6 01       	movw	r22, r12
    60be:	8e e2       	ldi	r24, 0x2E	; 46
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	2a 8b       	std	Y+18, r18	; 0x12
    60c4:	3b 8b       	std	Y+19, r19	; 0x13
    60c6:	54 d3       	rcall	.+1704   	; 0x6770 <fputc>
    60c8:	3b 89       	ldd	r19, Y+19	; 0x13
    60ca:	2a 89       	ldd	r18, Y+18	; 0x12
    60cc:	42 14       	cp	r4, r2
    60ce:	53 04       	cpc	r5, r3
    60d0:	6c f0       	brlt	.+26     	; 0x60ec <vfprintf+0x312>
    60d2:	4c 85       	ldd	r20, Y+12	; 0x0c
    60d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    60d6:	42 15       	cp	r20, r2
    60d8:	53 05       	cpc	r21, r3
    60da:	44 f4       	brge	.+16     	; 0x60ec <vfprintf+0x312>
    60dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    60de:	ff 85       	ldd	r31, Y+15	; 0x0f
    60e0:	e2 0f       	add	r30, r18
    60e2:	f3 1f       	adc	r31, r19
    60e4:	e6 0d       	add	r30, r6
    60e6:	f7 1d       	adc	r31, r7
    60e8:	81 81       	ldd	r24, Z+1	; 0x01
    60ea:	01 c0       	rjmp	.+2      	; 0x60ee <vfprintf+0x314>
    60ec:	80 e3       	ldi	r24, 0x30	; 48
    60ee:	51 e0       	ldi	r21, 0x01	; 1
    60f0:	25 1a       	sub	r2, r21
    60f2:	31 08       	sbc	r3, r1
    60f4:	2f 5f       	subi	r18, 0xFF	; 255
    60f6:	3f 4f       	sbci	r19, 0xFF	; 255
    60f8:	48 89       	ldd	r20, Y+16	; 0x10
    60fa:	59 89       	ldd	r21, Y+17	; 0x11
    60fc:	24 16       	cp	r2, r20
    60fe:	35 06       	cpc	r3, r21
    6100:	44 f0       	brlt	.+16     	; 0x6112 <vfprintf+0x338>
    6102:	b6 01       	movw	r22, r12
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	2a 8b       	std	Y+18, r18	; 0x12
    6108:	3b 8b       	std	Y+19, r19	; 0x13
    610a:	32 d3       	rcall	.+1636   	; 0x6770 <fputc>
    610c:	2a 89       	ldd	r18, Y+18	; 0x12
    610e:	3b 89       	ldd	r19, Y+19	; 0x13
    6110:	d1 cf       	rjmp	.-94     	; 0x60b4 <vfprintf+0x2da>
    6112:	24 14       	cp	r2, r4
    6114:	35 04       	cpc	r3, r5
    6116:	39 f4       	brne	.+14     	; 0x6126 <vfprintf+0x34c>
    6118:	9a 81       	ldd	r25, Y+2	; 0x02
    611a:	96 33       	cpi	r25, 0x36	; 54
    611c:	18 f4       	brcc	.+6      	; 0x6124 <vfprintf+0x34a>
    611e:	95 33       	cpi	r25, 0x35	; 53
    6120:	11 f4       	brne	.+4      	; 0x6126 <vfprintf+0x34c>
    6122:	04 ff       	sbrs	r16, 4
    6124:	81 e3       	ldi	r24, 0x31	; 49
    6126:	b6 01       	movw	r22, r12
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	45 c0       	rjmp	.+138    	; 0x61b6 <vfprintf+0x3dc>
    612c:	8a 81       	ldd	r24, Y+2	; 0x02
    612e:	81 33       	cpi	r24, 0x31	; 49
    6130:	09 f0       	breq	.+2      	; 0x6134 <vfprintf+0x35a>
    6132:	0f 7e       	andi	r16, 0xEF	; 239
    6134:	b6 01       	movw	r22, r12
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	1b d3       	rcall	.+1590   	; 0x6770 <fputc>
    613a:	11 11       	cpse	r17, r1
    613c:	05 c0       	rjmp	.+10     	; 0x6148 <vfprintf+0x36e>
    613e:	34 fc       	sbrc	r3, 4
    6140:	16 c0       	rjmp	.+44     	; 0x616e <vfprintf+0x394>
    6142:	85 e6       	ldi	r24, 0x65	; 101
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	15 c0       	rjmp	.+42     	; 0x6172 <vfprintf+0x398>
    6148:	b6 01       	movw	r22, r12
    614a:	8e e2       	ldi	r24, 0x2E	; 46
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	10 d3       	rcall	.+1568   	; 0x6770 <fputc>
    6150:	82 e0       	ldi	r24, 0x02	; 2
    6152:	ee 24       	eor	r14, r14
    6154:	e3 94       	inc	r14
    6156:	e8 0e       	add	r14, r24
    6158:	f3 01       	movw	r30, r6
    615a:	e8 0f       	add	r30, r24
    615c:	f1 1d       	adc	r31, r1
    615e:	80 81       	ld	r24, Z
    6160:	b6 01       	movw	r22, r12
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	05 d3       	rcall	.+1546   	; 0x6770 <fputc>
    6166:	11 50       	subi	r17, 0x01	; 1
    6168:	8e 2d       	mov	r24, r14
    616a:	99 f7       	brne	.-26     	; 0x6152 <vfprintf+0x378>
    616c:	e8 cf       	rjmp	.-48     	; 0x613e <vfprintf+0x364>
    616e:	85 e4       	ldi	r24, 0x45	; 69
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	b6 01       	movw	r22, r12
    6174:	fd d2       	rcall	.+1530   	; 0x6770 <fputc>
    6176:	57 fc       	sbrc	r5, 7
    6178:	05 c0       	rjmp	.+10     	; 0x6184 <vfprintf+0x3aa>
    617a:	41 14       	cp	r4, r1
    617c:	51 04       	cpc	r5, r1
    617e:	39 f4       	brne	.+14     	; 0x618e <vfprintf+0x3b4>
    6180:	04 ff       	sbrs	r16, 4
    6182:	05 c0       	rjmp	.+10     	; 0x618e <vfprintf+0x3b4>
    6184:	51 94       	neg	r5
    6186:	41 94       	neg	r4
    6188:	51 08       	sbc	r5, r1
    618a:	8d e2       	ldi	r24, 0x2D	; 45
    618c:	01 c0       	rjmp	.+2      	; 0x6190 <vfprintf+0x3b6>
    618e:	8b e2       	ldi	r24, 0x2B	; 43
    6190:	b6 01       	movw	r22, r12
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	ed d2       	rcall	.+1498   	; 0x6770 <fputc>
    6196:	80 e3       	ldi	r24, 0x30	; 48
    6198:	9a e0       	ldi	r25, 0x0A	; 10
    619a:	49 16       	cp	r4, r25
    619c:	51 04       	cpc	r5, r1
    619e:	2c f0       	brlt	.+10     	; 0x61aa <vfprintf+0x3d0>
    61a0:	8f 5f       	subi	r24, 0xFF	; 255
    61a2:	5a e0       	ldi	r21, 0x0A	; 10
    61a4:	45 1a       	sub	r4, r21
    61a6:	51 08       	sbc	r5, r1
    61a8:	f7 cf       	rjmp	.-18     	; 0x6198 <vfprintf+0x3be>
    61aa:	b6 01       	movw	r22, r12
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	e0 d2       	rcall	.+1472   	; 0x6770 <fputc>
    61b0:	b6 01       	movw	r22, r12
    61b2:	c2 01       	movw	r24, r4
    61b4:	c0 96       	adiw	r24, 0x30	; 48
    61b6:	dc d2       	rcall	.+1464   	; 0x6770 <fputc>
    61b8:	4c c1       	rjmp	.+664    	; 0x6452 <vfprintf+0x678>
    61ba:	83 36       	cpi	r24, 0x63	; 99
    61bc:	31 f0       	breq	.+12     	; 0x61ca <vfprintf+0x3f0>
    61be:	83 37       	cpi	r24, 0x73	; 115
    61c0:	79 f0       	breq	.+30     	; 0x61e0 <vfprintf+0x406>
    61c2:	83 35       	cpi	r24, 0x53	; 83
    61c4:	09 f0       	breq	.+2      	; 0x61c8 <vfprintf+0x3ee>
    61c6:	54 c0       	rjmp	.+168    	; 0x6270 <vfprintf+0x496>
    61c8:	20 c0       	rjmp	.+64     	; 0x620a <vfprintf+0x430>
    61ca:	52 01       	movw	r10, r4
    61cc:	e2 e0       	ldi	r30, 0x02	; 2
    61ce:	ae 0e       	add	r10, r30
    61d0:	b1 1c       	adc	r11, r1
    61d2:	f2 01       	movw	r30, r4
    61d4:	80 81       	ld	r24, Z
    61d6:	89 83       	std	Y+1, r24	; 0x01
    61d8:	01 e0       	ldi	r16, 0x01	; 1
    61da:	10 e0       	ldi	r17, 0x00	; 0
    61dc:	23 01       	movw	r4, r6
    61de:	13 c0       	rjmp	.+38     	; 0x6206 <vfprintf+0x42c>
    61e0:	52 01       	movw	r10, r4
    61e2:	f2 e0       	ldi	r31, 0x02	; 2
    61e4:	af 0e       	add	r10, r31
    61e6:	b1 1c       	adc	r11, r1
    61e8:	f2 01       	movw	r30, r4
    61ea:	40 80       	ld	r4, Z
    61ec:	51 80       	ldd	r5, Z+1	; 0x01
    61ee:	26 ff       	sbrs	r18, 6
    61f0:	03 c0       	rjmp	.+6      	; 0x61f8 <vfprintf+0x41e>
    61f2:	61 2f       	mov	r22, r17
    61f4:	70 e0       	ldi	r23, 0x00	; 0
    61f6:	02 c0       	rjmp	.+4      	; 0x61fc <vfprintf+0x422>
    61f8:	6f ef       	ldi	r22, 0xFF	; 255
    61fa:	7f ef       	ldi	r23, 0xFF	; 255
    61fc:	c2 01       	movw	r24, r4
    61fe:	2a 8b       	std	Y+18, r18	; 0x12
    6200:	ac d2       	rcall	.+1368   	; 0x675a <strnlen>
    6202:	8c 01       	movw	r16, r24
    6204:	2a 89       	ldd	r18, Y+18	; 0x12
    6206:	2f 77       	andi	r18, 0x7F	; 127
    6208:	14 c0       	rjmp	.+40     	; 0x6232 <vfprintf+0x458>
    620a:	52 01       	movw	r10, r4
    620c:	f2 e0       	ldi	r31, 0x02	; 2
    620e:	af 0e       	add	r10, r31
    6210:	b1 1c       	adc	r11, r1
    6212:	f2 01       	movw	r30, r4
    6214:	40 80       	ld	r4, Z
    6216:	51 80       	ldd	r5, Z+1	; 0x01
    6218:	26 ff       	sbrs	r18, 6
    621a:	03 c0       	rjmp	.+6      	; 0x6222 <vfprintf+0x448>
    621c:	61 2f       	mov	r22, r17
    621e:	70 e0       	ldi	r23, 0x00	; 0
    6220:	02 c0       	rjmp	.+4      	; 0x6226 <vfprintf+0x44c>
    6222:	6f ef       	ldi	r22, 0xFF	; 255
    6224:	7f ef       	ldi	r23, 0xFF	; 255
    6226:	c2 01       	movw	r24, r4
    6228:	2a 8b       	std	Y+18, r18	; 0x12
    622a:	62 d2       	rcall	.+1220   	; 0x66f0 <strnlen_P>
    622c:	8c 01       	movw	r16, r24
    622e:	2a 89       	ldd	r18, Y+18	; 0x12
    6230:	20 68       	ori	r18, 0x80	; 128
    6232:	32 2e       	mov	r3, r18
    6234:	23 fd       	sbrc	r18, 3
    6236:	18 c0       	rjmp	.+48     	; 0x6268 <vfprintf+0x48e>
    6238:	8f 2d       	mov	r24, r15
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	08 17       	cp	r16, r24
    623e:	19 07       	cpc	r17, r25
    6240:	98 f4       	brcc	.+38     	; 0x6268 <vfprintf+0x48e>
    6242:	b6 01       	movw	r22, r12
    6244:	80 e2       	ldi	r24, 0x20	; 32
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	93 d2       	rcall	.+1318   	; 0x6770 <fputc>
    624a:	fa 94       	dec	r15
    624c:	f5 cf       	rjmp	.-22     	; 0x6238 <vfprintf+0x45e>
    624e:	f2 01       	movw	r30, r4
    6250:	37 fc       	sbrc	r3, 7
    6252:	85 91       	lpm	r24, Z+
    6254:	37 fe       	sbrs	r3, 7
    6256:	81 91       	ld	r24, Z+
    6258:	2f 01       	movw	r4, r30
    625a:	b6 01       	movw	r22, r12
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	88 d2       	rcall	.+1296   	; 0x6770 <fputc>
    6260:	f1 10       	cpse	r15, r1
    6262:	fa 94       	dec	r15
    6264:	01 50       	subi	r16, 0x01	; 1
    6266:	11 09       	sbc	r17, r1
    6268:	01 15       	cp	r16, r1
    626a:	11 05       	cpc	r17, r1
    626c:	81 f7       	brne	.-32     	; 0x624e <vfprintf+0x474>
    626e:	f1 c0       	rjmp	.+482    	; 0x6452 <vfprintf+0x678>
    6270:	84 36       	cpi	r24, 0x64	; 100
    6272:	11 f0       	breq	.+4      	; 0x6278 <vfprintf+0x49e>
    6274:	89 36       	cpi	r24, 0x69	; 105
    6276:	51 f5       	brne	.+84     	; 0x62cc <vfprintf+0x4f2>
    6278:	52 01       	movw	r10, r4
    627a:	27 ff       	sbrs	r18, 7
    627c:	09 c0       	rjmp	.+18     	; 0x6290 <vfprintf+0x4b6>
    627e:	f4 e0       	ldi	r31, 0x04	; 4
    6280:	af 0e       	add	r10, r31
    6282:	b1 1c       	adc	r11, r1
    6284:	f2 01       	movw	r30, r4
    6286:	60 81       	ld	r22, Z
    6288:	71 81       	ldd	r23, Z+1	; 0x01
    628a:	82 81       	ldd	r24, Z+2	; 0x02
    628c:	93 81       	ldd	r25, Z+3	; 0x03
    628e:	0a c0       	rjmp	.+20     	; 0x62a4 <vfprintf+0x4ca>
    6290:	f2 e0       	ldi	r31, 0x02	; 2
    6292:	af 0e       	add	r10, r31
    6294:	b1 1c       	adc	r11, r1
    6296:	f2 01       	movw	r30, r4
    6298:	60 81       	ld	r22, Z
    629a:	71 81       	ldd	r23, Z+1	; 0x01
    629c:	07 2e       	mov	r0, r23
    629e:	00 0c       	add	r0, r0
    62a0:	88 0b       	sbc	r24, r24
    62a2:	99 0b       	sbc	r25, r25
    62a4:	2f 76       	andi	r18, 0x6F	; 111
    62a6:	32 2e       	mov	r3, r18
    62a8:	97 ff       	sbrs	r25, 7
    62aa:	09 c0       	rjmp	.+18     	; 0x62be <vfprintf+0x4e4>
    62ac:	90 95       	com	r25
    62ae:	80 95       	com	r24
    62b0:	70 95       	com	r23
    62b2:	61 95       	neg	r22
    62b4:	7f 4f       	sbci	r23, 0xFF	; 255
    62b6:	8f 4f       	sbci	r24, 0xFF	; 255
    62b8:	9f 4f       	sbci	r25, 0xFF	; 255
    62ba:	20 68       	ori	r18, 0x80	; 128
    62bc:	32 2e       	mov	r3, r18
    62be:	2a e0       	ldi	r18, 0x0A	; 10
    62c0:	30 e0       	ldi	r19, 0x00	; 0
    62c2:	a3 01       	movw	r20, r6
    62c4:	45 d3       	rcall	.+1674   	; 0x6950 <__ultoa_invert>
    62c6:	e8 2e       	mov	r14, r24
    62c8:	e6 18       	sub	r14, r6
    62ca:	3e c0       	rjmp	.+124    	; 0x6348 <vfprintf+0x56e>
    62cc:	02 2f       	mov	r16, r18
    62ce:	85 37       	cpi	r24, 0x75	; 117
    62d0:	21 f4       	brne	.+8      	; 0x62da <vfprintf+0x500>
    62d2:	0f 7e       	andi	r16, 0xEF	; 239
    62d4:	2a e0       	ldi	r18, 0x0A	; 10
    62d6:	30 e0       	ldi	r19, 0x00	; 0
    62d8:	1d c0       	rjmp	.+58     	; 0x6314 <vfprintf+0x53a>
    62da:	09 7f       	andi	r16, 0xF9	; 249
    62dc:	8f 36       	cpi	r24, 0x6F	; 111
    62de:	91 f0       	breq	.+36     	; 0x6304 <vfprintf+0x52a>
    62e0:	18 f4       	brcc	.+6      	; 0x62e8 <vfprintf+0x50e>
    62e2:	88 35       	cpi	r24, 0x58	; 88
    62e4:	59 f0       	breq	.+22     	; 0x62fc <vfprintf+0x522>
    62e6:	be c0       	rjmp	.+380    	; 0x6464 <vfprintf+0x68a>
    62e8:	80 37       	cpi	r24, 0x70	; 112
    62ea:	19 f0       	breq	.+6      	; 0x62f2 <vfprintf+0x518>
    62ec:	88 37       	cpi	r24, 0x78	; 120
    62ee:	11 f0       	breq	.+4      	; 0x62f4 <vfprintf+0x51a>
    62f0:	b9 c0       	rjmp	.+370    	; 0x6464 <vfprintf+0x68a>
    62f2:	00 61       	ori	r16, 0x10	; 16
    62f4:	04 ff       	sbrs	r16, 4
    62f6:	09 c0       	rjmp	.+18     	; 0x630a <vfprintf+0x530>
    62f8:	04 60       	ori	r16, 0x04	; 4
    62fa:	07 c0       	rjmp	.+14     	; 0x630a <vfprintf+0x530>
    62fc:	24 ff       	sbrs	r18, 4
    62fe:	08 c0       	rjmp	.+16     	; 0x6310 <vfprintf+0x536>
    6300:	06 60       	ori	r16, 0x06	; 6
    6302:	06 c0       	rjmp	.+12     	; 0x6310 <vfprintf+0x536>
    6304:	28 e0       	ldi	r18, 0x08	; 8
    6306:	30 e0       	ldi	r19, 0x00	; 0
    6308:	05 c0       	rjmp	.+10     	; 0x6314 <vfprintf+0x53a>
    630a:	20 e1       	ldi	r18, 0x10	; 16
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	02 c0       	rjmp	.+4      	; 0x6314 <vfprintf+0x53a>
    6310:	20 e1       	ldi	r18, 0x10	; 16
    6312:	32 e0       	ldi	r19, 0x02	; 2
    6314:	52 01       	movw	r10, r4
    6316:	07 ff       	sbrs	r16, 7
    6318:	09 c0       	rjmp	.+18     	; 0x632c <vfprintf+0x552>
    631a:	f4 e0       	ldi	r31, 0x04	; 4
    631c:	af 0e       	add	r10, r31
    631e:	b1 1c       	adc	r11, r1
    6320:	f2 01       	movw	r30, r4
    6322:	60 81       	ld	r22, Z
    6324:	71 81       	ldd	r23, Z+1	; 0x01
    6326:	82 81       	ldd	r24, Z+2	; 0x02
    6328:	93 81       	ldd	r25, Z+3	; 0x03
    632a:	08 c0       	rjmp	.+16     	; 0x633c <vfprintf+0x562>
    632c:	f2 e0       	ldi	r31, 0x02	; 2
    632e:	af 0e       	add	r10, r31
    6330:	b1 1c       	adc	r11, r1
    6332:	f2 01       	movw	r30, r4
    6334:	60 81       	ld	r22, Z
    6336:	71 81       	ldd	r23, Z+1	; 0x01
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	a3 01       	movw	r20, r6
    633e:	08 d3       	rcall	.+1552   	; 0x6950 <__ultoa_invert>
    6340:	e8 2e       	mov	r14, r24
    6342:	e6 18       	sub	r14, r6
    6344:	0f 77       	andi	r16, 0x7F	; 127
    6346:	30 2e       	mov	r3, r16
    6348:	36 fe       	sbrs	r3, 6
    634a:	0b c0       	rjmp	.+22     	; 0x6362 <vfprintf+0x588>
    634c:	33 2d       	mov	r19, r3
    634e:	3e 7f       	andi	r19, 0xFE	; 254
    6350:	e1 16       	cp	r14, r17
    6352:	50 f4       	brcc	.+20     	; 0x6368 <vfprintf+0x58e>
    6354:	34 fe       	sbrs	r3, 4
    6356:	0a c0       	rjmp	.+20     	; 0x636c <vfprintf+0x592>
    6358:	32 fc       	sbrc	r3, 2
    635a:	08 c0       	rjmp	.+16     	; 0x636c <vfprintf+0x592>
    635c:	33 2d       	mov	r19, r3
    635e:	3e 7e       	andi	r19, 0xEE	; 238
    6360:	05 c0       	rjmp	.+10     	; 0x636c <vfprintf+0x592>
    6362:	0e 2d       	mov	r16, r14
    6364:	33 2d       	mov	r19, r3
    6366:	03 c0       	rjmp	.+6      	; 0x636e <vfprintf+0x594>
    6368:	0e 2d       	mov	r16, r14
    636a:	01 c0       	rjmp	.+2      	; 0x636e <vfprintf+0x594>
    636c:	01 2f       	mov	r16, r17
    636e:	34 ff       	sbrs	r19, 4
    6370:	0c c0       	rjmp	.+24     	; 0x638a <vfprintf+0x5b0>
    6372:	fe 01       	movw	r30, r28
    6374:	ee 0d       	add	r30, r14
    6376:	f1 1d       	adc	r31, r1
    6378:	80 81       	ld	r24, Z
    637a:	80 33       	cpi	r24, 0x30	; 48
    637c:	11 f4       	brne	.+4      	; 0x6382 <vfprintf+0x5a8>
    637e:	39 7e       	andi	r19, 0xE9	; 233
    6380:	08 c0       	rjmp	.+16     	; 0x6392 <vfprintf+0x5b8>
    6382:	32 ff       	sbrs	r19, 2
    6384:	05 c0       	rjmp	.+10     	; 0x6390 <vfprintf+0x5b6>
    6386:	0e 5f       	subi	r16, 0xFE	; 254
    6388:	04 c0       	rjmp	.+8      	; 0x6392 <vfprintf+0x5b8>
    638a:	83 2f       	mov	r24, r19
    638c:	86 78       	andi	r24, 0x86	; 134
    638e:	09 f0       	breq	.+2      	; 0x6392 <vfprintf+0x5b8>
    6390:	0f 5f       	subi	r16, 0xFF	; 255
    6392:	33 fd       	sbrc	r19, 3
    6394:	12 c0       	rjmp	.+36     	; 0x63ba <vfprintf+0x5e0>
    6396:	30 ff       	sbrs	r19, 0
    6398:	06 c0       	rjmp	.+12     	; 0x63a6 <vfprintf+0x5cc>
    639a:	1e 2d       	mov	r17, r14
    639c:	0f 15       	cp	r16, r15
    639e:	18 f4       	brcc	.+6      	; 0x63a6 <vfprintf+0x5cc>
    63a0:	1f 0d       	add	r17, r15
    63a2:	10 1b       	sub	r17, r16
    63a4:	0f 2d       	mov	r16, r15
    63a6:	0f 15       	cp	r16, r15
    63a8:	60 f4       	brcc	.+24     	; 0x63c2 <vfprintf+0x5e8>
    63aa:	b6 01       	movw	r22, r12
    63ac:	80 e2       	ldi	r24, 0x20	; 32
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	3b 8b       	std	Y+19, r19	; 0x13
    63b2:	de d1       	rcall	.+956    	; 0x6770 <fputc>
    63b4:	0f 5f       	subi	r16, 0xFF	; 255
    63b6:	3b 89       	ldd	r19, Y+19	; 0x13
    63b8:	f6 cf       	rjmp	.-20     	; 0x63a6 <vfprintf+0x5cc>
    63ba:	0f 15       	cp	r16, r15
    63bc:	10 f4       	brcc	.+4      	; 0x63c2 <vfprintf+0x5e8>
    63be:	f0 1a       	sub	r15, r16
    63c0:	01 c0       	rjmp	.+2      	; 0x63c4 <vfprintf+0x5ea>
    63c2:	f1 2c       	mov	r15, r1
    63c4:	34 ff       	sbrs	r19, 4
    63c6:	11 c0       	rjmp	.+34     	; 0x63ea <vfprintf+0x610>
    63c8:	b6 01       	movw	r22, r12
    63ca:	80 e3       	ldi	r24, 0x30	; 48
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	3b 8b       	std	Y+19, r19	; 0x13
    63d0:	cf d1       	rcall	.+926    	; 0x6770 <fputc>
    63d2:	3b 89       	ldd	r19, Y+19	; 0x13
    63d4:	32 ff       	sbrs	r19, 2
    63d6:	16 c0       	rjmp	.+44     	; 0x6404 <vfprintf+0x62a>
    63d8:	31 fd       	sbrc	r19, 1
    63da:	03 c0       	rjmp	.+6      	; 0x63e2 <vfprintf+0x608>
    63dc:	88 e7       	ldi	r24, 0x78	; 120
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	02 c0       	rjmp	.+4      	; 0x63e6 <vfprintf+0x60c>
    63e2:	88 e5       	ldi	r24, 0x58	; 88
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	b6 01       	movw	r22, r12
    63e8:	0c c0       	rjmp	.+24     	; 0x6402 <vfprintf+0x628>
    63ea:	83 2f       	mov	r24, r19
    63ec:	86 78       	andi	r24, 0x86	; 134
    63ee:	51 f0       	breq	.+20     	; 0x6404 <vfprintf+0x62a>
    63f0:	31 ff       	sbrs	r19, 1
    63f2:	02 c0       	rjmp	.+4      	; 0x63f8 <vfprintf+0x61e>
    63f4:	8b e2       	ldi	r24, 0x2B	; 43
    63f6:	01 c0       	rjmp	.+2      	; 0x63fa <vfprintf+0x620>
    63f8:	80 e2       	ldi	r24, 0x20	; 32
    63fa:	37 fd       	sbrc	r19, 7
    63fc:	8d e2       	ldi	r24, 0x2D	; 45
    63fe:	b6 01       	movw	r22, r12
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	b6 d1       	rcall	.+876    	; 0x6770 <fputc>
    6404:	e1 16       	cp	r14, r17
    6406:	30 f4       	brcc	.+12     	; 0x6414 <vfprintf+0x63a>
    6408:	b6 01       	movw	r22, r12
    640a:	80 e3       	ldi	r24, 0x30	; 48
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	b0 d1       	rcall	.+864    	; 0x6770 <fputc>
    6410:	11 50       	subi	r17, 0x01	; 1
    6412:	f8 cf       	rjmp	.-16     	; 0x6404 <vfprintf+0x62a>
    6414:	ea 94       	dec	r14
    6416:	f3 01       	movw	r30, r6
    6418:	ee 0d       	add	r30, r14
    641a:	f1 1d       	adc	r31, r1
    641c:	80 81       	ld	r24, Z
    641e:	b6 01       	movw	r22, r12
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	a6 d1       	rcall	.+844    	; 0x6770 <fputc>
    6424:	e1 10       	cpse	r14, r1
    6426:	f6 cf       	rjmp	.-20     	; 0x6414 <vfprintf+0x63a>
    6428:	14 c0       	rjmp	.+40     	; 0x6452 <vfprintf+0x678>
    642a:	f4 e0       	ldi	r31, 0x04	; 4
    642c:	ff 15       	cp	r31, r15
    642e:	48 f5       	brcc	.+82     	; 0x6482 <vfprintf+0x6a8>
    6430:	84 e0       	ldi	r24, 0x04	; 4
    6432:	f8 1a       	sub	r15, r24
    6434:	33 fe       	sbrs	r3, 3
    6436:	1d c0       	rjmp	.+58     	; 0x6472 <vfprintf+0x698>
    6438:	21 10       	cpse	r2, r1
    643a:	24 c0       	rjmp	.+72     	; 0x6484 <vfprintf+0x6aa>
    643c:	03 ff       	sbrs	r16, 3
    643e:	27 c0       	rjmp	.+78     	; 0x648e <vfprintf+0x6b4>
    6440:	0a e2       	ldi	r16, 0x2A	; 42
    6442:	1c e0       	ldi	r17, 0x0C	; 12
    6444:	f3 2d       	mov	r31, r3
    6446:	f0 71       	andi	r31, 0x10	; 16
    6448:	3f 2e       	mov	r3, r31
    644a:	f8 01       	movw	r30, r16
    644c:	84 91       	lpm	r24, Z
    644e:	81 11       	cpse	r24, r1
    6450:	21 c0       	rjmp	.+66     	; 0x6494 <vfprintf+0x6ba>
    6452:	ff 20       	and	r15, r15
    6454:	09 f4       	brne	.+2      	; 0x6458 <vfprintf+0x67e>
    6456:	fd cc       	rjmp	.-1542   	; 0x5e52 <vfprintf+0x78>
    6458:	b6 01       	movw	r22, r12
    645a:	80 e2       	ldi	r24, 0x20	; 32
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	88 d1       	rcall	.+784    	; 0x6770 <fputc>
    6460:	fa 94       	dec	r15
    6462:	f7 cf       	rjmp	.-18     	; 0x6452 <vfprintf+0x678>
    6464:	f6 01       	movw	r30, r12
    6466:	86 81       	ldd	r24, Z+6	; 0x06
    6468:	97 81       	ldd	r25, Z+7	; 0x07
    646a:	23 c0       	rjmp	.+70     	; 0x64b2 <vfprintf+0x6d8>
    646c:	8f ef       	ldi	r24, 0xFF	; 255
    646e:	9f ef       	ldi	r25, 0xFF	; 255
    6470:	20 c0       	rjmp	.+64     	; 0x64b2 <vfprintf+0x6d8>
    6472:	b6 01       	movw	r22, r12
    6474:	80 e2       	ldi	r24, 0x20	; 32
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	7b d1       	rcall	.+758    	; 0x6770 <fputc>
    647a:	fa 94       	dec	r15
    647c:	f1 10       	cpse	r15, r1
    647e:	f9 cf       	rjmp	.-14     	; 0x6472 <vfprintf+0x698>
    6480:	db cf       	rjmp	.-74     	; 0x6438 <vfprintf+0x65e>
    6482:	f1 2c       	mov	r15, r1
    6484:	b6 01       	movw	r22, r12
    6486:	82 2d       	mov	r24, r2
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	72 d1       	rcall	.+740    	; 0x6770 <fputc>
    648c:	d7 cf       	rjmp	.-82     	; 0x643c <vfprintf+0x662>
    648e:	0e e2       	ldi	r16, 0x2E	; 46
    6490:	1c e0       	ldi	r17, 0x0C	; 12
    6492:	d8 cf       	rjmp	.-80     	; 0x6444 <vfprintf+0x66a>
    6494:	31 10       	cpse	r3, r1
    6496:	80 52       	subi	r24, 0x20	; 32
    6498:	b6 01       	movw	r22, r12
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	69 d1       	rcall	.+722    	; 0x6770 <fputc>
    649e:	0f 5f       	subi	r16, 0xFF	; 255
    64a0:	1f 4f       	sbci	r17, 0xFF	; 255
    64a2:	d3 cf       	rjmp	.-90     	; 0x644a <vfprintf+0x670>
    64a4:	23 e0       	ldi	r18, 0x03	; 3
    64a6:	2f 15       	cp	r18, r15
    64a8:	10 f4       	brcc	.+4      	; 0x64ae <vfprintf+0x6d4>
    64aa:	83 e0       	ldi	r24, 0x03	; 3
    64ac:	c2 cf       	rjmp	.-124    	; 0x6432 <vfprintf+0x658>
    64ae:	f1 2c       	mov	r15, r1
    64b0:	c5 cf       	rjmp	.-118    	; 0x643c <vfprintf+0x662>
    64b2:	63 96       	adiw	r28, 0x13	; 19
    64b4:	cd bf       	out	0x3d, r28	; 61
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	df 91       	pop	r29
    64ba:	cf 91       	pop	r28
    64bc:	1f 91       	pop	r17
    64be:	0f 91       	pop	r16
    64c0:	ff 90       	pop	r15
    64c2:	ef 90       	pop	r14
    64c4:	df 90       	pop	r13
    64c6:	cf 90       	pop	r12
    64c8:	bf 90       	pop	r11
    64ca:	af 90       	pop	r10
    64cc:	9f 90       	pop	r9
    64ce:	8f 90       	pop	r8
    64d0:	7f 90       	pop	r7
    64d2:	6f 90       	pop	r6
    64d4:	5f 90       	pop	r5
    64d6:	4f 90       	pop	r4
    64d8:	3f 90       	pop	r3
    64da:	2f 90       	pop	r2
    64dc:	08 95       	ret

000064de <__udivmodsi4>:
    64de:	a1 e2       	ldi	r26, 0x21	; 33
    64e0:	1a 2e       	mov	r1, r26
    64e2:	aa 1b       	sub	r26, r26
    64e4:	bb 1b       	sub	r27, r27
    64e6:	fd 01       	movw	r30, r26
    64e8:	0d c0       	rjmp	.+26     	; 0x6504 <__udivmodsi4_ep>

000064ea <__udivmodsi4_loop>:
    64ea:	aa 1f       	adc	r26, r26
    64ec:	bb 1f       	adc	r27, r27
    64ee:	ee 1f       	adc	r30, r30
    64f0:	ff 1f       	adc	r31, r31
    64f2:	a2 17       	cp	r26, r18
    64f4:	b3 07       	cpc	r27, r19
    64f6:	e4 07       	cpc	r30, r20
    64f8:	f5 07       	cpc	r31, r21
    64fa:	20 f0       	brcs	.+8      	; 0x6504 <__udivmodsi4_ep>
    64fc:	a2 1b       	sub	r26, r18
    64fe:	b3 0b       	sbc	r27, r19
    6500:	e4 0b       	sbc	r30, r20
    6502:	f5 0b       	sbc	r31, r21

00006504 <__udivmodsi4_ep>:
    6504:	66 1f       	adc	r22, r22
    6506:	77 1f       	adc	r23, r23
    6508:	88 1f       	adc	r24, r24
    650a:	99 1f       	adc	r25, r25
    650c:	1a 94       	dec	r1
    650e:	69 f7       	brne	.-38     	; 0x64ea <__udivmodsi4_loop>
    6510:	60 95       	com	r22
    6512:	70 95       	com	r23
    6514:	80 95       	com	r24
    6516:	90 95       	com	r25
    6518:	9b 01       	movw	r18, r22
    651a:	ac 01       	movw	r20, r24
    651c:	bd 01       	movw	r22, r26
    651e:	cf 01       	movw	r24, r30
    6520:	08 95       	ret

00006522 <__ftoa_engine>:
    6522:	28 30       	cpi	r18, 0x08	; 8
    6524:	08 f0       	brcs	.+2      	; 0x6528 <__ftoa_engine+0x6>
    6526:	27 e0       	ldi	r18, 0x07	; 7
    6528:	33 27       	eor	r19, r19
    652a:	da 01       	movw	r26, r20
    652c:	99 0f       	add	r25, r25
    652e:	31 1d       	adc	r19, r1
    6530:	87 fd       	sbrc	r24, 7
    6532:	91 60       	ori	r25, 0x01	; 1
    6534:	00 96       	adiw	r24, 0x00	; 0
    6536:	61 05       	cpc	r22, r1
    6538:	71 05       	cpc	r23, r1
    653a:	39 f4       	brne	.+14     	; 0x654a <__ftoa_engine+0x28>
    653c:	32 60       	ori	r19, 0x02	; 2
    653e:	2e 5f       	subi	r18, 0xFE	; 254
    6540:	3d 93       	st	X+, r19
    6542:	30 e3       	ldi	r19, 0x30	; 48
    6544:	2a 95       	dec	r18
    6546:	e1 f7       	brne	.-8      	; 0x6540 <__ftoa_engine+0x1e>
    6548:	08 95       	ret
    654a:	9f 3f       	cpi	r25, 0xFF	; 255
    654c:	30 f0       	brcs	.+12     	; 0x655a <__ftoa_engine+0x38>
    654e:	80 38       	cpi	r24, 0x80	; 128
    6550:	71 05       	cpc	r23, r1
    6552:	61 05       	cpc	r22, r1
    6554:	09 f0       	breq	.+2      	; 0x6558 <__ftoa_engine+0x36>
    6556:	3c 5f       	subi	r19, 0xFC	; 252
    6558:	3c 5f       	subi	r19, 0xFC	; 252
    655a:	3d 93       	st	X+, r19
    655c:	91 30       	cpi	r25, 0x01	; 1
    655e:	08 f0       	brcs	.+2      	; 0x6562 <__ftoa_engine+0x40>
    6560:	80 68       	ori	r24, 0x80	; 128
    6562:	91 1d       	adc	r25, r1
    6564:	df 93       	push	r29
    6566:	cf 93       	push	r28
    6568:	1f 93       	push	r17
    656a:	0f 93       	push	r16
    656c:	ff 92       	push	r15
    656e:	ef 92       	push	r14
    6570:	19 2f       	mov	r17, r25
    6572:	98 7f       	andi	r25, 0xF8	; 248
    6574:	96 95       	lsr	r25
    6576:	e9 2f       	mov	r30, r25
    6578:	96 95       	lsr	r25
    657a:	96 95       	lsr	r25
    657c:	e9 0f       	add	r30, r25
    657e:	ff 27       	eor	r31, r31
    6580:	e4 57       	subi	r30, 0x74	; 116
    6582:	f3 4f       	sbci	r31, 0xF3	; 243
    6584:	99 27       	eor	r25, r25
    6586:	33 27       	eor	r19, r19
    6588:	ee 24       	eor	r14, r14
    658a:	ff 24       	eor	r15, r15
    658c:	a7 01       	movw	r20, r14
    658e:	e7 01       	movw	r28, r14
    6590:	05 90       	lpm	r0, Z+
    6592:	08 94       	sec
    6594:	07 94       	ror	r0
    6596:	28 f4       	brcc	.+10     	; 0x65a2 <__ftoa_engine+0x80>
    6598:	36 0f       	add	r19, r22
    659a:	e7 1e       	adc	r14, r23
    659c:	f8 1e       	adc	r15, r24
    659e:	49 1f       	adc	r20, r25
    65a0:	51 1d       	adc	r21, r1
    65a2:	66 0f       	add	r22, r22
    65a4:	77 1f       	adc	r23, r23
    65a6:	88 1f       	adc	r24, r24
    65a8:	99 1f       	adc	r25, r25
    65aa:	06 94       	lsr	r0
    65ac:	a1 f7       	brne	.-24     	; 0x6596 <__ftoa_engine+0x74>
    65ae:	05 90       	lpm	r0, Z+
    65b0:	07 94       	ror	r0
    65b2:	28 f4       	brcc	.+10     	; 0x65be <__ftoa_engine+0x9c>
    65b4:	e7 0e       	add	r14, r23
    65b6:	f8 1e       	adc	r15, r24
    65b8:	49 1f       	adc	r20, r25
    65ba:	56 1f       	adc	r21, r22
    65bc:	c1 1d       	adc	r28, r1
    65be:	77 0f       	add	r23, r23
    65c0:	88 1f       	adc	r24, r24
    65c2:	99 1f       	adc	r25, r25
    65c4:	66 1f       	adc	r22, r22
    65c6:	06 94       	lsr	r0
    65c8:	a1 f7       	brne	.-24     	; 0x65b2 <__ftoa_engine+0x90>
    65ca:	05 90       	lpm	r0, Z+
    65cc:	07 94       	ror	r0
    65ce:	28 f4       	brcc	.+10     	; 0x65da <__ftoa_engine+0xb8>
    65d0:	f8 0e       	add	r15, r24
    65d2:	49 1f       	adc	r20, r25
    65d4:	56 1f       	adc	r21, r22
    65d6:	c7 1f       	adc	r28, r23
    65d8:	d1 1d       	adc	r29, r1
    65da:	88 0f       	add	r24, r24
    65dc:	99 1f       	adc	r25, r25
    65de:	66 1f       	adc	r22, r22
    65e0:	77 1f       	adc	r23, r23
    65e2:	06 94       	lsr	r0
    65e4:	a1 f7       	brne	.-24     	; 0x65ce <__ftoa_engine+0xac>
    65e6:	05 90       	lpm	r0, Z+
    65e8:	07 94       	ror	r0
    65ea:	20 f4       	brcc	.+8      	; 0x65f4 <__ftoa_engine+0xd2>
    65ec:	49 0f       	add	r20, r25
    65ee:	56 1f       	adc	r21, r22
    65f0:	c7 1f       	adc	r28, r23
    65f2:	d8 1f       	adc	r29, r24
    65f4:	99 0f       	add	r25, r25
    65f6:	66 1f       	adc	r22, r22
    65f8:	77 1f       	adc	r23, r23
    65fa:	88 1f       	adc	r24, r24
    65fc:	06 94       	lsr	r0
    65fe:	a9 f7       	brne	.-22     	; 0x65ea <__ftoa_engine+0xc8>
    6600:	84 91       	lpm	r24, Z
    6602:	10 95       	com	r17
    6604:	17 70       	andi	r17, 0x07	; 7
    6606:	41 f0       	breq	.+16     	; 0x6618 <__ftoa_engine+0xf6>
    6608:	d6 95       	lsr	r29
    660a:	c7 95       	ror	r28
    660c:	57 95       	ror	r21
    660e:	47 95       	ror	r20
    6610:	f7 94       	ror	r15
    6612:	e7 94       	ror	r14
    6614:	1a 95       	dec	r17
    6616:	c1 f7       	brne	.-16     	; 0x6608 <__ftoa_engine+0xe6>
    6618:	e2 e3       	ldi	r30, 0x32	; 50
    661a:	fc e0       	ldi	r31, 0x0C	; 12
    661c:	68 94       	set
    661e:	15 90       	lpm	r1, Z+
    6620:	15 91       	lpm	r17, Z+
    6622:	35 91       	lpm	r19, Z+
    6624:	65 91       	lpm	r22, Z+
    6626:	95 91       	lpm	r25, Z+
    6628:	05 90       	lpm	r0, Z+
    662a:	7f e2       	ldi	r23, 0x2F	; 47
    662c:	73 95       	inc	r23
    662e:	e1 18       	sub	r14, r1
    6630:	f1 0a       	sbc	r15, r17
    6632:	43 0b       	sbc	r20, r19
    6634:	56 0b       	sbc	r21, r22
    6636:	c9 0b       	sbc	r28, r25
    6638:	d0 09       	sbc	r29, r0
    663a:	c0 f7       	brcc	.-16     	; 0x662c <__ftoa_engine+0x10a>
    663c:	e1 0c       	add	r14, r1
    663e:	f1 1e       	adc	r15, r17
    6640:	43 1f       	adc	r20, r19
    6642:	56 1f       	adc	r21, r22
    6644:	c9 1f       	adc	r28, r25
    6646:	d0 1d       	adc	r29, r0
    6648:	7e f4       	brtc	.+30     	; 0x6668 <__ftoa_engine+0x146>
    664a:	70 33       	cpi	r23, 0x30	; 48
    664c:	11 f4       	brne	.+4      	; 0x6652 <__ftoa_engine+0x130>
    664e:	8a 95       	dec	r24
    6650:	e6 cf       	rjmp	.-52     	; 0x661e <__ftoa_engine+0xfc>
    6652:	e8 94       	clt
    6654:	01 50       	subi	r16, 0x01	; 1
    6656:	30 f0       	brcs	.+12     	; 0x6664 <__ftoa_engine+0x142>
    6658:	08 0f       	add	r16, r24
    665a:	0a f4       	brpl	.+2      	; 0x665e <__ftoa_engine+0x13c>
    665c:	00 27       	eor	r16, r16
    665e:	02 17       	cp	r16, r18
    6660:	08 f4       	brcc	.+2      	; 0x6664 <__ftoa_engine+0x142>
    6662:	20 2f       	mov	r18, r16
    6664:	23 95       	inc	r18
    6666:	02 2f       	mov	r16, r18
    6668:	7a 33       	cpi	r23, 0x3A	; 58
    666a:	28 f0       	brcs	.+10     	; 0x6676 <__ftoa_engine+0x154>
    666c:	79 e3       	ldi	r23, 0x39	; 57
    666e:	7d 93       	st	X+, r23
    6670:	2a 95       	dec	r18
    6672:	e9 f7       	brne	.-6      	; 0x666e <__ftoa_engine+0x14c>
    6674:	10 c0       	rjmp	.+32     	; 0x6696 <__ftoa_engine+0x174>
    6676:	7d 93       	st	X+, r23
    6678:	2a 95       	dec	r18
    667a:	89 f6       	brne	.-94     	; 0x661e <__ftoa_engine+0xfc>
    667c:	06 94       	lsr	r0
    667e:	97 95       	ror	r25
    6680:	67 95       	ror	r22
    6682:	37 95       	ror	r19
    6684:	17 95       	ror	r17
    6686:	17 94       	ror	r1
    6688:	e1 18       	sub	r14, r1
    668a:	f1 0a       	sbc	r15, r17
    668c:	43 0b       	sbc	r20, r19
    668e:	56 0b       	sbc	r21, r22
    6690:	c9 0b       	sbc	r28, r25
    6692:	d0 09       	sbc	r29, r0
    6694:	98 f0       	brcs	.+38     	; 0x66bc <__ftoa_engine+0x19a>
    6696:	23 95       	inc	r18
    6698:	7e 91       	ld	r23, -X
    669a:	73 95       	inc	r23
    669c:	7a 33       	cpi	r23, 0x3A	; 58
    669e:	08 f0       	brcs	.+2      	; 0x66a2 <__ftoa_engine+0x180>
    66a0:	70 e3       	ldi	r23, 0x30	; 48
    66a2:	7c 93       	st	X, r23
    66a4:	20 13       	cpse	r18, r16
    66a6:	b8 f7       	brcc	.-18     	; 0x6696 <__ftoa_engine+0x174>
    66a8:	7e 91       	ld	r23, -X
    66aa:	70 61       	ori	r23, 0x10	; 16
    66ac:	7d 93       	st	X+, r23
    66ae:	30 f0       	brcs	.+12     	; 0x66bc <__ftoa_engine+0x19a>
    66b0:	83 95       	inc	r24
    66b2:	71 e3       	ldi	r23, 0x31	; 49
    66b4:	7d 93       	st	X+, r23
    66b6:	70 e3       	ldi	r23, 0x30	; 48
    66b8:	2a 95       	dec	r18
    66ba:	e1 f7       	brne	.-8      	; 0x66b4 <__ftoa_engine+0x192>
    66bc:	11 24       	eor	r1, r1
    66be:	ef 90       	pop	r14
    66c0:	ff 90       	pop	r15
    66c2:	0f 91       	pop	r16
    66c4:	1f 91       	pop	r17
    66c6:	cf 91       	pop	r28
    66c8:	df 91       	pop	r29
    66ca:	99 27       	eor	r25, r25
    66cc:	87 fd       	sbrc	r24, 7
    66ce:	90 95       	com	r25
    66d0:	08 95       	ret

000066d2 <tolower>:
    66d2:	91 11       	cpse	r25, r1
    66d4:	08 95       	ret
    66d6:	81 54       	subi	r24, 0x41	; 65
    66d8:	8a 51       	subi	r24, 0x1A	; 26
    66da:	08 f4       	brcc	.+2      	; 0x66de <tolower+0xc>
    66dc:	80 5e       	subi	r24, 0xE0	; 224
    66de:	85 5a       	subi	r24, 0xA5	; 165
    66e0:	08 95       	ret

000066e2 <strcpy_P>:
    66e2:	fb 01       	movw	r30, r22
    66e4:	dc 01       	movw	r26, r24
    66e6:	05 90       	lpm	r0, Z+
    66e8:	0d 92       	st	X+, r0
    66ea:	00 20       	and	r0, r0
    66ec:	e1 f7       	brne	.-8      	; 0x66e6 <strcpy_P+0x4>
    66ee:	08 95       	ret

000066f0 <strnlen_P>:
    66f0:	fc 01       	movw	r30, r24
    66f2:	05 90       	lpm	r0, Z+
    66f4:	61 50       	subi	r22, 0x01	; 1
    66f6:	70 40       	sbci	r23, 0x00	; 0
    66f8:	01 10       	cpse	r0, r1
    66fa:	d8 f7       	brcc	.-10     	; 0x66f2 <strnlen_P+0x2>
    66fc:	80 95       	com	r24
    66fe:	90 95       	com	r25
    6700:	8e 0f       	add	r24, r30
    6702:	9f 1f       	adc	r25, r31
    6704:	08 95       	ret

00006706 <strstr_P>:
    6706:	fb 01       	movw	r30, r22
    6708:	55 91       	lpm	r21, Z+
    670a:	55 23       	and	r21, r21
    670c:	a9 f0       	breq	.+42     	; 0x6738 <strstr_P+0x32>
    670e:	bf 01       	movw	r22, r30
    6710:	dc 01       	movw	r26, r24
    6712:	4d 91       	ld	r20, X+
    6714:	45 17       	cp	r20, r21
    6716:	41 11       	cpse	r20, r1
    6718:	e1 f7       	brne	.-8      	; 0x6712 <strstr_P+0xc>
    671a:	59 f4       	brne	.+22     	; 0x6732 <strstr_P+0x2c>
    671c:	cd 01       	movw	r24, r26
    671e:	05 90       	lpm	r0, Z+
    6720:	00 20       	and	r0, r0
    6722:	49 f0       	breq	.+18     	; 0x6736 <strstr_P+0x30>
    6724:	4d 91       	ld	r20, X+
    6726:	40 15       	cp	r20, r0
    6728:	41 11       	cpse	r20, r1
    672a:	c9 f3       	breq	.-14     	; 0x671e <strstr_P+0x18>
    672c:	fb 01       	movw	r30, r22
    672e:	41 11       	cpse	r20, r1
    6730:	ef cf       	rjmp	.-34     	; 0x6710 <strstr_P+0xa>
    6732:	81 e0       	ldi	r24, 0x01	; 1
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	01 97       	sbiw	r24, 0x01	; 1
    6738:	08 95       	ret

0000673a <memcpy>:
    673a:	fb 01       	movw	r30, r22
    673c:	dc 01       	movw	r26, r24
    673e:	02 c0       	rjmp	.+4      	; 0x6744 <memcpy+0xa>
    6740:	01 90       	ld	r0, Z+
    6742:	0d 92       	st	X+, r0
    6744:	41 50       	subi	r20, 0x01	; 1
    6746:	50 40       	sbci	r21, 0x00	; 0
    6748:	d8 f7       	brcc	.-10     	; 0x6740 <memcpy+0x6>
    674a:	08 95       	ret

0000674c <memset>:
    674c:	dc 01       	movw	r26, r24
    674e:	01 c0       	rjmp	.+2      	; 0x6752 <memset+0x6>
    6750:	6d 93       	st	X+, r22
    6752:	41 50       	subi	r20, 0x01	; 1
    6754:	50 40       	sbci	r21, 0x00	; 0
    6756:	e0 f7       	brcc	.-8      	; 0x6750 <memset+0x4>
    6758:	08 95       	ret

0000675a <strnlen>:
    675a:	fc 01       	movw	r30, r24
    675c:	61 50       	subi	r22, 0x01	; 1
    675e:	70 40       	sbci	r23, 0x00	; 0
    6760:	01 90       	ld	r0, Z+
    6762:	01 10       	cpse	r0, r1
    6764:	d8 f7       	brcc	.-10     	; 0x675c <strnlen+0x2>
    6766:	80 95       	com	r24
    6768:	90 95       	com	r25
    676a:	8e 0f       	add	r24, r30
    676c:	9f 1f       	adc	r25, r31
    676e:	08 95       	ret

00006770 <fputc>:
    6770:	0f 93       	push	r16
    6772:	1f 93       	push	r17
    6774:	cf 93       	push	r28
    6776:	df 93       	push	r29
    6778:	fb 01       	movw	r30, r22
    677a:	23 81       	ldd	r18, Z+3	; 0x03
    677c:	21 fd       	sbrc	r18, 1
    677e:	03 c0       	rjmp	.+6      	; 0x6786 <fputc+0x16>
    6780:	8f ef       	ldi	r24, 0xFF	; 255
    6782:	9f ef       	ldi	r25, 0xFF	; 255
    6784:	28 c0       	rjmp	.+80     	; 0x67d6 <fputc+0x66>
    6786:	22 ff       	sbrs	r18, 2
    6788:	16 c0       	rjmp	.+44     	; 0x67b6 <fputc+0x46>
    678a:	46 81       	ldd	r20, Z+6	; 0x06
    678c:	57 81       	ldd	r21, Z+7	; 0x07
    678e:	24 81       	ldd	r18, Z+4	; 0x04
    6790:	35 81       	ldd	r19, Z+5	; 0x05
    6792:	42 17       	cp	r20, r18
    6794:	53 07       	cpc	r21, r19
    6796:	44 f4       	brge	.+16     	; 0x67a8 <fputc+0x38>
    6798:	a0 81       	ld	r26, Z
    679a:	b1 81       	ldd	r27, Z+1	; 0x01
    679c:	9d 01       	movw	r18, r26
    679e:	2f 5f       	subi	r18, 0xFF	; 255
    67a0:	3f 4f       	sbci	r19, 0xFF	; 255
    67a2:	20 83       	st	Z, r18
    67a4:	31 83       	std	Z+1, r19	; 0x01
    67a6:	8c 93       	st	X, r24
    67a8:	26 81       	ldd	r18, Z+6	; 0x06
    67aa:	37 81       	ldd	r19, Z+7	; 0x07
    67ac:	2f 5f       	subi	r18, 0xFF	; 255
    67ae:	3f 4f       	sbci	r19, 0xFF	; 255
    67b0:	26 83       	std	Z+6, r18	; 0x06
    67b2:	37 83       	std	Z+7, r19	; 0x07
    67b4:	10 c0       	rjmp	.+32     	; 0x67d6 <fputc+0x66>
    67b6:	eb 01       	movw	r28, r22
    67b8:	09 2f       	mov	r16, r25
    67ba:	18 2f       	mov	r17, r24
    67bc:	00 84       	ldd	r0, Z+8	; 0x08
    67be:	f1 85       	ldd	r31, Z+9	; 0x09
    67c0:	e0 2d       	mov	r30, r0
    67c2:	19 95       	eicall
    67c4:	89 2b       	or	r24, r25
    67c6:	e1 f6       	brne	.-72     	; 0x6780 <fputc+0x10>
    67c8:	8e 81       	ldd	r24, Y+6	; 0x06
    67ca:	9f 81       	ldd	r25, Y+7	; 0x07
    67cc:	01 96       	adiw	r24, 0x01	; 1
    67ce:	8e 83       	std	Y+6, r24	; 0x06
    67d0:	9f 83       	std	Y+7, r25	; 0x07
    67d2:	81 2f       	mov	r24, r17
    67d4:	90 2f       	mov	r25, r16
    67d6:	df 91       	pop	r29
    67d8:	cf 91       	pop	r28
    67da:	1f 91       	pop	r17
    67dc:	0f 91       	pop	r16
    67de:	08 95       	ret

000067e0 <printf_P>:
    67e0:	0f 93       	push	r16
    67e2:	1f 93       	push	r17
    67e4:	cf 93       	push	r28
    67e6:	df 93       	push	r29
    67e8:	cd b7       	in	r28, 0x3d	; 61
    67ea:	de b7       	in	r29, 0x3e	; 62
    67ec:	ae 01       	movw	r20, r28
    67ee:	48 5f       	subi	r20, 0xF8	; 248
    67f0:	5f 4f       	sbci	r21, 0xFF	; 255
    67f2:	da 01       	movw	r26, r20
    67f4:	6d 91       	ld	r22, X+
    67f6:	7d 91       	ld	r23, X+
    67f8:	ad 01       	movw	r20, r26
    67fa:	09 e7       	ldi	r16, 0x79	; 121
    67fc:	17 e2       	ldi	r17, 0x27	; 39
    67fe:	f8 01       	movw	r30, r16
    6800:	82 81       	ldd	r24, Z+2	; 0x02
    6802:	93 81       	ldd	r25, Z+3	; 0x03
    6804:	dc 01       	movw	r26, r24
    6806:	13 96       	adiw	r26, 0x03	; 3
    6808:	2c 91       	ld	r18, X
    680a:	13 97       	sbiw	r26, 0x03	; 3
    680c:	28 60       	ori	r18, 0x08	; 8
    680e:	13 96       	adiw	r26, 0x03	; 3
    6810:	2c 93       	st	X, r18
    6812:	e3 da       	rcall	.-2618   	; 0x5dda <vfprintf>
    6814:	d8 01       	movw	r26, r16
    6816:	12 96       	adiw	r26, 0x02	; 2
    6818:	ed 91       	ld	r30, X+
    681a:	fc 91       	ld	r31, X
    681c:	13 97       	sbiw	r26, 0x03	; 3
    681e:	23 81       	ldd	r18, Z+3	; 0x03
    6820:	27 7f       	andi	r18, 0xF7	; 247
    6822:	23 83       	std	Z+3, r18	; 0x03
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	1f 91       	pop	r17
    682a:	0f 91       	pop	r16
    682c:	08 95       	ret

0000682e <snprintf_P>:
    682e:	0f 93       	push	r16
    6830:	1f 93       	push	r17
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	cd b7       	in	r28, 0x3d	; 61
    6838:	de b7       	in	r29, 0x3e	; 62
    683a:	2e 97       	sbiw	r28, 0x0e	; 14
    683c:	cd bf       	out	0x3d, r28	; 61
    683e:	de bf       	out	0x3e, r29	; 62
    6840:	0e 89       	ldd	r16, Y+22	; 0x16
    6842:	1f 89       	ldd	r17, Y+23	; 0x17
    6844:	88 8d       	ldd	r24, Y+24	; 0x18
    6846:	99 8d       	ldd	r25, Y+25	; 0x19
    6848:	2e e0       	ldi	r18, 0x0E	; 14
    684a:	2c 83       	std	Y+4, r18	; 0x04
    684c:	09 83       	std	Y+1, r16	; 0x01
    684e:	1a 83       	std	Y+2, r17	; 0x02
    6850:	97 ff       	sbrs	r25, 7
    6852:	02 c0       	rjmp	.+4      	; 0x6858 <snprintf_P+0x2a>
    6854:	80 e0       	ldi	r24, 0x00	; 0
    6856:	90 e8       	ldi	r25, 0x80	; 128
    6858:	01 97       	sbiw	r24, 0x01	; 1
    685a:	8d 83       	std	Y+5, r24	; 0x05
    685c:	9e 83       	std	Y+6, r25	; 0x06
    685e:	ae 01       	movw	r20, r28
    6860:	44 5e       	subi	r20, 0xE4	; 228
    6862:	5f 4f       	sbci	r21, 0xFF	; 255
    6864:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6866:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6868:	ce 01       	movw	r24, r28
    686a:	01 96       	adiw	r24, 0x01	; 1
    686c:	b6 da       	rcall	.-2708   	; 0x5dda <vfprintf>
    686e:	4d 81       	ldd	r20, Y+5	; 0x05
    6870:	5e 81       	ldd	r21, Y+6	; 0x06
    6872:	57 fd       	sbrc	r21, 7
    6874:	0a c0       	rjmp	.+20     	; 0x688a <snprintf_P+0x5c>
    6876:	2f 81       	ldd	r18, Y+7	; 0x07
    6878:	38 85       	ldd	r19, Y+8	; 0x08
    687a:	42 17       	cp	r20, r18
    687c:	53 07       	cpc	r21, r19
    687e:	0c f4       	brge	.+2      	; 0x6882 <snprintf_P+0x54>
    6880:	9a 01       	movw	r18, r20
    6882:	f8 01       	movw	r30, r16
    6884:	e2 0f       	add	r30, r18
    6886:	f3 1f       	adc	r31, r19
    6888:	10 82       	st	Z, r1
    688a:	2e 96       	adiw	r28, 0x0e	; 14
    688c:	cd bf       	out	0x3d, r28	; 61
    688e:	de bf       	out	0x3e, r29	; 62
    6890:	df 91       	pop	r29
    6892:	cf 91       	pop	r28
    6894:	1f 91       	pop	r17
    6896:	0f 91       	pop	r16
    6898:	08 95       	ret

0000689a <sscanf_P>:
    689a:	cf 93       	push	r28
    689c:	df 93       	push	r29
    689e:	cd b7       	in	r28, 0x3d	; 61
    68a0:	de b7       	in	r29, 0x3e	; 62
    68a2:	2e 97       	sbiw	r28, 0x0e	; 14
    68a4:	cd bf       	out	0x3d, r28	; 61
    68a6:	de bf       	out	0x3e, r29	; 62
    68a8:	8d e0       	ldi	r24, 0x0D	; 13
    68aa:	8c 83       	std	Y+4, r24	; 0x04
    68ac:	8c 89       	ldd	r24, Y+20	; 0x14
    68ae:	9d 89       	ldd	r25, Y+21	; 0x15
    68b0:	89 83       	std	Y+1, r24	; 0x01
    68b2:	9a 83       	std	Y+2, r25	; 0x02
    68b4:	ae 01       	movw	r20, r28
    68b6:	48 5e       	subi	r20, 0xE8	; 232
    68b8:	5f 4f       	sbci	r21, 0xFF	; 255
    68ba:	6e 89       	ldd	r22, Y+22	; 0x16
    68bc:	7f 89       	ldd	r23, Y+23	; 0x17
    68be:	ce 01       	movw	r24, r28
    68c0:	01 96       	adiw	r24, 0x01	; 1
    68c2:	45 d2       	rcall	.+1162   	; 0x6d4e <vfscanf>
    68c4:	2e 96       	adiw	r28, 0x0e	; 14
    68c6:	cd bf       	out	0x3d, r28	; 61
    68c8:	de bf       	out	0x3e, r29	; 62
    68ca:	df 91       	pop	r29
    68cc:	cf 91       	pop	r28
    68ce:	08 95       	ret

000068d0 <vfprintf_P>:
    68d0:	cf 93       	push	r28
    68d2:	df 93       	push	r29
    68d4:	ec 01       	movw	r28, r24
    68d6:	8b 81       	ldd	r24, Y+3	; 0x03
    68d8:	88 60       	ori	r24, 0x08	; 8
    68da:	8b 83       	std	Y+3, r24	; 0x03
    68dc:	ce 01       	movw	r24, r28
    68de:	7d da       	rcall	.-2822   	; 0x5dda <vfprintf>
    68e0:	2b 81       	ldd	r18, Y+3	; 0x03
    68e2:	27 7f       	andi	r18, 0xF7	; 247
    68e4:	2b 83       	std	Y+3, r18	; 0x03
    68e6:	df 91       	pop	r29
    68e8:	cf 91       	pop	r28
    68ea:	08 95       	ret

000068ec <vsnprintf_P>:
    68ec:	0f 93       	push	r16
    68ee:	1f 93       	push	r17
    68f0:	cf 93       	push	r28
    68f2:	df 93       	push	r29
    68f4:	cd b7       	in	r28, 0x3d	; 61
    68f6:	de b7       	in	r29, 0x3e	; 62
    68f8:	2e 97       	sbiw	r28, 0x0e	; 14
    68fa:	cd bf       	out	0x3d, r28	; 61
    68fc:	de bf       	out	0x3e, r29	; 62
    68fe:	8c 01       	movw	r16, r24
    6900:	ca 01       	movw	r24, r20
    6902:	4e e0       	ldi	r20, 0x0E	; 14
    6904:	4c 83       	std	Y+4, r20	; 0x04
    6906:	09 83       	std	Y+1, r16	; 0x01
    6908:	1a 83       	std	Y+2, r17	; 0x02
    690a:	77 ff       	sbrs	r23, 7
    690c:	02 c0       	rjmp	.+4      	; 0x6912 <vsnprintf_P+0x26>
    690e:	60 e0       	ldi	r22, 0x00	; 0
    6910:	70 e8       	ldi	r23, 0x80	; 128
    6912:	fb 01       	movw	r30, r22
    6914:	31 97       	sbiw	r30, 0x01	; 1
    6916:	ed 83       	std	Y+5, r30	; 0x05
    6918:	fe 83       	std	Y+6, r31	; 0x06
    691a:	a9 01       	movw	r20, r18
    691c:	bc 01       	movw	r22, r24
    691e:	ce 01       	movw	r24, r28
    6920:	01 96       	adiw	r24, 0x01	; 1
    6922:	5b da       	rcall	.-2890   	; 0x5dda <vfprintf>
    6924:	4d 81       	ldd	r20, Y+5	; 0x05
    6926:	5e 81       	ldd	r21, Y+6	; 0x06
    6928:	57 fd       	sbrc	r21, 7
    692a:	0a c0       	rjmp	.+20     	; 0x6940 <vsnprintf_P+0x54>
    692c:	2f 81       	ldd	r18, Y+7	; 0x07
    692e:	38 85       	ldd	r19, Y+8	; 0x08
    6930:	42 17       	cp	r20, r18
    6932:	53 07       	cpc	r21, r19
    6934:	0c f4       	brge	.+2      	; 0x6938 <vsnprintf_P+0x4c>
    6936:	9a 01       	movw	r18, r20
    6938:	f8 01       	movw	r30, r16
    693a:	e2 0f       	add	r30, r18
    693c:	f3 1f       	adc	r31, r19
    693e:	10 82       	st	Z, r1
    6940:	2e 96       	adiw	r28, 0x0e	; 14
    6942:	cd bf       	out	0x3d, r28	; 61
    6944:	de bf       	out	0x3e, r29	; 62
    6946:	df 91       	pop	r29
    6948:	cf 91       	pop	r28
    694a:	1f 91       	pop	r17
    694c:	0f 91       	pop	r16
    694e:	08 95       	ret

00006950 <__ultoa_invert>:
    6950:	fa 01       	movw	r30, r20
    6952:	aa 27       	eor	r26, r26
    6954:	28 30       	cpi	r18, 0x08	; 8
    6956:	51 f1       	breq	.+84     	; 0x69ac <__ultoa_invert+0x5c>
    6958:	20 31       	cpi	r18, 0x10	; 16
    695a:	81 f1       	breq	.+96     	; 0x69bc <__ultoa_invert+0x6c>
    695c:	e8 94       	clt
    695e:	6f 93       	push	r22
    6960:	6e 7f       	andi	r22, 0xFE	; 254
    6962:	6e 5f       	subi	r22, 0xFE	; 254
    6964:	7f 4f       	sbci	r23, 0xFF	; 255
    6966:	8f 4f       	sbci	r24, 0xFF	; 255
    6968:	9f 4f       	sbci	r25, 0xFF	; 255
    696a:	af 4f       	sbci	r26, 0xFF	; 255
    696c:	b1 e0       	ldi	r27, 0x01	; 1
    696e:	3e d0       	rcall	.+124    	; 0x69ec <__ultoa_invert+0x9c>
    6970:	b4 e0       	ldi	r27, 0x04	; 4
    6972:	3c d0       	rcall	.+120    	; 0x69ec <__ultoa_invert+0x9c>
    6974:	67 0f       	add	r22, r23
    6976:	78 1f       	adc	r23, r24
    6978:	89 1f       	adc	r24, r25
    697a:	9a 1f       	adc	r25, r26
    697c:	a1 1d       	adc	r26, r1
    697e:	68 0f       	add	r22, r24
    6980:	79 1f       	adc	r23, r25
    6982:	8a 1f       	adc	r24, r26
    6984:	91 1d       	adc	r25, r1
    6986:	a1 1d       	adc	r26, r1
    6988:	6a 0f       	add	r22, r26
    698a:	71 1d       	adc	r23, r1
    698c:	81 1d       	adc	r24, r1
    698e:	91 1d       	adc	r25, r1
    6990:	a1 1d       	adc	r26, r1
    6992:	20 d0       	rcall	.+64     	; 0x69d4 <__ultoa_invert+0x84>
    6994:	09 f4       	brne	.+2      	; 0x6998 <__ultoa_invert+0x48>
    6996:	68 94       	set
    6998:	3f 91       	pop	r19
    699a:	2a e0       	ldi	r18, 0x0A	; 10
    699c:	26 9f       	mul	r18, r22
    699e:	11 24       	eor	r1, r1
    69a0:	30 19       	sub	r19, r0
    69a2:	30 5d       	subi	r19, 0xD0	; 208
    69a4:	31 93       	st	Z+, r19
    69a6:	de f6       	brtc	.-74     	; 0x695e <__ultoa_invert+0xe>
    69a8:	cf 01       	movw	r24, r30
    69aa:	08 95       	ret
    69ac:	46 2f       	mov	r20, r22
    69ae:	47 70       	andi	r20, 0x07	; 7
    69b0:	40 5d       	subi	r20, 0xD0	; 208
    69b2:	41 93       	st	Z+, r20
    69b4:	b3 e0       	ldi	r27, 0x03	; 3
    69b6:	0f d0       	rcall	.+30     	; 0x69d6 <__ultoa_invert+0x86>
    69b8:	c9 f7       	brne	.-14     	; 0x69ac <__ultoa_invert+0x5c>
    69ba:	f6 cf       	rjmp	.-20     	; 0x69a8 <__ultoa_invert+0x58>
    69bc:	46 2f       	mov	r20, r22
    69be:	4f 70       	andi	r20, 0x0F	; 15
    69c0:	40 5d       	subi	r20, 0xD0	; 208
    69c2:	4a 33       	cpi	r20, 0x3A	; 58
    69c4:	18 f0       	brcs	.+6      	; 0x69cc <__ultoa_invert+0x7c>
    69c6:	49 5d       	subi	r20, 0xD9	; 217
    69c8:	31 fd       	sbrc	r19, 1
    69ca:	40 52       	subi	r20, 0x20	; 32
    69cc:	41 93       	st	Z+, r20
    69ce:	02 d0       	rcall	.+4      	; 0x69d4 <__ultoa_invert+0x84>
    69d0:	a9 f7       	brne	.-22     	; 0x69bc <__ultoa_invert+0x6c>
    69d2:	ea cf       	rjmp	.-44     	; 0x69a8 <__ultoa_invert+0x58>
    69d4:	b4 e0       	ldi	r27, 0x04	; 4
    69d6:	a6 95       	lsr	r26
    69d8:	97 95       	ror	r25
    69da:	87 95       	ror	r24
    69dc:	77 95       	ror	r23
    69de:	67 95       	ror	r22
    69e0:	ba 95       	dec	r27
    69e2:	c9 f7       	brne	.-14     	; 0x69d6 <__ultoa_invert+0x86>
    69e4:	00 97       	sbiw	r24, 0x00	; 0
    69e6:	61 05       	cpc	r22, r1
    69e8:	71 05       	cpc	r23, r1
    69ea:	08 95       	ret
    69ec:	9b 01       	movw	r18, r22
    69ee:	ac 01       	movw	r20, r24
    69f0:	0a 2e       	mov	r0, r26
    69f2:	06 94       	lsr	r0
    69f4:	57 95       	ror	r21
    69f6:	47 95       	ror	r20
    69f8:	37 95       	ror	r19
    69fa:	27 95       	ror	r18
    69fc:	ba 95       	dec	r27
    69fe:	c9 f7       	brne	.-14     	; 0x69f2 <__ultoa_invert+0xa2>
    6a00:	62 0f       	add	r22, r18
    6a02:	73 1f       	adc	r23, r19
    6a04:	84 1f       	adc	r24, r20
    6a06:	95 1f       	adc	r25, r21
    6a08:	a0 1d       	adc	r26, r0
    6a0a:	08 95       	ret

00006a0c <putval>:
    6a0c:	20 fd       	sbrc	r18, 0
    6a0e:	09 c0       	rjmp	.+18     	; 0x6a22 <putval+0x16>
    6a10:	fc 01       	movw	r30, r24
    6a12:	23 fd       	sbrc	r18, 3
    6a14:	05 c0       	rjmp	.+10     	; 0x6a20 <putval+0x14>
    6a16:	22 ff       	sbrs	r18, 2
    6a18:	02 c0       	rjmp	.+4      	; 0x6a1e <putval+0x12>
    6a1a:	73 83       	std	Z+3, r23	; 0x03
    6a1c:	62 83       	std	Z+2, r22	; 0x02
    6a1e:	51 83       	std	Z+1, r21	; 0x01
    6a20:	40 83       	st	Z, r20
    6a22:	08 95       	ret

00006a24 <mulacc>:
    6a24:	44 fd       	sbrc	r20, 4
    6a26:	10 c0       	rjmp	.+32     	; 0x6a48 <mulacc+0x24>
    6a28:	46 fd       	sbrc	r20, 6
    6a2a:	10 c0       	rjmp	.+32     	; 0x6a4c <mulacc+0x28>
    6a2c:	db 01       	movw	r26, r22
    6a2e:	fc 01       	movw	r30, r24
    6a30:	aa 0f       	add	r26, r26
    6a32:	bb 1f       	adc	r27, r27
    6a34:	ee 1f       	adc	r30, r30
    6a36:	ff 1f       	adc	r31, r31
    6a38:	10 94       	com	r1
    6a3a:	d1 f7       	brne	.-12     	; 0x6a30 <mulacc+0xc>
    6a3c:	6a 0f       	add	r22, r26
    6a3e:	7b 1f       	adc	r23, r27
    6a40:	8e 1f       	adc	r24, r30
    6a42:	9f 1f       	adc	r25, r31
    6a44:	31 e0       	ldi	r19, 0x01	; 1
    6a46:	03 c0       	rjmp	.+6      	; 0x6a4e <mulacc+0x2a>
    6a48:	33 e0       	ldi	r19, 0x03	; 3
    6a4a:	01 c0       	rjmp	.+2      	; 0x6a4e <mulacc+0x2a>
    6a4c:	34 e0       	ldi	r19, 0x04	; 4
    6a4e:	66 0f       	add	r22, r22
    6a50:	77 1f       	adc	r23, r23
    6a52:	88 1f       	adc	r24, r24
    6a54:	99 1f       	adc	r25, r25
    6a56:	31 50       	subi	r19, 0x01	; 1
    6a58:	d1 f7       	brne	.-12     	; 0x6a4e <mulacc+0x2a>
    6a5a:	62 0f       	add	r22, r18
    6a5c:	71 1d       	adc	r23, r1
    6a5e:	81 1d       	adc	r24, r1
    6a60:	91 1d       	adc	r25, r1
    6a62:	08 95       	ret

00006a64 <skip_spaces>:
    6a64:	0f 93       	push	r16
    6a66:	1f 93       	push	r17
    6a68:	cf 93       	push	r28
    6a6a:	df 93       	push	r29
    6a6c:	8c 01       	movw	r16, r24
    6a6e:	c8 01       	movw	r24, r16
    6a70:	a1 d2       	rcall	.+1346   	; 0x6fb4 <fgetc>
    6a72:	ec 01       	movw	r28, r24
    6a74:	97 fd       	sbrc	r25, 7
    6a76:	06 c0       	rjmp	.+12     	; 0x6a84 <skip_spaces+0x20>
    6a78:	8a d2       	rcall	.+1300   	; 0x6f8e <isspace>
    6a7a:	89 2b       	or	r24, r25
    6a7c:	c1 f7       	brne	.-16     	; 0x6a6e <skip_spaces+0xa>
    6a7e:	b8 01       	movw	r22, r16
    6a80:	ce 01       	movw	r24, r28
    6a82:	d6 d2       	rcall	.+1452   	; 0x7030 <ungetc>
    6a84:	ce 01       	movw	r24, r28
    6a86:	df 91       	pop	r29
    6a88:	cf 91       	pop	r28
    6a8a:	1f 91       	pop	r17
    6a8c:	0f 91       	pop	r16
    6a8e:	08 95       	ret

00006a90 <conv_int>:
    6a90:	8f 92       	push	r8
    6a92:	9f 92       	push	r9
    6a94:	af 92       	push	r10
    6a96:	bf 92       	push	r11
    6a98:	cf 92       	push	r12
    6a9a:	df 92       	push	r13
    6a9c:	ef 92       	push	r14
    6a9e:	ff 92       	push	r15
    6aa0:	0f 93       	push	r16
    6aa2:	1f 93       	push	r17
    6aa4:	cf 93       	push	r28
    6aa6:	df 93       	push	r29
    6aa8:	1f 92       	push	r1
    6aaa:	cd b7       	in	r28, 0x3d	; 61
    6aac:	de b7       	in	r29, 0x3e	; 62
    6aae:	8c 01       	movw	r16, r24
    6ab0:	c6 2e       	mov	r12, r22
    6ab2:	7a 01       	movw	r14, r20
    6ab4:	29 83       	std	Y+1, r18	; 0x01
    6ab6:	7e d2       	rcall	.+1276   	; 0x6fb4 <fgetc>
    6ab8:	ac 01       	movw	r20, r24
    6aba:	55 27       	eor	r21, r21
    6abc:	29 81       	ldd	r18, Y+1	; 0x01
    6abe:	4b 32       	cpi	r20, 0x2B	; 43
    6ac0:	51 05       	cpc	r21, r1
    6ac2:	21 f0       	breq	.+8      	; 0x6acc <conv_int+0x3c>
    6ac4:	4d 32       	cpi	r20, 0x2D	; 45
    6ac6:	51 05       	cpc	r21, r1
    6ac8:	61 f4       	brne	.+24     	; 0x6ae2 <conv_int+0x52>
    6aca:	20 68       	ori	r18, 0x80	; 128
    6acc:	ca 94       	dec	r12
    6ace:	c1 10       	cpse	r12, r1
    6ad0:	02 c0       	rjmp	.+4      	; 0x6ad6 <conv_int+0x46>
    6ad2:	80 e0       	ldi	r24, 0x00	; 0
    6ad4:	6f c0       	rjmp	.+222    	; 0x6bb4 <conv_int+0x124>
    6ad6:	c8 01       	movw	r24, r16
    6ad8:	29 83       	std	Y+1, r18	; 0x01
    6ada:	6c d2       	rcall	.+1240   	; 0x6fb4 <fgetc>
    6adc:	29 81       	ldd	r18, Y+1	; 0x01
    6ade:	97 fd       	sbrc	r25, 7
    6ae0:	f8 cf       	rjmp	.-16     	; 0x6ad2 <conv_int+0x42>
    6ae2:	32 2f       	mov	r19, r18
    6ae4:	3d 7f       	andi	r19, 0xFD	; 253
    6ae6:	d3 2e       	mov	r13, r19
    6ae8:	32 2f       	mov	r19, r18
    6aea:	30 73       	andi	r19, 0x30	; 48
    6aec:	39 f5       	brne	.+78     	; 0x6b3c <conv_int+0xac>
    6aee:	80 33       	cpi	r24, 0x30	; 48
    6af0:	29 f5       	brne	.+74     	; 0x6b3c <conv_int+0xac>
    6af2:	bb 24       	eor	r11, r11
    6af4:	ba 94       	dec	r11
    6af6:	bc 0c       	add	r11, r12
    6af8:	09 f4       	brne	.+2      	; 0x6afc <conv_int+0x6c>
    6afa:	49 c0       	rjmp	.+146    	; 0x6b8e <conv_int+0xfe>
    6afc:	c8 01       	movw	r24, r16
    6afe:	29 83       	std	Y+1, r18	; 0x01
    6b00:	59 d2       	rcall	.+1202   	; 0x6fb4 <fgetc>
    6b02:	29 81       	ldd	r18, Y+1	; 0x01
    6b04:	97 fd       	sbrc	r25, 7
    6b06:	43 c0       	rjmp	.+134    	; 0x6b8e <conv_int+0xfe>
    6b08:	38 2f       	mov	r19, r24
    6b0a:	3f 7d       	andi	r19, 0xDF	; 223
    6b0c:	38 35       	cpi	r19, 0x58	; 88
    6b0e:	61 f4       	brne	.+24     	; 0x6b28 <conv_int+0x98>
    6b10:	8d 2d       	mov	r24, r13
    6b12:	82 64       	ori	r24, 0x42	; 66
    6b14:	d8 2e       	mov	r13, r24
    6b16:	ca 94       	dec	r12
    6b18:	ca 94       	dec	r12
    6b1a:	cc 20       	and	r12, r12
    6b1c:	c1 f1       	breq	.+112    	; 0x6b8e <conv_int+0xfe>
    6b1e:	c8 01       	movw	r24, r16
    6b20:	49 d2       	rcall	.+1170   	; 0x6fb4 <fgetc>
    6b22:	97 ff       	sbrs	r25, 7
    6b24:	0b c0       	rjmp	.+22     	; 0x6b3c <conv_int+0xac>
    6b26:	33 c0       	rjmp	.+102    	; 0x6b8e <conv_int+0xfe>
    6b28:	26 ff       	sbrs	r18, 6
    6b2a:	04 c0       	rjmp	.+8      	; 0x6b34 <conv_int+0xa4>
    6b2c:	2d 2d       	mov	r18, r13
    6b2e:	22 60       	ori	r18, 0x02	; 2
    6b30:	d2 2e       	mov	r13, r18
    6b32:	03 c0       	rjmp	.+6      	; 0x6b3a <conv_int+0xaa>
    6b34:	3d 2d       	mov	r19, r13
    6b36:	32 61       	ori	r19, 0x12	; 18
    6b38:	d3 2e       	mov	r13, r19
    6b3a:	cb 2c       	mov	r12, r11
    6b3c:	81 2c       	mov	r8, r1
    6b3e:	91 2c       	mov	r9, r1
    6b40:	54 01       	movw	r10, r8
    6b42:	20 ed       	ldi	r18, 0xD0	; 208
    6b44:	28 0f       	add	r18, r24
    6b46:	28 30       	cpi	r18, 0x08	; 8
    6b48:	78 f0       	brcs	.+30     	; 0x6b68 <conv_int+0xd8>
    6b4a:	d4 fe       	sbrs	r13, 4
    6b4c:	03 c0       	rjmp	.+6      	; 0x6b54 <conv_int+0xc4>
    6b4e:	b8 01       	movw	r22, r16
    6b50:	6f d2       	rcall	.+1246   	; 0x7030 <ungetc>
    6b52:	1a c0       	rjmp	.+52     	; 0x6b88 <conv_int+0xf8>
    6b54:	2a 30       	cpi	r18, 0x0A	; 10
    6b56:	40 f0       	brcs	.+16     	; 0x6b68 <conv_int+0xd8>
    6b58:	d6 fe       	sbrs	r13, 6
    6b5a:	f9 cf       	rjmp	.-14     	; 0x6b4e <conv_int+0xbe>
    6b5c:	2f 7d       	andi	r18, 0xDF	; 223
    6b5e:	3f ee       	ldi	r19, 0xEF	; 239
    6b60:	32 0f       	add	r19, r18
    6b62:	36 30       	cpi	r19, 0x06	; 6
    6b64:	a0 f7       	brcc	.-24     	; 0x6b4e <conv_int+0xbe>
    6b66:	27 50       	subi	r18, 0x07	; 7
    6b68:	4d 2d       	mov	r20, r13
    6b6a:	c5 01       	movw	r24, r10
    6b6c:	b4 01       	movw	r22, r8
    6b6e:	5a df       	rcall	.-332    	; 0x6a24 <mulacc>
    6b70:	4b 01       	movw	r8, r22
    6b72:	5c 01       	movw	r10, r24
    6b74:	8d 2d       	mov	r24, r13
    6b76:	82 60       	ori	r24, 0x02	; 2
    6b78:	d8 2e       	mov	r13, r24
    6b7a:	ca 94       	dec	r12
    6b7c:	cc 20       	and	r12, r12
    6b7e:	51 f0       	breq	.+20     	; 0x6b94 <conv_int+0x104>
    6b80:	c8 01       	movw	r24, r16
    6b82:	18 d2       	rcall	.+1072   	; 0x6fb4 <fgetc>
    6b84:	97 ff       	sbrs	r25, 7
    6b86:	dd cf       	rjmp	.-70     	; 0x6b42 <conv_int+0xb2>
    6b88:	d1 fc       	sbrc	r13, 1
    6b8a:	04 c0       	rjmp	.+8      	; 0x6b94 <conv_int+0x104>
    6b8c:	a2 cf       	rjmp	.-188    	; 0x6ad2 <conv_int+0x42>
    6b8e:	81 2c       	mov	r8, r1
    6b90:	91 2c       	mov	r9, r1
    6b92:	54 01       	movw	r10, r8
    6b94:	d7 fe       	sbrs	r13, 7
    6b96:	08 c0       	rjmp	.+16     	; 0x6ba8 <conv_int+0x118>
    6b98:	b0 94       	com	r11
    6b9a:	a0 94       	com	r10
    6b9c:	90 94       	com	r9
    6b9e:	80 94       	com	r8
    6ba0:	81 1c       	adc	r8, r1
    6ba2:	91 1c       	adc	r9, r1
    6ba4:	a1 1c       	adc	r10, r1
    6ba6:	b1 1c       	adc	r11, r1
    6ba8:	2d 2d       	mov	r18, r13
    6baa:	b5 01       	movw	r22, r10
    6bac:	a4 01       	movw	r20, r8
    6bae:	c7 01       	movw	r24, r14
    6bb0:	2d df       	rcall	.-422    	; 0x6a0c <putval>
    6bb2:	81 e0       	ldi	r24, 0x01	; 1
    6bb4:	0f 90       	pop	r0
    6bb6:	df 91       	pop	r29
    6bb8:	cf 91       	pop	r28
    6bba:	1f 91       	pop	r17
    6bbc:	0f 91       	pop	r16
    6bbe:	ff 90       	pop	r15
    6bc0:	ef 90       	pop	r14
    6bc2:	df 90       	pop	r13
    6bc4:	cf 90       	pop	r12
    6bc6:	bf 90       	pop	r11
    6bc8:	af 90       	pop	r10
    6bca:	9f 90       	pop	r9
    6bcc:	8f 90       	pop	r8
    6bce:	08 95       	ret

00006bd0 <conv_brk>:
    6bd0:	6f 92       	push	r6
    6bd2:	7f 92       	push	r7
    6bd4:	8f 92       	push	r8
    6bd6:	9f 92       	push	r9
    6bd8:	af 92       	push	r10
    6bda:	bf 92       	push	r11
    6bdc:	cf 92       	push	r12
    6bde:	df 92       	push	r13
    6be0:	ef 92       	push	r14
    6be2:	ff 92       	push	r15
    6be4:	0f 93       	push	r16
    6be6:	1f 93       	push	r17
    6be8:	cf 93       	push	r28
    6bea:	df 93       	push	r29
    6bec:	cd b7       	in	r28, 0x3d	; 61
    6bee:	de b7       	in	r29, 0x3e	; 62
    6bf0:	a1 97       	sbiw	r28, 0x21	; 33
    6bf2:	cd bf       	out	0x3d, r28	; 61
    6bf4:	de bf       	out	0x3e, r29	; 62
    6bf6:	5c 01       	movw	r10, r24
    6bf8:	7a 01       	movw	r14, r20
    6bfa:	ce 01       	movw	r24, r28
    6bfc:	01 96       	adiw	r24, 0x01	; 1
    6bfe:	6c 01       	movw	r12, r24
    6c00:	80 e2       	ldi	r24, 0x20	; 32
    6c02:	f6 01       	movw	r30, r12
    6c04:	11 92       	st	Z+, r1
    6c06:	8a 95       	dec	r24
    6c08:	e9 f7       	brne	.-6      	; 0x6c04 <conv_brk+0x34>
    6c0a:	f5 01       	movw	r30, r10
    6c0c:	83 80       	ldd	r8, Z+3	; 0x03
    6c0e:	40 e0       	ldi	r20, 0x00	; 0
    6c10:	50 e0       	ldi	r21, 0x00	; 0
    6c12:	91 2c       	mov	r9, r1
    6c14:	71 2c       	mov	r7, r1
    6c16:	70 e0       	ldi	r23, 0x00	; 0
    6c18:	a1 e0       	ldi	r26, 0x01	; 1
    6c1a:	b0 e0       	ldi	r27, 0x00	; 0
    6c1c:	f9 01       	movw	r30, r18
    6c1e:	83 fc       	sbrc	r8, 3
    6c20:	85 91       	lpm	r24, Z+
    6c22:	83 fe       	sbrs	r8, 3
    6c24:	81 91       	ld	r24, Z+
    6c26:	8f 01       	movw	r16, r30
    6c28:	98 2f       	mov	r25, r24
    6c2a:	9f 01       	movw	r18, r30
    6c2c:	81 11       	cpse	r24, r1
    6c2e:	03 c0       	rjmp	.+6      	; 0x6c36 <conv_brk+0x66>
    6c30:	80 e0       	ldi	r24, 0x00	; 0
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	7a c0       	rjmp	.+244    	; 0x6d2a <conv_brk+0x15a>
    6c36:	8e 35       	cpi	r24, 0x5E	; 94
    6c38:	19 f4       	brne	.+6      	; 0x6c40 <conv_brk+0x70>
    6c3a:	41 15       	cp	r20, r1
    6c3c:	51 05       	cpc	r21, r1
    6c3e:	49 f1       	breq	.+82     	; 0x6c92 <conv_brk+0xc2>
    6c40:	e7 2f       	mov	r30, r23
    6c42:	f0 e0       	ldi	r31, 0x00	; 0
    6c44:	e4 17       	cp	r30, r20
    6c46:	f5 07       	cpc	r31, r21
    6c48:	3c f4       	brge	.+14     	; 0x6c58 <conv_brk+0x88>
    6c4a:	8d 35       	cpi	r24, 0x5D	; 93
    6c4c:	59 f1       	breq	.+86     	; 0x6ca4 <conv_brk+0xd4>
    6c4e:	8d 32       	cpi	r24, 0x2D	; 45
    6c50:	19 f4       	brne	.+6      	; 0x6c58 <conv_brk+0x88>
    6c52:	77 20       	and	r7, r7
    6c54:	01 f1       	breq	.+64     	; 0x6c96 <conv_brk+0xc6>
    6c56:	03 c0       	rjmp	.+6      	; 0x6c5e <conv_brk+0x8e>
    6c58:	71 10       	cpse	r7, r1
    6c5a:	01 c0       	rjmp	.+2      	; 0x6c5e <conv_brk+0x8e>
    6c5c:	98 2e       	mov	r9, r24
    6c5e:	89 2f       	mov	r24, r25
    6c60:	86 95       	lsr	r24
    6c62:	86 95       	lsr	r24
    6c64:	86 95       	lsr	r24
    6c66:	86 01       	movw	r16, r12
    6c68:	08 0f       	add	r16, r24
    6c6a:	11 1d       	adc	r17, r1
    6c6c:	89 2f       	mov	r24, r25
    6c6e:	87 70       	andi	r24, 0x07	; 7
    6c70:	3d 01       	movw	r6, r26
    6c72:	01 c0       	rjmp	.+2      	; 0x6c76 <conv_brk+0xa6>
    6c74:	66 0c       	add	r6, r6
    6c76:	8a 95       	dec	r24
    6c78:	ea f7       	brpl	.-6      	; 0x6c74 <conv_brk+0xa4>
    6c7a:	f8 01       	movw	r30, r16
    6c7c:	80 81       	ld	r24, Z
    6c7e:	86 29       	or	r24, r6
    6c80:	80 83       	st	Z, r24
    6c82:	99 15       	cp	r25, r9
    6c84:	59 f0       	breq	.+22     	; 0x6c9c <conv_brk+0xcc>
    6c86:	99 15       	cp	r25, r9
    6c88:	10 f4       	brcc	.+4      	; 0x6c8e <conv_brk+0xbe>
    6c8a:	9f 5f       	subi	r25, 0xFF	; 255
    6c8c:	e8 cf       	rjmp	.-48     	; 0x6c5e <conv_brk+0x8e>
    6c8e:	91 50       	subi	r25, 0x01	; 1
    6c90:	e6 cf       	rjmp	.-52     	; 0x6c5e <conv_brk+0x8e>
    6c92:	71 e0       	ldi	r23, 0x01	; 1
    6c94:	04 c0       	rjmp	.+8      	; 0x6c9e <conv_brk+0xce>
    6c96:	77 24       	eor	r7, r7
    6c98:	73 94       	inc	r7
    6c9a:	01 c0       	rjmp	.+2      	; 0x6c9e <conv_brk+0xce>
    6c9c:	71 2c       	mov	r7, r1
    6c9e:	4f 5f       	subi	r20, 0xFF	; 255
    6ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca2:	bc cf       	rjmp	.-136    	; 0x6c1c <conv_brk+0x4c>
    6ca4:	77 20       	and	r7, r7
    6ca6:	19 f0       	breq	.+6      	; 0x6cae <conv_brk+0xde>
    6ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    6caa:	80 62       	ori	r24, 0x20	; 32
    6cac:	8e 83       	std	Y+6, r24	; 0x06
    6cae:	71 11       	cpse	r23, r1
    6cb0:	03 c0       	rjmp	.+6      	; 0x6cb8 <conv_brk+0xe8>
    6cb2:	99 24       	eor	r9, r9
    6cb4:	93 94       	inc	r9
    6cb6:	16 c0       	rjmp	.+44     	; 0x6ce4 <conv_brk+0x114>
    6cb8:	f6 01       	movw	r30, r12
    6cba:	9e 01       	movw	r18, r28
    6cbc:	2f 5d       	subi	r18, 0xDF	; 223
    6cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc0:	80 81       	ld	r24, Z
    6cc2:	80 95       	com	r24
    6cc4:	81 93       	st	Z+, r24
    6cc6:	e2 17       	cp	r30, r18
    6cc8:	f3 07       	cpc	r31, r19
    6cca:	d1 f7       	brne	.-12     	; 0x6cc0 <conv_brk+0xf0>
    6ccc:	f2 cf       	rjmp	.-28     	; 0x6cb2 <conv_brk+0xe2>
    6cce:	e1 14       	cp	r14, r1
    6cd0:	f1 04       	cpc	r15, r1
    6cd2:	29 f0       	breq	.+10     	; 0x6cde <conv_brk+0x10e>
    6cd4:	f7 01       	movw	r30, r14
    6cd6:	80 83       	st	Z, r24
    6cd8:	c7 01       	movw	r24, r14
    6cda:	01 96       	adiw	r24, 0x01	; 1
    6cdc:	7c 01       	movw	r14, r24
    6cde:	61 50       	subi	r22, 0x01	; 1
    6ce0:	91 2c       	mov	r9, r1
    6ce2:	e9 f0       	breq	.+58     	; 0x6d1e <conv_brk+0x14e>
    6ce4:	c5 01       	movw	r24, r10
    6ce6:	69 a3       	std	Y+33, r22	; 0x21
    6ce8:	65 d1       	rcall	.+714    	; 0x6fb4 <fgetc>
    6cea:	69 a1       	ldd	r22, Y+33	; 0x21
    6cec:	97 fd       	sbrc	r25, 7
    6cee:	15 c0       	rjmp	.+42     	; 0x6d1a <conv_brk+0x14a>
    6cf0:	28 2f       	mov	r18, r24
    6cf2:	26 95       	lsr	r18
    6cf4:	26 95       	lsr	r18
    6cf6:	26 95       	lsr	r18
    6cf8:	f6 01       	movw	r30, r12
    6cfa:	e2 0f       	add	r30, r18
    6cfc:	f1 1d       	adc	r31, r1
    6cfe:	20 81       	ld	r18, Z
    6d00:	30 e0       	ldi	r19, 0x00	; 0
    6d02:	ac 01       	movw	r20, r24
    6d04:	47 70       	andi	r20, 0x07	; 7
    6d06:	55 27       	eor	r21, r21
    6d08:	02 c0       	rjmp	.+4      	; 0x6d0e <conv_brk+0x13e>
    6d0a:	35 95       	asr	r19
    6d0c:	27 95       	ror	r18
    6d0e:	4a 95       	dec	r20
    6d10:	e2 f7       	brpl	.-8      	; 0x6d0a <conv_brk+0x13a>
    6d12:	20 fd       	sbrc	r18, 0
    6d14:	dc cf       	rjmp	.-72     	; 0x6cce <conv_brk+0xfe>
    6d16:	b5 01       	movw	r22, r10
    6d18:	8b d1       	rcall	.+790    	; 0x7030 <ungetc>
    6d1a:	91 10       	cpse	r9, r1
    6d1c:	89 cf       	rjmp	.-238    	; 0x6c30 <conv_brk+0x60>
    6d1e:	e1 14       	cp	r14, r1
    6d20:	f1 04       	cpc	r15, r1
    6d22:	11 f0       	breq	.+4      	; 0x6d28 <conv_brk+0x158>
    6d24:	f7 01       	movw	r30, r14
    6d26:	10 82       	st	Z, r1
    6d28:	c8 01       	movw	r24, r16
    6d2a:	a1 96       	adiw	r28, 0x21	; 33
    6d2c:	cd bf       	out	0x3d, r28	; 61
    6d2e:	de bf       	out	0x3e, r29	; 62
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	1f 91       	pop	r17
    6d36:	0f 91       	pop	r16
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	df 90       	pop	r13
    6d3e:	cf 90       	pop	r12
    6d40:	bf 90       	pop	r11
    6d42:	af 90       	pop	r10
    6d44:	9f 90       	pop	r9
    6d46:	8f 90       	pop	r8
    6d48:	7f 90       	pop	r7
    6d4a:	6f 90       	pop	r6
    6d4c:	08 95       	ret

00006d4e <vfscanf>:
    6d4e:	4f 92       	push	r4
    6d50:	5f 92       	push	r5
    6d52:	7f 92       	push	r7
    6d54:	8f 92       	push	r8
    6d56:	9f 92       	push	r9
    6d58:	af 92       	push	r10
    6d5a:	bf 92       	push	r11
    6d5c:	cf 92       	push	r12
    6d5e:	df 92       	push	r13
    6d60:	ef 92       	push	r14
    6d62:	ff 92       	push	r15
    6d64:	0f 93       	push	r16
    6d66:	1f 93       	push	r17
    6d68:	cf 93       	push	r28
    6d6a:	df 93       	push	r29
    6d6c:	1f 92       	push	r1
    6d6e:	cd b7       	in	r28, 0x3d	; 61
    6d70:	de b7       	in	r29, 0x3e	; 62
    6d72:	6c 01       	movw	r12, r24
    6d74:	2b 01       	movw	r4, r22
    6d76:	5a 01       	movw	r10, r20
    6d78:	fc 01       	movw	r30, r24
    6d7a:	16 82       	std	Z+6, r1	; 0x06
    6d7c:	17 82       	std	Z+7, r1	; 0x07
    6d7e:	71 2c       	mov	r7, r1
    6d80:	f6 01       	movw	r30, r12
    6d82:	f3 80       	ldd	r15, Z+3	; 0x03
    6d84:	f2 01       	movw	r30, r4
    6d86:	f3 fc       	sbrc	r15, 3
    6d88:	85 91       	lpm	r24, Z+
    6d8a:	f3 fe       	sbrs	r15, 3
    6d8c:	81 91       	ld	r24, Z+
    6d8e:	38 2f       	mov	r19, r24
    6d90:	2f 01       	movw	r4, r30
    6d92:	88 23       	and	r24, r24
    6d94:	09 f4       	brne	.+2      	; 0x6d98 <vfscanf+0x4a>
    6d96:	e5 c0       	rjmp	.+458    	; 0x6f62 <vfscanf+0x214>
    6d98:	90 e0       	ldi	r25, 0x00	; 0
    6d9a:	39 83       	std	Y+1, r19	; 0x01
    6d9c:	f8 d0       	rcall	.+496    	; 0x6f8e <isspace>
    6d9e:	39 81       	ldd	r19, Y+1	; 0x01
    6da0:	89 2b       	or	r24, r25
    6da2:	19 f0       	breq	.+6      	; 0x6daa <vfscanf+0x5c>
    6da4:	c6 01       	movw	r24, r12
    6da6:	5e de       	rcall	.-836    	; 0x6a64 <skip_spaces>
    6da8:	eb cf       	rjmp	.-42     	; 0x6d80 <vfscanf+0x32>
    6daa:	35 32       	cpi	r19, 0x25	; 37
    6dac:	41 f4       	brne	.+16     	; 0x6dbe <vfscanf+0x70>
    6dae:	f2 01       	movw	r30, r4
    6db0:	f3 fc       	sbrc	r15, 3
    6db2:	35 91       	lpm	r19, Z+
    6db4:	f3 fe       	sbrs	r15, 3
    6db6:	31 91       	ld	r19, Z+
    6db8:	2f 01       	movw	r4, r30
    6dba:	35 32       	cpi	r19, 0x25	; 37
    6dbc:	59 f4       	brne	.+22     	; 0x6dd4 <vfscanf+0x86>
    6dbe:	c6 01       	movw	r24, r12
    6dc0:	39 83       	std	Y+1, r19	; 0x01
    6dc2:	f8 d0       	rcall	.+496    	; 0x6fb4 <fgetc>
    6dc4:	39 81       	ldd	r19, Y+1	; 0x01
    6dc6:	97 fd       	sbrc	r25, 7
    6dc8:	ca c0       	rjmp	.+404    	; 0x6f5e <vfscanf+0x210>
    6dca:	38 17       	cp	r19, r24
    6dcc:	c9 f2       	breq	.-78     	; 0x6d80 <vfscanf+0x32>
    6dce:	b6 01       	movw	r22, r12
    6dd0:	2f d1       	rcall	.+606    	; 0x7030 <ungetc>
    6dd2:	c7 c0       	rjmp	.+398    	; 0x6f62 <vfscanf+0x214>
    6dd4:	3a 32       	cpi	r19, 0x2A	; 42
    6dd6:	39 f4       	brne	.+14     	; 0x6de6 <vfscanf+0x98>
    6dd8:	f3 fc       	sbrc	r15, 3
    6dda:	35 91       	lpm	r19, Z+
    6ddc:	f3 fe       	sbrs	r15, 3
    6dde:	31 91       	ld	r19, Z+
    6de0:	2f 01       	movw	r4, r30
    6de2:	51 e0       	ldi	r21, 0x01	; 1
    6de4:	01 c0       	rjmp	.+2      	; 0x6de8 <vfscanf+0x9a>
    6de6:	50 e0       	ldi	r21, 0x00	; 0
    6de8:	42 01       	movw	r8, r4
    6dea:	10 e0       	ldi	r17, 0x00	; 0
    6dec:	20 ed       	ldi	r18, 0xD0	; 208
    6dee:	23 0f       	add	r18, r19
    6df0:	2a 30       	cpi	r18, 0x0A	; 10
    6df2:	88 f4       	brcc	.+34     	; 0x6e16 <vfscanf+0xc8>
    6df4:	52 60       	ori	r21, 0x02	; 2
    6df6:	61 2f       	mov	r22, r17
    6df8:	70 e0       	ldi	r23, 0x00	; 0
    6dfa:	80 e0       	ldi	r24, 0x00	; 0
    6dfc:	90 e0       	ldi	r25, 0x00	; 0
    6dfe:	40 e2       	ldi	r20, 0x20	; 32
    6e00:	59 83       	std	Y+1, r21	; 0x01
    6e02:	10 de       	rcall	.-992    	; 0x6a24 <mulacc>
    6e04:	16 2f       	mov	r17, r22
    6e06:	f4 01       	movw	r30, r8
    6e08:	f3 fc       	sbrc	r15, 3
    6e0a:	35 91       	lpm	r19, Z+
    6e0c:	f3 fe       	sbrs	r15, 3
    6e0e:	31 91       	ld	r19, Z+
    6e10:	4f 01       	movw	r8, r30
    6e12:	59 81       	ldd	r21, Y+1	; 0x01
    6e14:	eb cf       	rjmp	.-42     	; 0x6dec <vfscanf+0x9e>
    6e16:	05 2f       	mov	r16, r21
    6e18:	23 2f       	mov	r18, r19
    6e1a:	24 01       	movw	r4, r8
    6e1c:	51 ff       	sbrs	r21, 1
    6e1e:	03 c0       	rjmp	.+6      	; 0x6e26 <vfscanf+0xd8>
    6e20:	11 11       	cpse	r17, r1
    6e22:	02 c0       	rjmp	.+4      	; 0x6e28 <vfscanf+0xda>
    6e24:	9e c0       	rjmp	.+316    	; 0x6f62 <vfscanf+0x214>
    6e26:	1f ef       	ldi	r17, 0xFF	; 255
    6e28:	38 36       	cpi	r19, 0x68	; 104
    6e2a:	19 f0       	breq	.+6      	; 0x6e32 <vfscanf+0xe4>
    6e2c:	3c 36       	cpi	r19, 0x6C	; 108
    6e2e:	59 f0       	breq	.+22     	; 0x6e46 <vfscanf+0xf8>
    6e30:	11 c0       	rjmp	.+34     	; 0x6e54 <vfscanf+0x106>
    6e32:	f4 01       	movw	r30, r8
    6e34:	f3 fc       	sbrc	r15, 3
    6e36:	25 91       	lpm	r18, Z+
    6e38:	f3 fe       	sbrs	r15, 3
    6e3a:	21 91       	ld	r18, Z+
    6e3c:	2f 01       	movw	r4, r30
    6e3e:	28 36       	cpi	r18, 0x68	; 104
    6e40:	49 f4       	brne	.+18     	; 0x6e54 <vfscanf+0x106>
    6e42:	05 2f       	mov	r16, r21
    6e44:	08 60       	ori	r16, 0x08	; 8
    6e46:	04 60       	ori	r16, 0x04	; 4
    6e48:	f2 01       	movw	r30, r4
    6e4a:	f3 fc       	sbrc	r15, 3
    6e4c:	25 91       	lpm	r18, Z+
    6e4e:	f3 fe       	sbrs	r15, 3
    6e50:	21 91       	ld	r18, Z+
    6e52:	2f 01       	movw	r4, r30
    6e54:	22 23       	and	r18, r18
    6e56:	09 f4       	brne	.+2      	; 0x6e5a <vfscanf+0x10c>
    6e58:	84 c0       	rjmp	.+264    	; 0x6f62 <vfscanf+0x214>
    6e5a:	62 2f       	mov	r22, r18
    6e5c:	70 e0       	ldi	r23, 0x00	; 0
    6e5e:	8c e2       	ldi	r24, 0x2C	; 44
    6e60:	9d e0       	ldi	r25, 0x0D	; 13
    6e62:	29 83       	std	Y+1, r18	; 0x01
    6e64:	9c d0       	rcall	.+312    	; 0x6f9e <strchr_P>
    6e66:	29 81       	ldd	r18, Y+1	; 0x01
    6e68:	89 2b       	or	r24, r25
    6e6a:	09 f4       	brne	.+2      	; 0x6e6e <vfscanf+0x120>
    6e6c:	7a c0       	rjmp	.+244    	; 0x6f62 <vfscanf+0x214>
    6e6e:	00 fd       	sbrc	r16, 0
    6e70:	07 c0       	rjmp	.+14     	; 0x6e80 <vfscanf+0x132>
    6e72:	f5 01       	movw	r30, r10
    6e74:	e0 80       	ld	r14, Z
    6e76:	f1 80       	ldd	r15, Z+1	; 0x01
    6e78:	c5 01       	movw	r24, r10
    6e7a:	02 96       	adiw	r24, 0x02	; 2
    6e7c:	5c 01       	movw	r10, r24
    6e7e:	02 c0       	rjmp	.+4      	; 0x6e84 <vfscanf+0x136>
    6e80:	e1 2c       	mov	r14, r1
    6e82:	f1 2c       	mov	r15, r1
    6e84:	2e 36       	cpi	r18, 0x6E	; 110
    6e86:	49 f4       	brne	.+18     	; 0x6e9a <vfscanf+0x14c>
    6e88:	f6 01       	movw	r30, r12
    6e8a:	46 81       	ldd	r20, Z+6	; 0x06
    6e8c:	57 81       	ldd	r21, Z+7	; 0x07
    6e8e:	60 e0       	ldi	r22, 0x00	; 0
    6e90:	70 e0       	ldi	r23, 0x00	; 0
    6e92:	20 2f       	mov	r18, r16
    6e94:	c7 01       	movw	r24, r14
    6e96:	ba dd       	rcall	.-1164   	; 0x6a0c <putval>
    6e98:	73 cf       	rjmp	.-282    	; 0x6d80 <vfscanf+0x32>
    6e9a:	23 36       	cpi	r18, 0x63	; 99
    6e9c:	89 f4       	brne	.+34     	; 0x6ec0 <vfscanf+0x172>
    6e9e:	01 ff       	sbrs	r16, 1
    6ea0:	11 e0       	ldi	r17, 0x01	; 1
    6ea2:	c6 01       	movw	r24, r12
    6ea4:	87 d0       	rcall	.+270    	; 0x6fb4 <fgetc>
    6ea6:	97 fd       	sbrc	r25, 7
    6ea8:	5a c0       	rjmp	.+180    	; 0x6f5e <vfscanf+0x210>
    6eaa:	e1 14       	cp	r14, r1
    6eac:	f1 04       	cpc	r15, r1
    6eae:	29 f0       	breq	.+10     	; 0x6eba <vfscanf+0x16c>
    6eb0:	f7 01       	movw	r30, r14
    6eb2:	80 83       	st	Z, r24
    6eb4:	c7 01       	movw	r24, r14
    6eb6:	01 96       	adiw	r24, 0x01	; 1
    6eb8:	7c 01       	movw	r14, r24
    6eba:	11 50       	subi	r17, 0x01	; 1
    6ebc:	91 f7       	brne	.-28     	; 0x6ea2 <vfscanf+0x154>
    6ebe:	4b c0       	rjmp	.+150    	; 0x6f56 <vfscanf+0x208>
    6ec0:	2b 35       	cpi	r18, 0x5B	; 91
    6ec2:	51 f4       	brne	.+20     	; 0x6ed8 <vfscanf+0x18a>
    6ec4:	92 01       	movw	r18, r4
    6ec6:	a7 01       	movw	r20, r14
    6ec8:	61 2f       	mov	r22, r17
    6eca:	c6 01       	movw	r24, r12
    6ecc:	81 de       	rcall	.-766    	; 0x6bd0 <conv_brk>
    6ece:	2c 01       	movw	r4, r24
    6ed0:	89 2b       	or	r24, r25
    6ed2:	09 f0       	breq	.+2      	; 0x6ed6 <vfscanf+0x188>
    6ed4:	40 c0       	rjmp	.+128    	; 0x6f56 <vfscanf+0x208>
    6ed6:	3a c0       	rjmp	.+116    	; 0x6f4c <vfscanf+0x1fe>
    6ed8:	c6 01       	movw	r24, r12
    6eda:	29 83       	std	Y+1, r18	; 0x01
    6edc:	c3 dd       	rcall	.-1146   	; 0x6a64 <skip_spaces>
    6ede:	29 81       	ldd	r18, Y+1	; 0x01
    6ee0:	97 fd       	sbrc	r25, 7
    6ee2:	3d c0       	rjmp	.+122    	; 0x6f5e <vfscanf+0x210>
    6ee4:	2f 36       	cpi	r18, 0x6F	; 111
    6ee6:	41 f1       	breq	.+80     	; 0x6f38 <vfscanf+0x1ea>
    6ee8:	28 f4       	brcc	.+10     	; 0x6ef4 <vfscanf+0x1a6>
    6eea:	24 36       	cpi	r18, 0x64	; 100
    6eec:	19 f1       	breq	.+70     	; 0x6f34 <vfscanf+0x1e6>
    6eee:	29 36       	cpi	r18, 0x69	; 105
    6ef0:	31 f1       	breq	.+76     	; 0x6f3e <vfscanf+0x1f0>
    6ef2:	24 c0       	rjmp	.+72     	; 0x6f3c <vfscanf+0x1ee>
    6ef4:	23 37       	cpi	r18, 0x73	; 115
    6ef6:	69 f0       	breq	.+26     	; 0x6f12 <vfscanf+0x1c4>
    6ef8:	25 37       	cpi	r18, 0x75	; 117
    6efa:	e1 f0       	breq	.+56     	; 0x6f34 <vfscanf+0x1e6>
    6efc:	1f c0       	rjmp	.+62     	; 0x6f3c <vfscanf+0x1ee>
    6efe:	e1 14       	cp	r14, r1
    6f00:	f1 04       	cpc	r15, r1
    6f02:	29 f0       	breq	.+10     	; 0x6f0e <vfscanf+0x1c0>
    6f04:	f7 01       	movw	r30, r14
    6f06:	80 82       	st	Z, r8
    6f08:	c7 01       	movw	r24, r14
    6f0a:	01 96       	adiw	r24, 0x01	; 1
    6f0c:	7c 01       	movw	r14, r24
    6f0e:	11 50       	subi	r17, 0x01	; 1
    6f10:	59 f0       	breq	.+22     	; 0x6f28 <vfscanf+0x1da>
    6f12:	c6 01       	movw	r24, r12
    6f14:	4f d0       	rcall	.+158    	; 0x6fb4 <fgetc>
    6f16:	4c 01       	movw	r8, r24
    6f18:	97 fd       	sbrc	r25, 7
    6f1a:	06 c0       	rjmp	.+12     	; 0x6f28 <vfscanf+0x1da>
    6f1c:	38 d0       	rcall	.+112    	; 0x6f8e <isspace>
    6f1e:	89 2b       	or	r24, r25
    6f20:	71 f3       	breq	.-36     	; 0x6efe <vfscanf+0x1b0>
    6f22:	b6 01       	movw	r22, r12
    6f24:	c4 01       	movw	r24, r8
    6f26:	84 d0       	rcall	.+264    	; 0x7030 <ungetc>
    6f28:	e1 14       	cp	r14, r1
    6f2a:	f1 04       	cpc	r15, r1
    6f2c:	a1 f0       	breq	.+40     	; 0x6f56 <vfscanf+0x208>
    6f2e:	f7 01       	movw	r30, r14
    6f30:	10 82       	st	Z, r1
    6f32:	11 c0       	rjmp	.+34     	; 0x6f56 <vfscanf+0x208>
    6f34:	00 62       	ori	r16, 0x20	; 32
    6f36:	03 c0       	rjmp	.+6      	; 0x6f3e <vfscanf+0x1f0>
    6f38:	00 61       	ori	r16, 0x10	; 16
    6f3a:	01 c0       	rjmp	.+2      	; 0x6f3e <vfscanf+0x1f0>
    6f3c:	00 64       	ori	r16, 0x40	; 64
    6f3e:	20 2f       	mov	r18, r16
    6f40:	a7 01       	movw	r20, r14
    6f42:	61 2f       	mov	r22, r17
    6f44:	c6 01       	movw	r24, r12
    6f46:	a4 dd       	rcall	.-1208   	; 0x6a90 <conv_int>
    6f48:	81 11       	cpse	r24, r1
    6f4a:	05 c0       	rjmp	.+10     	; 0x6f56 <vfscanf+0x208>
    6f4c:	f6 01       	movw	r30, r12
    6f4e:	83 81       	ldd	r24, Z+3	; 0x03
    6f50:	80 73       	andi	r24, 0x30	; 48
    6f52:	29 f4       	brne	.+10     	; 0x6f5e <vfscanf+0x210>
    6f54:	06 c0       	rjmp	.+12     	; 0x6f62 <vfscanf+0x214>
    6f56:	00 fd       	sbrc	r16, 0
    6f58:	13 cf       	rjmp	.-474    	; 0x6d80 <vfscanf+0x32>
    6f5a:	73 94       	inc	r7
    6f5c:	11 cf       	rjmp	.-478    	; 0x6d80 <vfscanf+0x32>
    6f5e:	77 20       	and	r7, r7
    6f60:	19 f0       	breq	.+6      	; 0x6f68 <vfscanf+0x21a>
    6f62:	87 2d       	mov	r24, r7
    6f64:	90 e0       	ldi	r25, 0x00	; 0
    6f66:	02 c0       	rjmp	.+4      	; 0x6f6c <vfscanf+0x21e>
    6f68:	8f ef       	ldi	r24, 0xFF	; 255
    6f6a:	9f ef       	ldi	r25, 0xFF	; 255
    6f6c:	0f 90       	pop	r0
    6f6e:	df 91       	pop	r29
    6f70:	cf 91       	pop	r28
    6f72:	1f 91       	pop	r17
    6f74:	0f 91       	pop	r16
    6f76:	ff 90       	pop	r15
    6f78:	ef 90       	pop	r14
    6f7a:	df 90       	pop	r13
    6f7c:	cf 90       	pop	r12
    6f7e:	bf 90       	pop	r11
    6f80:	af 90       	pop	r10
    6f82:	9f 90       	pop	r9
    6f84:	8f 90       	pop	r8
    6f86:	7f 90       	pop	r7
    6f88:	5f 90       	pop	r5
    6f8a:	4f 90       	pop	r4
    6f8c:	08 95       	ret

00006f8e <isspace>:
    6f8e:	91 11       	cpse	r25, r1
    6f90:	68 c0       	rjmp	.+208    	; 0x7062 <__ctype_isfalse>
    6f92:	80 32       	cpi	r24, 0x20	; 32
    6f94:	19 f0       	breq	.+6      	; 0x6f9c <isspace+0xe>
    6f96:	89 50       	subi	r24, 0x09	; 9
    6f98:	85 50       	subi	r24, 0x05	; 5
    6f9a:	d0 f7       	brcc	.-12     	; 0x6f90 <isspace+0x2>
    6f9c:	08 95       	ret

00006f9e <strchr_P>:
    6f9e:	fc 01       	movw	r30, r24
    6fa0:	05 90       	lpm	r0, Z+
    6fa2:	06 16       	cp	r0, r22
    6fa4:	21 f0       	breq	.+8      	; 0x6fae <strchr_P+0x10>
    6fa6:	00 20       	and	r0, r0
    6fa8:	d9 f7       	brne	.-10     	; 0x6fa0 <strchr_P+0x2>
    6faa:	c0 01       	movw	r24, r0
    6fac:	08 95       	ret
    6fae:	31 97       	sbiw	r30, 0x01	; 1
    6fb0:	cf 01       	movw	r24, r30
    6fb2:	08 95       	ret

00006fb4 <fgetc>:
    6fb4:	cf 93       	push	r28
    6fb6:	df 93       	push	r29
    6fb8:	ec 01       	movw	r28, r24
    6fba:	2b 81       	ldd	r18, Y+3	; 0x03
    6fbc:	20 ff       	sbrs	r18, 0
    6fbe:	33 c0       	rjmp	.+102    	; 0x7026 <fgetc+0x72>
    6fc0:	26 ff       	sbrs	r18, 6
    6fc2:	0a c0       	rjmp	.+20     	; 0x6fd8 <fgetc+0x24>
    6fc4:	2f 7b       	andi	r18, 0xBF	; 191
    6fc6:	2b 83       	std	Y+3, r18	; 0x03
    6fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    6fca:	9f 81       	ldd	r25, Y+7	; 0x07
    6fcc:	01 96       	adiw	r24, 0x01	; 1
    6fce:	8e 83       	std	Y+6, r24	; 0x06
    6fd0:	9f 83       	std	Y+7, r25	; 0x07
    6fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	29 c0       	rjmp	.+82     	; 0x702a <fgetc+0x76>
    6fd8:	22 ff       	sbrs	r18, 2
    6fda:	0f c0       	rjmp	.+30     	; 0x6ffa <fgetc+0x46>
    6fdc:	e8 81       	ld	r30, Y
    6fde:	f9 81       	ldd	r31, Y+1	; 0x01
    6fe0:	80 81       	ld	r24, Z
    6fe2:	08 2e       	mov	r0, r24
    6fe4:	00 0c       	add	r0, r0
    6fe6:	99 0b       	sbc	r25, r25
    6fe8:	00 97       	sbiw	r24, 0x00	; 0
    6fea:	19 f4       	brne	.+6      	; 0x6ff2 <fgetc+0x3e>
    6fec:	20 62       	ori	r18, 0x20	; 32
    6fee:	2b 83       	std	Y+3, r18	; 0x03
    6ff0:	1a c0       	rjmp	.+52     	; 0x7026 <fgetc+0x72>
    6ff2:	31 96       	adiw	r30, 0x01	; 1
    6ff4:	e8 83       	st	Y, r30
    6ff6:	f9 83       	std	Y+1, r31	; 0x01
    6ff8:	0e c0       	rjmp	.+28     	; 0x7016 <fgetc+0x62>
    6ffa:	ea 85       	ldd	r30, Y+10	; 0x0a
    6ffc:	fb 85       	ldd	r31, Y+11	; 0x0b
    6ffe:	19 95       	eicall
    7000:	97 ff       	sbrs	r25, 7
    7002:	09 c0       	rjmp	.+18     	; 0x7016 <fgetc+0x62>
    7004:	2b 81       	ldd	r18, Y+3	; 0x03
    7006:	01 96       	adiw	r24, 0x01	; 1
    7008:	11 f0       	breq	.+4      	; 0x700e <fgetc+0x5a>
    700a:	80 e2       	ldi	r24, 0x20	; 32
    700c:	01 c0       	rjmp	.+2      	; 0x7010 <fgetc+0x5c>
    700e:	80 e1       	ldi	r24, 0x10	; 16
    7010:	82 2b       	or	r24, r18
    7012:	8b 83       	std	Y+3, r24	; 0x03
    7014:	08 c0       	rjmp	.+16     	; 0x7026 <fgetc+0x72>
    7016:	2e 81       	ldd	r18, Y+6	; 0x06
    7018:	3f 81       	ldd	r19, Y+7	; 0x07
    701a:	2f 5f       	subi	r18, 0xFF	; 255
    701c:	3f 4f       	sbci	r19, 0xFF	; 255
    701e:	2e 83       	std	Y+6, r18	; 0x06
    7020:	3f 83       	std	Y+7, r19	; 0x07
    7022:	99 27       	eor	r25, r25
    7024:	02 c0       	rjmp	.+4      	; 0x702a <fgetc+0x76>
    7026:	8f ef       	ldi	r24, 0xFF	; 255
    7028:	9f ef       	ldi	r25, 0xFF	; 255
    702a:	df 91       	pop	r29
    702c:	cf 91       	pop	r28
    702e:	08 95       	ret

00007030 <ungetc>:
    7030:	fb 01       	movw	r30, r22
    7032:	23 81       	ldd	r18, Z+3	; 0x03
    7034:	20 ff       	sbrs	r18, 0
    7036:	12 c0       	rjmp	.+36     	; 0x705c <ungetc+0x2c>
    7038:	26 fd       	sbrc	r18, 6
    703a:	10 c0       	rjmp	.+32     	; 0x705c <ungetc+0x2c>
    703c:	8f 3f       	cpi	r24, 0xFF	; 255
    703e:	3f ef       	ldi	r19, 0xFF	; 255
    7040:	93 07       	cpc	r25, r19
    7042:	61 f0       	breq	.+24     	; 0x705c <ungetc+0x2c>
    7044:	82 83       	std	Z+2, r24	; 0x02
    7046:	2f 7d       	andi	r18, 0xDF	; 223
    7048:	20 64       	ori	r18, 0x40	; 64
    704a:	23 83       	std	Z+3, r18	; 0x03
    704c:	26 81       	ldd	r18, Z+6	; 0x06
    704e:	37 81       	ldd	r19, Z+7	; 0x07
    7050:	21 50       	subi	r18, 0x01	; 1
    7052:	31 09       	sbc	r19, r1
    7054:	26 83       	std	Z+6, r18	; 0x06
    7056:	37 83       	std	Z+7, r19	; 0x07
    7058:	99 27       	eor	r25, r25
    705a:	08 95       	ret
    705c:	8f ef       	ldi	r24, 0xFF	; 255
    705e:	9f ef       	ldi	r25, 0xFF	; 255
    7060:	08 95       	ret

00007062 <__ctype_isfalse>:
    7062:	99 27       	eor	r25, r25
    7064:	88 27       	eor	r24, r24

00007066 <__ctype_istrue>:
    7066:	08 95       	ret

00007068 <eeprom_read_block>:
    7068:	e0 ec       	ldi	r30, 0xC0	; 192
    706a:	f1 e0       	ldi	r31, 0x01	; 1
    706c:	a7 85       	ldd	r26, Z+15	; 0x0f
    706e:	a7 fd       	sbrc	r26, 7
    7070:	fd cf       	rjmp	.-6      	; 0x706c <eeprom_read_block+0x4>
    7072:	a4 85       	ldd	r26, Z+12	; 0x0c
    7074:	a8 60       	ori	r26, 0x08	; 8
    7076:	a4 87       	std	Z+12, r26	; 0x0c
    7078:	60 50       	subi	r22, 0x00	; 0
    707a:	70 4f       	sbci	r23, 0xF0	; 240
    707c:	5e cb       	rjmp	.-2372   	; 0x673a <memcpy>

0000707e <eeprom_read_byte>:
    707e:	03 d0       	rcall	.+6      	; 0x7086 <eeprom_mapen>
    7080:	80 81       	ld	r24, Z
    7082:	99 27       	eor	r25, r25
    7084:	08 95       	ret

00007086 <eeprom_mapen>:
    7086:	e0 ec       	ldi	r30, 0xC0	; 192
    7088:	f1 e0       	ldi	r31, 0x01	; 1
    708a:	37 85       	ldd	r19, Z+15	; 0x0f
    708c:	37 fd       	sbrc	r19, 7
    708e:	fd cf       	rjmp	.-6      	; 0x708a <eeprom_mapen+0x4>
    7090:	34 85       	ldd	r19, Z+12	; 0x0c
    7092:	38 60       	ori	r19, 0x08	; 8
    7094:	34 87       	std	Z+12, r19	; 0x0c
    7096:	fc 01       	movw	r30, r24
    7098:	e0 50       	subi	r30, 0x00	; 0
    709a:	f0 4f       	sbci	r31, 0xF0	; 240
    709c:	08 95       	ret

0000709e <eeprom_update_block>:
    709e:	dc 01       	movw	r26, r24
    70a0:	a4 0f       	add	r26, r20
    70a2:	b5 1f       	adc	r27, r21
    70a4:	41 50       	subi	r20, 0x01	; 1
    70a6:	50 40       	sbci	r21, 0x00	; 0
    70a8:	40 f0       	brcs	.+16     	; 0x70ba <eeprom_update_block+0x1c>
    70aa:	cb 01       	movw	r24, r22
    70ac:	84 0f       	add	r24, r20
    70ae:	95 1f       	adc	r25, r21
    70b0:	2e 91       	ld	r18, -X
    70b2:	05 d0       	rcall	.+10     	; 0x70be <eeprom_update_r18>
    70b4:	41 50       	subi	r20, 0x01	; 1
    70b6:	50 40       	sbci	r21, 0x00	; 0
    70b8:	d8 f7       	brcc	.-10     	; 0x70b0 <eeprom_update_block+0x12>
    70ba:	08 95       	ret

000070bc <eeprom_update_byte>:
    70bc:	26 2f       	mov	r18, r22

000070be <eeprom_update_r18>:
    70be:	e3 df       	rcall	.-58     	; 0x7086 <eeprom_mapen>
    70c0:	00 80       	ld	r0, Z
    70c2:	02 16       	cp	r0, r18
    70c4:	11 f0       	breq	.+4      	; 0x70ca <eeprom_update_r18+0xc>
    70c6:	04 d0       	rcall	.+8      	; 0x70d0 <eeprom_write_r18>
    70c8:	01 97       	sbiw	r24, 0x01	; 1
    70ca:	01 97       	sbiw	r24, 0x01	; 1
    70cc:	08 95       	ret

000070ce <eeprom_write_byte>:
    70ce:	26 2f       	mov	r18, r22

000070d0 <eeprom_write_r18>:
    70d0:	e0 ec       	ldi	r30, 0xC0	; 192
    70d2:	f1 e0       	ldi	r31, 0x01	; 1
    70d4:	37 85       	ldd	r19, Z+15	; 0x0f
    70d6:	37 fd       	sbrc	r19, 7
    70d8:	fd cf       	rjmp	.-6      	; 0x70d4 <eeprom_write_r18+0x4>
    70da:	34 85       	ldd	r19, Z+12	; 0x0c
    70dc:	37 7f       	andi	r19, 0xF7	; 247
    70de:	34 87       	std	Z+12, r19	; 0x0c
    70e0:	37 85       	ldd	r19, Z+15	; 0x0f
    70e2:	31 ff       	sbrs	r19, 1
    70e4:	09 c0       	rjmp	.+18     	; 0x70f8 <eeprom_write_r18+0x28>
    70e6:	36 e3       	ldi	r19, 0x36	; 54
    70e8:	32 87       	std	Z+10, r19	; 0x0a
    70ea:	38 ed       	ldi	r19, 0xD8	; 216
    70ec:	34 bf       	out	0x34, r19	; 52
    70ee:	31 e0       	ldi	r19, 0x01	; 1
    70f0:	33 87       	std	Z+11, r19	; 0x0b
    70f2:	37 85       	ldd	r19, Z+15	; 0x0f
    70f4:	37 fd       	sbrc	r19, 7
    70f6:	fd cf       	rjmp	.-6      	; 0x70f2 <eeprom_write_r18+0x22>
    70f8:	33 e3       	ldi	r19, 0x33	; 51
    70fa:	32 87       	std	Z+10, r19	; 0x0a
    70fc:	80 83       	st	Z, r24
    70fe:	91 83       	std	Z+1, r25	; 0x01
    7100:	12 82       	std	Z+2, r1	; 0x02
    7102:	24 83       	std	Z+4, r18	; 0x04
    7104:	25 e3       	ldi	r18, 0x35	; 53
    7106:	22 87       	std	Z+10, r18	; 0x0a
    7108:	28 ed       	ldi	r18, 0xD8	; 216
    710a:	31 e0       	ldi	r19, 0x01	; 1
    710c:	24 bf       	out	0x34, r18	; 52
    710e:	33 87       	std	Z+11, r19	; 0x0b
    7110:	01 96       	adiw	r24, 0x01	; 1
    7112:	08 95       	ret

00007114 <_exit>:
    7114:	f8 94       	cli

00007116 <__stop_program>:
    7116:	ff cf       	rjmp	.-2      	; 0x7116 <__stop_program>
