
RVBZv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b14  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b2  00802000  00004b14  00004bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000675  008022b2  008022b2  00004e7a  2**0
                  ALLOC
  3 .eeprom       0000000f  00810000  00810000  00004e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00004e89  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ee8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000720  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001386f  00000000  00000000  00005648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003326  00000000  00000000  00018eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007366  00000000  00000000  0001c1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c0c  00000000  00000000  00023544  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006980  00000000  00000000  00025150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008b5a  00000000  00000000  0002bad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e0  00000000  00000000  0003462a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8c c4       	rjmp	.+2328   	; 0x91a <__ctors_end>
       2:	00 00       	nop
       4:	b0 c4       	rjmp	.+2400   	; 0x966 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c4       	rjmp	.+2396   	; 0x966 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c4       	rjmp	.+2392   	; 0x966 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c4       	rjmp	.+2388   	; 0x966 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c4       	rjmp	.+2384   	; 0x966 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c4       	rjmp	.+2380   	; 0x966 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c4       	rjmp	.+2376   	; 0x966 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c4       	rjmp	.+2372   	; 0x966 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c4       	rjmp	.+2368   	; 0x966 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__vector_10>
      2c:	9c c4       	rjmp	.+2360   	; 0x966 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__vector_12>
      34:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__vector_13>
      38:	96 c4       	rjmp	.+2348   	; 0x966 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c4       	rjmp	.+2344   	; 0x966 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c4       	rjmp	.+2340   	; 0x966 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c4       	rjmp	.+2336   	; 0x966 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c4       	rjmp	.+2332   	; 0x966 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c4       	rjmp	.+2328   	; 0x966 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c4       	rjmp	.+2324   	; 0x966 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c4       	rjmp	.+2320   	; 0x966 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c4       	rjmp	.+2316   	; 0x966 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c4       	rjmp	.+2312   	; 0x966 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c4       	rjmp	.+2308   	; 0x966 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c4       	rjmp	.+2304   	; 0x966 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c4       	rjmp	.+2300   	; 0x966 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c4       	rjmp	.+2296   	; 0x966 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c4       	rjmp	.+2292   	; 0x966 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c4       	rjmp	.+2288   	; 0x966 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c4       	rjmp	.+2284   	; 0x966 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c4       	rjmp	.+2280   	; 0x966 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c4       	rjmp	.+2276   	; 0x966 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c4       	rjmp	.+2272   	; 0x966 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c4       	rjmp	.+2268   	; 0x966 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c4       	rjmp	.+2264   	; 0x966 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6a c4       	rjmp	.+2260   	; 0x966 <__bad_interrupt>
      92:	00 00       	nop
      94:	68 c4       	rjmp	.+2256   	; 0x966 <__bad_interrupt>
      96:	00 00       	nop
      98:	66 c4       	rjmp	.+2252   	; 0x966 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	64 c4       	rjmp	.+2248   	; 0x966 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	62 c4       	rjmp	.+2244   	; 0x966 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c4       	rjmp	.+2240   	; 0x966 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5e c4       	rjmp	.+2236   	; 0x966 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5c c4       	rjmp	.+2232   	; 0x966 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c4       	rjmp	.+2228   	; 0x966 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__vector_45>
      b8:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__vector_46>
      bc:	54 c4       	rjmp	.+2216   	; 0x966 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c4       	rjmp	.+2212   	; 0x966 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c4       	rjmp	.+2208   	; 0x966 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c4       	rjmp	.+2204   	; 0x966 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4c c4       	rjmp	.+2200   	; 0x966 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4a c4       	rjmp	.+2196   	; 0x966 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	48 c4       	rjmp	.+2192   	; 0x966 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	46 c4       	rjmp	.+2188   	; 0x966 <__bad_interrupt>
      da:	00 00       	nop
      dc:	44 c4       	rjmp	.+2184   	; 0x966 <__bad_interrupt>
      de:	00 00       	nop
      e0:	42 c4       	rjmp	.+2180   	; 0x966 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 c4       	rjmp	.+2176   	; 0x966 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3e c4       	rjmp	.+2172   	; 0x966 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3c c4       	rjmp	.+2168   	; 0x966 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	3a c4       	rjmp	.+2164   	; 0x966 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	38 c4       	rjmp	.+2160   	; 0x966 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	36 c4       	rjmp	.+2156   	; 0x966 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	34 c4       	rjmp	.+2152   	; 0x966 <__bad_interrupt>
      fe:	00 00       	nop
     100:	32 c4       	rjmp	.+2148   	; 0x966 <__bad_interrupt>
     102:	00 00       	nop
     104:	30 c4       	rjmp	.+2144   	; 0x966 <__bad_interrupt>
     106:	00 00       	nop
     108:	2e c4       	rjmp	.+2140   	; 0x966 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2c c4       	rjmp	.+2136   	; 0x966 <__bad_interrupt>
     10e:	00 00       	nop
     110:	2a c4       	rjmp	.+2132   	; 0x966 <__bad_interrupt>
     112:	00 00       	nop
     114:	28 c4       	rjmp	.+2128   	; 0x966 <__bad_interrupt>
     116:	00 00       	nop
     118:	26 c4       	rjmp	.+2124   	; 0x966 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	24 c4       	rjmp	.+2120   	; 0x966 <__bad_interrupt>
     11e:	00 00       	nop
     120:	22 c4       	rjmp	.+2116   	; 0x966 <__bad_interrupt>
     122:	00 00       	nop
     124:	20 c4       	rjmp	.+2112   	; 0x966 <__bad_interrupt>
     126:	00 00       	nop
     128:	1e c4       	rjmp	.+2108   	; 0x966 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__vector_75>
     130:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__vector_76>
     134:	18 c4       	rjmp	.+2096   	; 0x966 <__bad_interrupt>
     136:	00 00       	nop
     138:	16 c4       	rjmp	.+2092   	; 0x966 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__vector_79>
     140:	12 c4       	rjmp	.+2084   	; 0x966 <__bad_interrupt>
     142:	00 00       	nop
     144:	10 c4       	rjmp	.+2080   	; 0x966 <__bad_interrupt>
     146:	00 00       	nop
     148:	0e c4       	rjmp	.+2076   	; 0x966 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c c4       	rjmp	.+2072   	; 0x966 <__bad_interrupt>
     14e:	00 00       	nop
     150:	0a c4       	rjmp	.+2068   	; 0x966 <__bad_interrupt>
     152:	00 00       	nop
     154:	08 c4       	rjmp	.+2064   	; 0x966 <__bad_interrupt>
     156:	00 00       	nop
     158:	06 c4       	rjmp	.+2060   	; 0x966 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	04 c4       	rjmp	.+2056   	; 0x966 <__bad_interrupt>
     15e:	00 00       	nop
     160:	02 c4       	rjmp	.+2052   	; 0x966 <__bad_interrupt>
     162:	00 00       	nop
     164:	00 c4       	rjmp	.+2048   	; 0x966 <__bad_interrupt>
     166:	00 00       	nop
     168:	fe c3       	rjmp	.+2044   	; 0x966 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	fc c3       	rjmp	.+2040   	; 0x966 <__bad_interrupt>
     16e:	00 00       	nop
     170:	fa c3       	rjmp	.+2036   	; 0x966 <__bad_interrupt>
     172:	00 00       	nop
     174:	f8 c3       	rjmp	.+2032   	; 0x966 <__bad_interrupt>
     176:	00 00       	nop
     178:	f6 c3       	rjmp	.+2028   	; 0x966 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	f4 c3       	rjmp	.+2024   	; 0x966 <__bad_interrupt>
     17e:	00 00       	nop
     180:	f2 c3       	rjmp	.+2020   	; 0x966 <__bad_interrupt>
     182:	00 00       	nop
     184:	f0 c3       	rjmp	.+2016   	; 0x966 <__bad_interrupt>
     186:	00 00       	nop
     188:	ee c3       	rjmp	.+2012   	; 0x966 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ec c3       	rjmp	.+2008   	; 0x966 <__bad_interrupt>
     18e:	00 00       	nop
     190:	ea c3       	rjmp	.+2004   	; 0x966 <__bad_interrupt>
     192:	00 00       	nop
     194:	e8 c3       	rjmp	.+2000   	; 0x966 <__bad_interrupt>
     196:	00 00       	nop
     198:	e6 c3       	rjmp	.+1996   	; 0x966 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	e4 c3       	rjmp	.+1992   	; 0x966 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	e2 c3       	rjmp	.+1988   	; 0x966 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	e0 c3       	rjmp	.+1984   	; 0x966 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	de c3       	rjmp	.+1980   	; 0x966 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	dc c3       	rjmp	.+1976   	; 0x966 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	da c3       	rjmp	.+1972   	; 0x966 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d8 c3       	rjmp	.+1968   	; 0x966 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	d6 c3       	rjmp	.+1964   	; 0x966 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	d4 c3       	rjmp	.+1960   	; 0x966 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	d2 c3       	rjmp	.+1956   	; 0x966 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	d0 c3       	rjmp	.+1952   	; 0x966 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ce c3       	rjmp	.+1948   	; 0x966 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	cc c3       	rjmp	.+1944   	; 0x966 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	ca c3       	rjmp	.+1940   	; 0x966 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c8 c3       	rjmp	.+1936   	; 0x966 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	c6 c3       	rjmp	.+1932   	; 0x966 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	c4 c3       	rjmp	.+1928   	; 0x966 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	c2 c3       	rjmp	.+1924   	; 0x966 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	c0 c3       	rjmp	.+1920   	; 0x966 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	be c3       	rjmp	.+1916   	; 0x966 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	bc c3       	rjmp	.+1912   	; 0x966 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ba c3       	rjmp	.+1908   	; 0x966 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_125>
     1f8:	b6 c3       	rjmp	.+1900   	; 0x966 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	3c 62       	ori	r19, 0x2C	; 44
     1fe:	72 3e       	cpi	r23, 0xE2	; 226
	...

00000201 <__c.7087>:
     201:	1b 5b 25 75 3b 25 75 48 1b 5b 30 4b 00              .[%u;%uH.[0K.

0000020e <__c.7074>:
     20e:	3c 62 72 3e 00                                      <br>.

00000213 <__c.7072>:
     213:	0d 0a 00                                            ...

00000216 <__c.7035>:
     216:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     226:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     236:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 66 6f 6e     ext/html....<fon
     246:	74 3e 00                                            t>.

00000249 <__c.7031>:
     249:	1b 5b 25 75 3b 25 75 48 1b 5b 30 4b 00              .[%u;%uH.[0K.

00000256 <__c.7029>:
     256:	1b 5b 30 6d 1b 5b 32 4a 1b 5b 31 6d 1b 5b 33 6d     .[0m.[2J.[1m.[3m
     266:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000026d <__c.7023>:
     26d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 6d 61 67     <font color="mag
     27d:	65 6e 74 61 22 3e 00                                enta">.

00000284 <__c.7020>:
     284:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 72 65 64     <font color="red
     294:	22 3e 00                                            ">.

00000297 <__c.7017>:
     297:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 70 75 72     <font color="pur
     2a7:	70 6c 65 22 3e 00                                   ple">.

000002ad <__c.7013>:
     2ad:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 67 72 65     <font color="gre
     2bd:	65 6e 22 3e 00                                      en">.

000002c2 <__c.7010>:
     2c2:	3c 2f 66 6f 6e 74 3e 00                             </font>.

000002ca <__c.7004>:
     2ca:	1b 5b 75 1b 5b 33 35 6d 00                          .[u.[35m.

000002d3 <__c.7001>:
     2d3:	1b 5b 73 1b 5b 33 31 6d 00                          .[s.[31m.

000002dc <__c.6998>:
     2dc:	1b 5b 73 1b 5b 33 36 6d 00                          .[s.[36m.

000002e5 <__c.6994>:
     2e5:	1b 5b 73 1b 5b 33 32 6d 00                          .[s.[32m.

000002ee <ProductString>:
     2ee:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     2fe:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000030c <ManufacturerString>:
     30c:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     31c:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000326 <LanguageString>:
     326:	04 03 09 04                                         ....

0000032a <ConfigurationDescriptor>:
     32a:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     33a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     34a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     35a:	07 05 04 02 40 00 05 07 05 83 02 40 00 05           ....@......@..

00000368 <DeviceDescriptor>:
     368:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     378:	dc 01                                               ..

0000037a <_ZZ4testvE3__c>:
     37a:	25 6c 75 2c 20 25 75 2c 20 25 75 2c 20 25 6c 75     %lu, %u, %u, %lu
	...

0000038b <__c.7314>:
     38b:	44 65 76 25 32 75 42 2d 25 32 75 42 3a 25 35 64     Dev%2uB-%2uB:%5d
     39b:	2c 25 35 64 2c 25 35 75 2c 25 35 64 20 6d 41 00     ,%5d,%5u,%5d mA.

000003ab <__c.7312>:
     3ab:	44 65 76 25 32 75 41 2d 25 32 75 41 3a 25 35 64     Dev%2uA-%2uA:%5d
     3bb:	2c 25 35 64 2c 25 35 75 2c 25 35 64 20 6d 41 00     ,%5d,%5u,%5d mA.

000003cb <__c.7309>:
     3cb:	28 6f 66 66 29 00                                   (off).

000003d1 <__c.7307>:
     3d1:	28 6f 6e 29 00                                      (on).

000003d6 <__c.7305>:
     3d6:	41 6c 61 72 6d 3a 20 00                             Alarm: .

000003de <__c.7303>:
     3de:	54 69 6d 65 3a 20 20 00                             Time:  .

000003e6 <__c.7301>:
     3e6:	50 53 55 3a 20 25 35 64 20 6d 56 2c 20 4c 6f 61     PSU: %5d mV, Loa
     3f6:	64 3a 20 25 35 64 20 6d 41 00                       d: %5d mA.

00000400 <__c.7299>:
     400:	42 6f 61 72 64 3a 20 25 75 2c 20 43 50 55 3a 20     Board: %u, CPU: 
     410:	25 2e 31 66 25 25 2c 20 54 65 6d 70 3a 20 25 2e     %.1f%%, Temp: %.
     420:	31 66 20 43 00                                      1f C.

00000425 <__c.7297>:
     425:	20 28 25 73 29 00                                    (%s).

0000042b <__c.7295>:
     42b:	44 65 76 69 63 65 3a 20 25 73 2c 20 25 32 75 20     Device: %s, %2u 
     43b:	2f 20 25 32 75 00                                   / %2u.

00000441 <__c.7293>:
     441:	4d 65 6e 75 3a 20 25 73 00                          Menu: %s.

0000044a <__c.7288>:
     44a:	58 3a 20 66 6f 72 63 65 20 72 65 62 6f 6f 74 20     X: force reboot 
     45a:	61 6c 6c 20 64 65 76 69 63 65 73 00                 all devices.

00000466 <__c.7286>:
     466:	5a 3a 20 73 65 74 20 63 68 61 6e 6e 65 6c 20 61     Z: set channel a
     476:	6c 6c 20 64 65 76 69 63 65 73 00                    ll devices.

00000481 <__c.7284>:
     481:	46 3a 20 66 6f 72 63 65 20 72 65 62 6f 6f 74 00     F: force reboot.

00000491 <__c.7282>:
     491:	47 3a 20 73 65 74 20 63 68 61 6e 6e 65 6c 00        G: set channel.

000004a0 <__c.7280>:
     4a0:	59 2c 4e 2c 4c 3a 20 66 61 76 6f 72 69 74 65 2c     Y,N,L: favorite,
     4b0:	20 6f 70 74 69 6f 6e 2c 20 73 63 68 65 64 75 6c      option, schedul
     4c0:	65 00                                               e.

000004c2 <__c.7278>:
     4c2:	55 2c 49 2c 4a 2c 4b 3a 20 72 65 64 2c 20 67 72     U,I,J,K: red, gr
     4d2:	65 65 6e 2c 20 79 65 6c 6c 6f 77 2c 20 62 6c 75     een, yellow, blu
     4e2:	65 00                                               e.

000004e4 <__c.7276>:
     4e4:	56 3a 20 76 6f 6c 75 6d 65 00                       V: volume.

000004ee <__c.7274>:
     4ee:	4d 3a 20 6d 65 6e 75 00                             M: menu.

000004f6 <__c.7272>:
     4f6:	48 3a 20 68 6f 6d 65 00                             H: home.

000004fe <__c.7270>:
     4fe:	43 3a 20 63 61 6e 63 65 6c 00                       C: cancel.

00000508 <__c.7268>:
     508:	42 3a 20 62 61 63 6b 00                             B: back.

00000510 <__c.7266>:
     510:	4f 3a 20 6f 6b 00                                   O: ok.

00000516 <__c.7264>:
     516:	50 3a 20 70 6f 77 65 72 20 62 75 74 74 6f 6e 00     P: power button.

00000526 <__c.7262>:
     526:	27 2c 27 20 2f 20 27 2e 27 3a 20 63 68 61 6e 6e     ',' / '.': chann
     536:	65 6c 20 70 72 65 76 2f 6e 65 78 74 00              el prev/next.

00000543 <__c.7260>:
     543:	30 2d 39 3a 20 64 69 67 69 74 73 00                 0-9: digits.

0000054f <__c.7258>:
     54f:	57 41 53 44 3a 20 61 72 72 6f 77 20 6b 65 79 73     WASD: arrow keys
	...

00000560 <__c.7254>:
     560:	44 61 74 61 3a 20 27 25 73 27 00                    Data: '%s'.

0000056b <__c.7252>:
     56b:	61 6c 61 72 6d 20 6f 6e 2c 20 61 6c 61 72 6d 20     alarm on, alarm 
     57b:	6f 66 66 00                                         off.

0000057f <__c.7250>:
     57f:	73 65 74 20 62 65 69 6e 2c 20 73 65 74 20 68 75     set bein, set hu
     58f:	6d 61 78 2c 20 73 65 74 20 6d 62 63 00              max, set mbc.

0000059c <__c.7248>:
     59c:	72 65 73 65 74 20 2f 20 72 65 73 74 61 72 74 20     reset / restart 
     5ac:	2f 20 72 65 62 6f 6f 74 00                          / reboot.

000005b5 <__c.7246>:
     5b5:	69 70 20 61 2e 62 2e 63 2e 64 00                    ip a.b.c.d.

000005c0 <__c.7244>:
     5c0:	61 6c 61 72 6d 20 68 3a 6d 3a 73 00                 alarm h:m:s.

000005cc <__c.7242>:
     5cc:	74 69 6d 65 20 68 3a 6d 3a 73 00                    time h:m:s.

000005d7 <__c.7240>:
     5d7:	64 61 74 65 20 79 3a 6d 3a 64 00                    date y:m:d.

000005e2 <__c.7238>:
     5e2:	57 44 54 3a 20 25 75 2c 20 52 41 4d 3a 20 25 64     WDT: %u, RAM: %d
     5f2:	2c 20 49 44 3a 20 30 78 25 30 38 6c 78 00           , ID: 0x%08lx.

00000600 <__c.7236>:
     600:	42 75 69 6c 64 3a 20 53 61 74 20 44 65 63 20 30     Build: Sat Dec 0
     610:	39 20 30 33 3a 35 38 3a 30 36 20 32 30 31 37 00     9 03:58:06 2017.

00000620 <__c.7232>:
     620:	50 72 65 73 73 20 53 20 74 6f 20 6d 6f 64 69 66     Press S to modif
     630:	79 20 73 65 74 74 69 6e 67 73 00                    y settings.

0000063b <__c.7230>:
     63b:	50 72 65 73 73 20 53 70 61 63 65 20 74 6f 20 73     Press Space to s
     64b:	65 6e 64 20 72 65 6d 6f 74 65 20 63 6f 6d 6d 61     end remote comma
     65b:	6e 64 00                                            nd.

0000065e <__c.7226>:
     65e:	52 6f 6f 6d 73 20 45 72 72 6f 72 21 00              Rooms Error!.

0000066b <strDevice>:
     66b:	9f 06 84 06 7f 06 7b 06                             ......{.

00000673 <strMenu>:
     673:	9f 06 9a 06 91 06 8a 06                             ........

0000067b <strDeviceMbc>:
     67b:	6d 62 63 00                                         mbc.

0000067f <strDeviceBein>:
     67f:	62 65 69 6e 00                                      bein.

00000684 <strDeviceHumax>:
     684:	68 75 6d 61 78 00                                   humax.

0000068a <strMenuRemote>:
     68a:	72 65 6d 6f 74 65 00                                remote.

00000691 <strMenuSettings>:
     691:	73 65 74 74 69 6e 67 73 00                          settings.

0000069a <strMenuMain>:
     69a:	6d 61 69 6e 00                                      main.

0000069f <strNoone>:
     69f:	6e 6f 6f 6e 65 00                                   noone.

000006a5 <__c.7159>:
     6a5:	3f 00                                               ?.

000006a7 <__c.7156>:
     6a7:	3f 00                                               ?.

000006a9 <__c.7153>:
     6a9:	3f 00                                               ?.

000006ab <__c.7150>:
     6ab:	3f 00                                               ?.

000006ad <__c.7147>:
     6ad:	3f 00                                               ?.

000006af <__c.7144>:
     6af:	3f 00                                               ?.

000006b1 <__c.7141>:
     6b1:	3f 00                                               ?.

000006b3 <__c.7137>:
     6b3:	3f 00                                               ?.

000006b5 <__c.7132>:
     6b5:	42 65 69 6e 20 36 00                                Bein 6.

000006bc <__c.7129>:
     6bc:	42 65 69 6e 20 35 00                                Bein 5.

000006c3 <__c.7126>:
     6c3:	42 65 69 6e 20 34 00                                Bein 4.

000006ca <__c.7123>:
     6ca:	42 65 69 6e 20 37 00                                Bein 7.

000006d1 <__c.7120>:
     6d1:	42 65 69 6e 20 38 00                                Bein 8.

000006d8 <__c.7117>:
     6d8:	42 65 69 6e 20 33 00                                Bein 3.

000006df <__c.7114>:
     6df:	42 65 69 6e 20 32 00                                Bein 2.

000006e6 <__c.7110>:
     6e6:	42 65 69 6e 20 31 00                                Bein 1.

000006ed <__c.7105>:
     6ed:	4d 42 43 20 4d 61 78 00                             MBC Max.

000006f5 <__c.7102>:
     6f5:	4d 42 43 20 34 00                                   MBC 4.

000006fb <__c.7099>:
     6fb:	4d 42 43 20 50 00                                   MBC P.

00000701 <__c.7096>:
     701:	4d 42 43 20 32 00                                   MBC 2.

00000707 <__c.7093>:
     707:	42 65 69 6e 20 4d 31 00                             Bein M1.

0000070f <__c.7090>:
     70f:	4d 42 43 20 44 72 61 00                             MBC Dra.

00000717 <__c.7087>:
     717:	42 65 69 6e 20 4d 32 00                             Bein M2.

0000071f <__c.7083>:
     71f:	4d 42 43 20 31 00                                   MBC 1.

00000725 <__c.7205>:
     725:	25 75 21 00                                         %u!.

00000729 <__c.7202>:
     729:	55 6e 6b 6e 6f 77 6e 21 00                          Unknown!.

00000732 <__c.7199>:
     732:	57 61 74 63 68 64 6f 67 21 00                       Watchdog!.

0000073c <__c.7196>:
     73c:	53 70 69 6b 65 21 00                                Spike!.

00000743 <__c.7193>:
     743:	53 6f 66 74 77 61 72 65 21 00                       Software!.

0000074d <__c.7190>:
     74d:	50 6f 77 65 72 2d 4f 6e 21 00                       Power-On!.

00000757 <__c.7187>:
     757:	44 65 62 75 67 20 53 79 73 74 65 6d 21 00           Debug System!.

00000765 <__c.7184>:
     765:	55 6e 64 65 72 76 6f 6c 74 61 67 65 21 00           Undervoltage!.

00000773 <__c.7180>:
     773:	45 78 74 65 72 6e 61 6c 21 00                       External!.

0000077d <__c.7075>:
     77d:	57 61 72 6e 69 6e 67 3a 20 75 6e 6b 6e 6f 77 6e     Warning: unknown
     78d:	20 6d 69 63 72 6f 63 6f 6e 74 72 6f 6c 6c 65 72      microcontroller
     79d:	20 49 44 3a 20 30 78 25 30 38 6c 78 20 00            ID: 0x%08lx .

000007ab <__c.7004>:
     7ab:	48 61 72 64 77 61 72 65 20 49 6e 69 74 69 61 6c     Hardware Initial
     7bb:	69 7a 65 64 2e 00                                   ized..

000007c1 <__c.6997>:
     7c1:	25 30 34 75 2d 25 30 32 75 2d 25 30 32 75 20 00     %04u-%02u-%02u .

000007d1 <__c.6992>:
     7d1:	25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 20 00     %02u:%02u:%02u .

000007e1 <__c.7086>:
     7e1:	0d 0a 1b 5b 30 4b 41 70 70 6c 69 63 61 74 69 6f     ...[0KApplicatio
     7f1:	6e 20 53 74 61 72 74 65 64 21 00                    n Started!.

000007fc <__c.6999>:
     7fc:	0d 0a 1b 5b 30 4b 45 76 65 6e 74 20 6f 76 65 72     ...[0KEvent over
     80c:	66 6c 6f 77 20 65 72 72 6f 72 21 00                 flow error!.

00000818 <__c.2179>:
     818:	6e 61 6e 00                                         nan.

0000081c <__c.2177>:
     81c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     82c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     83c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     84c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     85c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     86c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     87c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     88c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     89c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     8ac:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     8bc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     8cc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     8dc:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     8ec:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     8fc:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     90c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000091a <__ctors_end>:
     91a:	11 24       	eor	r1, r1
     91c:	1f be       	out	0x3f, r1	; 63
     91e:	cf ef       	ldi	r28, 0xFF	; 255
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df e3       	ldi	r29, 0x3F	; 63
     924:	de bf       	out	0x3e, r29	; 62
     926:	00 e0       	ldi	r16, 0x00	; 0
     928:	0c bf       	out	0x3c, r16	; 60
     92a:	18 be       	out	0x38, r1	; 56
     92c:	19 be       	out	0x39, r1	; 57
     92e:	1a be       	out	0x3a, r1	; 58
     930:	1b be       	out	0x3b, r1	; 59

00000932 <__do_copy_data>:
     932:	12 e2       	ldi	r17, 0x22	; 34
     934:	a0 e0       	ldi	r26, 0x00	; 0
     936:	b0 e2       	ldi	r27, 0x20	; 32
     938:	e4 e1       	ldi	r30, 0x14	; 20
     93a:	fb e4       	ldi	r31, 0x4B	; 75
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	0b bf       	out	0x3b, r16	; 59
     940:	02 c0       	rjmp	.+4      	; 0x946 <__do_copy_data+0x14>
     942:	07 90       	elpm	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	a2 3b       	cpi	r26, 0xB2	; 178
     948:	b1 07       	cpc	r27, r17
     94a:	d9 f7       	brne	.-10     	; 0x942 <__do_copy_data+0x10>
     94c:	1b be       	out	0x3b, r1	; 59

0000094e <__do_clear_bss>:
     94e:	29 e2       	ldi	r18, 0x29	; 41
     950:	a2 eb       	ldi	r26, 0xB2	; 178
     952:	b2 e2       	ldi	r27, 0x22	; 34
     954:	01 c0       	rjmp	.+2      	; 0x958 <.do_clear_bss_start>

00000956 <.do_clear_bss_loop>:
     956:	1d 92       	st	X+, r1

00000958 <.do_clear_bss_start>:
     958:	a7 32       	cpi	r26, 0x27	; 39
     95a:	b2 07       	cpc	r27, r18
     95c:	e1 f7       	brne	.-8      	; 0x956 <.do_clear_bss_loop>
     95e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <main>
     962:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <_exit>

00000966 <__bad_interrupt>:
     966:	4c cb       	rjmp	.-2408   	; 0x0 <__vectors>

00000968 <adcInit>:

static adc_packet_t * packet = NULL;


void adcInit(adc_packet_t * adc_packet) 
{
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
// 	B0: 2.048 V reference
// 	B1: 12V_DIV11_SENSE
// 	B4-7: PWR_SENSE 8-11
// 	K4: PWR_SELECT group A/B
	
	packet = adc_packet;
     970:	80 93 b2 22 	sts	0x22B2, r24
     974:	90 93 b3 22 	sts	0x22B3, r25

	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
     978:	20 ec       	ldi	r18, 0xC0	; 192
     97a:	31 e0       	ldi	r19, 0x01	; 1
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	f9 01       	movw	r30, r18
     980:	92 87       	std	Z+10, r25	; 0x0a
	ADCA.CALL = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
     982:	e0 e2       	ldi	r30, 0x20	; 32
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	e4 91       	lpm	r30, Z
     988:	c0 e0       	ldi	r28, 0x00	; 0
     98a:	d2 e0       	ldi	r29, 0x02	; 2
     98c:	ec 87       	std	Y+12, r30	; 0x0c
	ADCA.CALH = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
     98e:	e1 e2       	ldi	r30, 0x21	; 33
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	e4 91       	lpm	r30, Z
     994:	ed 87       	std	Y+13, r30	; 0x0d
	ADCB.CALL = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0));
     996:	e4 e2       	ldi	r30, 0x24	; 36
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	e4 91       	lpm	r30, Z
     99c:	a0 e4       	ldi	r26, 0x40	; 64
     99e:	b2 e0       	ldi	r27, 0x02	; 2
     9a0:	1c 96       	adiw	r26, 0x0c	; 12
     9a2:	ec 93       	st	X, r30
     9a4:	1c 97       	sbiw	r26, 0x0c	; 12
	ADCB.CALH = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1));
     9a6:	e5 e2       	ldi	r30, 0x25	; 37
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	e4 91       	lpm	r30, Z
     9ac:	1d 96       	adiw	r26, 0x0d	; 13
     9ae:	ec 93       	st	X, r30
     9b0:	1d 97       	sbiw	r26, 0x0d	; 13
	NVM.CMD = 0;
     9b2:	f9 01       	movw	r30, r18
     9b4:	12 86       	std	Z+10, r1	; 0x0a
	
	PORTA.OUTCLR = 0xFF;
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	16 e0       	ldi	r17, 0x06	; 6
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	f8 01       	movw	r30, r16
     9be:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRCLR = 0xFF;
     9c0:	82 83       	std	Z+2, r24	; 0x02
	
	PORTB.OUTCLR = 0xF3;
     9c2:	20 e2       	ldi	r18, 0x20	; 32
     9c4:	36 e0       	ldi	r19, 0x06	; 6
     9c6:	83 ef       	ldi	r24, 0xF3	; 243
     9c8:	f9 01       	movw	r30, r18
     9ca:	86 83       	std	Z+6, r24	; 0x06
	PORTB.DIRCLR = 0xF3;
     9cc:	82 83       	std	Z+2, r24	; 0x02
	
	PORTK.OUTCLR = 0x10;
     9ce:	60 e2       	ldi	r22, 0x20	; 32
     9d0:	77 e0       	ldi	r23, 0x07	; 7
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	fb 01       	movw	r30, r22
     9d6:	46 83       	std	Z+6, r20	; 0x06
	PORTK.DIRSET = 0x10;
     9d8:	41 83       	std	Z+1, r20	; 0x01
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9da:	87 e0       	ldi	r24, 0x07	; 7
     9dc:	f8 01       	movw	r30, r16
     9de:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9e0:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9e2:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9e4:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9e6:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9e8:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9ea:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9ec:	87 8b       	std	Z+23, r24	; 0x17
	
	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9ee:	f9 01       	movw	r30, r18
     9f0:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9f2:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9f4:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9f6:	85 8b       	std	Z+21, r24	; 0x15
	PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9f8:	86 8b       	std	Z+22, r24	; 0x16
	PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9fa:	87 8b       	std	Z+23, r24	; 0x17
	
	PORTK.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     9fc:	fb 01       	movw	r30, r22
     9fe:	84 8b       	std	Z+20, r24	; 0x14
	
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a00:	1a a2       	std	Y+34, r1	; 0x22
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a02:	1a a6       	std	Y+42, r1	; 0x2a
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a04:	1a aa       	std	Y+50, r1	; 0x32
	ADCA.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a06:	1a ae       	std	Y+58, r1	; 0x3a
	
	ADCB.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a08:	92 96       	adiw	r26, 0x22	; 34
     a0a:	1c 92       	st	X, r1
     a0c:	92 97       	sbiw	r26, 0x22	; 34
	ADCB.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a0e:	9a 96       	adiw	r26, 0x2a	; 42
     a10:	1c 92       	st	X, r1
     a12:	9a 97       	sbiw	r26, 0x2a	; 42
	ADCB.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a14:	d2 96       	adiw	r26, 0x32	; 50
     a16:	1c 92       	st	X, r1
     a18:	d2 97       	sbiw	r26, 0x32	; 50
	ADCB.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     a1a:	da 96       	adiw	r26, 0x3a	; 58
     a1c:	1c 92       	st	X, r1
     a1e:	da 97       	sbiw	r26, 0x3a	; 58
	
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a20:	98 a3       	std	Y+32, r25	; 0x20
	ADCA.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a22:	98 a7       	std	Y+40, r25	; 0x28
	ADCA.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a24:	98 ab       	std	Y+48, r25	; 0x30
	ADCA.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a26:	98 af       	std	Y+56, r25	; 0x38
	
	ADCB.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a28:	90 96       	adiw	r26, 0x20	; 32
     a2a:	9c 93       	st	X, r25
     a2c:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a2e:	98 96       	adiw	r26, 0x28	; 40
     a30:	9c 93       	st	X, r25
     a32:	98 97       	sbiw	r26, 0x28	; 40
	ADCB.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a34:	d0 96       	adiw	r26, 0x30	; 48
     a36:	9c 93       	st	X, r25
     a38:	d0 97       	sbiw	r26, 0x30	; 48
	ADCB.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     a3a:	d8 96       	adiw	r26, 0x38	; 56
     a3c:	9c 93       	st	X, r25
     a3e:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a40:	85 e0       	ldi	r24, 0x05	; 5
     a42:	89 a3       	std	Y+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a44:	89 a7       	std	Y+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a46:	89 ab       	std	Y+49, r24	; 0x31
	ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a48:	89 af       	std	Y+57, r24	; 0x39
	
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a4a:	85 e4       	ldi	r24, 0x45	; 69
     a4c:	91 96       	adiw	r26, 0x21	; 33
     a4e:	8c 93       	st	X, r24
     a50:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a52:	99 96       	adiw	r26, 0x29	; 41
     a54:	8c 93       	st	X, r24
     a56:	99 97       	sbiw	r26, 0x29	; 41
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a58:	d1 96       	adiw	r26, 0x31	; 49
     a5a:	8c 93       	st	X, r24
     a5c:	d1 97       	sbiw	r26, 0x31	; 49
	ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN8_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     a5e:	d9 96       	adiw	r26, 0x39	; 57
     a60:	8c 93       	st	X, r24
     a62:	d9 97       	sbiw	r26, 0x39	; 57
	
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm | ADC_CURRLIMIT_NO_gc| !ADC_FREERUN_bm;
     a64:	49 83       	std	Y+1, r20	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFB_gc;
     a66:	80 e3       	ldi	r24, 0x30	; 48
     a68:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.EVCTRL = 0; // ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc; /* Sweep channels 0-1, trigger using event channel 0, sync sweep on event */
     a6a:	1b 82       	std	Y+3, r1	; 0x03
	ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc; // 24 MHz / 16 = 1.5 MSPS
     a6c:	9c 83       	std	Y+4, r25	; 0x04
	
	ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm | ADC_CURRLIMIT_NO_gc | !ADC_FREERUN_bm;
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	4c 93       	st	X, r20
     a72:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	8c 93       	st	X, r24
     a78:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.EVCTRL = 0; // ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc; /* Sweep channels 0-1, trigger using event channel 0, sync sweep on event */
     a7a:	13 96       	adiw	r26, 0x03	; 3
     a7c:	1c 92       	st	X, r1
     a7e:	13 97       	sbiw	r26, 0x03	; 3
	ADCB.PRESCALER = ADC_PRESCALER_DIV16_gc; // 24 MHz / 16 = 1.5 MSPS
     a80:	14 96       	adiw	r26, 0x04	; 4
     a82:	9c 93       	st	X, r25
     a84:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.CTRLA = ADC_ENABLE_bm;// | ADC_FLUSH_bm;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	88 83       	st	Y, r24
	ADCB.CTRLA = ADC_ENABLE_bm;// | ADC_FLUSH_bm;
     a8a:	8c 93       	st	X, r24
	
//	PMIC.CTRL |=  PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
//	EVSYS.CH0MUX = EVSYS_CHMUX_RTC_OVF_gc; /* Connect RTC overflow to event channel 0, thus triggering an ADC sweep on ADC */
//	EVSYS.CH0MUX = EVSYS_CHMUX_TCE0_OVF_gc; /* Connect TCE0 overflow to event channel 0, thus triggering an ADC sweep on ADC */
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <appUICleanUSB>:


uint16_t appUIGetBufWebsiteLength()
{
	return appUI.ethWebsitePos - HEADER_OFFSET;
}
     a96:	86 e5       	ldi	r24, 0x56	; 86
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
     aa2:	1f 92       	push	r1
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	8f 93       	push	r24
     aa8:	1f 92       	push	r1
     aaa:	83 e1       	ldi	r24, 0x13	; 19
     aac:	8f 93       	push	r24
     aae:	89 e4       	ldi	r24, 0x49	; 73
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
     aba:	8d b7       	in	r24, 0x3d	; 61
     abc:	9e b7       	in	r25, 0x3e	; 62
     abe:	08 96       	adiw	r24, 0x08	; 8
     ac0:	8d bf       	out	0x3d, r24	; 61
     ac2:	9e bf       	out	0x3e, r25	; 62
     ac4:	08 95       	ret

00000ac6 <appUICleanWebsite>:
     ac6:	88 e5       	ldi	r24, 0x58	; 88
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	e5 eb       	ldi	r30, 0xB5	; 181
     acc:	f2 e2       	ldi	r31, 0x22	; 34
     ace:	df 01       	movw	r26, r30
     ad0:	9c 01       	movw	r18, r24
     ad2:	1d 92       	st	X+, r1
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	30 40       	sbci	r19, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <appUICleanWebsite+0xc>
     ada:	66 e1       	ldi	r22, 0x16	; 22
     adc:	72 e0       	ldi	r23, 0x02	; 2
     ade:	8b ee       	ldi	r24, 0xEB	; 235
     ae0:	92 e2       	ldi	r25, 0x22	; 34
     ae2:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
     ae6:	88 e6       	ldi	r24, 0x68	; 104
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	80 93 0d 25 	sts	0x250D, r24
     aee:	90 93 0e 25 	sts	0x250E, r25
     af2:	10 92 0f 25 	sts	0x250F, r1
     af6:	10 92 10 25 	sts	0x2510, r1
     afa:	08 95       	ret

00000afc <appUIClean>:
     afc:	cc df       	rcall	.-104    	; 0xa96 <appUICleanUSB>
     afe:	e3 cf       	rjmp	.-58     	; 0xac6 <appUICleanWebsite>
     b00:	08 95       	ret

00000b02 <appUIGetBufWebsiteSpaceRemaining>:


size_t appUIGetBufWebsiteSpaceRemaining()
{
	int16_t space = ((sizeof appUI.ethWebsite) - 1) - appUI.ethWebsitePos;
     b02:	20 91 0d 25 	lds	r18, 0x250D
     b06:	30 91 0e 25 	lds	r19, 0x250E
     b0a:	87 e5       	ldi	r24, 0x57	; 87
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	82 1b       	sub	r24, r18
     b10:	93 0b       	sbc	r25, r19

	if (space <= 0)
     b12:	18 16       	cp	r1, r24
     b14:	19 06       	cpc	r1, r25
     b16:	14 f0       	brlt	.+4      	; 0xb1c <appUIGetBufWebsiteSpaceRemaining+0x1a>
		return 0;
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
	else
		return (size_t)space;
}
     b1c:	08 95       	ret

00000b1e <appUIvPrintWebsite_P>:


//*****************************************************************************

void appUIvPrintWebsite_P(const char *str_P, va_list args)
{
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	8c 01       	movw	r16, r24
     b2e:	7b 01       	movw	r14, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b30:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b32:	f8 94       	cli
	{
		size_t charRemaining;
		if ((charRemaining = appUIGetBufWebsiteSpaceRemaining()))
     b34:	e6 df       	rcall	.-52     	; 0xb02 <appUIGetBufWebsiteSpaceRemaining>
     b36:	bc 01       	movw	r22, r24
     b38:	89 2b       	or	r24, r25
     b3a:	81 f0       	breq	.+32     	; 0xb5c <appUIvPrintWebsite_P+0x3e>
		{
			appUI.ethWebsitePos += vsnprintf_P(appUI.ethWebsite + appUI.ethWebsitePos, charRemaining, str_P, args);
     b3c:	cd e0       	ldi	r28, 0x0D	; 13
     b3e:	d5 e2       	ldi	r29, 0x25	; 37
     b40:	88 81       	ld	r24, Y
     b42:	99 81       	ldd	r25, Y+1	; 0x01
     b44:	97 01       	movw	r18, r14
     b46:	a8 01       	movw	r20, r16
     b48:	8b 54       	subi	r24, 0x4B	; 75
     b4a:	9d 4d       	sbci	r25, 0xDD	; 221
     b4c:	0e 94 b1 24 	call	0x4962	; 0x4962 <vsnprintf_P>
     b50:	28 81       	ld	r18, Y
     b52:	39 81       	ldd	r19, Y+1	; 0x01
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	88 83       	st	Y, r24
     b5a:	99 83       	std	Y+1, r25	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b5c:	df be       	out	0x3f, r13	; 63
		}
	}
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	08 95       	ret

00000b6e <appUIPrintWebsite_P>:


void appUIPrintWebsite_P(const char *str_P, ...)
{
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	be 01       	movw	r22, r28
     b7a:	69 5f       	subi	r22, 0xF9	; 249
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	fb 01       	movw	r30, r22
     b80:	81 91       	ld	r24, Z+
     b82:	91 91       	ld	r25, Z+
     b84:	bf 01       	movw	r22, r30
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b86:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b88:	f8 94       	cli
	{
		va_list args;			// is this allowed & safe?? nested va_list :-)
		va_start (args, str_P);
		appUIvPrintWebsite_P(str_P, args);
     b8a:	c9 df       	rcall	.-110    	; 0xb1e <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b8c:	1f bf       	out	0x3f, r17	; 63
		va_end (args);
	}
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	08 95       	ret

00000b96 <appUISetHTMLFont>:
		case APPUI_INFO:	print(ESC_CURSOR_POS_RESTORE	COLOR_INFO);		break;
	}
}

void appUISetHTMLFont(APPUI_t UI)
{
     b96:	cf 93       	push	r28
     b98:	c8 2f       	mov	r28, r24
	static bool firstCall = false;
	
	if (!firstCall)
     b9a:	80 91 b4 22 	lds	r24, 0x22B4
     b9e:	81 11       	cpse	r24, r1
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <appUISetHTMLFont+0x14>
		firstCall = true;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 b4 22 	sts	0x22B4, r24
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <appUISetHTMLFont+0x22>
	else
		appUIPrintWebsite("</font>");
     baa:	82 ec       	ldi	r24, 0xC2	; 194
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	dd df       	rcall	.-70     	; 0xb6e <appUIPrintWebsite_P>
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
		
	switch (UI)
     bb8:	c1 30       	cpi	r28, 0x01	; 1
     bba:	71 f0       	breq	.+28     	; 0xbd8 <appUISetHTMLFont+0x42>
     bbc:	28 f0       	brcs	.+10     	; 0xbc8 <appUISetHTMLFont+0x32>
     bbe:	c2 30       	cpi	r28, 0x02	; 2
     bc0:	99 f0       	breq	.+38     	; 0xbe8 <appUISetHTMLFont+0x52>
     bc2:	c3 30       	cpi	r28, 0x03	; 3
     bc4:	c9 f0       	breq	.+50     	; 0xbf8 <appUISetHTMLFont+0x62>
     bc6:	1f c0       	rjmp	.+62     	; 0xc06 <appUISetHTMLFont+0x70>
	{
		case APPUI_DEVICES:	appUIPrintWebsite("<font color=\"green\">");		break;
     bc8:	8d ea       	ldi	r24, 0xAD	; 173
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	ce df       	rcall	.-100    	; 0xb6e <appUIPrintWebsite_P>
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	17 c0       	rjmp	.+46     	; 0xc06 <appUISetHTMLFont+0x70>
		case APPUI_MENUS:	appUIPrintWebsite("<font color=\"purple\">");		break;
     bd8:	87 e9       	ldi	r24, 0x97	; 151
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	c6 df       	rcall	.-116    	; 0xb6e <appUIPrintWebsite_P>
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <appUISetHTMLFont+0x70>
		case APPUI_PSU:		appUIPrintWebsite("<font color=\"red\">");		break;
     be8:	84 e8       	ldi	r24, 0x84	; 132
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	be df       	rcall	.-132    	; 0xb6e <appUIPrintWebsite_P>
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <appUISetHTMLFont+0x70>
		case APPUI_INFO:	appUIPrintWebsite("<font color=\"magenta\">");	break;
     bf8:	8d e6       	ldi	r24, 0x6D	; 109
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	b6 df       	rcall	.-148    	; 0xb6e <appUIPrintWebsite_P>
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
	}
}
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <appUISetUI>:
#define HEADER_OFFSET	0x36
#define WEBSITE_STR_START			PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<font>")


void appUISetUI(APPUI_t UI)
{
     c0a:	cf 93       	push	r28
     c0c:	c8 2f       	mov	r28, r24
	appUISetHTMLFont(UI);
     c0e:	c3 df       	rcall	.-122    	; 0xb96 <appUISetHTMLFont>
	
	switch (UI)
     c10:	c1 30       	cpi	r28, 0x01	; 1
     c12:	79 f0       	breq	.+30     	; 0xc32 <appUISetUI+0x28>
     c14:	28 f0       	brcs	.+10     	; 0xc20 <appUISetUI+0x16>
     c16:	c2 30       	cpi	r28, 0x02	; 2
     c18:	a9 f0       	breq	.+42     	; 0xc44 <appUISetUI+0x3a>
     c1a:	c3 30       	cpi	r28, 0x03	; 3
     c1c:	e1 f0       	breq	.+56     	; 0xc56 <appUISetUI+0x4c>
     c1e:	23 c0       	rjmp	.+70     	; 0xc66 <appUISetUI+0x5c>
	{
		case APPUI_DEVICES:	print(ESC_CURSOR_POS_SAVE		COLOR_DEVICES);		break;
     c20:	85 ee       	ldi	r24, 0xE5	; 229
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	1a c0       	rjmp	.+52     	; 0xc66 <appUISetUI+0x5c>
		case APPUI_MENUS:	print(ESC_CURSOR_POS_SAVE		COLOR_MENUS);		break;
     c32:	8c ed       	ldi	r24, 0xDC	; 220
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	9f 93       	push	r25
     c38:	8f 93       	push	r24
     c3a:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <appUISetUI+0x5c>
		case APPUI_PSU:		print(ESC_CURSOR_POS_SAVE		COLOR_PSU);			break;
     c44:	83 ed       	ldi	r24, 0xD3	; 211
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	9f 93       	push	r25
     c4a:	8f 93       	push	r24
     c4c:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	08 c0       	rjmp	.+16     	; 0xc66 <appUISetUI+0x5c>
		case APPUI_INFO:	print(ESC_CURSOR_POS_RESTORE	COLOR_INFO);		break;
     c56:	8a ec       	ldi	r24, 0xCA	; 202
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
	}
}
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <appUIPrint_P>:
}

//*****************************************************************************

void appUIPrint_P(const char *str_P, ...)
{
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	8e 01       	movw	r16, r28
     c7e:	05 5f       	subi	r16, 0xF5	; 245
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	f8 01       	movw	r30, r16
     c84:	e1 90       	ld	r14, Z+
     c86:	f1 90       	ld	r15, Z+
     c88:	8f 01       	movw	r16, r30
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     c8a:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c8c:	f8 94       	cli
	{
		va_list args;
		va_start (args, str_P);
		vfprintf_P(stdout, str_P, args);
     c8e:	af 01       	movw	r20, r30
     c90:	b7 01       	movw	r22, r14
     c92:	80 91 23 29 	lds	r24, 0x2923
     c96:	90 91 24 29 	lds	r25, 0x2924
     c9a:	0e 94 a3 24 	call	0x4946	; 0x4946 <vfprintf_P>
		appUIvPrintWebsite_P(str_P, args);
     c9e:	b8 01       	movw	r22, r16
     ca0:	c7 01       	movw	r24, r14
     ca2:	3d df       	rcall	.-390    	; 0xb1e <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ca4:	df be       	out	0x3f, r13	; 63
		va_end (args);
	}
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <appUIPrintln_P>:


void appUIPrintln_P(const char *str_P, ...)
{
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	8e 01       	movw	r16, r28
     cca:	05 5f       	subi	r16, 0xF5	; 245
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	f8 01       	movw	r30, r16
     cd0:	e1 90       	ld	r14, Z+
     cd2:	f1 90       	ld	r15, Z+
     cd4:	8f 01       	movw	r16, r30
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     cd6:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cd8:	f8 94       	cli
	{
		printf_P(PSTR("\r\n"));
     cda:	83 e1       	ldi	r24, 0x13	; 19
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
		appUIPrintWebsite_P(PSTR("<br>"));
     ce6:	8e e0       	ldi	r24, 0x0E	; 14
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	3f df       	rcall	.-386    	; 0xb6e <appUIPrintWebsite_P>
		
		va_list args;
		va_start (args, str_P);
		vfprintf_P(stdout, str_P, args);
     cf0:	a8 01       	movw	r20, r16
     cf2:	b7 01       	movw	r22, r14
     cf4:	80 91 23 29 	lds	r24, 0x2923
     cf8:	90 91 24 29 	lds	r25, 0x2924
     cfc:	0e 94 a3 24 	call	0x4946	; 0x4946 <vfprintf_P>
		appUIvPrintWebsite_P(str_P, args);
     d00:	b8 01       	movw	r22, r16
     d02:	c7 01       	movw	r24, r14
     d04:	0c df       	rcall	.-488    	; 0xb1e <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d06:	df be       	out	0x3f, r13	; 63
    __asm__ volatile ("" ::: "memory");
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
		va_end (args);
	}
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	08 95       	ret

00000d20 <appUIPrintPos_P>:


void appUIPrintPos_P(const uint8_t line, const uint8_t column, const char *str_P, ...)
{
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	0b 85       	ldd	r16, Y+11	; 0x0b
     d34:	1c 85       	ldd	r17, Y+12	; 0x0c
     d36:	ed 84       	ldd	r14, Y+13	; 0x0d
     d38:	fe 84       	ldd	r15, Y+14	; 0x0e
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d3a:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d3c:	f8 94       	cli
	{
		if (line != appUI.line || column != appUI.column)
     d3e:	80 91 0f 25 	lds	r24, 0x250F
     d42:	80 13       	cpse	r24, r16
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <appUIPrintPos_P+0x2e>
     d46:	80 91 10 25 	lds	r24, 0x2510
     d4a:	81 17       	cp	r24, r17
     d4c:	a9 f0       	breq	.+42     	; 0xd78 <appUIPrintPos_P+0x58>
		{
			printf_P(PSTR("\33[%u;%uH\33[0K"), line, column);
     d4e:	1f 92       	push	r1
     d50:	1f 93       	push	r17
     d52:	1f 92       	push	r1
     d54:	0f 93       	push	r16
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
			appUIPrintWebsite_P(PSTR("<br>"));
     d62:	2c ef       	ldi	r18, 0xFC	; 252
     d64:	31 e0       	ldi	r19, 0x01	; 1
     d66:	3f 93       	push	r19
     d68:	2f 93       	push	r18
     d6a:	01 df       	rcall	.-510    	; 0xb6e <appUIPrintWebsite_P>
			appUI.line = line;
     d6c:	00 93 0f 25 	sts	0x250F, r16
			appUI.column = column;
     d70:	10 93 10 25 	sts	0x2510, r17
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	de bf       	out	0x3e, r29	; 62
		}
		
		va_list args;
		va_start (args, str_P);
		vfprintf_P(stdout, str_P, args);
     d78:	ae 01       	movw	r20, r28
     d7a:	41 5f       	subi	r20, 0xF1	; 241
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	b7 01       	movw	r22, r14
     d80:	80 91 23 29 	lds	r24, 0x2923
     d84:	90 91 24 29 	lds	r25, 0x2924
     d88:	0e 94 a3 24 	call	0x4946	; 0x4946 <vfprintf_P>
		appUIvPrintWebsite_P(str_P, args);
     d8c:	be 01       	movw	r22, r28
     d8e:	61 5f       	subi	r22, 0xF1	; 241
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	c7 01       	movw	r24, r14
     d94:	c4 de       	rcall	.-632    	; 0xb1e <appUIvPrintWebsite_P>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d96:	df be       	out	0x3f, r13	; 63
		va_end (args);
	}
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <CCPWrite>:
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
	uint8_t clkEnabled = OSC.CTRL & oscSel;
	return clkEnabled;
}
     da8:	0f 93       	push	r16
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	2f b7       	in	r18, 0x3f	; 63
     db6:	29 83       	std	Y+1, r18	; 0x01
     db8:	f8 94       	cli
     dba:	1b be       	out	0x3b, r1	; 59
     dbc:	fc 01       	movw	r30, r24
     dbe:	08 ed       	ldi	r16, 0xD8	; 216
     dc0:	04 bf       	out	0x34, r16	; 52
     dc2:	60 83       	st	Z, r22
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	8f bf       	out	0x3f, r24	; 63
     dc8:	0f 90       	pop	r0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <CLKSYS_PLL_Config>:
     dd2:	6f 71       	andi	r22, 0x1F	; 31
     dd4:	86 2b       	or	r24, r22
     dd6:	80 93 55 00 	sts	0x0055, r24
     dda:	08 95       	ret

00000ddc <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     ddc:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     dde:	81 e4       	ldi	r24, 0x41	; 65
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	e2 cf       	rjmp	.-60     	; 0xda8 <CCPWrite>
     de4:	08 95       	ret

00000de6 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     dee:	00 e4       	ldi	r16, 0x40	; 64
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	f8 01       	movw	r30, r16
     df4:	60 81       	ld	r22, Z
     df6:	68 7f       	andi	r22, 0xF8	; 248
     df8:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     dfa:	80 e4       	ldi	r24, 0x40	; 64
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	d4 df       	rcall	.-88     	; 0xda8 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     e00:	f8 01       	movw	r30, r16
     e02:	80 81       	ld	r24, Z
	return clkCtrl;
}
     e04:	8c 23       	and	r24, r28
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     e0e:	29 2f       	mov	r18, r25
     e10:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	59 f0       	breq	.+22     	; 0xe2e <CALLBACK_USB_GetDescriptor+0x20>
     e18:	23 30       	cpi	r18, 0x03	; 3
     e1a:	31 05       	cpc	r19, r1
     e1c:	69 f0       	breq	.+26     	; 0xe38 <CALLBACK_USB_GetDescriptor+0x2a>
     e1e:	21 30       	cpi	r18, 0x01	; 1
     e20:	31 05       	cpc	r19, r1
     e22:	29 f5       	brne	.+74     	; 0xe6e <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     e24:	82 e1       	ldi	r24, 0x12	; 18
     e26:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     e28:	28 e6       	ldi	r18, 0x68	; 104
     e2a:	33 e0       	ldi	r19, 0x03	; 3
     e2c:	29 c0       	rjmp	.+82     	; 0xe80 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     e2e:	8e e3       	ldi	r24, 0x3E	; 62
     e30:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     e32:	2a e2       	ldi	r18, 0x2A	; 42
     e34:	33 e0       	ldi	r19, 0x03	; 3
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     e36:	24 c0       	rjmp	.+72     	; 0xe80 <CALLBACK_USB_GetDescriptor+0x72>
     e38:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	59 f0       	breq	.+22     	; 0xe56 <CALLBACK_USB_GetDescriptor+0x48>
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	91 05       	cpc	r25, r1
     e44:	71 f0       	breq	.+28     	; 0xe62 <CALLBACK_USB_GetDescriptor+0x54>
     e46:	89 2b       	or	r24, r25
     e48:	b9 f4       	brne	.+46     	; 0xe78 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     e4a:	e6 e2       	ldi	r30, 0x26	; 38
     e4c:	f3 e0       	ldi	r31, 0x03	; 3
     e4e:	84 91       	lpm	r24, Z
     e50:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     e52:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     e54:	15 c0       	rjmp	.+42     	; 0xe80 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     e56:	ec e0       	ldi	r30, 0x0C	; 12
     e58:	f3 e0       	ldi	r31, 0x03	; 3
     e5a:	84 91       	lpm	r24, Z
     e5c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     e5e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     e62:	ee ee       	ldi	r30, 0xEE	; 238
     e64:	f2 e0       	ldi	r31, 0x02	; 2
     e66:	84 91       	lpm	r24, Z
     e68:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     e6a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     e80:	fa 01       	movw	r30, r20
     e82:	20 83       	st	Z, r18
     e84:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     e86:	08 95       	ret

00000e88 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
     e8e:	fc 01       	movw	r30, r24
     e90:	70 96       	adiw	r30, 0x10	; 16
     e92:	8b e0       	ldi	r24, 0x0B	; 11
     e94:	df 01       	movw	r26, r30
     e96:	1d 92       	st	X+, r1
     e98:	8a 95       	dec	r24
     e9a:	e9 f7       	brne	.-6      	; 0xe96 <CDC_Device_ConfigureEndpoints+0xe>
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	8c 83       	std	Y+4, r24	; 0x04
     ea0:	89 87       	std	Y+9, r24	; 0x09
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8e 87       	std	Y+14, r24	; 0x0e
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	d5 d5       	rcall	.+2986   	; 0x1a58 <Endpoint_ConfigureEndpointTable>
     eae:	88 23       	and	r24, r24
     eb0:	51 f0       	breq	.+20     	; 0xec6 <CDC_Device_ConfigureEndpoints+0x3e>
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	ce 01       	movw	r24, r28
     eb6:	06 96       	adiw	r24, 0x06	; 6
     eb8:	cf d5       	rcall	.+2974   	; 0x1a58 <Endpoint_ConfigureEndpointTable>
     eba:	88 23       	and	r24, r24
     ebc:	21 f0       	breq	.+8      	; 0xec6 <CDC_Device_ConfigureEndpoints+0x3e>
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	ce 01       	movw	r24, r28
     ec2:	0b 96       	adiw	r24, 0x0b	; 11
     ec4:	c9 d5       	rcall	.+2962   	; 0x1a58 <Endpoint_ConfigureEndpointTable>
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <CDC_Device_SendByte>:
     ecc:	cf 93       	push	r28
     ece:	fc 01       	movw	r30, r24
     ed0:	90 91 1e 26 	lds	r25, 0x261E
     ed4:	94 30       	cpi	r25, 0x04	; 4
     ed6:	f9 f4       	brne	.+62     	; 0xf16 <CDC_Device_SendByte+0x4a>
     ed8:	84 89       	ldd	r24, Z+20	; 0x14
     eda:	95 89       	ldd	r25, Z+21	; 0x15
     edc:	a6 89       	ldd	r26, Z+22	; 0x16
     ede:	b7 89       	ldd	r27, Z+23	; 0x17
     ee0:	89 2b       	or	r24, r25
     ee2:	8a 2b       	or	r24, r26
     ee4:	8b 2b       	or	r24, r27
     ee6:	c9 f0       	breq	.+50     	; 0xf1a <CDC_Device_SendByte+0x4e>
     ee8:	c6 2f       	mov	r28, r22
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	ab d4       	rcall	.+2390   	; 0x1844 <Endpoint_SelectEndpoint>
     eee:	80 91 27 26 	lds	r24, 0x2627
     ef2:	90 91 28 26 	lds	r25, 0x2628
     ef6:	fc 01       	movw	r30, r24
     ef8:	ef 5b       	subi	r30, 0xBF	; 191
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	20 81       	ld	r18, Z
     efe:	31 97       	sbiw	r30, 0x01	; 1
     f00:	80 81       	ld	r24, Z
     f02:	28 17       	cp	r18, r24
     f04:	20 f0       	brcs	.+8      	; 0xf0e <CDC_Device_SendByte+0x42>
     f06:	56 d4       	rcall	.+2220   	; 0x17b4 <Endpoint_ClearIN>
     f08:	50 d6       	rcall	.+3232   	; 0x1baa <Endpoint_WaitUntilReady>
     f0a:	81 11       	cpse	r24, r1
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <CDC_Device_SendByte+0x50>
     f0e:	8c 2f       	mov	r24, r28
     f10:	89 d4       	rcall	.+2322   	; 0x1824 <Endpoint_Write_8>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <CDC_Device_SendByte+0x50>
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <CDC_Device_SendByte+0x50>
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <CDC_Device_putchar>:
     f20:	fb 01       	movw	r30, r22
     f22:	68 2f       	mov	r22, r24
     f24:	84 85       	ldd	r24, Z+12	; 0x0c
     f26:	95 85       	ldd	r25, Z+13	; 0x0d
     f28:	d1 df       	rcall	.-94     	; 0xecc <CDC_Device_SendByte>
     f2a:	21 e0       	ldi	r18, 0x01	; 1
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 11       	cpse	r24, r1
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <CDC_Device_putchar+0x16>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	88 27       	eor	r24, r24
     f38:	99 27       	eor	r25, r25
     f3a:	82 1b       	sub	r24, r18
     f3c:	93 0b       	sbc	r25, r19
     f3e:	08 95       	ret

00000f40 <CDC_Device_Flush>:
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	fc 01       	movw	r30, r24
     f46:	90 91 1e 26 	lds	r25, 0x261E
     f4a:	94 30       	cpi	r25, 0x04	; 4
     f4c:	d1 f5       	brne	.+116    	; 0xfc2 <CDC_Device_Flush+0x82>
     f4e:	84 89       	ldd	r24, Z+20	; 0x14
     f50:	95 89       	ldd	r25, Z+21	; 0x15
     f52:	a6 89       	ldd	r26, Z+22	; 0x16
     f54:	b7 89       	ldd	r27, Z+23	; 0x17
     f56:	89 2b       	or	r24, r25
     f58:	8a 2b       	or	r24, r26
     f5a:	8b 2b       	or	r24, r27
     f5c:	a1 f1       	breq	.+104    	; 0xfc6 <CDC_Device_Flush+0x86>
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	71 d4       	rcall	.+2274   	; 0x1844 <Endpoint_SelectEndpoint>
     f62:	80 91 2b 26 	lds	r24, 0x262B
     f66:	88 23       	and	r24, r24
     f68:	4c f4       	brge	.+18     	; 0xf7c <CDC_Device_Flush+0x3c>
     f6a:	e0 91 27 26 	lds	r30, 0x2627
     f6e:	f0 91 28 26 	lds	r31, 0x2628
     f72:	ef 5b       	subi	r30, 0xBF	; 191
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <CDC_Device_Flush+0x56>
     f7c:	20 91 27 26 	lds	r18, 0x2627
     f80:	30 91 28 26 	lds	r19, 0x2628
     f84:	f9 01       	movw	r30, r18
     f86:	e0 5c       	subi	r30, 0xC0	; 192
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 81       	ld	r24, Z
     f8c:	31 96       	adiw	r30, 0x01	; 1
     f8e:	20 81       	ld	r18, Z
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	82 1b       	sub	r24, r18
     f94:	91 09       	sbc	r25, r1
     f96:	89 2b       	or	r24, r25
     f98:	c1 f0       	breq	.+48     	; 0xfca <CDC_Device_Flush+0x8a>
     f9a:	80 91 27 26 	lds	r24, 0x2627
     f9e:	90 91 28 26 	lds	r25, 0x2628
     fa2:	fc 01       	movw	r30, r24
     fa4:	ef 5b       	subi	r30, 0xBF	; 191
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	d0 81       	ld	r29, Z
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	c0 81       	ld	r28, Z
     fae:	02 d4       	rcall	.+2052   	; 0x17b4 <Endpoint_ClearIN>
     fb0:	dc 17       	cp	r29, r28
     fb2:	68 f0       	brcs	.+26     	; 0xfce <CDC_Device_Flush+0x8e>
     fb4:	fa d5       	rcall	.+3060   	; 0x1baa <Endpoint_WaitUntilReady>
     fb6:	c8 2f       	mov	r28, r24
     fb8:	81 11       	cpse	r24, r1
     fba:	0b c0       	rjmp	.+22     	; 0xfd2 <CDC_Device_Flush+0x92>
     fbc:	fb d3       	rcall	.+2038   	; 0x17b4 <Endpoint_ClearIN>
     fbe:	8c 2f       	mov	r24, r28
     fc0:	08 c0       	rjmp	.+16     	; 0xfd2 <CDC_Device_Flush+0x92>
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <CDC_Device_Flush+0x92>
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <CDC_Device_Flush+0x92>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <CDC_Device_Flush+0x92>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <CDC_Device_Flush+0x92>
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <CDC_Device_USBTask>:
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	fc 01       	movw	r30, r24
     fde:	90 91 1e 26 	lds	r25, 0x261E
     fe2:	94 30       	cpi	r25, 0x04	; 4
     fe4:	81 f4       	brne	.+32     	; 0x1006 <CDC_Device_USBTask+0x2e>
     fe6:	84 89       	ldd	r24, Z+20	; 0x14
     fe8:	95 89       	ldd	r25, Z+21	; 0x15
     fea:	a6 89       	ldd	r26, Z+22	; 0x16
     fec:	b7 89       	ldd	r27, Z+23	; 0x17
     fee:	89 2b       	or	r24, r25
     ff0:	8a 2b       	or	r24, r26
     ff2:	8b 2b       	or	r24, r27
     ff4:	41 f0       	breq	.+16     	; 0x1006 <CDC_Device_USBTask+0x2e>
     ff6:	ef 01       	movw	r28, r30
     ff8:	81 81       	ldd	r24, Z+1	; 0x01
     ffa:	24 d4       	rcall	.+2120   	; 0x1844 <Endpoint_SelectEndpoint>
     ffc:	63 d4       	rcall	.+2246   	; 0x18c4 <Endpoint_IsINReady>
     ffe:	88 23       	and	r24, r24
    1000:	11 f0       	breq	.+4      	; 0x1006 <CDC_Device_USBTask+0x2e>
    1002:	ce 01       	movw	r24, r28
    1004:	9d df       	rcall	.-198    	; 0xf40 <CDC_Device_Flush>
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <CDC_Device_BytesReceived>:
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	fc 01       	movw	r30, r24
    1012:	90 91 1e 26 	lds	r25, 0x261E
    1016:	94 30       	cpi	r25, 0x04	; 4
    1018:	09 f0       	breq	.+2      	; 0x101c <CDC_Device_BytesReceived+0x10>
    101a:	48 c0       	rjmp	.+144    	; 0x10ac <CDC_Device_BytesReceived+0xa0>
    101c:	84 89       	ldd	r24, Z+20	; 0x14
    101e:	95 89       	ldd	r25, Z+21	; 0x15
    1020:	a6 89       	ldd	r26, Z+22	; 0x16
    1022:	b7 89       	ldd	r27, Z+23	; 0x17
    1024:	89 2b       	or	r24, r25
    1026:	8a 2b       	or	r24, r26
    1028:	8b 2b       	or	r24, r27
    102a:	09 f4       	brne	.+2      	; 0x102e <CDC_Device_BytesReceived+0x22>
    102c:	42 c0       	rjmp	.+132    	; 0x10b2 <CDC_Device_BytesReceived+0xa6>
    102e:	86 81       	ldd	r24, Z+6	; 0x06
    1030:	09 d4       	rcall	.+2066   	; 0x1844 <Endpoint_SelectEndpoint>
    1032:	54 d4       	rcall	.+2216   	; 0x18dc <Endpoint_IsOUTReceived>
    1034:	88 23       	and	r24, r24
    1036:	09 f4       	brne	.+2      	; 0x103a <CDC_Device_BytesReceived+0x2e>
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <CDC_Device_BytesReceived+0xac>
    103a:	80 91 2b 26 	lds	r24, 0x262B
    103e:	88 23       	and	r24, r24
    1040:	4c f4       	brge	.+18     	; 0x1054 <CDC_Device_BytesReceived+0x48>
    1042:	e0 91 27 26 	lds	r30, 0x2627
    1046:	f0 91 28 26 	lds	r31, 0x2628
    104a:	ef 5b       	subi	r30, 0xBF	; 191
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	c0 81       	ld	r28, Z
    1050:	d0 e0       	ldi	r29, 0x00	; 0
    1052:	0d c0       	rjmp	.+26     	; 0x106e <CDC_Device_BytesReceived+0x62>
    1054:	80 91 27 26 	lds	r24, 0x2627
    1058:	90 91 28 26 	lds	r25, 0x2628
    105c:	fc 01       	movw	r30, r24
    105e:	e0 5c       	subi	r30, 0xC0	; 192
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	c0 81       	ld	r28, Z
    1064:	31 96       	adiw	r30, 0x01	; 1
    1066:	80 81       	ld	r24, Z
    1068:	d0 e0       	ldi	r29, 0x00	; 0
    106a:	c8 1b       	sub	r28, r24
    106c:	d1 09       	sbc	r29, r1
    106e:	20 97       	sbiw	r28, 0x00	; 0
    1070:	11 f4       	brne	.+4      	; 0x1076 <CDC_Device_BytesReceived+0x6a>
    1072:	b9 d3       	rcall	.+1906   	; 0x17e6 <Endpoint_ClearOUT>
    1074:	23 c0       	rjmp	.+70     	; 0x10bc <CDC_Device_BytesReceived+0xb0>
    1076:	80 91 2b 26 	lds	r24, 0x262B
    107a:	88 23       	and	r24, r24
    107c:	4c f4       	brge	.+18     	; 0x1090 <CDC_Device_BytesReceived+0x84>
    107e:	e0 91 27 26 	lds	r30, 0x2627
    1082:	f0 91 28 26 	lds	r31, 0x2628
    1086:	ef 5b       	subi	r30, 0xBF	; 191
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	c0 81       	ld	r28, Z
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	16 c0       	rjmp	.+44     	; 0x10bc <CDC_Device_BytesReceived+0xb0>
    1090:	80 91 27 26 	lds	r24, 0x2627
    1094:	90 91 28 26 	lds	r25, 0x2628
    1098:	fc 01       	movw	r30, r24
    109a:	e0 5c       	subi	r30, 0xC0	; 192
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	c0 81       	ld	r28, Z
    10a0:	31 96       	adiw	r30, 0x01	; 1
    10a2:	80 81       	ld	r24, Z
    10a4:	d0 e0       	ldi	r29, 0x00	; 0
    10a6:	c8 1b       	sub	r28, r24
    10a8:	d1 09       	sbc	r29, r1
    10aa:	08 c0       	rjmp	.+16     	; 0x10bc <CDC_Device_BytesReceived+0xb0>
    10ac:	c0 e0       	ldi	r28, 0x00	; 0
    10ae:	d0 e0       	ldi	r29, 0x00	; 0
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <CDC_Device_BytesReceived+0xb0>
    10b2:	c0 e0       	ldi	r28, 0x00	; 0
    10b4:	d0 e0       	ldi	r29, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <CDC_Device_BytesReceived+0xb0>
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
    10bc:	ce 01       	movw	r24, r28
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <CDC_Device_ReceiveByte>:
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	20 91 1e 26 	lds	r18, 0x261E
    10cc:	24 30       	cpi	r18, 0x04	; 4
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <CDC_Device_ReceiveByte+0xe>
    10d0:	52 c0       	rjmp	.+164    	; 0x1176 <CDC_Device_ReceiveByte+0xb2>
    10d2:	fc 01       	movw	r30, r24
    10d4:	44 89       	ldd	r20, Z+20	; 0x14
    10d6:	55 89       	ldd	r21, Z+21	; 0x15
    10d8:	66 89       	ldd	r22, Z+22	; 0x16
    10da:	77 89       	ldd	r23, Z+23	; 0x17
    10dc:	45 2b       	or	r20, r21
    10de:	46 2b       	or	r20, r22
    10e0:	47 2b       	or	r20, r23
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <CDC_Device_ReceiveByte+0x22>
    10e4:	4b c0       	rjmp	.+150    	; 0x117c <CDC_Device_ReceiveByte+0xb8>
    10e6:	86 81       	ldd	r24, Z+6	; 0x06
    10e8:	ad d3       	rcall	.+1882   	; 0x1844 <Endpoint_SelectEndpoint>
    10ea:	f8 d3       	rcall	.+2032   	; 0x18dc <Endpoint_IsOUTReceived>
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <CDC_Device_ReceiveByte+0x2e>
    10f0:	48 c0       	rjmp	.+144    	; 0x1182 <CDC_Device_ReceiveByte+0xbe>
    10f2:	80 91 2b 26 	lds	r24, 0x262B
    10f6:	88 23       	and	r24, r24
    10f8:	4c f4       	brge	.+18     	; 0x110c <CDC_Device_ReceiveByte+0x48>
    10fa:	e0 91 27 26 	lds	r30, 0x2627
    10fe:	f0 91 28 26 	lds	r31, 0x2628
    1102:	ef 5b       	subi	r30, 0xBF	; 191
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0d c0       	rjmp	.+26     	; 0x1126 <CDC_Device_ReceiveByte+0x62>
    110c:	20 91 27 26 	lds	r18, 0x2627
    1110:	30 91 28 26 	lds	r19, 0x2628
    1114:	f9 01       	movw	r30, r18
    1116:	e0 5c       	subi	r30, 0xC0	; 192
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	31 96       	adiw	r30, 0x01	; 1
    111e:	20 81       	ld	r18, Z
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	82 1b       	sub	r24, r18
    1124:	91 09       	sbc	r25, r1
    1126:	89 2b       	or	r24, r25
    1128:	21 f0       	breq	.+8      	; 0x1132 <CDC_Device_ReceiveByte+0x6e>
    112a:	6c d3       	rcall	.+1752   	; 0x1804 <Endpoint_Read_8>
    112c:	c8 2f       	mov	r28, r24
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <CDC_Device_ReceiveByte+0x72>
    1132:	cf ef       	ldi	r28, 0xFF	; 255
    1134:	df ef       	ldi	r29, 0xFF	; 255
    1136:	80 91 2b 26 	lds	r24, 0x262B
    113a:	88 23       	and	r24, r24
    113c:	4c f4       	brge	.+18     	; 0x1150 <CDC_Device_ReceiveByte+0x8c>
    113e:	e0 91 27 26 	lds	r30, 0x2627
    1142:	f0 91 28 26 	lds	r31, 0x2628
    1146:	ef 5b       	subi	r30, 0xBF	; 191
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	20 81       	ld	r18, Z
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	0d c0       	rjmp	.+26     	; 0x116a <CDC_Device_ReceiveByte+0xa6>
    1150:	40 91 27 26 	lds	r20, 0x2627
    1154:	50 91 28 26 	lds	r21, 0x2628
    1158:	fa 01       	movw	r30, r20
    115a:	e0 5c       	subi	r30, 0xC0	; 192
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	20 81       	ld	r18, Z
    1160:	31 96       	adiw	r30, 0x01	; 1
    1162:	80 81       	ld	r24, Z
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	28 1b       	sub	r18, r24
    1168:	31 09       	sbc	r19, r1
    116a:	23 2b       	or	r18, r19
    116c:	69 f4       	brne	.+26     	; 0x1188 <CDC_Device_ReceiveByte+0xc4>
    116e:	3b d3       	rcall	.+1654   	; 0x17e6 <Endpoint_ClearOUT>
    1170:	8c 2f       	mov	r24, r28
    1172:	9d 2f       	mov	r25, r29
    1174:	0b c0       	rjmp	.+22     	; 0x118c <CDC_Device_ReceiveByte+0xc8>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	08 c0       	rjmp	.+16     	; 0x118c <CDC_Device_ReceiveByte+0xc8>
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	05 c0       	rjmp	.+10     	; 0x118c <CDC_Device_ReceiveByte+0xc8>
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	02 c0       	rjmp	.+4      	; 0x118c <CDC_Device_ReceiveByte+0xc8>
    1188:	8c 2f       	mov	r24, r28
    118a:	9d 2f       	mov	r25, r29
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <CDC_Device_getchar>:
    1192:	fc 01       	movw	r30, r24
    1194:	84 85       	ldd	r24, Z+12	; 0x0c
    1196:	95 85       	ldd	r25, Z+13	; 0x0d
    1198:	95 df       	rcall	.-214    	; 0x10c4 <CDC_Device_ReceiveByte>
    119a:	99 23       	and	r25, r25
    119c:	14 f4       	brge	.+4      	; 0x11a2 <CDC_Device_getchar+0x10>
    119e:	8e ef       	ldi	r24, 0xFE	; 254
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	08 95       	ret

000011a4 <CDC_Device_CreateStream>:
    11a4:	fb 01       	movw	r30, r22
    11a6:	2e e0       	ldi	r18, 0x0E	; 14
    11a8:	db 01       	movw	r26, r22
    11aa:	1d 92       	st	X+, r1
    11ac:	2a 95       	dec	r18
    11ae:	e9 f7       	brne	.-6      	; 0x11aa <CDC_Device_CreateStream+0x6>
    11b0:	23 e0       	ldi	r18, 0x03	; 3
    11b2:	23 83       	std	Z+3, r18	; 0x03
    11b4:	20 e9       	ldi	r18, 0x90	; 144
    11b6:	37 e0       	ldi	r19, 0x07	; 7
    11b8:	20 87       	std	Z+8, r18	; 0x08
    11ba:	31 87       	std	Z+9, r19	; 0x09
    11bc:	29 ec       	ldi	r18, 0xC9	; 201
    11be:	38 e0       	ldi	r19, 0x08	; 8
    11c0:	22 87       	std	Z+10, r18	; 0x0a
    11c2:	33 87       	std	Z+11, r19	; 0x0b
    11c4:	84 87       	std	Z+12, r24	; 0x0c
    11c6:	95 87       	std	Z+13, r25	; 0x0d
    11c8:	08 95       	ret

000011ca <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    11ca:	08 95       	ret

000011cc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    11d8:	9a d3       	rcall	.+1844   	; 0x190e <Endpoint_IsSETUPReceived>
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <CDC_Device_ProcessControlRequest+0x14>
    11de:	7e c0       	rjmp	.+252    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    11e0:	28 81       	ld	r18, Y
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	80 91 23 26 	lds	r24, 0x2623
    11e8:	90 91 24 26 	lds	r25, 0x2624
    11ec:	82 17       	cp	r24, r18
    11ee:	93 07       	cpc	r25, r19
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <CDC_Device_ProcessControlRequest+0x28>
    11f2:	74 c0       	rjmp	.+232    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
	  return;

	switch (USB_ControlRequest.bRequest)
    11f4:	80 91 20 26 	lds	r24, 0x2620
    11f8:	81 32       	cpi	r24, 0x21	; 33
    11fa:	59 f0       	breq	.+22     	; 0x1212 <CDC_Device_ProcessControlRequest+0x46>
    11fc:	18 f4       	brcc	.+6      	; 0x1204 <CDC_Device_ProcessControlRequest+0x38>
    11fe:	80 32       	cpi	r24, 0x20	; 32
    1200:	29 f1       	breq	.+74     	; 0x124c <CDC_Device_ProcessControlRequest+0x80>
    1202:	6c c0       	rjmp	.+216    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
    1204:	82 32       	cpi	r24, 0x22	; 34
    1206:	09 f4       	brne	.+2      	; 0x120a <CDC_Device_ProcessControlRequest+0x3e>
    1208:	50 c0       	rjmp	.+160    	; 0x12aa <CDC_Device_ProcessControlRequest+0xde>
    120a:	83 32       	cpi	r24, 0x23	; 35
    120c:	09 f4       	brne	.+2      	; 0x1210 <CDC_Device_ProcessControlRequest+0x44>
    120e:	5c c0       	rjmp	.+184    	; 0x12c8 <CDC_Device_ProcessControlRequest+0xfc>
    1210:	65 c0       	rjmp	.+202    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1212:	80 91 1f 26 	lds	r24, 0x261F
    1216:	81 3a       	cpi	r24, 0xA1	; 161
    1218:	09 f0       	breq	.+2      	; 0x121c <CDC_Device_ProcessControlRequest+0x50>
    121a:	60 c0       	rjmp	.+192    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    121c:	91 d3       	rcall	.+1826   	; 0x1940 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    121e:	52 d3       	rcall	.+1700   	; 0x18c4 <Endpoint_IsINReady>
    1220:	88 23       	and	r24, r24
    1222:	e9 f3       	breq	.-6      	; 0x121e <CDC_Device_ProcessControlRequest+0x52>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1224:	8c 89       	ldd	r24, Y+20	; 0x14
    1226:	fd 88       	ldd	r15, Y+21	; 0x15
    1228:	0e 89       	ldd	r16, Y+22	; 0x16
    122a:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    122c:	fb d2       	rcall	.+1526   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    122e:	8f 2d       	mov	r24, r15
    1230:	f9 d2       	rcall	.+1522   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    1232:	80 2f       	mov	r24, r16
    1234:	f7 d2       	rcall	.+1518   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    1236:	81 2f       	mov	r24, r17
    1238:	f5 d2       	rcall	.+1514   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    123a:	88 8d       	ldd	r24, Y+24	; 0x18
    123c:	f3 d2       	rcall	.+1510   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    123e:	89 8d       	ldd	r24, Y+25	; 0x19
    1240:	f1 d2       	rcall	.+1506   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1242:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1244:	ef d2       	rcall	.+1502   	; 0x1824 <Endpoint_Write_8>

				Endpoint_ClearIN();
    1246:	b6 d2       	rcall	.+1388   	; 0x17b4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    1248:	99 d4       	rcall	.+2354   	; 0x1b7c <Endpoint_ClearStatusStage>
    124a:	48 c0       	rjmp	.+144    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    124c:	80 91 1f 26 	lds	r24, 0x261F
    1250:	81 32       	cpi	r24, 0x21	; 33
    1252:	09 f0       	breq	.+2      	; 0x1256 <CDC_Device_ProcessControlRequest+0x8a>
    1254:	43 c0       	rjmp	.+134    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    1256:	74 d3       	rcall	.+1768   	; 0x1940 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <CDC_Device_ProcessControlRequest+0x98>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    125a:	80 91 1e 26 	lds	r24, 0x261E
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <CDC_Device_ProcessControlRequest+0x98>
    1262:	3c c0       	rjmp	.+120    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1264:	3b d3       	rcall	.+1654   	; 0x18dc <Endpoint_IsOUTReceived>
    1266:	88 23       	and	r24, r24
    1268:	c1 f3       	breq	.-16     	; 0x125a <CDC_Device_ProcessControlRequest+0x8e>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    126a:	cc d2       	rcall	.+1432   	; 0x1804 <Endpoint_Read_8>
    126c:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
    126e:	ca d2       	rcall	.+1428   	; 0x1804 <Endpoint_Read_8>
    1270:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    1272:	c8 d2       	rcall	.+1424   	; 0x1804 <Endpoint_Read_8>
    1274:	08 2f       	mov	r16, r24
				uint32_t Byte3 = Endpoint_Read_8();
    1276:	c6 d2       	rcall	.+1420   	; 0x1804 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    1278:	40 2f       	mov	r20, r16
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    1280:	ba 01       	movw	r22, r20
    1282:	55 27       	eor	r21, r21
    1284:	44 27       	eor	r20, r20
    1286:	78 2b       	or	r23, r24
    1288:	4f 29       	or	r20, r15
    128a:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    128c:	4c 8b       	std	Y+20, r20	; 0x14
    128e:	5d 8b       	std	Y+21, r21	; 0x15
    1290:	6e 8b       	std	Y+22, r22	; 0x16
    1292:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1294:	b7 d2       	rcall	.+1390   	; 0x1804 <Endpoint_Read_8>
    1296:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1298:	b5 d2       	rcall	.+1386   	; 0x1804 <Endpoint_Read_8>
    129a:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    129c:	b3 d2       	rcall	.+1382   	; 0x1804 <Endpoint_Read_8>
    129e:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    12a0:	a2 d2       	rcall	.+1348   	; 0x17e6 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    12a2:	6c d4       	rcall	.+2264   	; 0x1b7c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    12a4:	ce 01       	movw	r24, r28
    12a6:	91 df       	rcall	.-222    	; 0x11ca <CDC_Device_Event_Stub>
    12a8:	19 c0       	rjmp	.+50     	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12aa:	80 91 1f 26 	lds	r24, 0x261F
    12ae:	81 32       	cpi	r24, 0x21	; 33
    12b0:	a9 f4       	brne	.+42     	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    12b2:	46 d3       	rcall	.+1676   	; 0x1940 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    12b4:	63 d4       	rcall	.+2246   	; 0x1b7c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    12b6:	80 91 21 26 	lds	r24, 0x2621
    12ba:	90 91 22 26 	lds	r25, 0x2622
    12be:	88 8b       	std	Y+16, r24	; 0x10
    12c0:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12c2:	ce 01       	movw	r24, r28
    12c4:	82 df       	rcall	.-252    	; 0x11ca <CDC_Device_Event_Stub>
    12c6:	0a c0       	rjmp	.+20     	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12c8:	80 91 1f 26 	lds	r24, 0x261F
    12cc:	81 32       	cpi	r24, 0x21	; 33
    12ce:	31 f4       	brne	.+12     	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
			{
				Endpoint_ClearSETUP();
    12d0:	37 d3       	rcall	.+1646   	; 0x1940 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    12d2:	54 d4       	rcall	.+2216   	; 0x1b7c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    12d4:	60 91 21 26 	lds	r22, 0x2621
    12d8:	ce 01       	movw	r24, r28
    12da:	77 df       	rcall	.-274    	; 0x11ca <CDC_Device_Event_Stub>
			}

			break;
	}
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	08 95       	ret

000012e8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	ea 97       	sbiw	r28, 0x3a	; 58
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f e1       	ldi	r16, 0x1F	; 31
    1300:	16 e2       	ldi	r17, 0x26	; 38
    1302:	0f 2e       	mov	r0, r31
    1304:	f7 e2       	ldi	r31, 0x27	; 39
    1306:	ef 2e       	mov	r14, r31
    1308:	f6 e2       	ldi	r31, 0x26	; 38
    130a:	ff 2e       	mov	r15, r31
    130c:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    130e:	7a d2       	rcall	.+1268   	; 0x1804 <Endpoint_Read_8>
    1310:	f8 01       	movw	r30, r16
    1312:	81 93       	st	Z+, r24
    1314:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1316:	ee 15       	cp	r30, r14
    1318:	ff 05       	cpc	r31, r15
    131a:	c9 f7       	brne	.-14     	; 0x130e <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    131c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    1320:	f6 d2       	rcall	.+1516   	; 0x190e <Endpoint_IsSETUPReceived>
    1322:	88 23       	and	r24, r24
    1324:	09 f4       	brne	.+2      	; 0x1328 <USB_Device_ProcessControlRequest+0x40>
    1326:	fe c0       	rjmp	.+508    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1328:	ef e1       	ldi	r30, 0x1F	; 31
    132a:	f6 e2       	ldi	r31, 0x26	; 38
    132c:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    132e:	81 81       	ldd	r24, Z+1	; 0x01
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	09 f4       	brne	.+2      	; 0x1336 <USB_Device_ProcessControlRequest+0x4e>
    1334:	6b c0       	rjmp	.+214    	; 0x140c <USB_Device_ProcessControlRequest+0x124>
    1336:	30 f4       	brcc	.+12     	; 0x1344 <USB_Device_ProcessControlRequest+0x5c>
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 f1       	breq	.+100    	; 0x13a0 <USB_Device_ProcessControlRequest+0xb8>
    133c:	68 f0       	brcs	.+26     	; 0x1358 <USB_Device_ProcessControlRequest+0x70>
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	79 f1       	breq	.+94     	; 0x13a0 <USB_Device_ProcessControlRequest+0xb8>
    1342:	f0 c0       	rjmp	.+480    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	09 f4       	brne	.+2      	; 0x134a <USB_Device_ProcessControlRequest+0x62>
    1348:	c5 c0       	rjmp	.+394    	; 0x14d4 <USB_Device_ProcessControlRequest+0x1ec>
    134a:	89 30       	cpi	r24, 0x09	; 9
    134c:	09 f4       	brne	.+2      	; 0x1350 <USB_Device_ProcessControlRequest+0x68>
    134e:	cb c0       	rjmp	.+406    	; 0x14e6 <USB_Device_ProcessControlRequest+0x1fe>
    1350:	86 30       	cpi	r24, 0x06	; 6
    1352:	09 f0       	breq	.+2      	; 0x1356 <USB_Device_ProcessControlRequest+0x6e>
    1354:	e7 c0       	rjmp	.+462    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
    1356:	6e c0       	rjmp	.+220    	; 0x1434 <USB_Device_ProcessControlRequest+0x14c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1358:	90 38       	cpi	r25, 0x80	; 128
    135a:	21 f0       	breq	.+8      	; 0x1364 <USB_Device_ProcessControlRequest+0x7c>
    135c:	92 38       	cpi	r25, 0x82	; 130
    135e:	09 f0       	breq	.+2      	; 0x1362 <USB_Device_ProcessControlRequest+0x7a>
    1360:	e1 c0       	rjmp	.+450    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <USB_Device_ProcessControlRequest+0x8c>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1364:	10 91 1b 26 	lds	r17, 0x261B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1368:	80 91 1c 26 	lds	r24, 0x261C
    136c:	88 23       	and	r24, r24
    136e:	81 f0       	breq	.+32     	; 0x1390 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1370:	12 60       	ori	r17, 0x02	; 2
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1374:	80 91 23 26 	lds	r24, 0x2623
    1378:	8f 70       	andi	r24, 0x0F	; 15
    137a:	64 d2       	rcall	.+1224   	; 0x1844 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    137c:	e0 91 29 26 	lds	r30, 0x2629
    1380:	f0 91 2a 26 	lds	r31, 0x262A
    1384:	11 81       	ldd	r17, Z+1	; 0x01
    1386:	12 fb       	bst	r17, 2
    1388:	11 27       	eor	r17, r17
    138a:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	5a d2       	rcall	.+1204   	; 0x1844 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    1390:	d7 d2       	rcall	.+1454   	; 0x1940 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1392:	81 2f       	mov	r24, r17
    1394:	47 d2       	rcall	.+1166   	; 0x1824 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	45 d2       	rcall	.+1162   	; 0x1824 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    139a:	0c d2       	rcall	.+1048   	; 0x17b4 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    139c:	ef d3       	rcall	.+2014   	; 0x1b7c <Endpoint_ClearStatusStage>
    139e:	c2 c0       	rjmp	.+388    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13a0:	99 23       	and	r25, r25
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <USB_Device_ProcessControlRequest+0xbe>
    13a4:	c5 c0       	rjmp	.+394    	; 0x1530 <USB_Device_ProcessControlRequest+0x248>
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	09 f0       	breq	.+2      	; 0x13ac <USB_Device_ProcessControlRequest+0xc4>
    13aa:	bc c0       	rjmp	.+376    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
    13ac:	c6 c0       	rjmp	.+396    	; 0x153a <USB_Device_ProcessControlRequest+0x252>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <USB_Device_ProcessControlRequest+0xce>
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 1c 26 	sts	0x261C, r25
    13ba:	23 c0       	rjmp	.+70     	; 0x1402 <USB_Device_ProcessControlRequest+0x11a>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    13bc:	e0 91 23 26 	lds	r30, 0x2623
    13c0:	1e 2f       	mov	r17, r30
    13c2:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <USB_Device_ProcessControlRequest+0xe0>
    13c6:	ae c0       	rjmp	.+348    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    13c8:	81 2f       	mov	r24, r17
    13ca:	3c d2       	rcall	.+1144   	; 0x1844 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    13cc:	80 91 20 26 	lds	r24, 0x2620
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <USB_Device_ProcessControlRequest+0xf0>
					{
						Endpoint_StallTransaction();
    13d4:	e1 d2       	rcall	.+1474   	; 0x1998 <Endpoint_StallTransaction>
    13d6:	15 c0       	rjmp	.+42     	; 0x1402 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    13d8:	e0 91 29 26 	lds	r30, 0x2629
    13dc:	f0 91 2a 26 	lds	r31, 0x262A
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	8b 7f       	andi	r24, 0xFB	; 251
    13e4:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    13e6:	24 e8       	ldi	r18, 0x84	; 132
    13e8:	12 9f       	mul	r17, r18
    13ea:	f0 01       	movw	r30, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	e3 59       	subi	r30, 0x93	; 147
    13f0:	f9 4d       	sbci	r31, 0xD9	; 217
    13f2:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    13f4:	e0 91 29 26 	lds	r30, 0x2629
    13f8:	f0 91 2a 26 	lds	r31, 0x262A
    13fc:	80 81       	ld	r24, Z
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	1f d2       	rcall	.+1086   	; 0x1844 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    1406:	9c d2       	rcall	.+1336   	; 0x1940 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1408:	b9 d3       	rcall	.+1906   	; 0x1b7c <Endpoint_ClearStatusStage>
    140a:	8c c0       	rjmp	.+280    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    140c:	91 11       	cpse	r25, r1
    140e:	8a c0       	rjmp	.+276    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1410:	10 91 21 26 	lds	r17, 0x2621
    1414:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    1416:	94 d2       	rcall	.+1320   	; 0x1940 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1418:	b1 d3       	rcall	.+1890   	; 0x1b7c <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    141a:	54 d2       	rcall	.+1192   	; 0x18c4 <Endpoint_IsINReady>
    141c:	88 23       	and	r24, r24
    141e:	e9 f3       	breq	.-6      	; 0x141a <USB_Device_ProcessControlRequest+0x132>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1420:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1424:	11 11       	cpse	r17, r1
    1426:	02 c0       	rjmp	.+4      	; 0x142c <USB_Device_ProcessControlRequest+0x144>
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	01 c0       	rjmp	.+2      	; 0x142e <USB_Device_ProcessControlRequest+0x146>
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	80 93 1e 26 	sts	0x261E, r24
    1432:	78 c0       	rjmp	.+240    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1434:	90 58       	subi	r25, 0x80	; 128
    1436:	92 30       	cpi	r25, 0x02	; 2
    1438:	08 f0       	brcs	.+2      	; 0x143c <USB_Device_ProcessControlRequest+0x154>
    143a:	74 c0       	rjmp	.+232    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    143c:	80 91 21 26 	lds	r24, 0x2621
    1440:	90 91 22 26 	lds	r25, 0x2622
    1444:	8c 3d       	cpi	r24, 0xDC	; 220
    1446:	e3 e0       	ldi	r30, 0x03	; 3
    1448:	9e 07       	cpc	r25, r30
    144a:	a1 f5       	brne	.+104    	; 0x14b4 <USB_Device_ProcessControlRequest+0x1cc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    144c:	83 e0       	ldi	r24, 0x03	; 3
    144e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1450:	8a e3       	ldi	r24, 0x3A	; 58
    1452:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    1454:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1456:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    1458:	ae 01       	movw	r20, r28
    145a:	4d 5f       	subi	r20, 0xFD	; 253
    145c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    145e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1460:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    1462:	a0 ec       	ldi	r26, 0xC0	; 192
    1464:	b1 e0       	ldi	r27, 0x01	; 1
    1466:	62 e0       	ldi	r22, 0x02	; 2
    1468:	1a 96       	adiw	r26, 0x0a	; 10
    146a:	6c 93       	st	X, r22
    146c:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    146e:	e3 2f       	mov	r30, r19
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    1474:	1a 96       	adiw	r26, 0x0a	; 10
    1476:	1c 92       	st	X, r1
    1478:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    147a:	20 ff       	sbrs	r18, 0
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
    147e:	82 95       	swap	r24
    1480:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1482:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1484:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1486:	8a 30       	cpi	r24, 0x0A	; 10
    1488:	18 f0       	brcs	.+6      	; 0x1490 <USB_Device_ProcessControlRequest+0x1a8>
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	c7 96       	adiw	r24, 0x37	; 55
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <USB_Device_ProcessControlRequest+0x1ac>
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	c0 96       	adiw	r24, 0x30	; 48
    1494:	fa 01       	movw	r30, r20
    1496:	81 93       	st	Z+, r24
    1498:	91 93       	st	Z+, r25
    149a:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	2c 31       	cpi	r18, 0x1C	; 28
    14a0:	19 f7       	brne	.-58     	; 0x1468 <USB_Device_ProcessControlRequest+0x180>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    14a2:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    14a4:	4d d2       	rcall	.+1178   	; 0x1940 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    14a6:	6a e3       	ldi	r22, 0x3A	; 58
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	65 d0       	rcall	.+202    	; 0x157a <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    14b0:	9a d1       	rcall	.+820    	; 0x17e6 <Endpoint_ClearOUT>
    14b2:	38 c0       	rjmp	.+112    	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    14b4:	ae 01       	movw	r20, r28
    14b6:	4f 5f       	subi	r20, 0xFF	; 255
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	60 91 23 26 	lds	r22, 0x2623
    14be:	a7 dc       	rcall	.-1714   	; 0xe0e <CALLBACK_USB_GetDescriptor>
    14c0:	8c 01       	movw	r16, r24
    14c2:	89 2b       	or	r24, r25
    14c4:	79 f1       	breq	.+94     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    14c6:	3c d2       	rcall	.+1144   	; 0x1940 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    14c8:	b8 01       	movw	r22, r16
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	e2 d0       	rcall	.+452    	; 0x1694 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    14d0:	8a d1       	rcall	.+788    	; 0x17e6 <Endpoint_ClearOUT>
    14d2:	28 c0       	rjmp	.+80     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    14d4:	90 38       	cpi	r25, 0x80	; 128
    14d6:	31 f5       	brne	.+76     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    14d8:	33 d2       	rcall	.+1126   	; 0x1940 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    14da:	80 91 1a 26 	lds	r24, 0x261A
    14de:	a2 d1       	rcall	.+836    	; 0x1824 <Endpoint_Write_8>
	Endpoint_ClearIN();
    14e0:	69 d1       	rcall	.+722    	; 0x17b4 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    14e2:	4c d3       	rcall	.+1688   	; 0x1b7c <Endpoint_ClearStatusStage>
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14e6:	91 11       	cpse	r25, r1
    14e8:	1d c0       	rjmp	.+58     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    14ea:	80 91 21 26 	lds	r24, 0x2621
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	c8 f4       	brcc	.+50     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    14f2:	26 d2       	rcall	.+1100   	; 0x1940 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    14f4:	80 91 21 26 	lds	r24, 0x2621
    14f8:	80 93 1a 26 	sts	0x261A, r24

	Endpoint_ClearStatusStage();
    14fc:	3f d3       	rcall	.+1662   	; 0x1b7c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    14fe:	80 91 1a 26 	lds	r24, 0x261A
    1502:	88 23       	and	r24, r24
    1504:	21 f0       	breq	.+8      	; 0x150e <USB_Device_ProcessControlRequest+0x226>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	80 93 1e 26 	sts	0x261E, r24
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <USB_Device_ProcessControlRequest+0x238>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    150e:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1512:	81 11       	cpse	r24, r1
    1514:	02 c0       	rjmp	.+4      	; 0x151a <USB_Device_ProcessControlRequest+0x232>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	01 c0       	rjmp	.+2      	; 0x151c <USB_Device_ProcessControlRequest+0x234>
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	80 93 1e 26 	sts	0x261E, r24

	EVENT_USB_Device_ConfigurationChanged();
    1520:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1524:	f4 d1       	rcall	.+1000   	; 0x190e <Endpoint_IsSETUPReceived>
    1526:	88 23       	and	r24, r24
    1528:	71 f0       	breq	.+28     	; 0x1546 <USB_Device_ProcessControlRequest+0x25e>
	{
		Endpoint_ClearSETUP();
    152a:	0a d2       	rcall	.+1044   	; 0x1940 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    152c:	35 d2       	rcall	.+1130   	; 0x1998 <Endpoint_StallTransaction>
    152e:	0b c0       	rjmp	.+22     	; 0x1546 <USB_Device_ProcessControlRequest+0x25e>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1530:	90 91 21 26 	lds	r25, 0x2621
    1534:	91 30       	cpi	r25, 0x01	; 1
    1536:	b1 f7       	brne	.-20     	; 0x1524 <USB_Device_ProcessControlRequest+0x23c>
    1538:	3a cf       	rjmp	.-396    	; 0x13ae <USB_Device_ProcessControlRequest+0xc6>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    153a:	80 91 21 26 	lds	r24, 0x2621
    153e:	88 23       	and	r24, r24
    1540:	09 f4       	brne	.+2      	; 0x1544 <USB_Device_ProcessControlRequest+0x25c>
    1542:	3c cf       	rjmp	.-392    	; 0x13bc <USB_Device_ProcessControlRequest+0xd4>
    1544:	5e cf       	rjmp	.-324    	; 0x1402 <USB_Device_ProcessControlRequest+0x11a>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1546:	ea 96       	adiw	r28, 0x3a	; 58
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	08 95       	ret

0000155a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    155a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    155c:	80 91 1e 26 	lds	r24, 0x261E
    1560:	88 23       	and	r24, r24
    1562:	49 f0       	breq	.+18     	; 0x1576 <USB_USBTask+0x1c>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    1564:	c0 91 2b 26 	lds	r28, 0x262B
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	6c d1       	rcall	.+728    	; 0x1844 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    156c:	d0 d1       	rcall	.+928    	; 0x190e <Endpoint_IsSETUPReceived>
    156e:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    1570:	bb de       	rcall	.-650    	; 0x12e8 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    1572:	8c 2f       	mov	r24, r28
    1574:	67 d1       	rcall	.+718    	; 0x1844 <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	c8 2e       	mov	r12, r24
    158c:	d9 2e       	mov	r13, r25
    158e:	8b 01       	movw	r16, r22
    1590:	80 91 2b 26 	lds	r24, 0x262B
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	56 d1       	rcall	.+684    	; 0x1844 <Endpoint_SelectEndpoint>
    1598:	c0 91 25 26 	lds	r28, 0x2625
    159c:	d0 91 26 26 	lds	r29, 0x2626
    15a0:	c0 17       	cp	r28, r16
    15a2:	d1 07       	cpc	r29, r17
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <Endpoint_Write_Control_Stream_LE+0x3a>
    15a6:	01 15       	cp	r16, r1
    15a8:	11 05       	cpc	r17, r1
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <Endpoint_Write_Control_Stream_LE+0x38>
    15ac:	03 d1       	rcall	.+518    	; 0x17b4 <Endpoint_ClearIN>
    15ae:	e8 01       	movw	r28, r16
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <Endpoint_Write_Control_Stream_LE+0x3a>
    15b2:	e8 01       	movw	r28, r16
    15b4:	ec 2c       	mov	r14, r12
    15b6:	fd 2c       	mov	r15, r13
    15b8:	d1 2c       	mov	r13, r1
    15ba:	44 c0       	rjmp	.+136    	; 0x1644 <Endpoint_Write_Control_Stream_LE+0xca>
    15bc:	80 91 1e 26 	lds	r24, 0x261E
    15c0:	88 23       	and	r24, r24
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <Endpoint_Write_Control_Stream_LE+0x4c>
    15c4:	53 c0       	rjmp	.+166    	; 0x166c <Endpoint_Write_Control_Stream_LE+0xf2>
    15c6:	85 30       	cpi	r24, 0x05	; 5
    15c8:	09 f4       	brne	.+2      	; 0x15cc <Endpoint_Write_Control_Stream_LE+0x52>
    15ca:	52 c0       	rjmp	.+164    	; 0x1670 <Endpoint_Write_Control_Stream_LE+0xf6>
    15cc:	a0 d1       	rcall	.+832    	; 0x190e <Endpoint_IsSETUPReceived>
    15ce:	81 11       	cpse	r24, r1
    15d0:	51 c0       	rjmp	.+162    	; 0x1674 <Endpoint_Write_Control_Stream_LE+0xfa>
    15d2:	84 d1       	rcall	.+776    	; 0x18dc <Endpoint_IsOUTReceived>
    15d4:	81 11       	cpse	r24, r1
    15d6:	45 c0       	rjmp	.+138    	; 0x1662 <Endpoint_Write_Control_Stream_LE+0xe8>
    15d8:	75 d1       	rcall	.+746    	; 0x18c4 <Endpoint_IsINReady>
    15da:	88 23       	and	r24, r24
    15dc:	99 f1       	breq	.+102    	; 0x1644 <Endpoint_Write_Control_Stream_LE+0xca>
    15de:	80 91 2b 26 	lds	r24, 0x262B
    15e2:	88 23       	and	r24, r24
    15e4:	74 f4       	brge	.+28     	; 0x1602 <Endpoint_Write_Control_Stream_LE+0x88>
    15e6:	e0 91 27 26 	lds	r30, 0x2627
    15ea:	f0 91 28 26 	lds	r31, 0x2628
    15ee:	ef 5b       	subi	r30, 0xBF	; 191
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	00 81       	ld	r16, Z
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	20 97       	sbiw	r28, 0x00	; 0
    15f8:	f1 f0       	breq	.+60     	; 0x1636 <Endpoint_Write_Control_Stream_LE+0xbc>
    15fa:	08 30       	cpi	r16, 0x08	; 8
    15fc:	11 05       	cpc	r17, r1
    15fe:	78 f0       	brcs	.+30     	; 0x161e <Endpoint_Write_Control_Stream_LE+0xa4>
    1600:	1a c0       	rjmp	.+52     	; 0x1636 <Endpoint_Write_Control_Stream_LE+0xbc>
    1602:	80 91 27 26 	lds	r24, 0x2627
    1606:	90 91 28 26 	lds	r25, 0x2628
    160a:	fc 01       	movw	r30, r24
    160c:	e0 5c       	subi	r30, 0xC0	; 192
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	00 81       	ld	r16, Z
    1612:	31 96       	adiw	r30, 0x01	; 1
    1614:	80 81       	ld	r24, Z
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	08 1b       	sub	r16, r24
    161a:	11 09       	sbc	r17, r1
    161c:	ec cf       	rjmp	.-40     	; 0x15f6 <Endpoint_Write_Control_Stream_LE+0x7c>
    161e:	f7 01       	movw	r30, r14
    1620:	81 91       	ld	r24, Z+
    1622:	7f 01       	movw	r14, r30
    1624:	ff d0       	rcall	.+510    	; 0x1824 <Endpoint_Write_8>
    1626:	21 97       	sbiw	r28, 0x01	; 1
    1628:	0f 5f       	subi	r16, 0xFF	; 255
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	20 97       	sbiw	r28, 0x00	; 0
    162e:	19 f0       	breq	.+6      	; 0x1636 <Endpoint_Write_Control_Stream_LE+0xbc>
    1630:	08 30       	cpi	r16, 0x08	; 8
    1632:	11 05       	cpc	r17, r1
    1634:	a1 f7       	brne	.-24     	; 0x161e <Endpoint_Write_Control_Stream_LE+0xa4>
    1636:	dd 24       	eor	r13, r13
    1638:	d3 94       	inc	r13
    163a:	08 30       	cpi	r16, 0x08	; 8
    163c:	11 05       	cpc	r17, r1
    163e:	09 f0       	breq	.+2      	; 0x1642 <Endpoint_Write_Control_Stream_LE+0xc8>
    1640:	d1 2c       	mov	r13, r1
    1642:	b8 d0       	rcall	.+368    	; 0x17b4 <Endpoint_ClearIN>
    1644:	20 97       	sbiw	r28, 0x00	; 0
    1646:	09 f0       	breq	.+2      	; 0x164a <Endpoint_Write_Control_Stream_LE+0xd0>
    1648:	b9 cf       	rjmp	.-142    	; 0x15bc <Endpoint_Write_Control_Stream_LE+0x42>
    164a:	d1 10       	cpse	r13, r1
    164c:	b7 cf       	rjmp	.-146    	; 0x15bc <Endpoint_Write_Control_Stream_LE+0x42>
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <Endpoint_Write_Control_Stream_LE+0xe8>
    1650:	80 91 1e 26 	lds	r24, 0x261E
    1654:	88 23       	and	r24, r24
    1656:	81 f0       	breq	.+32     	; 0x1678 <Endpoint_Write_Control_Stream_LE+0xfe>
    1658:	85 30       	cpi	r24, 0x05	; 5
    165a:	81 f0       	breq	.+32     	; 0x167c <Endpoint_Write_Control_Stream_LE+0x102>
    165c:	58 d1       	rcall	.+688    	; 0x190e <Endpoint_IsSETUPReceived>
    165e:	81 11       	cpse	r24, r1
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <Endpoint_Write_Control_Stream_LE+0x106>
    1662:	3c d1       	rcall	.+632    	; 0x18dc <Endpoint_IsOUTReceived>
    1664:	88 23       	and	r24, r24
    1666:	a1 f3       	breq	.-24     	; 0x1650 <Endpoint_Write_Control_Stream_LE+0xd6>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <Endpoint_Write_Control_Stream_LE+0x108>
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <Endpoint_Write_Control_Stream_LE+0x108>
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	07 c0       	rjmp	.+14     	; 0x1682 <Endpoint_Write_Control_Stream_LE+0x108>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <Endpoint_Write_Control_Stream_LE+0x108>
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <Endpoint_Write_Control_Stream_LE+0x108>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <Endpoint_Write_Control_Stream_LE+0x108>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	df 90       	pop	r13
    1690:	cf 90       	pop	r12
    1692:	08 95       	ret

00001694 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	e8 2e       	mov	r14, r24
    16a4:	f9 2e       	mov	r15, r25
    16a6:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    16a8:	80 91 2b 26 	lds	r24, 0x262B
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	ca d0       	rcall	.+404    	; 0x1844 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    16b0:	c0 91 25 26 	lds	r28, 0x2625
    16b4:	d0 91 26 26 	lds	r29, 0x2626
    16b8:	c0 17       	cp	r28, r16
    16ba:	d1 07       	cpc	r29, r17
    16bc:	38 f0       	brcs	.+14     	; 0x16cc <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    16be:	01 15       	cp	r16, r1
    16c0:	11 05       	cpc	r17, r1
    16c2:	19 f4       	brne	.+6      	; 0x16ca <Endpoint_Write_Control_PStream_LE+0x36>
	  Endpoint_ClearIN();
    16c4:	77 d0       	rcall	.+238    	; 0x17b4 <Endpoint_ClearIN>
    16c6:	e8 01       	movw	r28, r16
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <Endpoint_Write_Control_PStream_LE+0x38>
    16ca:	e8 01       	movw	r28, r16
    16cc:	0e 2d       	mov	r16, r14
    16ce:	1f 2d       	mov	r17, r15
    16d0:	d1 2c       	mov	r13, r1
    16d2:	49 c0       	rjmp	.+146    	; 0x1766 <Endpoint_Write_Control_PStream_LE+0xd2>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16d4:	80 91 1e 26 	lds	r24, 0x261E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16d8:	88 23       	and	r24, r24
    16da:	09 f4       	brne	.+2      	; 0x16de <Endpoint_Write_Control_PStream_LE+0x4a>
    16dc:	58 c0       	rjmp	.+176    	; 0x178e <Endpoint_Write_Control_PStream_LE+0xfa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16de:	85 30       	cpi	r24, 0x05	; 5
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <Endpoint_Write_Control_PStream_LE+0x50>
    16e2:	57 c0       	rjmp	.+174    	; 0x1792 <Endpoint_Write_Control_PStream_LE+0xfe>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16e4:	14 d1       	rcall	.+552    	; 0x190e <Endpoint_IsSETUPReceived>
    16e6:	81 11       	cpse	r24, r1
    16e8:	56 c0       	rjmp	.+172    	; 0x1796 <Endpoint_Write_Control_PStream_LE+0x102>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    16ea:	f8 d0       	rcall	.+496    	; 0x18dc <Endpoint_IsOUTReceived>
    16ec:	81 11       	cpse	r24, r1
    16ee:	4a c0       	rjmp	.+148    	; 0x1784 <Endpoint_Write_Control_PStream_LE+0xf0>
		  break;

		if (Endpoint_IsINReady())
    16f0:	e9 d0       	rcall	.+466    	; 0x18c4 <Endpoint_IsINReady>
    16f2:	88 23       	and	r24, r24
    16f4:	c1 f1       	breq	.+112    	; 0x1766 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    16f6:	80 91 2b 26 	lds	r24, 0x262B
    16fa:	88 23       	and	r24, r24
    16fc:	7c f4       	brge	.+30     	; 0x171c <Endpoint_Write_Control_PStream_LE+0x88>
				  return USB_Endpoint_SelectedFIFO->Position;
    16fe:	e0 91 27 26 	lds	r30, 0x2627
    1702:	f0 91 28 26 	lds	r31, 0x2628
    1706:	ef 5b       	subi	r30, 0xBF	; 191
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	e0 80       	ld	r14, Z
    170c:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    170e:	20 97       	sbiw	r28, 0x00	; 0
    1710:	11 f1       	breq	.+68     	; 0x1756 <Endpoint_Write_Control_PStream_LE+0xc2>
    1712:	88 e0       	ldi	r24, 0x08	; 8
    1714:	e8 16       	cp	r14, r24
    1716:	f1 04       	cpc	r15, r1
    1718:	78 f0       	brcs	.+30     	; 0x1738 <Endpoint_Write_Control_PStream_LE+0xa4>
    171a:	1d c0       	rjmp	.+58     	; 0x1756 <Endpoint_Write_Control_PStream_LE+0xc2>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    171c:	80 91 27 26 	lds	r24, 0x2627
    1720:	90 91 28 26 	lds	r25, 0x2628
    1724:	fc 01       	movw	r30, r24
    1726:	e0 5c       	subi	r30, 0xC0	; 192
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	e0 80       	ld	r14, Z
    172c:	31 96       	adiw	r30, 0x01	; 1
    172e:	80 81       	ld	r24, Z
    1730:	f1 2c       	mov	r15, r1
    1732:	e8 1a       	sub	r14, r24
    1734:	f1 08       	sbc	r15, r1
    1736:	eb cf       	rjmp	.-42     	; 0x170e <Endpoint_Write_Control_PStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1738:	f8 01       	movw	r30, r16
    173a:	84 91       	lpm	r24, Z
    173c:	73 d0       	rcall	.+230    	; 0x1824 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    173e:	0f 5f       	subi	r16, 0xFF	; 255
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1742:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1744:	ff ef       	ldi	r31, 0xFF	; 255
    1746:	ef 1a       	sub	r14, r31
    1748:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    174a:	20 97       	sbiw	r28, 0x00	; 0
    174c:	21 f0       	breq	.+8      	; 0x1756 <Endpoint_Write_Control_PStream_LE+0xc2>
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	e8 16       	cp	r14, r24
    1752:	f1 04       	cpc	r15, r1
    1754:	89 f7       	brne	.-30     	; 0x1738 <Endpoint_Write_Control_PStream_LE+0xa4>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1756:	dd 24       	eor	r13, r13
    1758:	d3 94       	inc	r13
    175a:	e8 e0       	ldi	r30, 0x08	; 8
    175c:	ee 16       	cp	r14, r30
    175e:	f1 04       	cpc	r15, r1
    1760:	09 f0       	breq	.+2      	; 0x1764 <Endpoint_Write_Control_PStream_LE+0xd0>
    1762:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1764:	27 d0       	rcall	.+78     	; 0x17b4 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1766:	20 97       	sbiw	r28, 0x00	; 0
    1768:	09 f0       	breq	.+2      	; 0x176c <Endpoint_Write_Control_PStream_LE+0xd8>
    176a:	b4 cf       	rjmp	.-152    	; 0x16d4 <Endpoint_Write_Control_PStream_LE+0x40>
    176c:	d1 10       	cpse	r13, r1
    176e:	b2 cf       	rjmp	.-156    	; 0x16d4 <Endpoint_Write_Control_PStream_LE+0x40>
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <Endpoint_Write_Control_PStream_LE+0xf0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1772:	80 91 1e 26 	lds	r24, 0x261E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1776:	88 23       	and	r24, r24
    1778:	81 f0       	breq	.+32     	; 0x179a <Endpoint_Write_Control_PStream_LE+0x106>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    177a:	85 30       	cpi	r24, 0x05	; 5
    177c:	81 f0       	breq	.+32     	; 0x179e <Endpoint_Write_Control_PStream_LE+0x10a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    177e:	c7 d0       	rcall	.+398    	; 0x190e <Endpoint_IsSETUPReceived>
    1780:	81 11       	cpse	r24, r1
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <Endpoint_Write_Control_PStream_LE+0x10e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1784:	ab d0       	rcall	.+342    	; 0x18dc <Endpoint_IsOUTReceived>
    1786:	88 23       	and	r24, r24
    1788:	a1 f3       	breq	.-24     	; 0x1772 <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <Endpoint_Write_Control_PStream_LE+0x110>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <Endpoint_Write_Control_PStream_LE+0x110>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <Endpoint_Write_Control_PStream_LE+0x110>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <Endpoint_Write_Control_PStream_LE+0x110>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <Endpoint_Write_Control_PStream_LE+0x110>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <Endpoint_Write_Control_PStream_LE+0x110>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	08 95       	ret

000017b4 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    17b4:	e0 91 29 26 	lds	r30, 0x2629
    17b8:	f0 91 2a 26 	lds	r31, 0x262A
    17bc:	a0 91 27 26 	lds	r26, 0x2627
    17c0:	b0 91 28 26 	lds	r27, 0x2628
    17c4:	af 5b       	subi	r26, 0xBF	; 191
    17c6:	bf 4f       	sbci	r27, 0xFF	; 255
    17c8:	8c 91       	ld	r24, X
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	82 83       	std	Z+2, r24	; 0x02
    17ce:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    17d0:	80 81       	ld	r24, Z
    17d2:	8d 79       	andi	r24, 0x9D	; 157
    17d4:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    17d6:	e0 91 27 26 	lds	r30, 0x2627
    17da:	f0 91 28 26 	lds	r31, 0x2628
    17de:	ef 5b       	subi	r30, 0xBF	; 191
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	10 82       	st	Z, r1
    17e4:	08 95       	ret

000017e6 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    17e6:	e0 91 29 26 	lds	r30, 0x2629
    17ea:	f0 91 2a 26 	lds	r31, 0x262A
    17ee:	80 81       	ld	r24, Z
    17f0:	8d 79       	andi	r24, 0x9D	; 157
    17f2:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    17f4:	e0 91 27 26 	lds	r30, 0x2627
    17f8:	f0 91 28 26 	lds	r31, 0x2628
    17fc:	ef 5b       	subi	r30, 0xBF	; 191
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	10 82       	st	Z, r1
    1802:	08 95       	ret

00001804 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1804:	80 91 27 26 	lds	r24, 0x2627
    1808:	90 91 28 26 	lds	r25, 0x2628
    180c:	fc 01       	movw	r30, r24
    180e:	ef 5b       	subi	r30, 0xBF	; 191
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	20 81       	ld	r18, Z
    1814:	31 e0       	ldi	r19, 0x01	; 1
    1816:	32 0f       	add	r19, r18
    1818:	30 83       	st	Z, r19
    181a:	fc 01       	movw	r30, r24
    181c:	e2 0f       	add	r30, r18
    181e:	f1 1d       	adc	r31, r1
    1820:	80 81       	ld	r24, Z
}
    1822:	08 95       	ret

00001824 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1824:	20 91 27 26 	lds	r18, 0x2627
    1828:	30 91 28 26 	lds	r19, 0x2628
    182c:	f9 01       	movw	r30, r18
    182e:	ef 5b       	subi	r30, 0xBF	; 191
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	90 81       	ld	r25, Z
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	49 0f       	add	r20, r25
    1838:	40 83       	st	Z, r20
    183a:	f9 01       	movw	r30, r18
    183c:	e9 0f       	add	r30, r25
    183e:	f1 1d       	adc	r31, r1
    1840:	80 83       	st	Z, r24
    1842:	08 95       	ret

00001844 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1844:	80 93 2b 26 	sts	0x262B, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1848:	28 2f       	mov	r18, r24
    184a:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    184c:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    184e:	40 91 c6 04 	lds	r20, 0x04C6
    1852:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1856:	88 23       	and	r24, r24
    1858:	e4 f4       	brge	.+56     	; 0x1892 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    185a:	64 e8       	ldi	r22, 0x84	; 132
    185c:	62 9f       	mul	r22, r18
    185e:	c0 01       	movw	r24, r0
    1860:	63 9f       	mul	r22, r19
    1862:	90 0d       	add	r25, r0
    1864:	11 24       	eor	r1, r1
    1866:	82 59       	subi	r24, 0x92	; 146
    1868:	99 4d       	sbci	r25, 0xD9	; 217
    186a:	80 93 27 26 	sts	0x2627, r24
    186e:	90 93 28 26 	sts	0x2628, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    1872:	c9 01       	movw	r24, r18
    1874:	82 95       	swap	r24
    1876:	92 95       	swap	r25
    1878:	90 7f       	andi	r25, 0xF0	; 240
    187a:	98 27       	eor	r25, r24
    187c:	80 7f       	andi	r24, 0xF0	; 240
    187e:	98 27       	eor	r25, r24
    1880:	08 96       	adiw	r24, 0x08	; 8
    1882:	9a 01       	movw	r18, r20
    1884:	28 0f       	add	r18, r24
    1886:	39 1f       	adc	r19, r25
    1888:	20 93 29 26 	sts	0x2629, r18
    188c:	30 93 2a 26 	sts	0x262A, r19
    1890:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1892:	64 e8       	ldi	r22, 0x84	; 132
    1894:	62 9f       	mul	r22, r18
    1896:	c0 01       	movw	r24, r0
    1898:	63 9f       	mul	r22, r19
    189a:	90 0d       	add	r25, r0
    189c:	11 24       	eor	r1, r1
    189e:	84 5d       	subi	r24, 0xD4	; 212
    18a0:	99 4d       	sbci	r25, 0xD9	; 217
    18a2:	80 93 27 26 	sts	0x2627, r24
    18a6:	90 93 28 26 	sts	0x2628, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    18aa:	22 95       	swap	r18
    18ac:	32 95       	swap	r19
    18ae:	30 7f       	andi	r19, 0xF0	; 240
    18b0:	32 27       	eor	r19, r18
    18b2:	20 7f       	andi	r18, 0xF0	; 240
    18b4:	32 27       	eor	r19, r18
    18b6:	24 0f       	add	r18, r20
    18b8:	35 1f       	adc	r19, r21
    18ba:	20 93 29 26 	sts	0x2629, r18
    18be:	30 93 2a 26 	sts	0x262A, r19
    18c2:	08 95       	ret

000018c4 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    18c4:	80 91 2b 26 	lds	r24, 0x262B
    18c8:	80 68       	ori	r24, 0x80	; 128
    18ca:	bc df       	rcall	.-136    	; 0x1844 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    18cc:	e0 91 29 26 	lds	r30, 0x2629
    18d0:	f0 91 2a 26 	lds	r31, 0x262A
    18d4:	80 81       	ld	r24, Z
}
    18d6:	86 95       	lsr	r24
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	08 95       	ret

000018dc <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    18dc:	80 91 2b 26 	lds	r24, 0x262B
    18e0:	8f 77       	andi	r24, 0x7F	; 127
    18e2:	b0 df       	rcall	.-160    	; 0x1844 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    18e4:	e0 91 29 26 	lds	r30, 0x2629
    18e8:	f0 91 2a 26 	lds	r31, 0x262A
    18ec:	80 81       	ld	r24, Z
    18ee:	85 ff       	sbrs	r24, 5
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    18f2:	80 91 27 26 	lds	r24, 0x2627
    18f6:	90 91 28 26 	lds	r25, 0x2628
    18fa:	22 81       	ldd	r18, Z+2	; 0x02
    18fc:	33 81       	ldd	r19, Z+3	; 0x03
    18fe:	fc 01       	movw	r30, r24
    1900:	e0 5c       	subi	r30, 0xC0	; 192
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	20 83       	st	Z, r18
		return true;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	08 95       	ret
	}

	return false;
    190a:	80 e0       	ldi	r24, 0x00	; 0
}
    190c:	08 95       	ret

0000190e <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    190e:	80 91 2b 26 	lds	r24, 0x262B
    1912:	8f 77       	andi	r24, 0x7F	; 127
    1914:	97 df       	rcall	.-210    	; 0x1844 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1916:	e0 91 29 26 	lds	r30, 0x2629
    191a:	f0 91 2a 26 	lds	r31, 0x262A
    191e:	80 81       	ld	r24, Z
    1920:	84 ff       	sbrs	r24, 4
    1922:	0c c0       	rjmp	.+24     	; 0x193c <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1924:	80 91 27 26 	lds	r24, 0x2627
    1928:	90 91 28 26 	lds	r25, 0x2628
    192c:	22 81       	ldd	r18, Z+2	; 0x02
    192e:	33 81       	ldd	r19, Z+3	; 0x03
    1930:	fc 01       	movw	r30, r24
    1932:	e0 5c       	subi	r30, 0xC0	; 192
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	20 83       	st	Z, r18
		return true;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	08 95       	ret
	}

	return false;
    193c:	80 e0       	ldi	r24, 0x00	; 0
}
    193e:	08 95       	ret

00001940 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1940:	80 91 2b 26 	lds	r24, 0x262B
    1944:	8f 77       	andi	r24, 0x7F	; 127
    1946:	7e df       	rcall	.-260    	; 0x1844 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1948:	e0 91 29 26 	lds	r30, 0x2629
    194c:	f0 91 2a 26 	lds	r31, 0x262A
    1950:	80 81       	ld	r24, Z
    1952:	8d 78       	andi	r24, 0x8D	; 141
    1954:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1956:	e0 91 29 26 	lds	r30, 0x2629
    195a:	f0 91 2a 26 	lds	r31, 0x262A
    195e:	80 81       	ld	r24, Z
    1960:	81 60       	ori	r24, 0x01	; 1
    1962:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1964:	e0 91 27 26 	lds	r30, 0x2627
    1968:	f0 91 28 26 	lds	r31, 0x2628
    196c:	ef 5b       	subi	r30, 0xBF	; 191
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1972:	80 91 2b 26 	lds	r24, 0x262B
    1976:	80 68       	ori	r24, 0x80	; 128
    1978:	65 df       	rcall	.-310    	; 0x1844 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    197a:	e0 91 29 26 	lds	r30, 0x2629
    197e:	f0 91 2a 26 	lds	r31, 0x262A
    1982:	80 81       	ld	r24, Z
    1984:	81 60       	ori	r24, 0x01	; 1
    1986:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1988:	e0 91 27 26 	lds	r30, 0x2627
    198c:	f0 91 28 26 	lds	r31, 0x2628
    1990:	ef 5b       	subi	r30, 0xBF	; 191
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	10 82       	st	Z, r1
    1996:	08 95       	ret

00001998 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1998:	e0 91 29 26 	lds	r30, 0x2629
    199c:	f0 91 2a 26 	lds	r31, 0x262A
    19a0:	81 81       	ldd	r24, Z+1	; 0x01
    19a2:	84 60       	ori	r24, 0x04	; 4
    19a4:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    19a6:	e0 91 29 26 	lds	r30, 0x2629
    19aa:	f0 91 2a 26 	lds	r31, 0x262A
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	80 7c       	andi	r24, 0xC0	; 192
    19b2:	80 34       	cpi	r24, 0x40	; 64
    19b4:	59 f4       	brne	.+22     	; 0x19cc <Endpoint_StallTransaction+0x34>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    19b6:	80 91 2b 26 	lds	r24, 0x262B
    19ba:	80 58       	subi	r24, 0x80	; 128
    19bc:	43 df       	rcall	.-378    	; 0x1844 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    19be:	e0 91 29 26 	lds	r30, 0x2629
    19c2:	f0 91 2a 26 	lds	r31, 0x262A
    19c6:	81 81       	ldd	r24, Z+1	; 0x01
    19c8:	84 60       	ori	r24, 0x04	; 4
    19ca:	81 83       	std	Z+1, r24	; 0x01
    19cc:	08 95       	ret

000019ce <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	d8 2f       	mov	r29, r24
    19d6:	16 2f       	mov	r17, r22
    19d8:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    19da:	34 df       	rcall	.-408    	; 0x1844 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    19dc:	e0 91 29 26 	lds	r30, 0x2629
    19e0:	f0 91 2a 26 	lds	r31, 0x262A
    19e4:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    19e6:	e0 91 29 26 	lds	r30, 0x2629
    19ea:	f0 91 2a 26 	lds	r31, 0x262A
    19ee:	dd 23       	and	r29, r29
    19f0:	a4 f0       	brlt	.+40     	; 0x1a1a <Endpoint_ConfigureEndpoint_PRV+0x4c>
    19f2:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    19f4:	e0 91 29 26 	lds	r30, 0x2629
    19f8:	f0 91 2a 26 	lds	r31, 0x262A
    19fc:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    19fe:	e0 91 29 26 	lds	r30, 0x2629
    1a02:	f0 91 2a 26 	lds	r31, 0x262A
    1a06:	12 82       	std	Z+2, r1	; 0x02
    1a08:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1a0a:	80 91 27 26 	lds	r24, 0x2627
    1a0e:	90 91 28 26 	lds	r25, 0x2628
    1a12:	84 83       	std	Z+4, r24	; 0x04
    1a14:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <Endpoint_ConfigureEndpoint_PRV+0x74>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1a1e:	e0 91 29 26 	lds	r30, 0x2629
    1a22:	f0 91 2a 26 	lds	r31, 0x262A
    1a26:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1a28:	e0 91 29 26 	lds	r30, 0x2629
    1a2c:	f0 91 2a 26 	lds	r31, 0x262A
    1a30:	12 82       	std	Z+2, r1	; 0x02
    1a32:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1a34:	80 91 27 26 	lds	r24, 0x2627
    1a38:	90 91 28 26 	lds	r25, 0x2628
    1a3c:	84 83       	std	Z+4, r24	; 0x04
    1a3e:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1a40:	4c 2f       	mov	r20, r28
    1a42:	fc 01       	movw	r30, r24
    1a44:	e0 5c       	subi	r30, 0xC0	; 192
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1a4a:	31 96       	adiw	r30, 0x01	; 1
    1a4c:	10 82       	st	Z, r1

	return true;
}
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	08 95       	ret

00001a58 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1a58:	af 92       	push	r10
    1a5a:	bf 92       	push	r11
    1a5c:	cf 92       	push	r12
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    1a6c:	66 23       	and	r22, r22
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <Endpoint_ConfigureEndpointTable+0x1a>
    1a70:	55 c0       	rjmp	.+170    	; 0x1b1c <Endpoint_ConfigureEndpointTable+0xc4>
    1a72:	a6 2e       	mov	r10, r22
    1a74:	7c 01       	movw	r14, r24
    1a76:	8c 01       	movw	r16, r24
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	e8 0e       	add	r14, r24
    1a7c:	f1 1c       	adc	r15, r1
    1a7e:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    1a80:	f8 01       	movw	r30, r16
    1a82:	c0 80       	ld	r12, Z
    1a84:	cc 20       	and	r12, r12
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <Endpoint_ConfigureEndpointTable+0x32>
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <Endpoint_ConfigureEndpointTable+0xb0>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1a8a:	c1 81       	ldd	r28, Z+1	; 0x01
    1a8c:	d2 81       	ldd	r29, Z+2	; 0x02
    1a8e:	f7 01       	movw	r30, r14
    1a90:	31 97       	sbiw	r30, 0x01	; 1
    1a92:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    1a94:	f7 01       	movw	r30, r14
    1a96:	90 81       	ld	r25, Z
    1a98:	92 30       	cpi	r25, 0x02	; 2
    1a9a:	10 f4       	brcc	.+4      	; 0x1aa0 <Endpoint_ConfigureEndpointTable+0x48>
    1a9c:	48 e0       	ldi	r20, 0x08	; 8
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <Endpoint_ConfigureEndpointTable+0x4a>
    1aa0:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1aa2:	c9 30       	cpi	r28, 0x09	; 9
    1aa4:	d1 05       	cpc	r29, r1
    1aa6:	50 f0       	brcs	.+20     	; 0x1abc <Endpoint_ConfigureEndpointTable+0x64>
    1aa8:	28 e0       	ldi	r18, 0x08	; 8
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    1aae:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    1ab0:	22 0f       	add	r18, r18
    1ab2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ab4:	2c 17       	cp	r18, r28
    1ab6:	3d 07       	cpc	r19, r29
    1ab8:	d0 f3       	brcs	.-12     	; 0x1aae <Endpoint_ConfigureEndpointTable+0x56>
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1abc:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    1abe:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    1ac0:	2c 2d       	mov	r18, r12
    1ac2:	2f 70       	andi	r18, 0x0F	; 15
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	25 30       	cpi	r18, 0x05	; 5
    1ac8:	31 05       	cpc	r19, r1
    1aca:	54 f5       	brge	.+84     	; 0x1b20 <Endpoint_ConfigureEndpointTable+0xc8>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    1acc:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    1ace:	c1 34       	cpi	r28, 0x41	; 65
    1ad0:	d1 05       	cpc	r29, r1
    1ad2:	40 f5       	brcc	.+80     	; 0x1b24 <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				switch (Type)
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <Endpoint_ConfigureEndpointTable+0x86>
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	21 f0       	breq	.+8      	; 0x1ae4 <Endpoint_ConfigureEndpointTable+0x8c>
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    1ade:	90 64       	ori	r25, 0x40	; 64
    1ae0:	d9 2e       	mov	r13, r25
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    1ae4:	90 6c       	ori	r25, 0xC0	; 192
    1ae6:	d9 2e       	mov	r13, r25
    1ae8:	09 c0       	rjmp	.+18     	; 0x1afc <Endpoint_ConfigureEndpointTable+0xa4>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    1aea:	90 68       	ori	r25, 0x80	; 128
    1aec:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    1aee:	81 11       	cpse	r24, r1
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <Endpoint_ConfigureEndpointTable+0xa4>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1af2:	4c 2f       	mov	r20, r28
    1af4:	6d 2d       	mov	r22, r13
    1af6:	80 e8       	ldi	r24, 0x80	; 128
    1af8:	8c 0d       	add	r24, r12
    1afa:	69 df       	rcall	.-302    	; 0x19ce <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1afc:	4c 2f       	mov	r20, r28
    1afe:	6d 2d       	mov	r22, r13
    1b00:	8c 2d       	mov	r24, r12
    1b02:	65 df       	rcall	.-310    	; 0x19ce <Endpoint_ConfigureEndpoint_PRV>
    1b04:	88 23       	and	r24, r24
    1b06:	79 f0       	breq	.+30     	; 0x1b26 <Endpoint_ConfigureEndpointTable+0xce>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1b08:	b3 94       	inc	r11
    1b0a:	0b 5f       	subi	r16, 0xFB	; 251
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	f5 e0       	ldi	r31, 0x05	; 5
    1b10:	ef 0e       	add	r14, r31
    1b12:	f1 1c       	adc	r15, r1
    1b14:	ba 10       	cpse	r11, r10
    1b16:	b4 cf       	rjmp	.-152    	; 0x1a80 <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <Endpoint_ConfigureEndpointTable+0xce>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <Endpoint_ConfigureEndpointTable+0xce>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <Endpoint_ConfigureEndpointTable+0xce>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	df 90       	pop	r13
    1b34:	cf 90       	pop	r12
    1b36:	bf 90       	pop	r11
    1b38:	af 90       	pop	r10
    1b3a:	08 95       	ret

00001b3c <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1b40:	a0 ec       	ldi	r26, 0xC0	; 192
    1b42:	b4 e0       	ldi	r27, 0x04	; 4
    1b44:	16 96       	adiw	r26, 0x06	; 6
    1b46:	ed 91       	ld	r30, X+
    1b48:	fc 91       	ld	r31, X
    1b4a:	17 97       	sbiw	r26, 0x07	; 7
    1b4c:	c9 01       	movw	r24, r18
    1b4e:	82 95       	swap	r24
    1b50:	92 95       	swap	r25
    1b52:	90 7f       	andi	r25, 0xF0	; 240
    1b54:	98 27       	eor	r25, r24
    1b56:	80 7f       	andi	r24, 0xF0	; 240
    1b58:	98 27       	eor	r25, r24
    1b5a:	e8 0f       	add	r30, r24
    1b5c:	f9 1f       	adc	r31, r25
    1b5e:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1b60:	16 96       	adiw	r26, 0x06	; 6
    1b62:	4d 91       	ld	r20, X+
    1b64:	5c 91       	ld	r21, X
    1b66:	17 97       	sbiw	r26, 0x07	; 7
    1b68:	fa 01       	movw	r30, r20
    1b6a:	e8 0f       	add	r30, r24
    1b6c:	f9 1f       	adc	r31, r25
    1b6e:	11 82       	std	Z+1, r1	; 0x01
    1b70:	2f 5f       	subi	r18, 0xFF	; 255
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b74:	25 30       	cpi	r18, 0x05	; 5
    1b76:	31 05       	cpc	r19, r1
    1b78:	29 f7       	brne	.-54     	; 0x1b44 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    1b7a:	08 95       	ret

00001b7c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b7c:	80 91 1f 26 	lds	r24, 0x261F
    1b80:	88 23       	and	r24, r24
    1b82:	74 f4       	brge	.+28     	; 0x1ba0 <Endpoint_ClearStatusStage+0x24>
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b86:	80 91 1e 26 	lds	r24, 0x261E
    1b8a:	88 23       	and	r24, r24
    1b8c:	69 f0       	breq	.+26     	; 0x1ba8 <Endpoint_ClearStatusStage+0x2c>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b8e:	a6 de       	rcall	.-692    	; 0x18dc <Endpoint_IsOUTReceived>
    1b90:	88 23       	and	r24, r24
    1b92:	c9 f3       	breq	.-14     	; 0x1b86 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    1b94:	28 ce       	rjmp	.-944    	; 0x17e6 <Endpoint_ClearOUT>
    1b96:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b98:	80 91 1e 26 	lds	r24, 0x261E
    1b9c:	88 23       	and	r24, r24
    1b9e:	21 f0       	breq	.+8      	; 0x1ba8 <Endpoint_ClearStatusStage+0x2c>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1ba0:	91 de       	rcall	.-734    	; 0x18c4 <Endpoint_IsINReady>
    1ba2:	88 23       	and	r24, r24
    1ba4:	c9 f3       	breq	.-14     	; 0x1b98 <Endpoint_ClearStatusStage+0x1c>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    1ba6:	06 ce       	rjmp	.-1012   	; 0x17b4 <Endpoint_ClearIN>
    1ba8:	08 95       	ret

00001baa <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    1bb4:	e0 91 c6 04 	lds	r30, 0x04C6
    1bb8:	f0 91 c7 04 	lds	r31, 0x04C7
    1bbc:	e0 5b       	subi	r30, 0xB0	; 176
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	c0 81       	ld	r28, Z
    1bc2:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1bc4:	ff 24       	eor	r15, r15
    1bc6:	f3 94       	inc	r15
    1bc8:	00 ec       	ldi	r16, 0xC0	; 192
    1bca:	14 e0       	ldi	r17, 0x04	; 4
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <Endpoint_WaitUntilReady+0x28>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1bce:	f2 2e       	mov	r15, r18
    1bd0:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    1bd2:	80 91 2b 26 	lds	r24, 0x262B

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1bd6:	88 23       	and	r24, r24
    1bd8:	24 f4       	brge	.+8      	; 0x1be2 <Endpoint_WaitUntilReady+0x38>
		{
			if (Endpoint_IsINReady())
    1bda:	74 de       	rcall	.-792    	; 0x18c4 <Endpoint_IsINReady>
    1bdc:	88 23       	and	r24, r24
    1bde:	21 f0       	breq	.+8      	; 0x1be8 <Endpoint_WaitUntilReady+0x3e>
    1be0:	22 c0       	rjmp	.+68     	; 0x1c26 <Endpoint_WaitUntilReady+0x7c>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1be2:	7c de       	rcall	.-776    	; 0x18dc <Endpoint_IsOUTReceived>
    1be4:	81 11       	cpse	r24, r1
    1be6:	21 c0       	rjmp	.+66     	; 0x1c2a <Endpoint_WaitUntilReady+0x80>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1be8:	80 91 1e 26 	lds	r24, 0x261E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bec:	88 23       	and	r24, r24
    1bee:	f9 f0       	breq	.+62     	; 0x1c2e <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bf0:	85 30       	cpi	r24, 0x05	; 5
    1bf2:	f9 f0       	breq	.+62     	; 0x1c32 <Endpoint_WaitUntilReady+0x88>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    1bf4:	e0 91 29 26 	lds	r30, 0x2629
    1bf8:	f0 91 2a 26 	lds	r31, 0x262A
    1bfc:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1bfe:	82 fd       	sbrc	r24, 2
    1c00:	1a c0       	rjmp	.+52     	; 0x1c36 <Endpoint_WaitUntilReady+0x8c>
    1c02:	d8 01       	movw	r26, r16
    1c04:	16 96       	adiw	r26, 0x06	; 6
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	17 97       	sbiw	r26, 0x07	; 7
    1c0c:	e0 5b       	subi	r30, 0xB0	; 176
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c14:	c8 17       	cp	r28, r24
    1c16:	d9 07       	cpc	r29, r25
    1c18:	d9 f2       	breq	.-74     	; 0x1bd0 <Endpoint_WaitUntilReady+0x26>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c1a:	2f ef       	ldi	r18, 0xFF	; 255
    1c1c:	2f 0d       	add	r18, r15
    1c1e:	f1 10       	cpse	r15, r1
    1c20:	d6 cf       	rjmp	.-84     	; 0x1bce <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <Endpoint_WaitUntilReady+0x8e>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <Endpoint_WaitUntilReady+0x8e>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <Endpoint_WaitUntilReady+0x8e>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <Endpoint_WaitUntilReady+0x8e>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <Endpoint_WaitUntilReady+0x8e>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c36:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	08 95       	ret

00001c44 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    1c48:	e0 e4       	ldi	r30, 0x40	; 64
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    1c4e:	84 81       	ldd	r24, Z+4	; 0x04
    1c50:	83 60       	ori	r24, 0x03	; 3
    1c52:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    1c54:	50 d0       	rcall	.+160    	; 0x1cf6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c56:	56 d0       	rcall	.+172    	; 0x1d04 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    1c58:	c0 ec       	ldi	r28, 0xC0	; 192
    1c5a:	d4 e0       	ldi	r29, 0x04	; 4
    1c5c:	88 81       	ld	r24, Y
    1c5e:	8f 77       	andi	r24, 0x7F	; 127
    1c60:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    1c62:	88 81       	ld	r24, Y
    1c64:	80 68       	ori	r24, 0x80	; 128
    1c66:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c68:	10 92 1e 26 	sts	0x261E, r1
	USB_Device_ConfigurationNumber  = 0;
    1c6c:	10 92 1a 26 	sts	0x261A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c70:	10 92 1c 26 	sts	0x261C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c74:	10 92 1b 26 	sts	0x261B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    1c78:	88 81       	ld	r24, Y
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1c7e:	48 e0       	ldi	r20, 0x08	; 8
    1c80:	68 e4       	ldi	r22, 0x48	; 72
    1c82:	80 e8       	ldi	r24, 0x80	; 128
    1c84:	a4 de       	rcall	.-696    	; 0x19ce <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1c86:	48 e0       	ldi	r20, 0x08	; 8
    1c88:	68 e4       	ldi	r22, 0x48	; 72
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	a0 de       	rcall	.-704    	; 0x19ce <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    1c8e:	88 85       	ldd	r24, Y+8	; 0x08
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	81 60       	ori	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    1ca4:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1ca6:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    1ca8:	c0 ec       	ldi	r28, 0xC0	; 192
    1caa:	d1 e0       	ldi	r29, 0x01	; 1
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    1cb0:	ea e1       	ldi	r30, 0x1A	; 26
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	e4 91       	lpm	r30, Z
    1cb6:	a0 ec       	ldi	r26, 0xC0	; 192
    1cb8:	b4 e0       	ldi	r27, 0x04	; 4
    1cba:	da 96       	adiw	r26, 0x3a	; 58
    1cbc:	ec 93       	st	X, r30
    1cbe:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    1cc0:	eb e1       	ldi	r30, 0x1B	; 27
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	e4 91       	lpm	r30, Z
    1cc6:	db 96       	adiw	r26, 0x3b	; 59
    1cc8:	ec 93       	st	X, r30
    1cca:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    1ccc:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    1cce:	81 ec       	ldi	r24, 0xC1	; 193
    1cd0:	98 e2       	ldi	r25, 0x28	; 40
    1cd2:	8e 7f       	andi	r24, 0xFE	; 254
    1cd4:	16 96       	adiw	r26, 0x06	; 6
    1cd6:	8d 93       	st	X+, r24
    1cd8:	9c 93       	st	X, r25
    1cda:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    1cdc:	84 e1       	ldi	r24, 0x14	; 20
    1cde:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	18 96       	adiw	r26, 0x08	; 8
    1ce4:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1ce6:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	80 93 1d 26 	sts	0x261D, r24

	USB_ResetInterface();
    1cee:	aa df       	rcall	.-172    	; 0x1c44 <USB_ResetInterface>
}
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	08 95       	ret

00001cf6 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    1cf6:	e0 ec       	ldi	r30, 0xC0	; 192
    1cf8:	f4 e0       	ldi	r31, 0x04	; 4
    1cfa:	80 85       	ldd	r24, Z+8	; 0x08
    1cfc:	83 70       	andi	r24, 0x03	; 3
    1cfe:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    1d00:	11 86       	std	Z+9, r1	; 0x09
    1d02:	08 95       	ret

00001d04 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    1d04:	e0 ec       	ldi	r30, 0xC0	; 192
    1d06:	f4 e0       	ldi	r31, 0x04	; 4
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    1d0c:	84 87       	std	Z+12, r24	; 0x0c
    1d0e:	08 95       	ret

00001d10 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	08 b6       	in	r0, 0x38	; 56
    1d1c:	0f 92       	push	r0
    1d1e:	18 be       	out	0x38, r1	; 56
    1d20:	09 b6       	in	r0, 0x39	; 57
    1d22:	0f 92       	push	r0
    1d24:	19 be       	out	0x39, r1	; 57
    1d26:	0b b6       	in	r0, 0x3b	; 59
    1d28:	0f 92       	push	r0
    1d2a:	1b be       	out	0x3b, r1	; 59
    1d2c:	2f 93       	push	r18
    1d2e:	3f 93       	push	r19
    1d30:	4f 93       	push	r20
    1d32:	5f 93       	push	r21
    1d34:	6f 93       	push	r22
    1d36:	7f 93       	push	r23
    1d38:	8f 93       	push	r24
    1d3a:	9f 93       	push	r25
    1d3c:	af 93       	push	r26
    1d3e:	bf 93       	push	r27
    1d40:	ef 93       	push	r30
    1d42:	ff 93       	push	r31
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    1d44:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    1d48:	86 ff       	sbrs	r24, 6
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <__vector_125+0x4a>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    1d4c:	80 e4       	ldi	r24, 0x40	; 64
    1d4e:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1d52:	10 92 1e 26 	sts	0x261E, r1
		EVENT_USB_Device_Disconnect();
    1d56:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    1d5a:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    1d5e:	85 ff       	sbrs	r24, 5
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <__vector_125+0x7e>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    1d68:	80 91 1a 26 	lds	r24, 0x261A
    1d6c:	88 23       	and	r24, r24
    1d6e:	21 f0       	breq	.+8      	; 0x1d78 <__vector_125+0x68>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d70:	84 e0       	ldi	r24, 0x04	; 4
    1d72:	80 93 1e 26 	sts	0x261E, r24
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <__vector_125+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1d78:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <__vector_125+0x74>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <__vector_125+0x76>
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	80 93 1e 26 	sts	0x261E, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1d8a:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1d8e:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    1d92:	84 ff       	sbrs	r24, 4
    1d94:	15 c0       	rjmp	.+42     	; 0x1dc0 <__vector_125+0xb0>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    1d96:	e0 ec       	ldi	r30, 0xC0	; 192
    1d98:	f4 e0       	ldi	r31, 0x04	; 4
    1d9a:	80 e1       	ldi	r24, 0x10	; 16
    1d9c:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	80 93 1e 26 	sts	0x261E, r24
		USB_Device_ConfigurationNumber = 0;
    1da4:	10 92 1a 26 	sts	0x261A, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1da8:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    1daa:	c8 de       	rcall	.-624    	; 0x1b3c <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1dac:	48 e0       	ldi	r20, 0x08	; 8
    1dae:	68 e4       	ldi	r22, 0x48	; 72
    1db0:	80 e8       	ldi	r24, 0x80	; 128
    1db2:	0d de       	rcall	.-998    	; 0x19ce <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1db4:	48 e0       	ldi	r20, 0x08	; 8
    1db6:	68 e4       	ldi	r22, 0x48	; 72
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	09 de       	rcall	.-1006   	; 0x19ce <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    1dbc:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <EVENT_USB_Device_Reset>
	}
}
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0b be       	out	0x3b, r0	; 59
    1ddc:	0f 90       	pop	r0
    1dde:	09 be       	out	0x39, r0	; 57
    1de0:	0f 90       	pop	r0
    1de2:	08 be       	out	0x38, r0	; 56
    1de4:	0f 90       	pop	r0
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	0f 90       	pop	r0
    1dea:	1f 90       	pop	r1
    1dec:	18 95       	reti

00001dee <_Z4testv>:
 * repeat off by 1 bug = fixed
 *
*/

void test()
{
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
	static uint32_t prev = 0;
	uint32_t t, diff;
	uint16_t t1, t2;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1dfe:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e00:	f8 94       	cli
	{
		t1 = (uint16_t) TCC0.CNT;
    1e02:	c0 91 20 08 	lds	r28, 0x0820
    1e06:	d0 91 21 08 	lds	r29, 0x0821
		t2 = (uint16_t) TCC1.CNT;	
    1e0a:	00 91 60 08 	lds	r16, 0x0860
    1e0e:	10 91 61 08 	lds	r17, 0x0861
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e12:	8f bf       	out	0x3f, r24	; 63
	}
	t1 *= 256;
    1e14:	dc 2f       	mov	r29, r28
    1e16:	cc 27       	eor	r28, r28
	t = (uint32_t) t2 << 16 | t1;
    1e18:	ae 01       	movw	r20, r28
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	c8 01       	movw	r24, r16
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	dc 01       	movw	r26, r24
    1e26:	99 27       	eor	r25, r25
    1e28:	88 27       	eor	r24, r24
    1e2a:	6a 01       	movw	r12, r20
    1e2c:	7b 01       	movw	r14, r22
    1e2e:	c8 2a       	or	r12, r24
    1e30:	d9 2a       	or	r13, r25
    1e32:	ea 2a       	or	r14, r26
    1e34:	fb 2a       	or	r15, r27
    1e36:	c7 01       	movw	r24, r14
    1e38:	b6 01       	movw	r22, r12
	t/= 1000;
    1e3a:	28 ee       	ldi	r18, 0xE8	; 232
    1e3c:	33 e0       	ldi	r19, 0x03	; 3
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodsi4>
	diff = t - prev;
    1e46:	80 91 11 25 	lds	r24, 0x2511
    1e4a:	90 91 12 25 	lds	r25, 0x2512
    1e4e:	a0 91 13 25 	lds	r26, 0x2513
    1e52:	b0 91 14 25 	lds	r27, 0x2514
    1e56:	69 01       	movw	r12, r18
    1e58:	7a 01       	movw	r14, r20
    1e5a:	c8 1a       	sub	r12, r24
    1e5c:	d9 0a       	sbc	r13, r25
    1e5e:	ea 0a       	sbc	r14, r26
    1e60:	fb 0a       	sbc	r15, r27
    1e62:	d7 01       	movw	r26, r14
    1e64:	c6 01       	movw	r24, r12
	prev = t;
    1e66:	20 93 11 25 	sts	0x2511, r18
    1e6a:	30 93 12 25 	sts	0x2512, r19
    1e6e:	40 93 13 25 	sts	0x2513, r20
    1e72:	50 93 14 25 	sts	0x2514, r21
	
	//printf("%lu\r\n", diff);

	appUIPrintln("%lu, %u, %u, %lu", diff, t1, t2, prev);
    1e76:	5f 93       	push	r21
    1e78:	4f 93       	push	r20
    1e7a:	3f 93       	push	r19
    1e7c:	2f 93       	push	r18
    1e7e:	1f 93       	push	r17
    1e80:	0f 93       	push	r16
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	bf 93       	push	r27
    1e88:	af 93       	push	r26
    1e8a:	9f 93       	push	r25
    1e8c:	8f 93       	push	r24
    1e8e:	8a e7       	ldi	r24, 0x7A	; 122
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	9f 93       	push	r25
    1e94:	8f 93       	push	r24
    1e96:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <appUIPrintln_P>
    1e9a:	8d b7       	in	r24, 0x3d	; 61
    1e9c:	9e b7       	in	r25, 0x3e	; 62
    1e9e:	0e 96       	adiw	r24, 0x0e	; 14
    1ea0:	8d bf       	out	0x3d, r24	; 61
    1ea2:	9e bf       	out	0x3e, r25	; 62
	if (diff > 10000000) {
	}

}
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	08 95       	ret

00001eb6 <main>:


int main()
{
	// Initialization
	initHardware();
    1eb6:	ae d3       	rcall	.+1884   	; 0x2614 <initHardware>
	
	TCC1.CTRLA = TC_CLKSEL_OFF_gc;
    1eb8:	e0 e4       	ldi	r30, 0x40	; 64
    1eba:	f8 e0       	ldi	r31, 0x08	; 8
    1ebc:	10 82       	st	Z, r1
	TCC1.CTRLFSET = TC_CMD_RESET_gc;
    1ebe:	8c e0       	ldi	r24, 0x0C	; 12
    1ec0:	81 87       	std	Z+9, r24	; 0x09
	TCC1.PER = 0xFFFF;
    1ec2:	2f ef       	ldi	r18, 0xFF	; 255
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	26 a3       	std	Z+38, r18	; 0x26
    1ec8:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLD = TC_EVACT_CAPT_gc | TC0_EVDLY_bm | TC_EVSEL_CH4_gc;
    1eca:	9c e3       	ldi	r25, 0x3C	; 60
    1ecc:	93 83       	std	Z+3, r25	; 0x03
	TCC1.CTRLA = TC_CLKSEL_EVCH4_gc;
    1ece:	80 83       	st	Z, r24
	EVSYS.CH4MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    1ed0:	90 ec       	ldi	r25, 0xC0	; 192
    1ed2:	90 93 84 01 	sts	0x0184, r25
	
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    1ed6:	e0 e0       	ldi	r30, 0x00	; 0
    1ed8:	f8 e0       	ldi	r31, 0x08	; 8
    1eda:	10 82       	st	Z, r1
	TCC0.CTRLFSET = TC_CMD_RESET_gc;
    1edc:	81 87       	std	Z+9, r24	; 0x09
	TCC0.PER = 0xFFFF;
    1ede:	26 a3       	std	Z+38, r18	; 0x26
    1ee0:	37 a3       	std	Z+39, r19	; 0x27
	//TCC0.CCA = 31; // 1 us
	//TCC0.CCB = 31999; // 1 ms
	TCC0.CTRLD = TC_EVACT_CAPT_gc | TC0_EVDLY_bm;// | TC_EVSEL_CH4_gc;
    1ee2:	80 e3       	ldi	r24, 0x30	; 48
    1ee4:	83 83       	std	Z+3, r24	; 0x03
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	80 83       	st	Z, r24
	
	
	
	eventAdd(100UL,				0, &test);
    1eea:	27 ef       	ldi	r18, 0xF7	; 247
    1eec:	3e e0       	ldi	r19, 0x0E	; 14
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	64 e6       	ldi	r22, 0x64	; 100
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 05 19 	call	0x320a	; 0x320a <eventAdd>
// 	eventAdd(5000UL,				0, &alarmCheck);				//
// 	eventAdd(1000UL * 10,		0, &alarmCancelButton);		//
// 	eventAdd(1000UL * 3600 * 3,	0, &alarmSetChannel);		//
	
	// Infinite loop
	eventControllerLoop(); 
    1efc:	0e 94 63 19 	call	0x32c6	; 0x32c6 <eventControllerLoop>
}
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	08 95       	ret

00001f06 <roomPrintMenus>:
	
	cmd.device_type = device_mbc;
	remoteSendCommand(&cmd);
	
	if (count == 1) appUIPrintln("Alarm reboot finished!");
}
    1f06:	cf 92       	push	r12
    1f08:	df 92       	push	r13
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	0e 94 05 06 	call	0xc0a	; 0xc0a <appUISetUI>
    1f1c:	80 91 36 25 	lds	r24, 0x2536
    1f20:	82 30       	cpi	r24, 0x02	; 2
    1f22:	f9 f0       	breq	.+62     	; 0x1f62 <roomPrintMenus+0x5c>
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <roomPrintMenus+0x24>
    1f28:	9b c0       	rjmp	.+310    	; 0x2060 <roomPrintMenus+0x15a>
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <roomPrintMenus+0x2a>
    1f2e:	2d c1       	rjmp	.+602    	; 0x218a <roomPrintMenus+0x284>
    1f30:	8b e3       	ldi	r24, 0x3B	; 59
    1f32:	96 e0       	ldi	r25, 0x06	; 6
    1f34:	9f 93       	push	r25
    1f36:	8f 93       	push	r24
    1f38:	c2 e0       	ldi	r28, 0x02	; 2
    1f3a:	cf 93       	push	r28
    1f3c:	89 e0       	ldi	r24, 0x09	; 9
    1f3e:	8f 93       	push	r24
    1f40:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1f44:	80 e2       	ldi	r24, 0x20	; 32
    1f46:	96 e0       	ldi	r25, 0x06	; 6
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	cf 93       	push	r28
    1f4e:	8a e0       	ldi	r24, 0x0A	; 10
    1f50:	8f 93       	push	r24
    1f52:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1f56:	8d b7       	in	r24, 0x3d	; 61
    1f58:	9e b7       	in	r25, 0x3e	; 62
    1f5a:	08 96       	adiw	r24, 0x08	; 8
    1f5c:	8d bf       	out	0x3d, r24	; 61
    1f5e:	9e bf       	out	0x3e, r25	; 62
    1f60:	1c c1       	rjmp	.+568    	; 0x219a <roomPrintMenus+0x294>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	96 e0       	ldi	r25, 0x06	; 6
    1f66:	9f 93       	push	r25
    1f68:	8f 93       	push	r24
    1f6a:	c2 e0       	ldi	r28, 0x02	; 2
    1f6c:	cf 93       	push	r28
    1f6e:	0f 2e       	mov	r0, r31
    1f70:	f9 e0       	ldi	r31, 0x09	; 9
    1f72:	ff 2e       	mov	r15, r31
    1f74:	f0 2d       	mov	r31, r0
    1f76:	ff 92       	push	r15
    1f78:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1f7c:	08 e1       	ldi	r16, 0x18	; 24
    1f7e:	10 e2       	ldi	r17, 0x20	; 32
    1f80:	f8 01       	movw	r30, r16
    1f82:	d4 85       	ldd	r29, Z+12	; 0x0c
    1f84:	e5 84       	ldd	r14, Z+13	; 0x0d
    1f86:	d6 84       	ldd	r13, Z+14	; 0x0e
    1f88:	c7 84       	ldd	r12, Z+15	; 0x0f
    1f8a:	41 d6       	rcall	.+3202   	; 0x2c0e <freeRam>
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	df 93       	push	r29
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	f8 01       	movw	r30, r16
    1f9a:	81 89       	ldd	r24, Z+17	; 0x11
    1f9c:	1f 92       	push	r1
    1f9e:	8f 93       	push	r24
    1fa0:	82 ee       	ldi	r24, 0xE2	; 226
    1fa2:	95 e0       	ldi	r25, 0x05	; 5
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	d9 e2       	ldi	r29, 0x29	; 41
    1faa:	df 93       	push	r29
    1fac:	ff 92       	push	r15
    1fae:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1fb2:	87 ed       	ldi	r24, 0xD7	; 215
    1fb4:	95 e0       	ldi	r25, 0x05	; 5
    1fb6:	9f 93       	push	r25
    1fb8:	8f 93       	push	r24
    1fba:	cf 93       	push	r28
    1fbc:	0f 2e       	mov	r0, r31
    1fbe:	fb e0       	ldi	r31, 0x0B	; 11
    1fc0:	ff 2e       	mov	r15, r31
    1fc2:	f0 2d       	mov	r31, r0
    1fc4:	ff 92       	push	r15
    1fc6:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1fca:	8c ec       	ldi	r24, 0xCC	; 204
    1fcc:	95 e0       	ldi	r25, 0x05	; 5
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	cf 93       	push	r28
    1fd4:	0c e0       	ldi	r16, 0x0C	; 12
    1fd6:	0f 93       	push	r16
    1fd8:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1fdc:	80 ec       	ldi	r24, 0xC0	; 192
    1fde:	95 e0       	ldi	r25, 0x05	; 5
    1fe0:	9f 93       	push	r25
    1fe2:	8f 93       	push	r24
    1fe4:	cf 93       	push	r28
    1fe6:	1d e0       	ldi	r17, 0x0D	; 13
    1fe8:	1f 93       	push	r17
    1fea:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    1fee:	85 eb       	ldi	r24, 0xB5	; 181
    1ff0:	95 e0       	ldi	r25, 0x05	; 5
    1ff2:	9f 93       	push	r25
    1ff4:	8f 93       	push	r24
    1ff6:	cf 93       	push	r28
    1ff8:	8e e0       	ldi	r24, 0x0E	; 14
    1ffa:	8f 93       	push	r24
    1ffc:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2000:	8d b7       	in	r24, 0x3d	; 61
    2002:	9e b7       	in	r25, 0x3e	; 62
    2004:	80 96       	adiw	r24, 0x20	; 32
    2006:	8d bf       	out	0x3d, r24	; 61
    2008:	9e bf       	out	0x3e, r25	; 62
    200a:	8c e9       	ldi	r24, 0x9C	; 156
    200c:	95 e0       	ldi	r25, 0x05	; 5
    200e:	9f 93       	push	r25
    2010:	8f 93       	push	r24
    2012:	df 93       	push	r29
    2014:	ff 92       	push	r15
    2016:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    201a:	8f e7       	ldi	r24, 0x7F	; 127
    201c:	95 e0       	ldi	r25, 0x05	; 5
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	df 93       	push	r29
    2024:	0f 93       	push	r16
    2026:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    202a:	8b e6       	ldi	r24, 0x6B	; 107
    202c:	95 e0       	ldi	r25, 0x05	; 5
    202e:	9f 93       	push	r25
    2030:	8f 93       	push	r24
    2032:	df 93       	push	r29
    2034:	1f 93       	push	r17
    2036:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    203a:	85 e1       	ldi	r24, 0x15	; 21
    203c:	95 e2       	ldi	r25, 0x25	; 37
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	80 e6       	ldi	r24, 0x60	; 96
    2044:	95 e0       	ldi	r25, 0x05	; 5
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	cf 93       	push	r28
    204c:	80 e1       	ldi	r24, 0x10	; 16
    204e:	8f 93       	push	r24
    2050:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2054:	ed b7       	in	r30, 0x3d	; 61
    2056:	fe b7       	in	r31, 0x3e	; 62
    2058:	72 96       	adiw	r30, 0x12	; 18
    205a:	ed bf       	out	0x3d, r30	; 61
    205c:	fe bf       	out	0x3e, r31	; 62
    205e:	9d c0       	rjmp	.+314    	; 0x219a <roomPrintMenus+0x294>
    2060:	8f e4       	ldi	r24, 0x4F	; 79
    2062:	95 e0       	ldi	r25, 0x05	; 5
    2064:	9f 93       	push	r25
    2066:	8f 93       	push	r24
    2068:	d2 e0       	ldi	r29, 0x02	; 2
    206a:	df 93       	push	r29
    206c:	19 e0       	ldi	r17, 0x09	; 9
    206e:	1f 93       	push	r17
    2070:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2074:	83 e4       	ldi	r24, 0x43	; 67
    2076:	95 e0       	ldi	r25, 0x05	; 5
    2078:	9f 93       	push	r25
    207a:	8f 93       	push	r24
    207c:	c9 e2       	ldi	r28, 0x29	; 41
    207e:	cf 93       	push	r28
    2080:	1f 93       	push	r17
    2082:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2086:	86 e2       	ldi	r24, 0x26	; 38
    2088:	95 e0       	ldi	r25, 0x05	; 5
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	df 93       	push	r29
    2090:	1a e0       	ldi	r17, 0x0A	; 10
    2092:	1f 93       	push	r17
    2094:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2098:	86 e1       	ldi	r24, 0x16	; 22
    209a:	95 e0       	ldi	r25, 0x05	; 5
    209c:	9f 93       	push	r25
    209e:	8f 93       	push	r24
    20a0:	cf 93       	push	r28
    20a2:	1f 93       	push	r17
    20a4:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    20a8:	80 e1       	ldi	r24, 0x10	; 16
    20aa:	95 e0       	ldi	r25, 0x05	; 5
    20ac:	9f 93       	push	r25
    20ae:	8f 93       	push	r24
    20b0:	df 93       	push	r29
    20b2:	1b e0       	ldi	r17, 0x0B	; 11
    20b4:	1f 93       	push	r17
    20b6:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    20ba:	88 e0       	ldi	r24, 0x08	; 8
    20bc:	95 e0       	ldi	r25, 0x05	; 5
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	cf 93       	push	r28
    20c4:	1f 93       	push	r17
    20c6:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    20ca:	8e ef       	ldi	r24, 0xFE	; 254
    20cc:	94 e0       	ldi	r25, 0x04	; 4
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	df 93       	push	r29
    20d4:	1c e0       	ldi	r17, 0x0C	; 12
    20d6:	1f 93       	push	r17
    20d8:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    20dc:	86 ef       	ldi	r24, 0xF6	; 246
    20de:	94 e0       	ldi	r25, 0x04	; 4
    20e0:	9f 93       	push	r25
    20e2:	8f 93       	push	r24
    20e4:	cf 93       	push	r28
    20e6:	1f 93       	push	r17
    20e8:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    20ec:	8d b7       	in	r24, 0x3d	; 61
    20ee:	9e b7       	in	r25, 0x3e	; 62
    20f0:	80 96       	adiw	r24, 0x20	; 32
    20f2:	8d bf       	out	0x3d, r24	; 61
    20f4:	9e bf       	out	0x3e, r25	; 62
    20f6:	8e ee       	ldi	r24, 0xEE	; 238
    20f8:	94 e0       	ldi	r25, 0x04	; 4
    20fa:	9f 93       	push	r25
    20fc:	8f 93       	push	r24
    20fe:	df 93       	push	r29
    2100:	1d e0       	ldi	r17, 0x0D	; 13
    2102:	1f 93       	push	r17
    2104:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2108:	84 ee       	ldi	r24, 0xE4	; 228
    210a:	94 e0       	ldi	r25, 0x04	; 4
    210c:	9f 93       	push	r25
    210e:	8f 93       	push	r24
    2110:	cf 93       	push	r28
    2112:	1f 93       	push	r17
    2114:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2118:	82 ec       	ldi	r24, 0xC2	; 194
    211a:	94 e0       	ldi	r25, 0x04	; 4
    211c:	9f 93       	push	r25
    211e:	8f 93       	push	r24
    2120:	df 93       	push	r29
    2122:	1e e0       	ldi	r17, 0x0E	; 14
    2124:	1f 93       	push	r17
    2126:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    212a:	80 ea       	ldi	r24, 0xA0	; 160
    212c:	94 e0       	ldi	r25, 0x04	; 4
    212e:	9f 93       	push	r25
    2130:	8f 93       	push	r24
    2132:	cf 93       	push	r28
    2134:	1f 93       	push	r17
    2136:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    213a:	81 e9       	ldi	r24, 0x91	; 145
    213c:	94 e0       	ldi	r25, 0x04	; 4
    213e:	9f 93       	push	r25
    2140:	8f 93       	push	r24
    2142:	df 93       	push	r29
    2144:	1f e0       	ldi	r17, 0x0F	; 15
    2146:	1f 93       	push	r17
    2148:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    214c:	81 e8       	ldi	r24, 0x81	; 129
    214e:	94 e0       	ldi	r25, 0x04	; 4
    2150:	9f 93       	push	r25
    2152:	8f 93       	push	r24
    2154:	cf 93       	push	r28
    2156:	1f 93       	push	r17
    2158:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    215c:	86 e6       	ldi	r24, 0x66	; 102
    215e:	94 e0       	ldi	r25, 0x04	; 4
    2160:	9f 93       	push	r25
    2162:	8f 93       	push	r24
    2164:	df 93       	push	r29
    2166:	d0 e1       	ldi	r29, 0x10	; 16
    2168:	df 93       	push	r29
    216a:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    216e:	8a e4       	ldi	r24, 0x4A	; 74
    2170:	94 e0       	ldi	r25, 0x04	; 4
    2172:	9f 93       	push	r25
    2174:	8f 93       	push	r24
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    217e:	ed b7       	in	r30, 0x3d	; 61
    2180:	fe b7       	in	r31, 0x3e	; 62
    2182:	b0 96       	adiw	r30, 0x20	; 32
    2184:	ed bf       	out	0x3d, r30	; 61
    2186:	fe bf       	out	0x3e, r31	; 62
    2188:	08 c0       	rjmp	.+16     	; 0x219a <roomPrintMenus+0x294>
    218a:	8e e5       	ldi	r24, 0x5E	; 94
    218c:	96 e0       	ldi	r25, 0x06	; 6
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <appUIPrintln_P>
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	0e 94 05 06 	call	0xc0a	; 0xc0a <appUISetUI>
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	08 95       	ret

000021b2 <roomPrintDeviceStuff>:
    21b2:	6f 92       	push	r6
    21b4:	7f 92       	push	r7
    21b6:	8f 92       	push	r8
    21b8:	9f 92       	push	r9
    21ba:	af 92       	push	r10
    21bc:	bf 92       	push	r11
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	64 97       	sbiw	r28, 0x14	; 20
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0e 94 63 05 	call	0xac6	; 0xac6 <appUICleanWebsite>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	0e 94 05 06 	call	0xc0a	; 0xc0a <appUISetUI>
    21e2:	e0 91 36 25 	lds	r30, 0x2536
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	ee 0f       	add	r30, r30
    21ea:	ff 1f       	adc	r31, r31
    21ec:	ed 58       	subi	r30, 0x8D	; 141
    21ee:	f9 4f       	sbci	r31, 0xF9	; 249
    21f0:	65 91       	lpm	r22, Z+
    21f2:	75 91       	lpm	r23, Z+
    21f4:	ce 01       	movw	r24, r28
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	7c 01       	movw	r14, r24
    21fa:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    21fe:	ff 92       	push	r15
    2200:	ef 92       	push	r14
    2202:	81 e4       	ldi	r24, 0x41	; 65
    2204:	94 e0       	ldi	r25, 0x04	; 4
    2206:	9f 93       	push	r25
    2208:	8f 93       	push	r24
    220a:	12 e0       	ldi	r17, 0x02	; 2
    220c:	1f 93       	push	r17
    220e:	1f 93       	push	r17
    2210:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2214:	0f 2e       	mov	r0, r31
    2216:	f8 e1       	ldi	r31, 0x18	; 24
    2218:	cf 2e       	mov	r12, r31
    221a:	f0 e2       	ldi	r31, 0x20	; 32
    221c:	df 2e       	mov	r13, r31
    221e:	f0 2d       	mov	r31, r0
    2220:	e0 91 bc 20 	lds	r30, 0x20BC
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	e5 59       	subi	r30, 0x95	; 149
    222c:	f9 4f       	sbci	r31, 0xF9	; 249
    222e:	65 91       	lpm	r22, Z+
    2230:	75 91       	lpm	r23, Z+
    2232:	c7 01       	movw	r24, r14
    2234:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2238:	80 91 be 20 	lds	r24, 0x20BE
    223c:	1f 92       	push	r1
    223e:	8f 93       	push	r24
    2240:	0f 2e       	mov	r0, r31
    2242:	fd eb       	ldi	r31, 0xBD	; 189
    2244:	af 2e       	mov	r10, r31
    2246:	f0 e2       	ldi	r31, 0x20	; 32
    2248:	bf 2e       	mov	r11, r31
    224a:	f0 2d       	mov	r31, r0
    224c:	f5 01       	movw	r30, r10
    224e:	80 81       	ld	r24, Z
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	ff 92       	push	r15
    225a:	ef 92       	push	r14
    225c:	8b e2       	ldi	r24, 0x2B	; 43
    225e:	94 e0       	ldi	r25, 0x04	; 4
    2260:	9f 93       	push	r25
    2262:	8f 93       	push	r24
    2264:	1f 93       	push	r17
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	8f 93       	push	r24
    226a:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    226e:	f5 01       	movw	r30, r10
    2270:	80 81       	ld	r24, Z
    2272:	ed d4       	rcall	.+2522   	; 0x2c4e <deviceNameGet>
    2274:	9f 93       	push	r25
    2276:	8f 93       	push	r24
    2278:	85 e2       	ldi	r24, 0x25	; 37
    227a:	94 e0       	ldi	r25, 0x04	; 4
    227c:	9f 93       	push	r25
    227e:	8f 93       	push	r24
    2280:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2284:	f6 01       	movw	r30, r12
    2286:	85 89       	ldd	r24, Z+21	; 0x15
    2288:	8f 93       	push	r24
    228a:	84 89       	ldd	r24, Z+20	; 0x14
    228c:	8f 93       	push	r24
    228e:	83 89       	ldd	r24, Z+19	; 0x13
    2290:	8f 93       	push	r24
    2292:	82 89       	ldd	r24, Z+18	; 0x12
    2294:	8f 93       	push	r24
    2296:	e8 e6       	ldi	r30, 0x68	; 104
    2298:	f0 e2       	ldi	r31, 0x20	; 32
    229a:	83 81       	ldd	r24, Z+3	; 0x03
    229c:	8f 93       	push	r24
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	8f 93       	push	r24
    22a2:	81 81       	ldd	r24, Z+1	; 0x01
    22a4:	8f 93       	push	r24
    22a6:	80 81       	ld	r24, Z
    22a8:	8f 93       	push	r24
    22aa:	f6 01       	movw	r30, r12
    22ac:	80 89       	ldd	r24, Z+16	; 0x10
    22ae:	1f 92       	push	r1
    22b0:	8f 93       	push	r24
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	94 e0       	ldi	r25, 0x04	; 4
    22b6:	9f 93       	push	r25
    22b8:	8f 93       	push	r24
    22ba:	1f 93       	push	r17
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	8f 93       	push	r24
    22c0:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	ee e5       	ldi	r30, 0x5E	; 94
    22ca:	f0 e2       	ldi	r31, 0x20	; 32
    22cc:	81 81       	ldd	r24, Z+1	; 0x01
    22ce:	8f 93       	push	r24
    22d0:	80 81       	ld	r24, Z
    22d2:	8f 93       	push	r24
    22d4:	e0 e6       	ldi	r30, 0x60	; 96
    22d6:	f0 e2       	ldi	r31, 0x20	; 32
    22d8:	81 81       	ldd	r24, Z+1	; 0x01
    22da:	8f 93       	push	r24
    22dc:	80 81       	ld	r24, Z
    22de:	8f 93       	push	r24
    22e0:	86 ee       	ldi	r24, 0xE6	; 230
    22e2:	93 e0       	ldi	r25, 0x03	; 3
    22e4:	9f 93       	push	r25
    22e6:	8f 93       	push	r24
    22e8:	1f 93       	push	r17
    22ea:	85 e0       	ldi	r24, 0x05	; 5
    22ec:	8f 93       	push	r24
    22ee:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    22f2:	8e ed       	ldi	r24, 0xDE	; 222
    22f4:	93 e0       	ldi	r25, 0x03	; 3
    22f6:	9f 93       	push	r25
    22f8:	8f 93       	push	r24
    22fa:	1f 93       	push	r17
    22fc:	86 e0       	ldi	r24, 0x06	; 6
    22fe:	8f 93       	push	r24
    2300:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    2304:	c6 01       	movw	r24, r12
    2306:	c3 d5       	rcall	.+2950   	; 0x2e8e <RTCPrintDatetime>
    2308:	86 ed       	ldi	r24, 0xD6	; 214
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	9f 93       	push	r25
    230e:	8f 93       	push	r24
    2310:	1f 93       	push	r17
    2312:	87 e0       	ldi	r24, 0x07	; 7
    2314:	8f 93       	push	r24
    2316:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    231a:	8e e1       	ldi	r24, 0x1E	; 30
    231c:	90 e2       	ldi	r25, 0x20	; 32
    231e:	88 d5       	rcall	.+2832   	; 0x2e30 <RTCPrintTime>
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	80 91 5d 21 	lds	r24, 0x215D
    2328:	88 23       	and	r24, r24
    232a:	49 f0       	breq	.+18     	; 0x233e <roomPrintDeviceStuff+0x18c>
    232c:	81 ed       	ldi	r24, 0xD1	; 209
    232e:	93 e0       	ldi	r25, 0x03	; 3
    2330:	9f 93       	push	r25
    2332:	8f 93       	push	r24
    2334:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	54 c0       	rjmp	.+168    	; 0x23e6 <roomPrintDeviceStuff+0x234>
    233e:	8b ec       	ldi	r24, 0xCB	; 203
    2340:	93 e0       	ldi	r25, 0x03	; 3
    2342:	9f 93       	push	r25
    2344:	8f 93       	push	r24
    2346:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	4b c0       	rjmp	.+150    	; 0x23e6 <roomPrintDeviceStuff+0x234>
    2350:	67 01       	movw	r12, r14
    2352:	f3 e0       	ldi	r31, 0x03	; 3
    2354:	cf 0e       	add	r12, r31
    2356:	d1 1c       	adc	r13, r1
    2358:	f8 01       	movw	r30, r16
    235a:	87 81       	ldd	r24, Z+7	; 0x07
    235c:	8f 93       	push	r24
    235e:	86 81       	ldd	r24, Z+6	; 0x06
    2360:	8f 93       	push	r24
    2362:	85 81       	ldd	r24, Z+5	; 0x05
    2364:	8f 93       	push	r24
    2366:	84 81       	ldd	r24, Z+4	; 0x04
    2368:	8f 93       	push	r24
    236a:	83 81       	ldd	r24, Z+3	; 0x03
    236c:	8f 93       	push	r24
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	8f 93       	push	r24
    2372:	81 81       	ldd	r24, Z+1	; 0x01
    2374:	8f 93       	push	r24
    2376:	80 81       	ld	r24, Z
    2378:	8f 93       	push	r24
    237a:	df 92       	push	r13
    237c:	cf 92       	push	r12
    237e:	ff 92       	push	r15
    2380:	ef 92       	push	r14
    2382:	9f 92       	push	r9
    2384:	8f 92       	push	r8
    2386:	6f 92       	push	r6
    2388:	7f 92       	push	r7
    238a:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    238e:	f8 01       	movw	r30, r16
    2390:	87 8d       	ldd	r24, Z+31	; 0x1f
    2392:	8f 93       	push	r24
    2394:	86 8d       	ldd	r24, Z+30	; 0x1e
    2396:	8f 93       	push	r24
    2398:	85 8d       	ldd	r24, Z+29	; 0x1d
    239a:	8f 93       	push	r24
    239c:	84 8d       	ldd	r24, Z+28	; 0x1c
    239e:	8f 93       	push	r24
    23a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    23a2:	8f 93       	push	r24
    23a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    23a6:	8f 93       	push	r24
    23a8:	81 8d       	ldd	r24, Z+25	; 0x19
    23aa:	8f 93       	push	r24
    23ac:	80 8d       	ldd	r24, Z+24	; 0x18
    23ae:	8f 93       	push	r24
    23b0:	df 92       	push	r13
    23b2:	cf 92       	push	r12
    23b4:	ff 92       	push	r15
    23b6:	ef 92       	push	r14
    23b8:	bf 92       	push	r11
    23ba:	af 92       	push	r10
    23bc:	6f 92       	push	r6
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	87 0d       	add	r24, r7
    23c2:	8f 93       	push	r24
    23c4:	0e 94 90 06 	call	0xd20	; 0xd20 <appUIPrintPos_P>
    23c8:	08 5f       	subi	r16, 0xF8	; 248
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	73 94       	inc	r7
    23ce:	f4 e0       	ldi	r31, 0x04	; 4
    23d0:	ef 0e       	add	r14, r31
    23d2:	f1 1c       	adc	r15, r1
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	95 e0       	ldi	r25, 0x05	; 5
    23da:	79 12       	cpse	r7, r25
    23dc:	b9 cf       	rjmp	.-142    	; 0x2350 <roomPrintDeviceStuff+0x19e>
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	0e 94 05 06 	call	0xc0a	; 0xc0a <appUISetUI>
    23e4:	19 c0       	rjmp	.+50     	; 0x2418 <roomPrintDeviceStuff+0x266>
    23e6:	0e e2       	ldi	r16, 0x2E	; 46
    23e8:	10 e2       	ldi	r17, 0x20	; 32
    23ea:	ee 24       	eor	r14, r14
    23ec:	e3 94       	inc	r14
    23ee:	f1 2c       	mov	r15, r1
    23f0:	68 94       	set
    23f2:	77 24       	eor	r7, r7
    23f4:	71 f8       	bld	r7, 1
    23f6:	0f 2e       	mov	r0, r31
    23f8:	fb ea       	ldi	r31, 0xAB	; 171
    23fa:	8f 2e       	mov	r8, r31
    23fc:	f3 e0       	ldi	r31, 0x03	; 3
    23fe:	9f 2e       	mov	r9, r31
    2400:	f0 2d       	mov	r31, r0
    2402:	0f 2e       	mov	r0, r31
    2404:	f9 e2       	ldi	r31, 0x29	; 41
    2406:	6f 2e       	mov	r6, r31
    2408:	f0 2d       	mov	r31, r0
    240a:	0f 2e       	mov	r0, r31
    240c:	fb e8       	ldi	r31, 0x8B	; 139
    240e:	af 2e       	mov	r10, r31
    2410:	f3 e0       	ldi	r31, 0x03	; 3
    2412:	bf 2e       	mov	r11, r31
    2414:	f0 2d       	mov	r31, r0
    2416:	9c cf       	rjmp	.-200    	; 0x2350 <roomPrintDeviceStuff+0x19e>
    2418:	64 96       	adiw	r28, 0x14	; 20
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	bf 90       	pop	r11
    2430:	af 90       	pop	r10
    2432:	9f 90       	pop	r9
    2434:	8f 90       	pop	r8
    2436:	7f 90       	pop	r7
    2438:	6f 90       	pop	r6
    243a:	08 95       	ret

0000243c <roomClean>:
    243c:	80 91 36 25 	lds	r24, 0x2536
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	61 f0       	breq	.+24     	; 0x245c <roomClean+0x20>
    2444:	81 e2       	ldi	r24, 0x21	; 33
    2446:	e5 e1       	ldi	r30, 0x15	; 21
    2448:	f5 e2       	ldi	r31, 0x25	; 37
    244a:	df 01       	movw	r26, r30
    244c:	1d 92       	st	X+, r1
    244e:	8a 95       	dec	r24
    2450:	e9 f7       	brne	.-6      	; 0x244c <roomClean+0x10>
    2452:	04 c0       	rjmp	.+8      	; 0x245c <roomClean+0x20>
    2454:	8e e5       	ldi	r24, 0x5E	; 94
    2456:	91 e2       	ldi	r25, 0x21	; 33
    2458:	0e 94 62 08 	call	0x10c4	; 0x10c4 <CDC_Device_ReceiveByte>
    245c:	8e e5       	ldi	r24, 0x5E	; 94
    245e:	91 e2       	ldi	r25, 0x21	; 33
    2460:	0e 94 06 08 	call	0x100c	; 0x100c <CDC_Device_BytesReceived>
    2464:	89 2b       	or	r24, r25
    2466:	b1 f7       	brne	.-20     	; 0x2454 <roomClean+0x18>
    2468:	0e 94 7e 05 	call	0xafc	; 0xafc <appUIClean>
    246c:	a2 de       	rcall	.-700    	; 0x21b2 <roomPrintDeviceStuff>
    246e:	4b cd       	rjmp	.-1386   	; 0x1f06 <roomPrintMenus>
    2470:	08 95       	ret

00002472 <roomReset>:
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	80 93 36 25 	sts	0x2536, r24
    2478:	e1 cf       	rjmp	.-62     	; 0x243c <roomClean>
    247a:	08 95       	ret

0000247c <roomInit>:

static bool roomReadInputText(char key);
static void alarmPowerOnCallback();

void roomInit()
{
    247c:	cf 93       	push	r28
	roomReset();
    247e:	f9 df       	rcall	.-14     	; 0x2472 <roomReset>
	
	hardware.alarmEnabled = false;
    2480:	10 92 5d 21 	sts	0x215D, r1
	
	EEPROM_DO_CLAMP(&hardware.device.type, &deviceTypeEEPROM, 1, 1, 2, EEPROM_LOAD);
    2484:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2486:	f8 94       	cli
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	6c e0       	ldi	r22, 0x0C	; 12
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	8c eb       	ldi	r24, 0xBC	; 188
    2492:	90 e2       	ldi	r25, 0x20	; 32
    2494:	0e 94 41 25 	call	0x4a82	; 0x4a82 <eeprom_read_block>
    2498:	80 91 bc 20 	lds	r24, 0x20BC
    249c:	81 50       	subi	r24, 0x01	; 1
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	18 f5       	brcc	.+70     	; 0x24e8 <roomInit+0x6c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    24a2:	cf bf       	out	0x3f, r28	; 63
	EEPROM_DO_CLAMP(&hardware.alarmEnabled, &alarmEnabledEEPROM, hardware.alarmEnabled, 0, 1, EEPROM_LOAD);
    24a4:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24a6:	f8 94       	cli
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	6d e0       	ldi	r22, 0x0D	; 13
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	8d e5       	ldi	r24, 0x5D	; 93
    24b2:	91 e2       	ldi	r25, 0x21	; 33
    24b4:	0e 94 41 25 	call	0x4a82	; 0x4a82 <eeprom_read_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    24b8:	cf bf       	out	0x3f, r28	; 63
	EEPROM_DO(&hardware.alarm, &alarmEEPROM, EEPROM_LOAD);
    24ba:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24bc:	f8 94       	cli
    24be:	46 e0       	ldi	r20, 0x06	; 6
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	66 e0       	ldi	r22, 0x06	; 6
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	8e e1       	ldi	r24, 0x1E	; 30
    24c8:	90 e2       	ldi	r25, 0x20	; 32
    24ca:	0e 94 41 25 	call	0x4a82	; 0x4a82 <eeprom_read_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    24ce:	cf bf       	out	0x3f, r28	; 63
	EEPROM_DO(&hardware.datetime, &timeEEPROM, EEPROM_LOAD);
    24d0:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24d2:	f8 94       	cli
    24d4:	46 e0       	ldi	r20, 0x06	; 6
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	88 e1       	ldi	r24, 0x18	; 24
    24de:	90 e2       	ldi	r25, 0x20	; 32
    24e0:	0e 94 41 25 	call	0x4a82	; 0x4a82 <eeprom_read_block>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    24e4:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    24e6:	04 c0       	rjmp	.+8      	; 0x24f0 <roomInit+0x74>
{
	roomReset();
	
	hardware.alarmEnabled = false;
	
	EEPROM_DO_CLAMP(&hardware.device.type, &deviceTypeEEPROM, 1, 1, 2, EEPROM_LOAD);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	80 93 bc 20 	sts	0x20BC, r24
    24ee:	d9 cf       	rjmp	.-78     	; 0x24a2 <roomInit+0x26>
	EEPROM_DO_CLAMP(&hardware.alarmEnabled, &alarmEnabledEEPROM, hardware.alarmEnabled, 0, 1, EEPROM_LOAD);
	EEPROM_DO(&hardware.alarm, &alarmEEPROM, EEPROM_LOAD);
	EEPROM_DO(&hardware.datetime, &timeEEPROM, EEPROM_LOAD);
}
    24f0:	cf 91       	pop	r28
    24f2:	08 95       	ret

000024f4 <resetCausePrint>:
{
	
}

void EVENT_USB_Device_WakeUp()
{
    24f4:	cf 93       	push	r28
    24f6:	e8 e7       	ldi	r30, 0x78	; 120
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	c0 81       	ld	r28, Z
    24fc:	8f e7       	ldi	r24, 0x7F	; 127
    24fe:	80 83       	st	Z, r24
    2500:	c4 30       	cpi	r28, 0x04	; 4
    2502:	e1 f0       	breq	.+56     	; 0x253c <resetCausePrint+0x48>
    2504:	38 f4       	brcc	.+14     	; 0x2514 <resetCausePrint+0x20>
    2506:	c1 30       	cpi	r28, 0x01	; 1
    2508:	59 f1       	breq	.+86     	; 0x2560 <resetCausePrint+0x6c>
    250a:	08 f4       	brcc	.+2      	; 0x250e <resetCausePrint+0x1a>
    250c:	53 c0       	rjmp	.+166    	; 0x25b4 <resetCausePrint+0xc0>
    250e:	c2 30       	cpi	r28, 0x02	; 2
    2510:	61 f0       	breq	.+24     	; 0x252a <resetCausePrint+0x36>
    2512:	59 c0       	rjmp	.+178    	; 0x25c6 <resetCausePrint+0xd2>
    2514:	c0 31       	cpi	r28, 0x10	; 16
    2516:	d9 f0       	breq	.+54     	; 0x254e <resetCausePrint+0x5a>
    2518:	18 f4       	brcc	.+6      	; 0x2520 <resetCausePrint+0x2c>
    251a:	c8 30       	cpi	r28, 0x08	; 8
    251c:	e1 f1       	breq	.+120    	; 0x2596 <resetCausePrint+0xa2>
    251e:	53 c0       	rjmp	.+166    	; 0x25c6 <resetCausePrint+0xd2>
    2520:	c0 32       	cpi	r28, 0x20	; 32
    2522:	39 f1       	breq	.+78     	; 0x2572 <resetCausePrint+0x7e>
    2524:	c0 34       	cpi	r28, 0x40	; 64
    2526:	71 f1       	breq	.+92     	; 0x2584 <resetCausePrint+0x90>
    2528:	4e c0       	rjmp	.+156    	; 0x25c6 <resetCausePrint+0xd2>
    252a:	83 e7       	ldi	r24, 0x73	; 115
    252c:	97 e0       	ldi	r25, 0x07	; 7
    252e:	9f 93       	push	r25
    2530:	8f 93       	push	r24
    2532:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	64 c0       	rjmp	.+200    	; 0x2604 <resetCausePrint+0x110>
    253c:	85 e6       	ldi	r24, 0x65	; 101
    253e:	97 e0       	ldi	r25, 0x07	; 7
    2540:	9f 93       	push	r25
    2542:	8f 93       	push	r24
    2544:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	5b c0       	rjmp	.+182    	; 0x2604 <resetCausePrint+0x110>
    254e:	87 e5       	ldi	r24, 0x57	; 87
    2550:	97 e0       	ldi	r25, 0x07	; 7
    2552:	9f 93       	push	r25
    2554:	8f 93       	push	r24
    2556:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	52 c0       	rjmp	.+164    	; 0x2604 <resetCausePrint+0x110>
    2560:	8d e4       	ldi	r24, 0x4D	; 77
    2562:	97 e0       	ldi	r25, 0x07	; 7
    2564:	9f 93       	push	r25
    2566:	8f 93       	push	r24
    2568:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	49 c0       	rjmp	.+146    	; 0x2604 <resetCausePrint+0x110>
    2572:	83 e4       	ldi	r24, 0x43	; 67
    2574:	97 e0       	ldi	r25, 0x07	; 7
    2576:	9f 93       	push	r25
    2578:	8f 93       	push	r24
    257a:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	40 c0       	rjmp	.+128    	; 0x2604 <resetCausePrint+0x110>
    2584:	8c e3       	ldi	r24, 0x3C	; 60
    2586:	97 e0       	ldi	r25, 0x07	; 7
    2588:	9f 93       	push	r25
    258a:	8f 93       	push	r24
    258c:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	37 c0       	rjmp	.+110    	; 0x2604 <resetCausePrint+0x110>
    2596:	82 e3       	ldi	r24, 0x32	; 50
    2598:	97 e0       	ldi	r25, 0x07	; 7
    259a:	9f 93       	push	r25
    259c:	8f 93       	push	r24
    259e:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    25a2:	8e e0       	ldi	r24, 0x0E	; 14
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <eeprom_read_byte>
    25aa:	80 93 29 20 	sts	0x2029, r24
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	1d c0       	rjmp	.+58     	; 0x25ee <resetCausePrint+0xfa>
    25b4:	89 e2       	ldi	r24, 0x29	; 41
    25b6:	97 e0       	ldi	r25, 0x07	; 7
    25b8:	9f 93       	push	r25
    25ba:	8f 93       	push	r24
    25bc:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	1f c0       	rjmp	.+62     	; 0x2604 <resetCausePrint+0x110>
    25c6:	1f 92       	push	r1
    25c8:	cf 93       	push	r28
    25ca:	85 e2       	ldi	r24, 0x25	; 37
    25cc:	97 e0       	ldi	r25, 0x07	; 7
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    25d6:	8e e0       	ldi	r24, 0x0E	; 14
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <eeprom_read_byte>
    25de:	80 93 29 20 	sts	0x2029, r24
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	c3 ff       	sbrs	r28, 3
    25ec:	11 c0       	rjmp	.+34     	; 0x2610 <resetCausePrint+0x11c>
    25ee:	8a 3f       	cpi	r24, 0xFA	; 250
    25f0:	78 f4       	brcc	.+30     	; 0x2610 <resetCausePrint+0x11c>
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	68 0f       	add	r22, r24
    25f6:	60 93 29 20 	sts	0x2029, r22
    25fa:	8e e0       	ldi	r24, 0x0E	; 14
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <eeprom_update_byte>
    2602:	06 c0       	rjmp	.+12     	; 0x2610 <resetCausePrint+0x11c>
    2604:	8e e0       	ldi	r24, 0x0E	; 14
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <eeprom_read_byte>
    260c:	80 93 29 20 	sts	0x2029, r24
    2610:	cf 91       	pop	r28
    2612:	08 95       	ret

00002614 <initHardware>:
    2614:	8f 92       	push	r8
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	a8 95       	wdr
    262e:	6b e2       	ldi	r22, 0x2B	; 43
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 d4 06 	call	0xda8	; 0xda8 <CCPWrite>
    2638:	e0 e8       	ldi	r30, 0x80	; 128
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	80 fd       	sbrc	r24, 0
    2640:	fd cf       	rjmp	.-6      	; 0x263c <initHardware+0x28>
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	81 e8       	ldi	r24, 0x81	; 129
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 d4 06 	call	0xda8	; 0xda8 <CCPWrite>
    264c:	e0 e8       	ldi	r30, 0x80	; 128
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	80 fd       	sbrc	r24, 0
    2654:	fd cf       	rjmp	.-6      	; 0x2650 <initHardware+0x3c>
    2656:	c0 e5       	ldi	r28, 0x50	; 80
    2658:	d0 e0       	ldi	r29, 0x00	; 0
    265a:	93 e0       	ldi	r25, 0x03	; 3
    265c:	98 83       	st	Y, r25
    265e:	82 e4       	ldi	r24, 0x42	; 66
    2660:	8a 83       	std	Y+2, r24	; 0x02
    2662:	88 81       	ld	r24, Y
    2664:	88 60       	ori	r24, 0x08	; 8
    2666:	88 83       	st	Y, r24
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	60 e1       	ldi	r22, 0x10	; 16
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <CLKSYS_PLL_Config>
    2672:	88 81       	ld	r24, Y
    2674:	80 61       	ori	r24, 0x10	; 16
    2676:	88 83       	st	Y, r24
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	0e 94 ee 06 	call	0xddc	; 0xddc <CLKSYS_Prescalers_Config>
    2680:	a0 e6       	ldi	r26, 0x60	; 96
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	8b e1       	ldi	r24, 0x1B	; 27
    2686:	15 96       	adiw	r26, 0x05	; 5
    2688:	8c 93       	st	X, r24
    268a:	15 97       	sbiw	r26, 0x05	; 5
    268c:	87 eb       	ldi	r24, 0xB7	; 183
    268e:	16 96       	adiw	r26, 0x06	; 6
    2690:	8c 93       	st	X, r24
    2692:	16 97       	sbiw	r26, 0x06	; 6
    2694:	c0 ec       	ldi	r28, 0xC0	; 192
    2696:	d1 e0       	ldi	r29, 0x01	; 1
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	8a 87       	std	Y+10, r24	; 0x0a
    269c:	ed e1       	ldi	r30, 0x1D	; 29
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	e4 91       	lpm	r30, Z
    26a2:	12 96       	adiw	r26, 0x02	; 2
    26a4:	ec 93       	st	X, r30
    26a6:	12 97       	sbiw	r26, 0x02	; 2
    26a8:	ec e1       	ldi	r30, 0x1C	; 28
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	e4 91       	lpm	r30, Z
    26ae:	13 96       	adiw	r26, 0x03	; 3
    26b0:	ec 93       	st	X, r30
    26b2:	1a 86       	std	Y+10, r1	; 0x0a
    26b4:	e0 e5       	ldi	r30, 0x50	; 80
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	81 81       	ldd	r24, Z+1	; 0x01
    26ba:	90 81       	ld	r25, Z
    26bc:	89 27       	eor	r24, r25
    26be:	8f 71       	andi	r24, 0x1F	; 31
    26c0:	d9 f7       	brne	.-10     	; 0x26b8 <initHardware+0xa4>
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLKSYS_Main_ClockSource_Select>
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	80 93 60 00 	sts	0x0060, r24
    26ce:	80 91 55 00 	lds	r24, 0x0055
    26d2:	81 11       	cpse	r24, r1
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <initHardware+0xca>
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	80 93 68 00 	sts	0x0068, r24
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <initHardware+0xd4>
    26de:	e0 e5       	ldi	r30, 0x50	; 80
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	8e 7f       	andi	r24, 0xFE	; 254
    26e6:	80 83       	st	Z, r24
    26e8:	e0 e0       	ldi	r30, 0x00	; 0
    26ea:	f6 e0       	ldi	r31, 0x06	; 6
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	86 83       	std	Z+6, r24	; 0x06
    26f0:	0f 2e       	mov	r0, r31
    26f2:	f0 e2       	ldi	r31, 0x20	; 32
    26f4:	cf 2e       	mov	r12, r31
    26f6:	f6 e0       	ldi	r31, 0x06	; 6
    26f8:	df 2e       	mov	r13, r31
    26fa:	f0 2d       	mov	r31, r0
    26fc:	93 ef       	ldi	r25, 0xF3	; 243
    26fe:	d6 01       	movw	r26, r12
    2700:	16 96       	adiw	r26, 0x06	; 6
    2702:	9c 93       	st	X, r25
    2704:	16 97       	sbiw	r26, 0x06	; 6
    2706:	82 83       	std	Z+2, r24	; 0x02
    2708:	12 96       	adiw	r26, 0x02	; 2
    270a:	9c 93       	st	X, r25
    270c:	12 97       	sbiw	r26, 0x02	; 2
    270e:	94 e0       	ldi	r25, 0x04	; 4
    2710:	11 96       	adiw	r26, 0x01	; 1
    2712:	9c 93       	st	X, r25
    2714:	11 97       	sbiw	r26, 0x01	; 1
    2716:	16 96       	adiw	r26, 0x06	; 6
    2718:	9c 93       	st	X, r25
    271a:	c0 e8       	ldi	r28, 0x80	; 128
    271c:	d6 e0       	ldi	r29, 0x06	; 6
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	a0 ea       	ldi	r26, 0xA0	; 160
    2722:	b6 e0       	ldi	r27, 0x06	; 6
    2724:	15 96       	adiw	r26, 0x05	; 5
    2726:	8c 93       	st	X, r24
    2728:	15 97       	sbiw	r26, 0x05	; 5
    272a:	e0 ee       	ldi	r30, 0xE0	; 224
    272c:	f6 e0       	ldi	r31, 0x06	; 6
    272e:	85 83       	std	Z+5, r24	; 0x05
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	8c 93       	st	X, r24
    2736:	81 83       	std	Z+1, r24	; 0x01
    2738:	e0 e0       	ldi	r30, 0x00	; 0
    273a:	f7 e0       	ldi	r31, 0x07	; 7
    273c:	85 83       	std	Z+5, r24	; 0x05
    273e:	c0 e2       	ldi	r28, 0x20	; 32
    2740:	d7 e0       	ldi	r29, 0x07	; 7
    2742:	9f e2       	ldi	r25, 0x2F	; 47
    2744:	9d 83       	std	Y+5, r25	; 0x05
    2746:	90 e1       	ldi	r25, 0x10	; 16
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	82 83       	std	Z+2, r24	; 0x02
    274c:	8f e3       	ldi	r24, 0x3F	; 63
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	0f 2e       	mov	r0, r31
    2752:	f0 ec       	ldi	r31, 0xC0	; 192
    2754:	ef 2e       	mov	r14, r31
    2756:	f7 e0       	ldi	r31, 0x07	; 7
    2758:	ff 2e       	mov	r15, r31
    275a:	f0 2d       	mov	r31, r0
    275c:	68 94       	set
    275e:	bb 24       	eor	r11, r11
    2760:	b3 f8       	bld	r11, 3
    2762:	f7 01       	movw	r30, r14
    2764:	b5 82       	std	Z+5, r11	; 0x05
    2766:	b1 82       	std	Z+1, r11	; 0x01
    2768:	00 ee       	ldi	r16, 0xE0	; 224
    276a:	17 e0       	ldi	r17, 0x07	; 7
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	d8 01       	movw	r26, r16
    2770:	15 96       	adiw	r26, 0x05	; 5
    2772:	8c 93       	st	X, r24
    2774:	15 97       	sbiw	r26, 0x05	; 5
    2776:	15 96       	adiw	r26, 0x05	; 5
    2778:	8c 93       	st	X, r24
    277a:	48 e0       	ldi	r20, 0x08	; 8
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	67 e8       	ldi	r22, 0x87	; 135
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	80 e1       	ldi	r24, 0x10	; 16
    2784:	96 e0       	ldi	r25, 0x06	; 6
    2786:	0e 94 32 24 	call	0x4864	; 0x4864 <memset>
    278a:	87 e8       	ldi	r24, 0x87	; 135
    278c:	97 e8       	ldi	r25, 0x87	; 135
    278e:	dc 01       	movw	r26, r24
    2790:	80 93 34 06 	sts	0x0634, r24
    2794:	90 93 35 06 	sts	0x0635, r25
    2798:	a0 93 36 06 	sts	0x0636, r26
    279c:	b0 93 37 06 	sts	0x0637, r27
    27a0:	48 e0       	ldi	r20, 0x08	; 8
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	67 e8       	ldi	r22, 0x87	; 135
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	80 e9       	ldi	r24, 0x90	; 144
    27aa:	96 e0       	ldi	r25, 0x06	; 6
    27ac:	0e 94 32 24 	call	0x4864	; 0x4864 <memset>
    27b0:	48 e0       	ldi	r20, 0x08	; 8
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	67 e8       	ldi	r22, 0x87	; 135
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	80 eb       	ldi	r24, 0xB0	; 176
    27ba:	96 e0       	ldi	r25, 0x06	; 6
    27bc:	0e 94 32 24 	call	0x4864	; 0x4864 <memset>
    27c0:	48 e0       	ldi	r20, 0x08	; 8
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	67 e8       	ldi	r22, 0x87	; 135
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	80 ef       	ldi	r24, 0xF0	; 240
    27ca:	96 e0       	ldi	r25, 0x06	; 6
    27cc:	0e 94 32 24 	call	0x4864	; 0x4864 <memset>
    27d0:	48 e0       	ldi	r20, 0x08	; 8
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	60 e8       	ldi	r22, 0x80	; 128
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	80 e1       	ldi	r24, 0x10	; 16
    27da:	97 e0       	ldi	r25, 0x07	; 7
    27dc:	0e 94 32 24 	call	0x4864	; 0x4864 <memset>
    27e0:	48 e0       	ldi	r20, 0x08	; 8
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	60 e8       	ldi	r22, 0x80	; 128
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	80 e3       	ldi	r24, 0x30	; 48
    27ea:	97 e0       	ldi	r25, 0x07	; 7
    27ec:	0e 94 32 24 	call	0x4864	; 0x4864 <memset>
    27f0:	80 e9       	ldi	r24, 0x90	; 144
    27f2:	f6 01       	movw	r30, r12
    27f4:	80 8b       	std	Z+16, r24	; 0x10
    27f6:	81 8b       	std	Z+17, r24	; 0x11
    27f8:	82 8b       	std	Z+18, r24	; 0x12
    27fa:	83 8b       	std	Z+19, r24	; 0x13
    27fc:	e0 e4       	ldi	r30, 0x40	; 64
    27fe:	f6 e0       	ldi	r31, 0x06	; 6
    2800:	98 eb       	ldi	r25, 0xB8	; 184
    2802:	90 8b       	std	Z+16, r25	; 0x10
    2804:	91 8b       	std	Z+17, r25	; 0x11
    2806:	82 8b       	std	Z+18, r24	; 0x12
    2808:	83 8b       	std	Z+19, r24	; 0x13
    280a:	84 8b       	std	Z+20, r24	; 0x14
    280c:	85 8b       	std	Z+21, r24	; 0x15
    280e:	80 e8       	ldi	r24, 0x80	; 128
    2810:	86 8b       	std	Z+22, r24	; 0x16
    2812:	87 8b       	std	Z+23, r24	; 0x17
    2814:	e0 e6       	ldi	r30, 0x60	; 96
    2816:	f6 e0       	ldi	r31, 0x06	; 6
    2818:	80 8b       	std	Z+16, r24	; 0x10
    281a:	81 8b       	std	Z+17, r24	; 0x11
    281c:	82 8b       	std	Z+18, r24	; 0x12
    281e:	83 8b       	std	Z+19, r24	; 0x13
    2820:	84 8b       	std	Z+20, r24	; 0x14
    2822:	85 8b       	std	Z+21, r24	; 0x15
    2824:	8c 8b       	std	Y+20, r24	; 0x14
    2826:	8d 8b       	std	Y+21, r24	; 0x15
    2828:	8e 8b       	std	Y+22, r24	; 0x16
    282a:	8f 8b       	std	Y+23, r24	; 0x17
    282c:	88 e9       	ldi	r24, 0x98	; 152
    282e:	d7 01       	movw	r26, r14
    2830:	52 96       	adiw	r26, 0x12	; 18
    2832:	8c 93       	st	X, r24
    2834:	52 97       	sbiw	r26, 0x12	; 18
    2836:	8f ea       	ldi	r24, 0xAF	; 175
    2838:	53 96       	adiw	r26, 0x13	; 19
    283a:	8c 93       	st	X, r24
    283c:	f8 01       	movw	r30, r16
    283e:	82 8b       	std	Z+18, r24	; 0x12
    2840:	83 8b       	std	Z+19, r24	; 0x13
    2842:	03 e0       	ldi	r16, 0x03	; 3
    2844:	10 e0       	ldi	r17, 0x00	; 0
    2846:	26 e0       	ldi	r18, 0x06	; 6
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	64 e0       	ldi	r22, 0x04	; 4
    284c:	88 e1       	ldi	r24, 0x18	; 24
    284e:	90 e2       	ldi	r25, 0x20	; 32
    2850:	6e d4       	rcall	.+2268   	; 0x312e <RTCInit>
    2852:	88 e1       	ldi	r24, 0x18	; 24
    2854:	80 93 70 00 	sts	0x0070, r24
    2858:	85 e0       	ldi	r24, 0x05	; 5
    285a:	80 93 71 00 	sts	0x0071, r24
    285e:	80 93 72 00 	sts	0x0072, r24
    2862:	b0 92 73 00 	sts	0x0073, r11
    2866:	88 e6       	ldi	r24, 0x68	; 104
    2868:	80 93 74 00 	sts	0x0074, r24
    286c:	88 e7       	ldi	r24, 0x78	; 120
    286e:	80 93 75 00 	sts	0x0075, r24
    2872:	80 93 76 00 	sts	0x0076, r24
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	86 e9       	ldi	r24, 0x96	; 150
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 d4 06 	call	0xda8	; 0xda8 <CCPWrite>
    2880:	0f da       	rcall	.-3042   	; 0x1ca0 <USB_Init>
    2882:	63 e1       	ldi	r22, 0x13	; 19
    2884:	79 e2       	ldi	r23, 0x29	; 41
    2886:	8e e5       	ldi	r24, 0x5E	; 94
    2888:	91 e2       	ldi	r25, 0x21	; 33
    288a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <CDC_Device_CreateStream>
    288e:	e1 e2       	ldi	r30, 0x21	; 33
    2890:	f9 e2       	ldi	r31, 0x29	; 41
    2892:	83 e1       	ldi	r24, 0x13	; 19
    2894:	99 e2       	ldi	r25, 0x29	; 41
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	82 83       	std	Z+2, r24	; 0x02
    289c:	93 83       	std	Z+3, r25	; 0x03
    289e:	87 e0       	ldi	r24, 0x07	; 7
    28a0:	80 93 a2 00 	sts	0x00A2, r24
    28a4:	78 94       	sei
    28a6:	ff ef       	ldi	r31, 0xFF	; 255
    28a8:	27 ea       	ldi	r18, 0xA7	; 167
    28aa:	81 e6       	ldi	r24, 0x61	; 97
    28ac:	f1 50       	subi	r31, 0x01	; 1
    28ae:	20 40       	sbci	r18, 0x00	; 0
    28b0:	80 40       	sbci	r24, 0x00	; 0
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <initHardware+0x298>
    28b4:	00 c0       	rjmp	.+0      	; 0x28b6 <initHardware+0x2a2>
    28b6:	00 00       	nop
    28b8:	80 91 24 20 	lds	r24, 0x2024
    28bc:	90 91 25 20 	lds	r25, 0x2025
    28c0:	a0 91 26 20 	lds	r26, 0x2026
    28c4:	b0 91 27 20 	lds	r27, 0x2027
    28c8:	89 2b       	or	r24, r25
    28ca:	8a 2b       	or	r24, r26
    28cc:	8b 2b       	or	r24, r27
    28ce:	69 f5       	brne	.+90     	; 0x292a <initHardware+0x316>
    28d0:	c0 ec       	ldi	r28, 0xC0	; 192
    28d2:	d1 e0       	ldi	r29, 0x01	; 1
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	8a 87       	std	Y+10, r24	; 0x0a
    28d8:	e5 e1       	ldi	r30, 0x15	; 21
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	24 91       	lpm	r18, Z
    28de:	e4 e1       	ldi	r30, 0x14	; 20
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	44 91       	lpm	r20, Z
    28e4:	e3 e1       	ldi	r30, 0x13	; 19
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	34 91       	lpm	r19, Z
    28ea:	e2 e1       	ldi	r30, 0x12	; 18
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	84 91       	lpm	r24, Z
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	b8 2f       	mov	r27, r24
    28f8:	aa 27       	eor	r26, r26
    28fa:	99 27       	eor	r25, r25
    28fc:	88 27       	eor	r24, r24
    28fe:	a3 2b       	or	r26, r19
    2900:	82 2b       	or	r24, r18
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	54 2f       	mov	r21, r20
    2906:	44 27       	eor	r20, r20
    2908:	05 2e       	mov	r0, r21
    290a:	00 0c       	add	r0, r0
    290c:	66 0b       	sbc	r22, r22
    290e:	77 0b       	sbc	r23, r23
    2910:	84 2b       	or	r24, r20
    2912:	95 2b       	or	r25, r21
    2914:	a6 2b       	or	r26, r22
    2916:	b7 2b       	or	r27, r23
    2918:	80 93 24 20 	sts	0x2024, r24
    291c:	90 93 25 20 	sts	0x2025, r25
    2920:	a0 93 26 20 	sts	0x2026, r26
    2924:	b0 93 27 20 	sts	0x2027, r27
    2928:	1a 86       	std	Y+10, r1	; 0x0a
    292a:	80 91 24 20 	lds	r24, 0x2024
    292e:	90 91 25 20 	lds	r25, 0x2025
    2932:	a0 91 26 20 	lds	r26, 0x2026
    2936:	b0 91 27 20 	lds	r27, 0x2027
    293a:	81 15       	cp	r24, r1
    293c:	e5 e1       	ldi	r30, 0x15	; 21
    293e:	9e 07       	cpc	r25, r30
    2940:	a1 05       	cpc	r26, r1
    2942:	e4 e0       	ldi	r30, 0x04	; 4
    2944:	be 07       	cpc	r27, r30
    2946:	09 f4       	brne	.+2      	; 0x294a <initHardware+0x336>
    2948:	ba c0       	rjmp	.+372    	; 0x2abe <initHardware+0x4aa>
    294a:	88 f4       	brcc	.+34     	; 0x296e <initHardware+0x35a>
    294c:	81 15       	cp	r24, r1
    294e:	2b e0       	ldi	r18, 0x0B	; 11
    2950:	92 07       	cpc	r25, r18
    2952:	a1 05       	cpc	r26, r1
    2954:	21 e0       	ldi	r18, 0x01	; 1
    2956:	b2 07       	cpc	r27, r18
    2958:	09 f4       	brne	.+2      	; 0x295c <initHardware+0x348>
    295a:	eb c0       	rjmp	.+470    	; 0x2b32 <initHardware+0x51e>
    295c:	81 15       	cp	r24, r1
    295e:	e5 e1       	ldi	r30, 0x15	; 21
    2960:	9e 07       	cpc	r25, r30
    2962:	a1 05       	cpc	r26, r1
    2964:	e3 e0       	ldi	r30, 0x03	; 3
    2966:	be 07       	cpc	r27, r30
    2968:	09 f4       	brne	.+2      	; 0x296c <initHardware+0x358>
    296a:	5d c0       	rjmp	.+186    	; 0x2a26 <initHardware+0x412>
    296c:	fc c0       	rjmp	.+504    	; 0x2b66 <initHardware+0x552>
    296e:	81 15       	cp	r24, r1
    2970:	f8 e0       	ldi	r31, 0x08	; 8
    2972:	9f 07       	cpc	r25, r31
    2974:	a1 05       	cpc	r26, r1
    2976:	f1 e1       	ldi	r31, 0x11	; 17
    2978:	bf 07       	cpc	r27, r31
    297a:	09 f4       	brne	.+2      	; 0x297e <initHardware+0x36a>
    297c:	f0 c0       	rjmp	.+480    	; 0x2b5e <initHardware+0x54a>
    297e:	81 15       	cp	r24, r1
    2980:	25 e1       	ldi	r18, 0x15	; 21
    2982:	92 07       	cpc	r25, r18
    2984:	a1 05       	cpc	r26, r1
    2986:	22 e2       	ldi	r18, 0x22	; 34
    2988:	b2 07       	cpc	r27, r18
    298a:	09 f0       	breq	.+2      	; 0x298e <initHardware+0x37a>
    298c:	ec c0       	rjmp	.+472    	; 0x2b66 <initHardware+0x552>
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	80 93 28 20 	sts	0x2028, r24
    2994:	8d e0       	ldi	r24, 0x0D	; 13
    2996:	e9 e7       	ldi	r30, 0x79	; 121
    2998:	f1 e2       	ldi	r31, 0x21	; 33
    299a:	a1 ec       	ldi	r26, 0xC1	; 193
    299c:	b0 e2       	ldi	r27, 0x20	; 32
    299e:	01 90       	ld	r0, Z+
    29a0:	0d 92       	st	X+, r0
    29a2:	8a 95       	dec	r24
    29a4:	e1 f7       	brne	.-8      	; 0x299e <initHardware+0x38a>
    29a6:	8d e0       	ldi	r24, 0x0D	; 13
    29a8:	e6 e8       	ldi	r30, 0x86	; 134
    29aa:	f1 e2       	ldi	r31, 0x21	; 33
    29ac:	ae ec       	ldi	r26, 0xCE	; 206
    29ae:	b0 e2       	ldi	r27, 0x20	; 32
    29b0:	01 90       	ld	r0, Z+
    29b2:	0d 92       	st	X+, r0
    29b4:	8a 95       	dec	r24
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <initHardware+0x39c>
    29b8:	8d e0       	ldi	r24, 0x0D	; 13
    29ba:	e3 e9       	ldi	r30, 0x93	; 147
    29bc:	f1 e2       	ldi	r31, 0x21	; 33
    29be:	ab ed       	ldi	r26, 0xDB	; 219
    29c0:	b0 e2       	ldi	r27, 0x20	; 32
    29c2:	01 90       	ld	r0, Z+
    29c4:	0d 92       	st	X+, r0
    29c6:	8a 95       	dec	r24
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <initHardware+0x3ae>
    29ca:	8d e0       	ldi	r24, 0x0D	; 13
    29cc:	e0 ea       	ldi	r30, 0xA0	; 160
    29ce:	f1 e2       	ldi	r31, 0x21	; 33
    29d0:	a8 ee       	ldi	r26, 0xE8	; 232
    29d2:	b0 e2       	ldi	r27, 0x20	; 32
    29d4:	01 90       	ld	r0, Z+
    29d6:	0d 92       	st	X+, r0
    29d8:	8a 95       	dec	r24
    29da:	e1 f7       	brne	.-8      	; 0x29d4 <initHardware+0x3c0>
    29dc:	8d e0       	ldi	r24, 0x0D	; 13
    29de:	ed ea       	ldi	r30, 0xAD	; 173
    29e0:	f1 e2       	ldi	r31, 0x21	; 33
    29e2:	a5 ef       	ldi	r26, 0xF5	; 245
    29e4:	b0 e2       	ldi	r27, 0x20	; 32
    29e6:	01 90       	ld	r0, Z+
    29e8:	0d 92       	st	X+, r0
    29ea:	8a 95       	dec	r24
    29ec:	e1 f7       	brne	.-8      	; 0x29e6 <initHardware+0x3d2>
    29ee:	8d e0       	ldi	r24, 0x0D	; 13
    29f0:	ea eb       	ldi	r30, 0xBA	; 186
    29f2:	f1 e2       	ldi	r31, 0x21	; 33
    29f4:	a2 e0       	ldi	r26, 0x02	; 2
    29f6:	b1 e2       	ldi	r27, 0x21	; 33
    29f8:	01 90       	ld	r0, Z+
    29fa:	0d 92       	st	X+, r0
    29fc:	8a 95       	dec	r24
    29fe:	e1 f7       	brne	.-8      	; 0x29f8 <initHardware+0x3e4>
    2a00:	8d e0       	ldi	r24, 0x0D	; 13
    2a02:	e7 ec       	ldi	r30, 0xC7	; 199
    2a04:	f1 e2       	ldi	r31, 0x21	; 33
    2a06:	af e0       	ldi	r26, 0x0F	; 15
    2a08:	b1 e2       	ldi	r27, 0x21	; 33
    2a0a:	01 90       	ld	r0, Z+
    2a0c:	0d 92       	st	X+, r0
    2a0e:	8a 95       	dec	r24
    2a10:	e1 f7       	brne	.-8      	; 0x2a0a <initHardware+0x3f6>
    2a12:	8d e0       	ldi	r24, 0x0D	; 13
    2a14:	e4 ed       	ldi	r30, 0xD4	; 212
    2a16:	f1 e2       	ldi	r31, 0x21	; 33
    2a18:	ac e1       	ldi	r26, 0x1C	; 28
    2a1a:	b1 e2       	ldi	r27, 0x21	; 33
    2a1c:	01 90       	ld	r0, Z+
    2a1e:	0d 92       	st	X+, r0
    2a20:	8a 95       	dec	r24
    2a22:	e1 f7       	brne	.-8      	; 0x2a1c <initHardware+0x408>
    2a24:	b3 c0       	rjmp	.+358    	; 0x2b8c <initHardware+0x578>
    2a26:	82 e0       	ldi	r24, 0x02	; 2
    2a28:	80 93 28 20 	sts	0x2028, r24
    2a2c:	8d e0       	ldi	r24, 0x0D	; 13
    2a2e:	e1 ee       	ldi	r30, 0xE1	; 225
    2a30:	f1 e2       	ldi	r31, 0x21	; 33
    2a32:	a1 ec       	ldi	r26, 0xC1	; 193
    2a34:	b0 e2       	ldi	r27, 0x20	; 32
    2a36:	01 90       	ld	r0, Z+
    2a38:	0d 92       	st	X+, r0
    2a3a:	8a 95       	dec	r24
    2a3c:	e1 f7       	brne	.-8      	; 0x2a36 <initHardware+0x422>
    2a3e:	8d e0       	ldi	r24, 0x0D	; 13
    2a40:	ee ee       	ldi	r30, 0xEE	; 238
    2a42:	f1 e2       	ldi	r31, 0x21	; 33
    2a44:	ae ec       	ldi	r26, 0xCE	; 206
    2a46:	b0 e2       	ldi	r27, 0x20	; 32
    2a48:	01 90       	ld	r0, Z+
    2a4a:	0d 92       	st	X+, r0
    2a4c:	8a 95       	dec	r24
    2a4e:	e1 f7       	brne	.-8      	; 0x2a48 <initHardware+0x434>
    2a50:	8d e0       	ldi	r24, 0x0D	; 13
    2a52:	eb ef       	ldi	r30, 0xFB	; 251
    2a54:	f1 e2       	ldi	r31, 0x21	; 33
    2a56:	ab ed       	ldi	r26, 0xDB	; 219
    2a58:	b0 e2       	ldi	r27, 0x20	; 32
    2a5a:	01 90       	ld	r0, Z+
    2a5c:	0d 92       	st	X+, r0
    2a5e:	8a 95       	dec	r24
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <initHardware+0x446>
    2a62:	8d e0       	ldi	r24, 0x0D	; 13
    2a64:	e8 e0       	ldi	r30, 0x08	; 8
    2a66:	f2 e2       	ldi	r31, 0x22	; 34
    2a68:	a8 ee       	ldi	r26, 0xE8	; 232
    2a6a:	b0 e2       	ldi	r27, 0x20	; 32
    2a6c:	01 90       	ld	r0, Z+
    2a6e:	0d 92       	st	X+, r0
    2a70:	8a 95       	dec	r24
    2a72:	e1 f7       	brne	.-8      	; 0x2a6c <initHardware+0x458>
    2a74:	8d e0       	ldi	r24, 0x0D	; 13
    2a76:	e5 e1       	ldi	r30, 0x15	; 21
    2a78:	f2 e2       	ldi	r31, 0x22	; 34
    2a7a:	a5 ef       	ldi	r26, 0xF5	; 245
    2a7c:	b0 e2       	ldi	r27, 0x20	; 32
    2a7e:	01 90       	ld	r0, Z+
    2a80:	0d 92       	st	X+, r0
    2a82:	8a 95       	dec	r24
    2a84:	e1 f7       	brne	.-8      	; 0x2a7e <initHardware+0x46a>
    2a86:	8d e0       	ldi	r24, 0x0D	; 13
    2a88:	e2 e2       	ldi	r30, 0x22	; 34
    2a8a:	f2 e2       	ldi	r31, 0x22	; 34
    2a8c:	a2 e0       	ldi	r26, 0x02	; 2
    2a8e:	b1 e2       	ldi	r27, 0x21	; 33
    2a90:	01 90       	ld	r0, Z+
    2a92:	0d 92       	st	X+, r0
    2a94:	8a 95       	dec	r24
    2a96:	e1 f7       	brne	.-8      	; 0x2a90 <initHardware+0x47c>
    2a98:	8d e0       	ldi	r24, 0x0D	; 13
    2a9a:	ef e2       	ldi	r30, 0x2F	; 47
    2a9c:	f2 e2       	ldi	r31, 0x22	; 34
    2a9e:	af e0       	ldi	r26, 0x0F	; 15
    2aa0:	b1 e2       	ldi	r27, 0x21	; 33
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	0d 92       	st	X+, r0
    2aa6:	8a 95       	dec	r24
    2aa8:	e1 f7       	brne	.-8      	; 0x2aa2 <initHardware+0x48e>
    2aaa:	8d e0       	ldi	r24, 0x0D	; 13
    2aac:	ec e3       	ldi	r30, 0x3C	; 60
    2aae:	f2 e2       	ldi	r31, 0x22	; 34
    2ab0:	ac e1       	ldi	r26, 0x1C	; 28
    2ab2:	b1 e2       	ldi	r27, 0x21	; 33
    2ab4:	01 90       	ld	r0, Z+
    2ab6:	0d 92       	st	X+, r0
    2ab8:	8a 95       	dec	r24
    2aba:	e1 f7       	brne	.-8      	; 0x2ab4 <initHardware+0x4a0>
    2abc:	67 c0       	rjmp	.+206    	; 0x2b8c <initHardware+0x578>
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	80 93 28 20 	sts	0x2028, r24
    2ac4:	8d e0       	ldi	r24, 0x0D	; 13
    2ac6:	e9 e4       	ldi	r30, 0x49	; 73
    2ac8:	f2 e2       	ldi	r31, 0x22	; 34
    2aca:	a1 ec       	ldi	r26, 0xC1	; 193
    2acc:	b0 e2       	ldi	r27, 0x20	; 32
    2ace:	01 90       	ld	r0, Z+
    2ad0:	0d 92       	st	X+, r0
    2ad2:	8a 95       	dec	r24
    2ad4:	e1 f7       	brne	.-8      	; 0x2ace <initHardware+0x4ba>
    2ad6:	8d e0       	ldi	r24, 0x0D	; 13
    2ad8:	e6 e5       	ldi	r30, 0x56	; 86
    2ada:	f2 e2       	ldi	r31, 0x22	; 34
    2adc:	ae ec       	ldi	r26, 0xCE	; 206
    2ade:	b0 e2       	ldi	r27, 0x20	; 32
    2ae0:	01 90       	ld	r0, Z+
    2ae2:	0d 92       	st	X+, r0
    2ae4:	8a 95       	dec	r24
    2ae6:	e1 f7       	brne	.-8      	; 0x2ae0 <initHardware+0x4cc>
    2ae8:	8d e0       	ldi	r24, 0x0D	; 13
    2aea:	e3 e6       	ldi	r30, 0x63	; 99
    2aec:	f2 e2       	ldi	r31, 0x22	; 34
    2aee:	ab ed       	ldi	r26, 0xDB	; 219
    2af0:	b0 e2       	ldi	r27, 0x20	; 32
    2af2:	01 90       	ld	r0, Z+
    2af4:	0d 92       	st	X+, r0
    2af6:	8a 95       	dec	r24
    2af8:	e1 f7       	brne	.-8      	; 0x2af2 <initHardware+0x4de>
    2afa:	8d e0       	ldi	r24, 0x0D	; 13
    2afc:	e0 e7       	ldi	r30, 0x70	; 112
    2afe:	f2 e2       	ldi	r31, 0x22	; 34
    2b00:	a8 ee       	ldi	r26, 0xE8	; 232
    2b02:	b0 e2       	ldi	r27, 0x20	; 32
    2b04:	01 90       	ld	r0, Z+
    2b06:	0d 92       	st	X+, r0
    2b08:	8a 95       	dec	r24
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <initHardware+0x4f0>
    2b0c:	8d e0       	ldi	r24, 0x0D	; 13
    2b0e:	ed e7       	ldi	r30, 0x7D	; 125
    2b10:	f2 e2       	ldi	r31, 0x22	; 34
    2b12:	af e0       	ldi	r26, 0x0F	; 15
    2b14:	b1 e2       	ldi	r27, 0x21	; 33
    2b16:	01 90       	ld	r0, Z+
    2b18:	0d 92       	st	X+, r0
    2b1a:	8a 95       	dec	r24
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <initHardware+0x502>
    2b1e:	8d e0       	ldi	r24, 0x0D	; 13
    2b20:	ea e8       	ldi	r30, 0x8A	; 138
    2b22:	f2 e2       	ldi	r31, 0x22	; 34
    2b24:	ac e1       	ldi	r26, 0x1C	; 28
    2b26:	b1 e2       	ldi	r27, 0x21	; 33
    2b28:	01 90       	ld	r0, Z+
    2b2a:	0d 92       	st	X+, r0
    2b2c:	8a 95       	dec	r24
    2b2e:	e1 f7       	brne	.-8      	; 0x2b28 <initHardware+0x514>
    2b30:	2d c0       	rjmp	.+90     	; 0x2b8c <initHardware+0x578>
    2b32:	8a e0       	ldi	r24, 0x0A	; 10
    2b34:	80 93 28 20 	sts	0x2028, r24
    2b38:	8d e0       	ldi	r24, 0x0D	; 13
    2b3a:	e7 e9       	ldi	r30, 0x97	; 151
    2b3c:	f2 e2       	ldi	r31, 0x22	; 34
    2b3e:	a1 ec       	ldi	r26, 0xC1	; 193
    2b40:	b0 e2       	ldi	r27, 0x20	; 32
    2b42:	01 90       	ld	r0, Z+
    2b44:	0d 92       	st	X+, r0
    2b46:	8a 95       	dec	r24
    2b48:	e1 f7       	brne	.-8      	; 0x2b42 <initHardware+0x52e>
    2b4a:	8d e0       	ldi	r24, 0x0D	; 13
    2b4c:	e4 ea       	ldi	r30, 0xA4	; 164
    2b4e:	f2 e2       	ldi	r31, 0x22	; 34
    2b50:	ae ec       	ldi	r26, 0xCE	; 206
    2b52:	b0 e2       	ldi	r27, 0x20	; 32
    2b54:	01 90       	ld	r0, Z+
    2b56:	0d 92       	st	X+, r0
    2b58:	8a 95       	dec	r24
    2b5a:	e1 f7       	brne	.-8      	; 0x2b54 <initHardware+0x540>
    2b5c:	17 c0       	rjmp	.+46     	; 0x2b8c <initHardware+0x578>
    2b5e:	8d e0       	ldi	r24, 0x0D	; 13
    2b60:	80 93 28 20 	sts	0x2028, r24
    2b64:	13 c0       	rjmp	.+38     	; 0x2b8c <initHardware+0x578>
    2b66:	2f ef       	ldi	r18, 0xFF	; 255
    2b68:	20 93 28 20 	sts	0x2028, r18
    2b6c:	bf 93       	push	r27
    2b6e:	af 93       	push	r26
    2b70:	9f 93       	push	r25
    2b72:	8f 93       	push	r24
    2b74:	8d e7       	ldi	r24, 0x7D	; 125
    2b76:	97 e0       	ldi	r25, 0x07	; 7
    2b78:	9f 93       	push	r25
    2b7a:	8f 93       	push	r24
    2b7c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <appUIPrintln_P>
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	77 dc       	rcall	.-1810   	; 0x247c <roomInit>
    2b8e:	8e e2       	ldi	r24, 0x2E	; 46
    2b90:	90 e2       	ldi	r25, 0x20	; 32
    2b92:	0e 94 b4 04 	call	0x968	; 0x968 <adcInit>
    2b96:	1f 92       	push	r1
    2b98:	1f 92       	push	r1
    2b9a:	83 ec       	ldi	r24, 0xC3	; 195
    2b9c:	8f 93       	push	r24
    2b9e:	80 e5       	ldi	r24, 0x50	; 80
    2ba0:	8f 93       	push	r24
    2ba2:	0f 2e       	mov	r0, r31
    2ba4:	81 2c       	mov	r8, r1
    2ba6:	f8 e4       	ldi	r31, 0x48	; 72
    2ba8:	9f 2e       	mov	r9, r31
    2baa:	f8 ee       	ldi	r31, 0xE8	; 232
    2bac:	af 2e       	mov	r10, r31
    2bae:	bb 24       	eor	r11, r11
    2bb0:	b3 94       	inc	r11
    2bb2:	f0 2d       	mov	r31, r0
    2bb4:	68 94       	set
    2bb6:	cc 24       	eor	r12, r12
    2bb8:	c6 f8       	bld	r12, 6
    2bba:	e1 2c       	mov	r14, r1
    2bbc:	f1 2c       	mov	r15, r1
    2bbe:	00 e0       	ldi	r16, 0x00	; 0
    2bc0:	21 e0       	ldi	r18, 0x01	; 1
    2bc2:	40 e4       	ldi	r20, 0x40	; 64
    2bc4:	56 e0       	ldi	r21, 0x06	; 6
    2bc6:	60 e8       	ldi	r22, 0x80	; 128
    2bc8:	74 e0       	ldi	r23, 0x04	; 4
    2bca:	8c e6       	ldi	r24, 0x6C	; 108
    2bcc:	90 e2       	ldi	r25, 0x20	; 32
    2bce:	be d6       	rcall	.+3452   	; 0x394c <twiInit>
    2bd0:	82 e6       	ldi	r24, 0x62	; 98
    2bd2:	90 e2       	ldi	r25, 0x20	; 32
    2bd4:	15 d3       	rcall	.+1578   	; 0x3200 <eventInit>
    2bd6:	8b ea       	ldi	r24, 0xAB	; 171
    2bd8:	97 e0       	ldi	r25, 0x07	; 7
    2bda:	9f 93       	push	r25
    2bdc:	8f 93       	push	r24
    2bde:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2be2:	83 e1       	ldi	r24, 0x13	; 19
    2be4:	99 e2       	ldi	r25, 0x29	; 41
    2be6:	86 dc       	rcall	.-1780   	; 0x24f4 <resetCausePrint>
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	ff 90       	pop	r15
    2bfe:	ef 90       	pop	r14
    2c00:	df 90       	pop	r13
    2c02:	cf 90       	pop	r12
    2c04:	bf 90       	pop	r11
    2c06:	af 90       	pop	r10
    2c08:	9f 90       	pop	r9
    2c0a:	8f 90       	pop	r8
    2c0c:	08 95       	ret

00002c0e <freeRam>:
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	1f 92       	push	r1
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	20 91 02 20 	lds	r18, 0x2002
    2c1c:	30 91 03 20 	lds	r19, 0x2003
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	82 1b       	sub	r24, r18
    2c26:	93 0b       	sbc	r25, r19
    2c28:	20 91 16 20 	lds	r18, 0x2016
    2c2c:	30 91 17 20 	lds	r19, 0x2017
    2c30:	82 17       	cp	r24, r18
    2c32:	93 07       	cpc	r25, r19
    2c34:	24 f4       	brge	.+8      	; 0x2c3e <freeRam+0x30>
    2c36:	80 93 16 20 	sts	0x2016, r24
    2c3a:	90 93 17 20 	sts	0x2017, r25
    2c3e:	80 91 16 20 	lds	r24, 0x2016
    2c42:	90 91 17 20 	lds	r25, 0x2017
    2c46:	0f 90       	pop	r0
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	08 95       	ret

00002c4e <deviceNameGet>:
    2c4e:	90 91 28 20 	lds	r25, 0x2028
    2c52:	91 30       	cpi	r25, 0x01	; 1
    2c54:	21 f0       	breq	.+8      	; 0x2c5e <deviceNameGet+0x10>
    2c56:	92 30       	cpi	r25, 0x02	; 2
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <deviceNameGet+0xe>
    2c5a:	48 c0       	rjmp	.+144    	; 0x2cec <deviceNameGet+0x9e>
    2c5c:	8e c0       	rjmp	.+284    	; 0x2d7a <deviceNameGet+0x12c>
    2c5e:	83 30       	cpi	r24, 0x03	; 3
    2c60:	11 f1       	breq	.+68     	; 0x2ca6 <deviceNameGet+0x58>
    2c62:	20 f4       	brcc	.+8      	; 0x2c6c <deviceNameGet+0x1e>
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	89 f0       	breq	.+34     	; 0x2c8a <deviceNameGet+0x3c>
    2c68:	48 f0       	brcs	.+18     	; 0x2c7c <deviceNameGet+0x2e>
    2c6a:	16 c0       	rjmp	.+44     	; 0x2c98 <deviceNameGet+0x4a>
    2c6c:	85 30       	cpi	r24, 0x05	; 5
    2c6e:	49 f1       	breq	.+82     	; 0x2cc2 <deviceNameGet+0x74>
    2c70:	08 f1       	brcs	.+66     	; 0x2cb4 <deviceNameGet+0x66>
    2c72:	86 30       	cpi	r24, 0x06	; 6
    2c74:	69 f1       	breq	.+90     	; 0x2cd0 <deviceNameGet+0x82>
    2c76:	87 30       	cpi	r24, 0x07	; 7
    2c78:	91 f1       	breq	.+100    	; 0x2cde <deviceNameGet+0x90>
    2c7a:	c5 c0       	rjmp	.+394    	; 0x2e06 <deviceNameGet+0x1b8>
    2c7c:	6f e1       	ldi	r22, 0x1F	; 31
    2c7e:	77 e0       	ldi	r23, 0x07	; 7
    2c80:	86 e0       	ldi	r24, 0x06	; 6
    2c82:	90 e2       	ldi	r25, 0x20	; 32
    2c84:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2c88:	be c0       	rjmp	.+380    	; 0x2e06 <deviceNameGet+0x1b8>
    2c8a:	67 e1       	ldi	r22, 0x17	; 23
    2c8c:	77 e0       	ldi	r23, 0x07	; 7
    2c8e:	86 e0       	ldi	r24, 0x06	; 6
    2c90:	90 e2       	ldi	r25, 0x20	; 32
    2c92:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2c96:	b7 c0       	rjmp	.+366    	; 0x2e06 <deviceNameGet+0x1b8>
    2c98:	6f e0       	ldi	r22, 0x0F	; 15
    2c9a:	77 e0       	ldi	r23, 0x07	; 7
    2c9c:	86 e0       	ldi	r24, 0x06	; 6
    2c9e:	90 e2       	ldi	r25, 0x20	; 32
    2ca0:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2ca4:	b0 c0       	rjmp	.+352    	; 0x2e06 <deviceNameGet+0x1b8>
    2ca6:	67 e0       	ldi	r22, 0x07	; 7
    2ca8:	77 e0       	ldi	r23, 0x07	; 7
    2caa:	86 e0       	ldi	r24, 0x06	; 6
    2cac:	90 e2       	ldi	r25, 0x20	; 32
    2cae:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2cb2:	a9 c0       	rjmp	.+338    	; 0x2e06 <deviceNameGet+0x1b8>
    2cb4:	61 e0       	ldi	r22, 0x01	; 1
    2cb6:	77 e0       	ldi	r23, 0x07	; 7
    2cb8:	86 e0       	ldi	r24, 0x06	; 6
    2cba:	90 e2       	ldi	r25, 0x20	; 32
    2cbc:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2cc0:	a2 c0       	rjmp	.+324    	; 0x2e06 <deviceNameGet+0x1b8>
    2cc2:	6b ef       	ldi	r22, 0xFB	; 251
    2cc4:	76 e0       	ldi	r23, 0x06	; 6
    2cc6:	86 e0       	ldi	r24, 0x06	; 6
    2cc8:	90 e2       	ldi	r25, 0x20	; 32
    2cca:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2cce:	9b c0       	rjmp	.+310    	; 0x2e06 <deviceNameGet+0x1b8>
    2cd0:	65 ef       	ldi	r22, 0xF5	; 245
    2cd2:	76 e0       	ldi	r23, 0x06	; 6
    2cd4:	86 e0       	ldi	r24, 0x06	; 6
    2cd6:	90 e2       	ldi	r25, 0x20	; 32
    2cd8:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2cdc:	94 c0       	rjmp	.+296    	; 0x2e06 <deviceNameGet+0x1b8>
    2cde:	6d ee       	ldi	r22, 0xED	; 237
    2ce0:	76 e0       	ldi	r23, 0x06	; 6
    2ce2:	86 e0       	ldi	r24, 0x06	; 6
    2ce4:	90 e2       	ldi	r25, 0x20	; 32
    2ce6:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2cea:	8d c0       	rjmp	.+282    	; 0x2e06 <deviceNameGet+0x1b8>
    2cec:	83 30       	cpi	r24, 0x03	; 3
    2cee:	11 f1       	breq	.+68     	; 0x2d34 <deviceNameGet+0xe6>
    2cf0:	20 f4       	brcc	.+8      	; 0x2cfa <deviceNameGet+0xac>
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	89 f0       	breq	.+34     	; 0x2d18 <deviceNameGet+0xca>
    2cf6:	48 f0       	brcs	.+18     	; 0x2d0a <deviceNameGet+0xbc>
    2cf8:	16 c0       	rjmp	.+44     	; 0x2d26 <deviceNameGet+0xd8>
    2cfa:	85 30       	cpi	r24, 0x05	; 5
    2cfc:	49 f1       	breq	.+82     	; 0x2d50 <deviceNameGet+0x102>
    2cfe:	08 f1       	brcs	.+66     	; 0x2d42 <deviceNameGet+0xf4>
    2d00:	86 30       	cpi	r24, 0x06	; 6
    2d02:	69 f1       	breq	.+90     	; 0x2d5e <deviceNameGet+0x110>
    2d04:	87 30       	cpi	r24, 0x07	; 7
    2d06:	91 f1       	breq	.+100    	; 0x2d6c <deviceNameGet+0x11e>
    2d08:	7e c0       	rjmp	.+252    	; 0x2e06 <deviceNameGet+0x1b8>
    2d0a:	66 ee       	ldi	r22, 0xE6	; 230
    2d0c:	76 e0       	ldi	r23, 0x06	; 6
    2d0e:	86 e0       	ldi	r24, 0x06	; 6
    2d10:	90 e2       	ldi	r25, 0x20	; 32
    2d12:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d16:	77 c0       	rjmp	.+238    	; 0x2e06 <deviceNameGet+0x1b8>
    2d18:	6f ed       	ldi	r22, 0xDF	; 223
    2d1a:	76 e0       	ldi	r23, 0x06	; 6
    2d1c:	86 e0       	ldi	r24, 0x06	; 6
    2d1e:	90 e2       	ldi	r25, 0x20	; 32
    2d20:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d24:	70 c0       	rjmp	.+224    	; 0x2e06 <deviceNameGet+0x1b8>
    2d26:	68 ed       	ldi	r22, 0xD8	; 216
    2d28:	76 e0       	ldi	r23, 0x06	; 6
    2d2a:	86 e0       	ldi	r24, 0x06	; 6
    2d2c:	90 e2       	ldi	r25, 0x20	; 32
    2d2e:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d32:	69 c0       	rjmp	.+210    	; 0x2e06 <deviceNameGet+0x1b8>
    2d34:	61 ed       	ldi	r22, 0xD1	; 209
    2d36:	76 e0       	ldi	r23, 0x06	; 6
    2d38:	86 e0       	ldi	r24, 0x06	; 6
    2d3a:	90 e2       	ldi	r25, 0x20	; 32
    2d3c:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d40:	62 c0       	rjmp	.+196    	; 0x2e06 <deviceNameGet+0x1b8>
    2d42:	6a ec       	ldi	r22, 0xCA	; 202
    2d44:	76 e0       	ldi	r23, 0x06	; 6
    2d46:	86 e0       	ldi	r24, 0x06	; 6
    2d48:	90 e2       	ldi	r25, 0x20	; 32
    2d4a:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d4e:	5b c0       	rjmp	.+182    	; 0x2e06 <deviceNameGet+0x1b8>
    2d50:	63 ec       	ldi	r22, 0xC3	; 195
    2d52:	76 e0       	ldi	r23, 0x06	; 6
    2d54:	86 e0       	ldi	r24, 0x06	; 6
    2d56:	90 e2       	ldi	r25, 0x20	; 32
    2d58:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d5c:	54 c0       	rjmp	.+168    	; 0x2e06 <deviceNameGet+0x1b8>
    2d5e:	6c eb       	ldi	r22, 0xBC	; 188
    2d60:	76 e0       	ldi	r23, 0x06	; 6
    2d62:	86 e0       	ldi	r24, 0x06	; 6
    2d64:	90 e2       	ldi	r25, 0x20	; 32
    2d66:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d6a:	4d c0       	rjmp	.+154    	; 0x2e06 <deviceNameGet+0x1b8>
    2d6c:	65 eb       	ldi	r22, 0xB5	; 181
    2d6e:	76 e0       	ldi	r23, 0x06	; 6
    2d70:	86 e0       	ldi	r24, 0x06	; 6
    2d72:	90 e2       	ldi	r25, 0x20	; 32
    2d74:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2d78:	46 c0       	rjmp	.+140    	; 0x2e06 <deviceNameGet+0x1b8>
    2d7a:	83 30       	cpi	r24, 0x03	; 3
    2d7c:	11 f1       	breq	.+68     	; 0x2dc2 <deviceNameGet+0x174>
    2d7e:	20 f4       	brcc	.+8      	; 0x2d88 <deviceNameGet+0x13a>
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	89 f0       	breq	.+34     	; 0x2da6 <deviceNameGet+0x158>
    2d84:	48 f0       	brcs	.+18     	; 0x2d98 <deviceNameGet+0x14a>
    2d86:	16 c0       	rjmp	.+44     	; 0x2db4 <deviceNameGet+0x166>
    2d88:	85 30       	cpi	r24, 0x05	; 5
    2d8a:	49 f1       	breq	.+82     	; 0x2dde <deviceNameGet+0x190>
    2d8c:	08 f1       	brcs	.+66     	; 0x2dd0 <deviceNameGet+0x182>
    2d8e:	86 30       	cpi	r24, 0x06	; 6
    2d90:	69 f1       	breq	.+90     	; 0x2dec <deviceNameGet+0x19e>
    2d92:	87 30       	cpi	r24, 0x07	; 7
    2d94:	91 f1       	breq	.+100    	; 0x2dfa <deviceNameGet+0x1ac>
    2d96:	37 c0       	rjmp	.+110    	; 0x2e06 <deviceNameGet+0x1b8>
    2d98:	63 eb       	ldi	r22, 0xB3	; 179
    2d9a:	76 e0       	ldi	r23, 0x06	; 6
    2d9c:	86 e0       	ldi	r24, 0x06	; 6
    2d9e:	90 e2       	ldi	r25, 0x20	; 32
    2da0:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2da4:	30 c0       	rjmp	.+96     	; 0x2e06 <deviceNameGet+0x1b8>
    2da6:	61 eb       	ldi	r22, 0xB1	; 177
    2da8:	76 e0       	ldi	r23, 0x06	; 6
    2daa:	86 e0       	ldi	r24, 0x06	; 6
    2dac:	90 e2       	ldi	r25, 0x20	; 32
    2dae:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2db2:	29 c0       	rjmp	.+82     	; 0x2e06 <deviceNameGet+0x1b8>
    2db4:	6f ea       	ldi	r22, 0xAF	; 175
    2db6:	76 e0       	ldi	r23, 0x06	; 6
    2db8:	86 e0       	ldi	r24, 0x06	; 6
    2dba:	90 e2       	ldi	r25, 0x20	; 32
    2dbc:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2dc0:	22 c0       	rjmp	.+68     	; 0x2e06 <deviceNameGet+0x1b8>
    2dc2:	6d ea       	ldi	r22, 0xAD	; 173
    2dc4:	76 e0       	ldi	r23, 0x06	; 6
    2dc6:	86 e0       	ldi	r24, 0x06	; 6
    2dc8:	90 e2       	ldi	r25, 0x20	; 32
    2dca:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2dce:	1b c0       	rjmp	.+54     	; 0x2e06 <deviceNameGet+0x1b8>
    2dd0:	6b ea       	ldi	r22, 0xAB	; 171
    2dd2:	76 e0       	ldi	r23, 0x06	; 6
    2dd4:	86 e0       	ldi	r24, 0x06	; 6
    2dd6:	90 e2       	ldi	r25, 0x20	; 32
    2dd8:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2ddc:	14 c0       	rjmp	.+40     	; 0x2e06 <deviceNameGet+0x1b8>
    2dde:	69 ea       	ldi	r22, 0xA9	; 169
    2de0:	76 e0       	ldi	r23, 0x06	; 6
    2de2:	86 e0       	ldi	r24, 0x06	; 6
    2de4:	90 e2       	ldi	r25, 0x20	; 32
    2de6:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <deviceNameGet+0x1b8>
    2dec:	67 ea       	ldi	r22, 0xA7	; 167
    2dee:	76 e0       	ldi	r23, 0x06	; 6
    2df0:	86 e0       	ldi	r24, 0x06	; 6
    2df2:	90 e2       	ldi	r25, 0x20	; 32
    2df4:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <deviceNameGet+0x1b8>
    2dfa:	65 ea       	ldi	r22, 0xA5	; 165
    2dfc:	76 e0       	ldi	r23, 0x06	; 6
    2dfe:	86 e0       	ldi	r24, 0x06	; 6
    2e00:	90 e2       	ldi	r25, 0x20	; 32
    2e02:	0e 94 17 24 	call	0x482e	; 0x482e <strcpy_P>
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	90 e2       	ldi	r25, 0x20	; 32
    2e0a:	08 95       	ret

00002e0c <EVENT_USB_Device_Connect>:
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	80 93 37 25 	sts	0x2537, r24
    2e12:	08 95       	ret

00002e14 <EVENT_USB_Device_Disconnect>:
    2e14:	10 92 37 25 	sts	0x2537, r1
    2e18:	08 95       	ret

00002e1a <EVENT_USB_Device_Reset>:
	
}

void EVENT_USB_Device_Reset()
{
    2e1a:	08 95       	ret

00002e1c <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged()
{
	CDC_Device_ConfigureEndpoints(&USBSerialClass);
    2e1c:	8e e5       	ldi	r24, 0x5E	; 94
    2e1e:	91 e2       	ldi	r25, 0x21	; 33
    2e20:	0c 94 44 07 	jmp	0xe88	; 0xe88 <CDC_Device_ConfigureEndpoints>
    2e24:	08 95       	ret

00002e26 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
	CDC_Device_ProcessControlRequest(&USBSerialClass);
    2e26:	8e e5       	ldi	r24, 0x5E	; 94
    2e28:	91 e2       	ldi	r25, 0x21	; 33
    2e2a:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <CDC_Device_ProcessControlRequest>
    2e2e:	08 95       	ret

00002e30 <RTCPrintTime>:
// 	else if ((year % 400) != 0)
// 	{
// 		return false;
// 	}
	return true;
}
    2e30:	fc 01       	movw	r30, r24
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	1f 92       	push	r1
    2e36:	8f 93       	push	r24
    2e38:	81 81       	ldd	r24, Z+1	; 0x01
    2e3a:	1f 92       	push	r1
    2e3c:	8f 93       	push	r24
    2e3e:	80 81       	ld	r24, Z
    2e40:	1f 92       	push	r1
    2e42:	8f 93       	push	r24
    2e44:	81 ed       	ldi	r24, 0xD1	; 209
    2e46:	97 e0       	ldi	r25, 0x07	; 7
    2e48:	9f 93       	push	r25
    2e4a:	8f 93       	push	r24
    2e4c:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2e50:	8d b7       	in	r24, 0x3d	; 61
    2e52:	9e b7       	in	r25, 0x3e	; 62
    2e54:	08 96       	adiw	r24, 0x08	; 8
    2e56:	8d bf       	out	0x3d, r24	; 61
    2e58:	9e bf       	out	0x3e, r25	; 62
    2e5a:	08 95       	ret

00002e5c <RTCPrintDate>:
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	1f 92       	push	r1
    2e62:	8f 93       	push	r24
    2e64:	81 81       	ldd	r24, Z+1	; 0x01
    2e66:	1f 92       	push	r1
    2e68:	8f 93       	push	r24
    2e6a:	80 81       	ld	r24, Z
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	80 53       	subi	r24, 0x30	; 48
    2e70:	98 4f       	sbci	r25, 0xF8	; 248
    2e72:	9f 93       	push	r25
    2e74:	8f 93       	push	r24
    2e76:	81 ec       	ldi	r24, 0xC1	; 193
    2e78:	97 e0       	ldi	r25, 0x07	; 7
    2e7a:	9f 93       	push	r25
    2e7c:	8f 93       	push	r24
    2e7e:	0e 94 35 06 	call	0xc6a	; 0xc6a <appUIPrint_P>
    2e82:	8d b7       	in	r24, 0x3d	; 61
    2e84:	9e b7       	in	r25, 0x3e	; 62
    2e86:	08 96       	adiw	r24, 0x08	; 8
    2e88:	8d bf       	out	0x3d, r24	; 61
    2e8a:	9e bf       	out	0x3e, r25	; 62
    2e8c:	08 95       	ret

00002e8e <RTCPrintDatetime>:
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	ec 01       	movw	r28, r24
    2e94:	03 96       	adiw	r24, 0x03	; 3
    2e96:	e2 df       	rcall	.-60     	; 0x2e5c <RTCPrintDate>
    2e98:	ce 01       	movw	r24, r28
    2e9a:	ca df       	rcall	.-108    	; 0x2e30 <RTCPrintTime>
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	08 95       	ret

00002ea2 <RTCUpdateTime>:
    2ea2:	68 31       	cpi	r22, 0x18	; 24
    2ea4:	68 f4       	brcc	.+26     	; 0x2ec0 <RTCUpdateTime+0x1e>
    2ea6:	4c 33       	cpi	r20, 0x3C	; 60
    2ea8:	68 f4       	brcc	.+26     	; 0x2ec4 <RTCUpdateTime+0x22>
    2eaa:	2c 33       	cpi	r18, 0x3C	; 60
    2eac:	68 f4       	brcc	.+26     	; 0x2ec8 <RTCUpdateTime+0x26>
    2eae:	3f b7       	in	r19, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	60 83       	st	Z, r22
    2eb6:	41 83       	std	Z+1, r20	; 0x01
    2eb8:	22 83       	std	Z+2, r18	; 0x02
    2eba:	3f bf       	out	0x3f, r19	; 63
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	08 95       	ret
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	08 95       	ret
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	08 95       	ret
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	08 95       	ret

00002ecc <RTCIsValidtime>:
    2ecc:	fc 01       	movw	r30, r24
    2ece:	80 81       	ld	r24, Z
    2ed0:	88 31       	cpi	r24, 0x18	; 24
    2ed2:	48 f4       	brcc	.+18     	; 0x2ee6 <RTCIsValidtime+0x1a>
    2ed4:	81 81       	ldd	r24, Z+1	; 0x01
    2ed6:	8c 33       	cpi	r24, 0x3C	; 60
    2ed8:	40 f4       	brcc	.+16     	; 0x2eea <RTCIsValidtime+0x1e>
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	92 81       	ldd	r25, Z+2	; 0x02
    2ede:	9c 33       	cpi	r25, 0x3C	; 60
    2ee0:	28 f0       	brcs	.+10     	; 0x2eec <RTCIsValidtime+0x20>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	08 95       	ret
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	08 95       	ret
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	08 95       	ret

00002eee <RTCProcessOverflowTime>:
    2eee:	fc 01       	movw	r30, r24
    2ef0:	92 81       	ldd	r25, Z+2	; 0x02
    2ef2:	9c 33       	cpi	r25, 0x3C	; 60
    2ef4:	58 f0       	brcs	.+22     	; 0x2f0c <RTCProcessOverflowTime+0x1e>
    2ef6:	21 81       	ldd	r18, Z+1	; 0x01
    2ef8:	2f 5f       	subi	r18, 0xFF	; 255
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <RTCProcessOverflowTime+0x10>
    2efc:	23 2f       	mov	r18, r19
    2efe:	9c 53       	subi	r25, 0x3C	; 60
    2f00:	31 e0       	ldi	r19, 0x01	; 1
    2f02:	32 0f       	add	r19, r18
    2f04:	9c 33       	cpi	r25, 0x3C	; 60
    2f06:	d0 f7       	brcc	.-12     	; 0x2efc <RTCProcessOverflowTime+0xe>
    2f08:	21 83       	std	Z+1, r18	; 0x01
    2f0a:	92 83       	std	Z+2, r25	; 0x02
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	9c 33       	cpi	r25, 0x3C	; 60
    2f10:	38 f0       	brcs	.+14     	; 0x2f20 <RTCProcessOverflowTime+0x32>
    2f12:	20 81       	ld	r18, Z
    2f14:	9c 53       	subi	r25, 0x3C	; 60
    2f16:	2f 5f       	subi	r18, 0xFF	; 255
    2f18:	9c 33       	cpi	r25, 0x3C	; 60
    2f1a:	e0 f7       	brcc	.-8      	; 0x2f14 <RTCProcessOverflowTime+0x26>
    2f1c:	20 83       	st	Z, r18
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	90 81       	ld	r25, Z
    2f22:	98 31       	cpi	r25, 0x18	; 24
    2f24:	38 f0       	brcs	.+14     	; 0x2f34 <RTCProcessOverflowTime+0x46>
    2f26:	25 81       	ldd	r18, Z+5	; 0x05
    2f28:	98 51       	subi	r25, 0x18	; 24
    2f2a:	2f 5f       	subi	r18, 0xFF	; 255
    2f2c:	98 31       	cpi	r25, 0x18	; 24
    2f2e:	e0 f7       	brcc	.-8      	; 0x2f28 <RTCProcessOverflowTime+0x3a>
    2f30:	90 83       	st	Z, r25
    2f32:	25 83       	std	Z+5, r18	; 0x05
    2f34:	08 95       	ret

00002f36 <RTCGetDaysInMonth>:
    2f36:	85 30       	cpi	r24, 0x05	; 5
    2f38:	b9 f0       	breq	.+46     	; 0x2f68 <RTCGetDaysInMonth+0x32>
    2f3a:	38 f4       	brcc	.+14     	; 0x2f4a <RTCGetDaysInMonth+0x14>
    2f3c:	82 30       	cpi	r24, 0x02	; 2
    2f3e:	81 f0       	breq	.+32     	; 0x2f60 <RTCGetDaysInMonth+0x2a>
    2f40:	83 30       	cpi	r24, 0x03	; 3
    2f42:	91 f0       	breq	.+36     	; 0x2f68 <RTCGetDaysInMonth+0x32>
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	51 f4       	brne	.+20     	; 0x2f5c <RTCGetDaysInMonth+0x26>
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <RTCGetDaysInMonth+0x32>
    2f4a:	8a 30       	cpi	r24, 0x0A	; 10
    2f4c:	69 f0       	breq	.+26     	; 0x2f68 <RTCGetDaysInMonth+0x32>
    2f4e:	20 f4       	brcc	.+8      	; 0x2f58 <RTCGetDaysInMonth+0x22>
    2f50:	87 50       	subi	r24, 0x07	; 7
    2f52:	82 30       	cpi	r24, 0x02	; 2
    2f54:	18 f4       	brcc	.+6      	; 0x2f5c <RTCGetDaysInMonth+0x26>
    2f56:	08 c0       	rjmp	.+16     	; 0x2f68 <RTCGetDaysInMonth+0x32>
    2f58:	8c 30       	cpi	r24, 0x0C	; 12
    2f5a:	31 f0       	breq	.+12     	; 0x2f68 <RTCGetDaysInMonth+0x32>
    2f5c:	8e e1       	ldi	r24, 0x1E	; 30
    2f5e:	08 95       	ret
    2f60:	63 70       	andi	r22, 0x03	; 3
    2f62:	21 f0       	breq	.+8      	; 0x2f6c <RTCGetDaysInMonth+0x36>
    2f64:	8c e1       	ldi	r24, 0x1C	; 28
    2f66:	08 95       	ret
    2f68:	8f e1       	ldi	r24, 0x1F	; 31
    2f6a:	08 95       	ret
    2f6c:	8d e1       	ldi	r24, 0x1D	; 29
    2f6e:	08 95       	ret

00002f70 <RTCUpdateDate>:
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	65 36       	cpi	r22, 0x65	; 101
    2f7c:	b8 f4       	brcc	.+46     	; 0x2fac <RTCUpdateDate+0x3c>
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	34 0f       	add	r19, r20
    2f82:	3c 30       	cpi	r19, 0x0C	; 12
    2f84:	a8 f4       	brcc	.+42     	; 0x2fb0 <RTCUpdateDate+0x40>
    2f86:	22 23       	and	r18, r18
    2f88:	a9 f0       	breq	.+42     	; 0x2fb4 <RTCUpdateDate+0x44>
    2f8a:	12 2f       	mov	r17, r18
    2f8c:	d4 2f       	mov	r29, r20
    2f8e:	c6 2f       	mov	r28, r22
    2f90:	7c 01       	movw	r14, r24
    2f92:	84 2f       	mov	r24, r20
    2f94:	d0 df       	rcall	.-96     	; 0x2f36 <RTCGetDaysInMonth>
    2f96:	81 17       	cp	r24, r17
    2f98:	78 f0       	brcs	.+30     	; 0x2fb8 <RTCUpdateDate+0x48>
    2f9a:	8f b7       	in	r24, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	f7 01       	movw	r30, r14
    2fa0:	c0 83       	st	Z, r28
    2fa2:	d1 83       	std	Z+1, r29	; 0x01
    2fa4:	12 83       	std	Z+2, r17	; 0x02
    2fa6:	8f bf       	out	0x3f, r24	; 63
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	07 c0       	rjmp	.+14     	; 0x2fba <RTCUpdateDate+0x4a>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	05 c0       	rjmp	.+10     	; 0x2fba <RTCUpdateDate+0x4a>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <RTCUpdateDate+0x4a>
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <RTCUpdateDate+0x4a>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	1f 91       	pop	r17
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	08 95       	ret

00002fc6 <RTCUpdateDatetime>:
    2fc6:	cf 92       	push	r12
    2fc8:	ef 92       	push	r14
    2fca:	0f 93       	push	r16
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	ec 01       	movw	r28, r24
    2fd2:	03 96       	adiw	r24, 0x03	; 3
    2fd4:	cd df       	rcall	.-102    	; 0x2f70 <RTCUpdateDate>
    2fd6:	88 23       	and	r24, r24
    2fd8:	31 f0       	breq	.+12     	; 0x2fe6 <RTCUpdateDatetime+0x20>
    2fda:	2c 2d       	mov	r18, r12
    2fdc:	4e 2d       	mov	r20, r14
    2fde:	60 2f       	mov	r22, r16
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	5f df       	rcall	.-322    	; 0x2ea2 <RTCUpdateTime>
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <RTCUpdateDatetime+0x24>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	81 70       	andi	r24, 0x01	; 1
    2fec:	df 91       	pop	r29
    2fee:	cf 91       	pop	r28
    2ff0:	0f 91       	pop	r16
    2ff2:	ef 90       	pop	r14
    2ff4:	cf 90       	pop	r12
    2ff6:	08 95       	ret

00002ff8 <RTCIsValidDate>:
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	60 81       	ld	r22, Z
    3000:	86 ef       	ldi	r24, 0xF6	; 246
    3002:	86 0f       	add	r24, r22
    3004:	8a 35       	cpi	r24, 0x5A	; 90
    3006:	58 f4       	brcc	.+22     	; 0x301e <RTCIsValidDate+0x26>
    3008:	81 81       	ldd	r24, Z+1	; 0x01
    300a:	8d 30       	cpi	r24, 0x0D	; 13
    300c:	50 f4       	brcc	.+20     	; 0x3022 <RTCIsValidDate+0x2a>
    300e:	ef 01       	movw	r28, r30
    3010:	92 df       	rcall	.-220    	; 0x2f36 <RTCGetDaysInMonth>
    3012:	91 e0       	ldi	r25, 0x01	; 1
    3014:	2a 81       	ldd	r18, Y+2	; 0x02
    3016:	82 17       	cp	r24, r18
    3018:	28 f4       	brcc	.+10     	; 0x3024 <RTCIsValidDate+0x2c>
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	03 c0       	rjmp	.+6      	; 0x3024 <RTCIsValidDate+0x2c>
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <RTCIsValidDate+0x2c>
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	89 2f       	mov	r24, r25
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	08 95       	ret

0000302c <RTCIsValidDatetime>:
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	ec 01       	movw	r28, r24
    3032:	03 96       	adiw	r24, 0x03	; 3
    3034:	e1 df       	rcall	.-62     	; 0x2ff8 <RTCIsValidDate>
    3036:	88 23       	and	r24, r24
    3038:	19 f0       	breq	.+6      	; 0x3040 <RTCIsValidDatetime+0x14>
    303a:	ce 01       	movw	r24, r28
    303c:	47 df       	rcall	.-370    	; 0x2ecc <RTCIsValidtime>
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <RTCIsValidDatetime+0x18>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	81 70       	andi	r24, 0x01	; 1
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	08 95       	ret

0000304c <RTCProcessOverflowDate>:
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	8c 01       	movw	r16, r24
    3058:	fc 01       	movw	r30, r24
    305a:	f0 80       	ld	r15, Z
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <RTCProcessOverflowDate+0x1c>
    305e:	d8 1b       	sub	r29, r24
    3060:	f8 01       	movw	r30, r16
    3062:	d2 83       	std	Z+2, r29	; 0x02
    3064:	cf 5f       	subi	r28, 0xFF	; 255
    3066:	c1 83       	std	Z+1, r28	; 0x01
    3068:	f8 01       	movw	r30, r16
    306a:	d2 81       	ldd	r29, Z+2	; 0x02
    306c:	c1 81       	ldd	r28, Z+1	; 0x01
    306e:	6f 2d       	mov	r22, r15
    3070:	8c 2f       	mov	r24, r28
    3072:	61 df       	rcall	.-318    	; 0x2f36 <RTCGetDaysInMonth>
    3074:	8d 17       	cp	r24, r29
    3076:	98 f3       	brcs	.-26     	; 0x305e <RTCProcessOverflowDate+0x12>
    3078:	cd 30       	cpi	r28, 0x0D	; 13
    307a:	68 f0       	brcs	.+26     	; 0x3096 <RTCProcessOverflowDate+0x4a>
    307c:	f8 01       	movw	r30, r16
    307e:	80 81       	ld	r24, Z
    3080:	8f 5f       	subi	r24, 0xFF	; 255
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <RTCProcessOverflowDate+0x3a>
    3084:	89 2f       	mov	r24, r25
    3086:	cc 50       	subi	r28, 0x0C	; 12
    3088:	91 e0       	ldi	r25, 0x01	; 1
    308a:	98 0f       	add	r25, r24
    308c:	cd 30       	cpi	r28, 0x0D	; 13
    308e:	d0 f7       	brcc	.-12     	; 0x3084 <RTCProcessOverflowDate+0x38>
    3090:	f8 01       	movw	r30, r16
    3092:	c1 83       	std	Z+1, r28	; 0x01
    3094:	80 83       	st	Z, r24
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	08 95       	ret

000030a2 <RTCProcessOverflowDatetime>:
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	ec 01       	movw	r28, r24
    30a8:	22 df       	rcall	.-444    	; 0x2eee <RTCProcessOverflowTime>
    30aa:	ce 01       	movw	r24, r28
    30ac:	03 96       	adiw	r24, 0x03	; 3
    30ae:	ce df       	rcall	.-100    	; 0x304c <RTCProcessOverflowDate>
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <RTCProcessTime>:
    30b6:	fc 01       	movw	r30, r24
    30b8:	22 81       	ldd	r18, Z+2	; 0x02
    30ba:	2f 5f       	subi	r18, 0xFF	; 255
    30bc:	22 83       	std	Z+2, r18	; 0x02
    30be:	f1 cf       	rjmp	.-30     	; 0x30a2 <RTCProcessOverflowDatetime>
    30c0:	08 95       	ret

000030c2 <__vector_10>:
    30c2:	1f 92       	push	r1
    30c4:	0f 92       	push	r0
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	0f 92       	push	r0
    30ca:	11 24       	eor	r1, r1
    30cc:	08 b6       	in	r0, 0x38	; 56
    30ce:	0f 92       	push	r0
    30d0:	18 be       	out	0x38, r1	; 56
    30d2:	09 b6       	in	r0, 0x39	; 57
    30d4:	0f 92       	push	r0
    30d6:	19 be       	out	0x39, r1	; 57
    30d8:	0b b6       	in	r0, 0x3b	; 59
    30da:	0f 92       	push	r0
    30dc:	1b be       	out	0x3b, r1	; 59
    30de:	2f 93       	push	r18
    30e0:	3f 93       	push	r19
    30e2:	4f 93       	push	r20
    30e4:	5f 93       	push	r21
    30e6:	6f 93       	push	r22
    30e8:	7f 93       	push	r23
    30ea:	8f 93       	push	r24
    30ec:	9f 93       	push	r25
    30ee:	af 93       	push	r26
    30f0:	bf 93       	push	r27
    30f2:	ef 93       	push	r30
    30f4:	ff 93       	push	r31
    30f6:	80 91 38 25 	lds	r24, 0x2538
    30fa:	90 91 39 25 	lds	r25, 0x2539
    30fe:	db df       	rcall	.-74     	; 0x30b6 <RTCProcessTime>
    3100:	ff 91       	pop	r31
    3102:	ef 91       	pop	r30
    3104:	bf 91       	pop	r27
    3106:	af 91       	pop	r26
    3108:	9f 91       	pop	r25
    310a:	8f 91       	pop	r24
    310c:	7f 91       	pop	r23
    310e:	6f 91       	pop	r22
    3110:	5f 91       	pop	r21
    3112:	4f 91       	pop	r20
    3114:	3f 91       	pop	r19
    3116:	2f 91       	pop	r18
    3118:	0f 90       	pop	r0
    311a:	0b be       	out	0x3b, r0	; 59
    311c:	0f 90       	pop	r0
    311e:	09 be       	out	0x39, r0	; 57
    3120:	0f 90       	pop	r0
    3122:	08 be       	out	0x38, r0	; 56
    3124:	0f 90       	pop	r0
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	0f 90       	pop	r0
    312a:	1f 90       	pop	r1
    312c:	18 95       	reti

0000312e <RTCInit>:

void RTCInit(datetime_t * datetime, CLK_RTCSRC_t clkSrc, RTC_OVFINTLVL_t ovfIntLevel, RTC_PRESCALER_t prescaler, uint16_t period)
{
    312e:	8f 92       	push	r8
    3130:	9f 92       	push	r9
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	cf 92       	push	r12
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	0f 93       	push	r16
    313e:	1f 93       	push	r17
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	4c 01       	movw	r8, r24
    3146:	d6 2f       	mov	r29, r22
    3148:	f4 2e       	mov	r15, r20
    314a:	c2 2f       	mov	r28, r18
    314c:	58 01       	movw	r10, r16
	timeInt = datetime;
    314e:	80 93 38 25 	sts	0x2538, r24
    3152:	90 93 39 25 	sts	0x2539, r25
	
	if (!RTCIsValidDatetime(datetime)) {
    3156:	6a df       	rcall	.-300    	; 0x302c <RTCIsValidDatetime>
    3158:	81 11       	cpse	r24, r1
    315a:	08 c0       	rjmp	.+16     	; 0x316c <RTCInit+0x3e>
		RTCUpdateDatetime(datetime, RTC_MIN_VALID_YEAR, 1, 1, 0, 0, 0); //Reset date and time
    315c:	c1 2c       	mov	r12, r1
    315e:	e1 2c       	mov	r14, r1
    3160:	00 e0       	ldi	r16, 0x00	; 0
    3162:	21 e0       	ldi	r18, 0x01	; 1
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	6a e0       	ldi	r22, 0x0A	; 10
    3168:	c4 01       	movw	r24, r8
    316a:	2d df       	rcall	.-422    	; 0x2fc6 <RTCUpdateDatetime>
	}
	
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) | clkSrc | CLK_RTCEN_bm;
    316c:	e0 e4       	ldi	r30, 0x40	; 64
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	83 81       	ldd	r24, Z+3	; 0x03
    3172:	81 7f       	andi	r24, 0xF1	; 241
    3174:	81 60       	ori	r24, 0x01	; 1
    3176:	8d 2b       	or	r24, r29
    3178:	83 83       	std	Z+3, r24	; 0x03
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    317a:	e0 e0       	ldi	r30, 0x00	; 0
    317c:	f4 e0       	ldi	r31, 0x04	; 4
    317e:	81 81       	ldd	r24, Z+1	; 0x01
    3180:	80 fd       	sbrc	r24, 0
    3182:	fd cf       	rjmp	.-6      	; 0x317e <RTCInit+0x50>
	RTC.INTCTRL = (RTC.INTCTRL & ~(RTC_COMPINTLVL_gm | RTC_OVFINTLVL_gm ) ) | ovfIntLevel;
    3184:	e0 e0       	ldi	r30, 0x00	; 0
    3186:	f4 e0       	ldi	r31, 0x04	; 4
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	80 7f       	andi	r24, 0xF0	; 240
    318c:	4f 2d       	mov	r20, r15
    318e:	48 2b       	or	r20, r24
    3190:	42 83       	std	Z+2, r20	; 0x02
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    3192:	81 81       	ldd	r24, Z+1	; 0x01
    3194:	80 fd       	sbrc	r24, 0
    3196:	fd cf       	rjmp	.-6      	; 0x3192 <RTCInit+0x64>
	RTC.CTRL = RTC_PRESCALER_OFF_gc;
    3198:	10 92 00 04 	sts	0x0400, r1
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    319c:	e0 e0       	ldi	r30, 0x00	; 0
    319e:	f4 e0       	ldi	r31, 0x04	; 4
    31a0:	81 81       	ldd	r24, Z+1	; 0x01
    31a2:	80 fd       	sbrc	r24, 0
    31a4:	fd cf       	rjmp	.-6      	; 0x31a0 <RTCInit+0x72>
	RTC.PER = period;
    31a6:	a0 92 0a 04 	sts	0x040A, r10
    31aa:	b0 92 0b 04 	sts	0x040B, r11
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    31ae:	e0 e0       	ldi	r30, 0x00	; 0
    31b0:	f4 e0       	ldi	r31, 0x04	; 4
    31b2:	81 81       	ldd	r24, Z+1	; 0x01
    31b4:	80 fd       	sbrc	r24, 0
    31b6:	fd cf       	rjmp	.-6      	; 0x31b2 <RTCInit+0x84>
	RTC.COMP = 0;
    31b8:	10 92 0c 04 	sts	0x040C, r1
    31bc:	10 92 0d 04 	sts	0x040D, r1
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    31c0:	e0 e0       	ldi	r30, 0x00	; 0
    31c2:	f4 e0       	ldi	r31, 0x04	; 4
    31c4:	81 81       	ldd	r24, Z+1	; 0x01
    31c6:	80 fd       	sbrc	r24, 0
    31c8:	fd cf       	rjmp	.-6      	; 0x31c4 <RTCInit+0x96>
	RTC.CNT = 0;
    31ca:	10 92 08 04 	sts	0x0408, r1
    31ce:	10 92 09 04 	sts	0x0409, r1
	
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    31d2:	e0 e0       	ldi	r30, 0x00	; 0
    31d4:	f4 e0       	ldi	r31, 0x04	; 4
    31d6:	81 81       	ldd	r24, Z+1	; 0x01
    31d8:	80 fd       	sbrc	r24, 0
    31da:	fd cf       	rjmp	.-6      	; 0x31d6 <RTCInit+0xa8>
	RTC.CTRL = (RTC.CTRL & ~RTC_PRESCALER_gm ) | prescaler;
    31dc:	e0 e0       	ldi	r30, 0x00	; 0
    31de:	f4 e0       	ldi	r31, 0x04	; 4
    31e0:	80 81       	ld	r24, Z
    31e2:	88 7f       	andi	r24, 0xF8	; 248
    31e4:	c8 2b       	or	r28, r24
    31e6:	c0 83       	st	Z, r28
}
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	ff 90       	pop	r15
    31f2:	ef 90       	pop	r14
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	08 95       	ret

00003200 <eventInit>:
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
		TC_CPU.INTCTRLB = TC_CCAINTLVL_LO_gc;
	}
	
	return result;
}
    3200:	80 93 3a 25 	sts	0x253A, r24
    3204:	90 93 3b 25 	sts	0x253B, r25
    3208:	08 95       	ret

0000320a <eventAdd>:
    320a:	8f 92       	push	r8
    320c:	9f 92       	push	r9
    320e:	af 92       	push	r10
    3210:	bf 92       	push	r11
    3212:	ef 92       	push	r14
    3214:	ff 92       	push	r15
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	4b 01       	movw	r8, r22
    3220:	5c 01       	movw	r10, r24
    3222:	79 01       	movw	r14, r18
    3224:	80 91 3e 25 	lds	r24, 0x253E
    3228:	90 91 3f 25 	lds	r25, 0x253F
    322c:	a0 91 40 25 	lds	r26, 0x2540
    3230:	b0 91 41 25 	lds	r27, 0x2541
    3234:	89 2b       	or	r24, r25
    3236:	8a 2b       	or	r24, r26
    3238:	8b 2b       	or	r24, r27
    323a:	81 f0       	breq	.+32     	; 0x325c <eventAdd+0x52>
    323c:	e9 e4       	ldi	r30, 0x49	; 73
    323e:	f5 e2       	ldi	r31, 0x25	; 37
    3240:	aa e1       	ldi	r26, 0x1A	; 26
    3242:	b6 e2       	ldi	r27, 0x26	; 38
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	ec 01       	movw	r28, r24
    324a:	00 81       	ld	r16, Z
    324c:	11 81       	ldd	r17, Z+1	; 0x01
    324e:	22 81       	ldd	r18, Z+2	; 0x02
    3250:	33 81       	ldd	r19, Z+3	; 0x03
    3252:	01 2b       	or	r16, r17
    3254:	02 2b       	or	r16, r18
    3256:	03 2b       	or	r16, r19
    3258:	e9 f4       	brne	.+58     	; 0x3294 <eventAdd+0x8a>
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <eventAdd+0x56>
    325c:	c0 e0       	ldi	r28, 0x00	; 0
    325e:	d0 e0       	ldi	r29, 0x00	; 0
    3260:	2b e0       	ldi	r18, 0x0B	; 11
    3262:	2c 9f       	mul	r18, r28
    3264:	c0 01       	movw	r24, r0
    3266:	2d 9f       	mul	r18, r29
    3268:	90 0d       	add	r25, r0
    326a:	11 24       	eor	r1, r1
    326c:	fc 01       	movw	r30, r24
    326e:	e4 5c       	subi	r30, 0xC4	; 196
    3270:	fa 4d       	sbci	r31, 0xDA	; 218
    3272:	e0 82       	st	Z, r14
    3274:	f1 82       	std	Z+1, r15	; 0x01
    3276:	82 82       	std	Z+2, r8	; 0x02
    3278:	93 82       	std	Z+3, r9	; 0x03
    327a:	a4 82       	std	Z+4, r10	; 0x04
    327c:	b5 82       	std	Z+5, r11	; 0x05
    327e:	86 82       	std	Z+6, r8	; 0x06
    3280:	97 82       	std	Z+7, r9	; 0x07
    3282:	a0 86       	std	Z+8, r10	; 0x08
    3284:	b1 86       	std	Z+9, r11	; 0x09
    3286:	fc 01       	movw	r30, r24
    3288:	ea 5b       	subi	r30, 0xBA	; 186
    328a:	fa 4d       	sbci	r31, 0xDA	; 218
    328c:	44 0f       	add	r20, r20
    328e:	40 83       	st	Z, r20
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	0e c0       	rjmp	.+28     	; 0x32b0 <eventAdd+0xa6>
    3294:	01 96       	adiw	r24, 0x01	; 1
    3296:	3b 96       	adiw	r30, 0x0b	; 11
    3298:	ea 17       	cp	r30, r26
    329a:	fb 07       	cpc	r31, r27
    329c:	a9 f6       	brne	.-86     	; 0x3248 <eventAdd+0x3e>
    329e:	8c ef       	ldi	r24, 0xFC	; 252
    32a0:	97 e0       	ldi	r25, 0x07	; 7
    32a2:	9f 93       	push	r25
    32a4:	8f 93       	push	r24
    32a6:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	ff 90       	pop	r15
    32ba:	ef 90       	pop	r14
    32bc:	bf 90       	pop	r11
    32be:	af 90       	pop	r10
    32c0:	9f 90       	pop	r9
    32c2:	8f 90       	pop	r8
    32c4:	08 95       	ret

000032c6 <eventControllerLoop>:


// Timer Event Controller
void eventControllerLoop(void) 
{
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	2d 97       	sbiw	r28, 0x0d	; 13
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	de bf       	out	0x3e, r29	; 62
	uint32_t cpu_on_sum = 0, cpu_off_sum = 0, cpu_total_sample = 0;
	uint8_t i, second_processed = hardware.datetime.time.second;
    32d4:	80 90 1a 20 	lds	r8, 0x201A
	
	TC_CPU.PER = 65535;
    32d8:	e0 e0       	ldi	r30, 0x00	; 0
    32da:	f9 e0       	ldi	r31, 0x09	; 9
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	9f ef       	ldi	r25, 0xFF	; 255
    32e0:	86 a3       	std	Z+38, r24	; 0x26
    32e2:	97 a3       	std	Z+39, r25	; 0x27
	TC_CPU.CCA = TC_CCA_INT_TIME;
    32e4:	8f e0       	ldi	r24, 0x0F	; 15
    32e6:	97 e2       	ldi	r25, 0x27	; 39
    32e8:	80 a7       	std	Z+40, r24	; 0x28
    32ea:	91 a7       	std	Z+41, r25	; 0x29
	TC_CPU.CTRLA = TC_CLKSEL_DIV64_gc;
    32ec:	85 e0       	ldi	r24, 0x05	; 5
    32ee:	80 83       	st	Z, r24
	TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    32f0:	88 e0       	ldi	r24, 0x08	; 8
    32f2:	81 87       	std	Z+9, r24	; 0x09
	TC_CPU.INTCTRLB = TC_CCAINTLVL_LO_gc;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	87 83       	std	Z+7, r24	; 0x07
	
	//cpuGetCyclesSinceLastCall();
	
	// Initialise
	set_sleep_mode(SLEEP_MODE_IDLE);
    32f8:	e8 e4       	ldi	r30, 0x48	; 72
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	81 7f       	andi	r24, 0xF1	; 241
    3300:	80 83       	st	Z, r24
	println("Application Started!");
    3302:	81 ee       	ldi	r24, 0xE1	; 225
    3304:	97 e0       	ldi	r25, 0x07	; 7
    3306:	9f 93       	push	r25
    3308:	8f 93       	push	r24
    330a:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <printf_P>
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0


// Timer Event Controller
void eventControllerLoop(void) 
{
	uint32_t cpu_on_sum = 0, cpu_off_sum = 0, cpu_total_sample = 0;
    3312:	c1 2c       	mov	r12, r1
    3314:	d1 2c       	mov	r13, r1
    3316:	76 01       	movw	r14, r12
    3318:	1e 82       	std	Y+6, r1	; 0x06
    331a:	1f 82       	std	Y+7, r1	; 0x07
    331c:	18 86       	std	Y+8, r1	; 0x08
    331e:	19 86       	std	Y+9, r1	; 0x09
    3320:	1a 82       	std	Y+2, r1	; 0x02
    3322:	1b 82       	std	Y+3, r1	; 0x03
    3324:	1c 82       	std	Y+4, r1	; 0x04
    3326:	1d 82       	std	Y+5, r1	; 0x05
	println("Application Started!");
	
	while(1) 
	{
		// Read CPU off value
		uint16_t sample = TC_CPU.CNT + 1;
    3328:	0f 2e       	mov	r0, r31
    332a:	21 2c       	mov	r2, r1
    332c:	f9 e0       	ldi	r31, 0x09	; 9
    332e:	3f 2e       	mov	r3, r31
    3330:	f0 2d       	mov	r31, r0
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    3332:	28 e0       	ldi	r18, 0x08	; 8
    3334:	2b 87       	std	Y+11, r18	; 0x0b
		
		if (events[i].timeLeft <= cpu_total_sample)
		{
			bool isContinueExecution = false;
			
			if (events[i].repeation != 1) // if not last execution, recalculate interval
    3336:	0f 2e       	mov	r0, r31
    3338:	fb e0       	ldi	r31, 0x0B	; 11
    333a:	9f 2e       	mov	r9, r31
    333c:	f0 2d       	mov	r31, r0
			cpu_off_sum = 0;
		}
		
		//Sleep till interrupt
		WDT_RESET();
		sleep_enable();
    333e:	8a 86       	std	Y+10, r8	; 0x0a
    3340:	99 82       	std	Y+1, r9	; 0x01
	println("Application Started!");
	
	while(1) 
	{
		// Read CPU off value
		uint16_t sample = TC_CPU.CNT + 1;
    3342:	d1 01       	movw	r26, r2
    3344:	90 96       	adiw	r26, 0x20	; 32
    3346:	6d 91       	ld	r22, X+
    3348:	7c 91       	ld	r23, X
    334a:	91 97       	sbiw	r26, 0x21	; 33
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    334c:	eb 85       	ldd	r30, Y+11	; 0x0b
    334e:	19 96       	adiw	r26, 0x09	; 9
    3350:	ec 93       	st	X, r30
	println("Application Started!");
	
	while(1) 
	{
		// Read CPU off value
		uint16_t sample = TC_CPU.CNT + 1;
    3352:	6f 5f       	subi	r22, 0xFF	; 255
    3354:	7f 4f       	sbci	r23, 0xFF	; 255
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
		//uint16_t sample = cpuGetCyclesSinceLastCall(); // raw timer unit
		cpu_off_sum += (uint32_t)sample;
    3356:	cb 01       	movw	r24, r22
    3358:	a0 e0       	ldi	r26, 0x00	; 0
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	2e 81       	ldd	r18, Y+6	; 0x06
    335e:	3f 81       	ldd	r19, Y+7	; 0x07
    3360:	48 85       	ldd	r20, Y+8	; 0x08
    3362:	59 85       	ldd	r21, Y+9	; 0x09
    3364:	28 0f       	add	r18, r24
    3366:	39 1f       	adc	r19, r25
    3368:	4a 1f       	adc	r20, r26
    336a:	5b 1f       	adc	r21, r27
    336c:	2e 83       	std	Y+6, r18	; 0x06
    336e:	3f 83       	std	Y+7, r19	; 0x07
    3370:	48 87       	std	Y+8, r20	; 0x08
    3372:	59 87       	std	Y+9, r21	; 0x09
		cpu_total_sample += (uint32_t)sample;
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	6c 0d       	add	r22, r12
    337a:	7d 1d       	adc	r23, r13
    337c:	8e 1d       	adc	r24, r14
    337e:	9f 1d       	adc	r25, r15
		
		// Perform all events
		eventsPerform(CONVERT_TO_MS(cpu_total_sample));
    3380:	24 ef       	ldi	r18, 0xF4	; 244
    3382:	31 e0       	ldi	r19, 0x01	; 1
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodsi4>
    338c:	29 01       	movw	r4, r18
    338e:	3a 01       	movw	r6, r20
    3390:	0f 2e       	mov	r0, r31
    3392:	fc e3       	ldi	r31, 0x3C	; 60
    3394:	ef 2e       	mov	r14, r31
    3396:	f5 e2       	ldi	r31, 0x25	; 37
    3398:	ff 2e       	mov	r15, r31
    339a:	f0 2d       	mov	r31, r0
    339c:	00 e0       	ldi	r16, 0x00	; 0
    339e:	10 e0       	ldi	r17, 0x00	; 0
    33a0:	ec 86       	std	Y+12, r14	; 0x0c
    33a2:	fd 86       	std	Y+13, r15	; 0x0d
{
	//Loop through all events
	for (uint8_t i = 0; i < EVENT_MAX; i++)
	{
		//Check if event is valid
		if (events[i].interval == 0) continue;
    33a4:	c8 01       	movw	r24, r16
    33a6:	ec 84       	ldd	r14, Y+12	; 0x0c
    33a8:	fd 84       	ldd	r15, Y+13	; 0x0d
    33aa:	d7 01       	movw	r26, r14
    33ac:	12 96       	adiw	r26, 0x02	; 2
    33ae:	8d 90       	ld	r8, X+
    33b0:	9d 90       	ld	r9, X+
    33b2:	ad 90       	ld	r10, X+
    33b4:	bc 90       	ld	r11, X
    33b6:	15 97       	sbiw	r26, 0x05	; 5
    33b8:	81 14       	cp	r8, r1
    33ba:	91 04       	cpc	r9, r1
    33bc:	a1 04       	cpc	r10, r1
    33be:	b1 04       	cpc	r11, r1
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <eventControllerLoop+0xfe>
    33c2:	5a c0       	rjmp	.+180    	; 0x3478 <eventControllerLoop+0x1b2>
		
		if (events[i].timeLeft <= cpu_total_sample)
    33c4:	16 96       	adiw	r26, 0x06	; 6
    33c6:	4d 91       	ld	r20, X+
    33c8:	5d 91       	ld	r21, X+
    33ca:	6d 91       	ld	r22, X+
    33cc:	7c 91       	ld	r23, X
    33ce:	19 97       	sbiw	r26, 0x09	; 9
    33d0:	44 16       	cp	r4, r20
    33d2:	55 06       	cpc	r5, r21
    33d4:	66 06       	cpc	r6, r22
    33d6:	77 06       	cpc	r7, r23
    33d8:	08 f4       	brcc	.+2      	; 0x33dc <eventControllerLoop+0x116>
    33da:	43 c0       	rjmp	.+134    	; 0x3462 <eventControllerLoop+0x19c>
		{
			bool isContinueExecution = false;
			
			if (events[i].repeation != 1) // if not last execution, recalculate interval
    33dc:	b9 81       	ldd	r27, Y+1	; 0x01
    33de:	b0 9f       	mul	r27, r16
    33e0:	f0 01       	movw	r30, r0
    33e2:	b1 9f       	mul	r27, r17
    33e4:	f0 0d       	add	r31, r0
    33e6:	11 24       	eor	r1, r1
    33e8:	ea 5b       	subi	r30, 0xBA	; 186
    33ea:	fa 4d       	sbci	r31, 0xDA	; 218
    33ec:	20 81       	ld	r18, Z
    33ee:	26 95       	lsr	r18
    33f0:	21 30       	cpi	r18, 0x01	; 1
    33f2:	b1 f0       	breq	.+44     	; 0x3420 <eventControllerLoop+0x15a>
    33f4:	f7 01       	movw	r30, r14
			{
				isContinueExecution = true;
				do {
					events[i].timeLeft += events[i].interval;		// inefficient workaround for underflow bug...
    33f6:	48 0d       	add	r20, r8
    33f8:	59 1d       	adc	r21, r9
    33fa:	6a 1d       	adc	r22, r10
    33fc:	7b 1d       	adc	r23, r11
				} while (events[i].timeLeft <= cpu_total_sample);
    33fe:	44 16       	cp	r4, r20
    3400:	55 06       	cpc	r5, r21
    3402:	66 06       	cpc	r6, r22
    3404:	77 06       	cpc	r7, r23
    3406:	b8 f7       	brcc	.-18     	; 0x33f6 <eventControllerLoop+0x130>
    3408:	ec 87       	std	Y+12, r30	; 0x0c
    340a:	fd 87       	std	Y+13, r31	; 0x0d
    340c:	f7 01       	movw	r30, r14
    340e:	46 83       	std	Z+6, r20	; 0x06
    3410:	57 83       	std	Z+7, r21	; 0x07
    3412:	60 87       	std	Z+8, r22	; 0x08
    3414:	71 87       	std	Z+9, r23	; 0x09
				//events[i].timeLeft += events[i].interval - cpu_total_sample; // save processing time at cost of accuracy...
			}
			
			if (events[i].repeation >= 1) // if not infinite execution, count down
    3416:	22 23       	and	r18, r18
    3418:	a1 f0       	breq	.+40     	; 0x3442 <eventControllerLoop+0x17c>
		{
			bool isContinueExecution = false;
			
			if (events[i].repeation != 1) // if not last execution, recalculate interval
			{
				isContinueExecution = true;
    341a:	dd 24       	eor	r13, r13
    341c:	d3 94       	inc	r13
    341e:	01 c0       	rjmp	.+2      	; 0x3422 <eventControllerLoop+0x15c>
		//Check if event is valid
		if (events[i].interval == 0) continue;
		
		if (events[i].timeLeft <= cpu_total_sample)
		{
			bool isContinueExecution = false;
    3420:	d1 2c       	mov	r13, r1
				//events[i].timeLeft += events[i].interval - cpu_total_sample; // save processing time at cost of accuracy...
			}
			
			if (events[i].repeation >= 1) // if not infinite execution, count down
			{
				events[i].repeation--;
    3422:	39 81       	ldd	r19, Y+1	; 0x01
    3424:	38 9f       	mul	r19, r24
    3426:	f0 01       	movw	r30, r0
    3428:	39 9f       	mul	r19, r25
    342a:	f0 0d       	add	r31, r0
    342c:	11 24       	eor	r1, r1
    342e:	ea 5b       	subi	r30, 0xBA	; 186
    3430:	fa 4d       	sbci	r31, 0xDA	; 218
    3432:	21 58       	subi	r18, 0x81	; 129
    3434:	82 2f       	mov	r24, r18
    3436:	88 0f       	add	r24, r24
    3438:	20 81       	ld	r18, Z
    343a:	21 70       	andi	r18, 0x01	; 1
    343c:	28 2b       	or	r18, r24
    343e:	20 83       	st	Z, r18
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <eventControllerLoop+0x180>
		{
			bool isContinueExecution = false;
			
			if (events[i].repeation != 1) // if not last execution, recalculate interval
			{
				isContinueExecution = true;
    3442:	dd 24       	eor	r13, r13
    3444:	d3 94       	inc	r13
			//Perform function and count CPU-time
			#ifdef MEASURE_EVENTS_CPU
			uint16_t temp = TC_CPU.CNT;
			#endif
			
			WDT_RESET();
    3446:	a8 95       	wdr
			events[i].funcPtr();
    3448:	d7 01       	movw	r26, r14
    344a:	ed 91       	ld	r30, X+
    344c:	fc 91       	ld	r31, X
    344e:	19 95       	eicall
			WDT_RESET();
    3450:	a8 95       	wdr
			
			#ifdef MEASURE_EVENTS_CPU
			events[i].cputime_temp += TC_CPU.CNT - temp
			#endif
			
			if (!isContinueExecution) // if last execution
    3452:	d1 10       	cpse	r13, r1
    3454:	11 c0       	rjmp	.+34     	; 0x3478 <eventControllerLoop+0x1b2>
			{
				memset(&events[i], 0, sizeof * events);
    3456:	f7 01       	movw	r30, r14
    3458:	29 81       	ldd	r18, Y+1	; 0x01
    345a:	11 92       	st	Z+, r1
    345c:	2a 95       	dec	r18
    345e:	e9 f7       	brne	.-6      	; 0x345a <eventControllerLoop+0x194>
    3460:	0b c0       	rjmp	.+22     	; 0x3478 <eventControllerLoop+0x1b2>
			}
		}
		else 
		{
			events[i].timeLeft -= cpu_total_sample;
    3462:	44 19       	sub	r20, r4
    3464:	55 09       	sbc	r21, r5
    3466:	66 09       	sbc	r22, r6
    3468:	77 09       	sbc	r23, r7
    346a:	d7 01       	movw	r26, r14
    346c:	16 96       	adiw	r26, 0x06	; 6
    346e:	4d 93       	st	X+, r20
    3470:	5d 93       	st	X+, r21
    3472:	6d 93       	st	X+, r22
    3474:	7c 93       	st	X, r23
    3476:	19 97       	sbiw	r26, 0x09	; 9
    3478:	0f 5f       	subi	r16, 0xFF	; 255
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	ec 85       	ldd	r30, Y+12	; 0x0c
    347e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3480:	3b 96       	adiw	r30, 0x0b	; 11
    3482:	ec 87       	std	Y+12, r30	; 0x0c
    3484:	fd 87       	std	Y+13, r31	; 0x0d


static void eventsPerform(TimeEvent_t cpu_total_sample)
{
	//Loop through all events
	for (uint8_t i = 0; i < EVENT_MAX; i++)
    3486:	04 31       	cpi	r16, 0x14	; 20
    3488:	11 05       	cpc	r17, r1
    348a:	09 f0       	breq	.+2      	; 0x348e <eventControllerLoop+0x1c8>
    348c:	8b cf       	rjmp	.-234    	; 0x33a4 <eventControllerLoop+0xde>
		
		// Perform all events
		eventsPerform(CONVERT_TO_MS(cpu_total_sample));
		
		// Read CPU on value
		sample = TC_CPU.CNT + 1;
    348e:	d1 01       	movw	r26, r2
    3490:	90 96       	adiw	r26, 0x20	; 32
    3492:	cd 90       	ld	r12, X+
    3494:	dc 90       	ld	r13, X
    3496:	91 97       	sbiw	r26, 0x21	; 33
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
    3498:	e8 e0       	ldi	r30, 0x08	; 8
    349a:	19 96       	adiw	r26, 0x09	; 9
    349c:	ec 93       	st	X, r30
		
		// Perform all events
		eventsPerform(CONVERT_TO_MS(cpu_total_sample));
		
		// Read CPU on value
		sample = TC_CPU.CNT + 1;
    349e:	ff ef       	ldi	r31, 0xFF	; 255
    34a0:	cf 1a       	sub	r12, r31
    34a2:	df 0a       	sbc	r13, r31
		TC_CPU.CTRLFSET = TC_CMD_RESTART_gc;
		//sample = cpuGetCyclesSinceLastCall(); // raw timer unit
		cpu_on_sum += (uint32_t)sample;
    34a4:	e1 2c       	mov	r14, r1
    34a6:	f1 2c       	mov	r15, r1
    34a8:	2a 81       	ldd	r18, Y+2	; 0x02
    34aa:	3b 81       	ldd	r19, Y+3	; 0x03
    34ac:	4c 81       	ldd	r20, Y+4	; 0x04
    34ae:	5d 81       	ldd	r21, Y+5	; 0x05
    34b0:	2c 0d       	add	r18, r12
    34b2:	3d 1d       	adc	r19, r13
    34b4:	4e 1d       	adc	r20, r14
    34b6:	5f 1d       	adc	r21, r15
    34b8:	2a 83       	std	Y+2, r18	; 0x02
    34ba:	3b 83       	std	Y+3, r19	; 0x03
    34bc:	4c 83       	std	Y+4, r20	; 0x04
    34be:	5d 83       	std	Y+5, r21	; 0x05
		cpu_total_sample = (uint32_t)sample;
		
		i = hardware.datetime.time.second;
    34c0:	10 91 1a 20 	lds	r17, 0x201A
		if (second_processed != i) 
    34c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    34c6:	31 17       	cp	r19, r17
    34c8:	09 f4       	brne	.+2      	; 0x34cc <eventControllerLoop+0x206>
    34ca:	60 c0       	rjmp	.+192    	; 0x358c <eventControllerLoop+0x2c6>
				events[i].cputime_temp = 0;
				CONVERT_TO_MS(events[i].cputime);
			}
			#endif
			
			uint32_t cpu_total_sum = cpu_off_sum + cpu_on_sum; // raw timer unit
    34cc:	4a 80       	ldd	r4, Y+2	; 0x02
    34ce:	5b 80       	ldd	r5, Y+3	; 0x03
    34d0:	6c 80       	ldd	r6, Y+4	; 0x04
    34d2:	7d 80       	ldd	r7, Y+5	; 0x05
    34d4:	8e 81       	ldd	r24, Y+6	; 0x06
    34d6:	9f 81       	ldd	r25, Y+7	; 0x07
    34d8:	a8 85       	ldd	r26, Y+8	; 0x08
    34da:	b9 85       	ldd	r27, Y+9	; 0x09
    34dc:	48 0e       	add	r4, r24
    34de:	59 1e       	adc	r5, r25
    34e0:	6a 1e       	adc	r6, r26
    34e2:	7b 1e       	adc	r7, r27
			
			// Save measured data in ms
			cpu->total = CONVERT_TO_MS(cpu_total_sum);
    34e4:	a0 91 3a 25 	lds	r26, 0x253A
    34e8:	b0 91 3b 25 	lds	r27, 0x253B
    34ec:	ac 87       	std	Y+12, r26	; 0x0c
    34ee:	bd 87       	std	Y+13, r27	; 0x0d
    34f0:	c3 01       	movw	r24, r6
    34f2:	b2 01       	movw	r22, r4
    34f4:	24 ef       	ldi	r18, 0xF4	; 244
    34f6:	31 e0       	ldi	r19, 0x01	; 1
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	50 e0       	ldi	r21, 0x00	; 0
    34fc:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodsi4>
    3500:	ec 85       	ldd	r30, Y+12	; 0x0c
    3502:	fd 85       	ldd	r31, Y+13	; 0x0d
    3504:	20 83       	st	Z, r18
    3506:	31 83       	std	Z+1, r19	; 0x01
			cpu->on = CONVERT_TO_MS(cpu_on_sum);
    3508:	6a 81       	ldd	r22, Y+2	; 0x02
    350a:	7b 81       	ldd	r23, Y+3	; 0x03
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	9d 81       	ldd	r25, Y+5	; 0x05
    3510:	24 ef       	ldi	r18, 0xF4	; 244
    3512:	31 e0       	ldi	r19, 0x01	; 1
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodsi4>
    351c:	ac 85       	ldd	r26, Y+12	; 0x0c
    351e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3520:	12 96       	adiw	r26, 0x02	; 2
    3522:	2d 93       	st	X+, r18
    3524:	3c 93       	st	X, r19
    3526:	13 97       	sbiw	r26, 0x03	; 3
			cpu->off = CONVERT_TO_MS(cpu_off_sum);
    3528:	6e 81       	ldd	r22, Y+6	; 0x06
    352a:	7f 81       	ldd	r23, Y+7	; 0x07
    352c:	88 85       	ldd	r24, Y+8	; 0x08
    352e:	99 85       	ldd	r25, Y+9	; 0x09
    3530:	24 ef       	ldi	r18, 0xF4	; 244
    3532:	31 e0       	ldi	r19, 0x01	; 1
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodsi4>
    353c:	ec 85       	ldd	r30, Y+12	; 0x0c
    353e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3540:	24 83       	std	Z+4, r18	; 0x04
    3542:	35 83       	std	Z+5, r19	; 0x05
			
			// Calc CPU usage in percent
			cpu->usage = (float) 100 * cpu_on_sum / cpu_total_sum;
    3544:	6a 81       	ldd	r22, Y+2	; 0x02
    3546:	7b 81       	ldd	r23, Y+3	; 0x03
    3548:	8c 81       	ldd	r24, Y+4	; 0x04
    354a:	9d 81       	ldd	r25, Y+5	; 0x05
    354c:	03 d4       	rcall	.+2054   	; 0x3d54 <__floatunsisf>
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	48 ec       	ldi	r20, 0xC8	; 200
    3554:	52 e4       	ldi	r21, 0x42	; 66
    3556:	8c d4       	rcall	.+2328   	; 0x3e70 <__mulsf3>
    3558:	4b 01       	movw	r8, r22
    355a:	5c 01       	movw	r10, r24
    355c:	c3 01       	movw	r24, r6
    355e:	b2 01       	movw	r22, r4
    3560:	f9 d3       	rcall	.+2034   	; 0x3d54 <__floatunsisf>
    3562:	9b 01       	movw	r18, r22
    3564:	ac 01       	movw	r20, r24
    3566:	c5 01       	movw	r24, r10
    3568:	b4 01       	movw	r22, r8
    356a:	8c d3       	rcall	.+1816   	; 0x3c84 <__divsf3>
    356c:	ac 85       	ldd	r26, Y+12	; 0x0c
    356e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3570:	16 96       	adiw	r26, 0x06	; 6
    3572:	6d 93       	st	X+, r22
    3574:	7d 93       	st	X+, r23
    3576:	8d 93       	st	X+, r24
    3578:	9c 93       	st	X, r25
    357a:	19 97       	sbiw	r26, 0x09	; 9
			
			// Reset counters
			//cpu_total_sum = 0; // not necessary
			cpu_on_sum = 0;
			cpu_off_sum = 0;
    357c:	1e 82       	std	Y+6, r1	; 0x06
    357e:	1f 82       	std	Y+7, r1	; 0x07
    3580:	18 86       	std	Y+8, r1	; 0x08
    3582:	19 86       	std	Y+9, r1	; 0x09
			// Calc CPU usage in percent
			cpu->usage = (float) 100 * cpu_on_sum / cpu_total_sum;
			
			// Reset counters
			//cpu_total_sum = 0; // not necessary
			cpu_on_sum = 0;
    3584:	1a 82       	std	Y+2, r1	; 0x02
    3586:	1b 82       	std	Y+3, r1	; 0x03
    3588:	1c 82       	std	Y+4, r1	; 0x04
    358a:	1d 82       	std	Y+5, r1	; 0x05
			cpu_off_sum = 0;
		}
		
		//Sleep till interrupt
		WDT_RESET();
    358c:	a8 95       	wdr
		sleep_enable();
    358e:	e8 e4       	ldi	r30, 0x48	; 72
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	81 60       	ori	r24, 0x01	; 1
    3596:	80 83       	st	Z, r24
		sei();
    3598:	78 94       	sei
		sleep_cpu();
    359a:	88 95       	sleep
		sleep_disable();
    359c:	80 81       	ld	r24, Z
    359e:	8e 7f       	andi	r24, 0xFE	; 254
    35a0:	80 83       	st	Z, r24
		WDT_RESET();
    35a2:	a8 95       	wdr
	}
    35a4:	1a 87       	std	Y+10, r17	; 0x0a
    35a6:	cd ce       	rjmp	.-614    	; 0x3342 <eventControllerLoop+0x7c>

000035a8 <__vector_79>:
}


//EMPTY_INTERRUPT(TCD0_CCA_vect)
ISR(TCD0_CCA_vect)
{
    35a8:	1f 92       	push	r1
    35aa:	0f 92       	push	r0
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	0f 92       	push	r0
    35b0:	11 24       	eor	r1, r1
    35b2:	08 b6       	in	r0, 0x38	; 56
    35b4:	0f 92       	push	r0
    35b6:	18 be       	out	0x38, r1	; 56
    35b8:	09 b6       	in	r0, 0x39	; 57
    35ba:	0f 92       	push	r0
    35bc:	19 be       	out	0x39, r1	; 57
    35be:	0b b6       	in	r0, 0x3b	; 59
    35c0:	0f 92       	push	r0
    35c2:	1b be       	out	0x3b, r1	; 59
    35c4:	2f 93       	push	r18
    35c6:	3f 93       	push	r19
    35c8:	4f 93       	push	r20
    35ca:	5f 93       	push	r21
    35cc:	6f 93       	push	r22
    35ce:	7f 93       	push	r23
    35d0:	8f 93       	push	r24
    35d2:	9f 93       	push	r25
    35d4:	af 93       	push	r26
    35d6:	bf 93       	push	r27
    35d8:	ef 93       	push	r30
    35da:	ff 93       	push	r31
	CDC_Device_USBTask(&USBSerialClass);
    35dc:	8e e5       	ldi	r24, 0x5E	; 94
    35de:	91 e2       	ldi	r25, 0x21	; 33
    35e0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <CDC_Device_USBTask>
	USB_USBTask();
    35e4:	0e 94 ad 0a 	call	0x155a	; 0x155a <USB_USBTask>
	freeRam();
    35e8:	12 db       	rcall	.-2524   	; 0x2c0e <freeRam>
}
    35ea:	ff 91       	pop	r31
    35ec:	ef 91       	pop	r30
    35ee:	bf 91       	pop	r27
    35f0:	af 91       	pop	r26
    35f2:	9f 91       	pop	r25
    35f4:	8f 91       	pop	r24
    35f6:	7f 91       	pop	r23
    35f8:	6f 91       	pop	r22
    35fa:	5f 91       	pop	r21
    35fc:	4f 91       	pop	r20
    35fe:	3f 91       	pop	r19
    3600:	2f 91       	pop	r18
    3602:	0f 90       	pop	r0
    3604:	0b be       	out	0x3b, r0	; 59
    3606:	0f 90       	pop	r0
    3608:	09 be       	out	0x39, r0	; 57
    360a:	0f 90       	pop	r0
    360c:	08 be       	out	0x38, r0	; 56
    360e:	0f 90       	pop	r0
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	0f 90       	pop	r0
    3614:	1f 90       	pop	r1
    3616:	18 95       	reti

00003618 <twiInterruptHandler>:
	}

	/* If read command, send the START condition + Address + 'R/_W = 1' */
	else if (bytesToRead) {
		uint8_t readAddress = twi_driver->address | 0x01;
		twi_driver->twi->MASTER.ADDR = readAddress;
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	e0 91 18 26 	lds	r30, 0x2618
    3620:	f0 91 19 26 	lds	r31, 0x2619
    3624:	84 81       	ldd	r24, Z+4	; 0x04
    3626:	88 23       	and	r24, r24
    3628:	09 f4       	brne	.+2      	; 0x362c <twiInterruptHandler+0x14>
    362a:	b6 c0       	rjmp	.+364    	; 0x3798 <twiInterruptHandler+0x180>
    362c:	a0 81       	ld	r26, Z
    362e:	b1 81       	ldd	r27, Z+1	; 0x01
    3630:	14 96       	adiw	r26, 0x04	; 4
    3632:	8c 91       	ld	r24, X
    3634:	14 97       	sbiw	r26, 0x04	; 4
    3636:	82 ff       	sbrs	r24, 2
    3638:	0c c0       	rjmp	.+24     	; 0x3652 <twiInterruptHandler+0x3a>
    363a:	ef 01       	movw	r28, r30
    363c:	c8 5b       	subi	r28, 0xB8	; 184
    363e:	df 4f       	sbci	r29, 0xFF	; 255
    3640:	94 e0       	ldi	r25, 0x04	; 4
    3642:	98 83       	st	Y, r25
    3644:	e9 5b       	subi	r30, 0xB9	; 185
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	10 82       	st	Z, r1
    364a:	84 60       	ori	r24, 0x04	; 4
    364c:	14 96       	adiw	r26, 0x04	; 4
    364e:	8c 93       	st	X, r24
    3650:	7a c1       	rjmp	.+756    	; 0x3946 <twiInterruptHandler+0x32e>
    3652:	83 ff       	sbrs	r24, 3
    3654:	0c c0       	rjmp	.+24     	; 0x366e <twiInterruptHandler+0x56>
    3656:	ef 01       	movw	r28, r30
    3658:	c8 5b       	subi	r28, 0xB8	; 184
    365a:	df 4f       	sbci	r29, 0xFF	; 255
    365c:	93 e0       	ldi	r25, 0x03	; 3
    365e:	98 83       	st	Y, r25
    3660:	e9 5b       	subi	r30, 0xB9	; 185
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	10 82       	st	Z, r1
    3666:	88 60       	ori	r24, 0x08	; 8
    3668:	14 96       	adiw	r26, 0x04	; 4
    366a:	8c 93       	st	X, r24
    366c:	6c c1       	rjmp	.+728    	; 0x3946 <twiInterruptHandler+0x32e>
    366e:	86 ff       	sbrs	r24, 6
    3670:	46 c0       	rjmp	.+140    	; 0x36fe <twiInterruptHandler+0xe6>
    3672:	ef 01       	movw	r28, r30
    3674:	c6 5b       	subi	r28, 0xB6	; 182
    3676:	df 4f       	sbci	r29, 0xFF	; 255
    3678:	98 81       	ld	r25, Y
    367a:	21 96       	adiw	r28, 0x01	; 1
    367c:	28 81       	ld	r18, Y
    367e:	14 96       	adiw	r26, 0x04	; 4
    3680:	8c 91       	ld	r24, X
    3682:	14 97       	sbiw	r26, 0x04	; 4
    3684:	84 ff       	sbrs	r24, 4
    3686:	0c c0       	rjmp	.+24     	; 0x36a0 <twiInterruptHandler+0x88>
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	13 96       	adiw	r26, 0x03	; 3
    368c:	8c 93       	st	X, r24
    368e:	df 01       	movw	r26, r30
    3690:	a8 5b       	subi	r26, 0xB8	; 184
    3692:	bf 4f       	sbci	r27, 0xFF	; 255
    3694:	85 e0       	ldi	r24, 0x05	; 5
    3696:	8c 93       	st	X, r24
    3698:	e9 5b       	subi	r30, 0xB9	; 185
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	10 82       	st	Z, r1
    369e:	53 c1       	rjmp	.+678    	; 0x3946 <twiInterruptHandler+0x32e>
    36a0:	ef 01       	movw	r28, r30
    36a2:	c4 5b       	subi	r28, 0xB4	; 180
    36a4:	df 4f       	sbci	r29, 0xFF	; 255
    36a6:	88 81       	ld	r24, Y
    36a8:	89 17       	cp	r24, r25
    36aa:	50 f4       	brcc	.+20     	; 0x36c0 <twiInterruptHandler+0xa8>
    36ac:	88 81       	ld	r24, Y
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	98 0f       	add	r25, r24
    36b2:	98 83       	st	Y, r25
    36b4:	e8 0f       	add	r30, r24
    36b6:	f1 1d       	adc	r31, r1
    36b8:	87 81       	ldd	r24, Z+7	; 0x07
    36ba:	17 96       	adiw	r26, 0x07	; 7
    36bc:	8c 93       	st	X, r24
    36be:	43 c1       	rjmp	.+646    	; 0x3946 <twiInterruptHandler+0x32e>
    36c0:	ef 01       	movw	r28, r30
    36c2:	c3 5b       	subi	r28, 0xB3	; 179
    36c4:	df 4f       	sbci	r29, 0xFF	; 255
    36c6:	88 81       	ld	r24, Y
    36c8:	82 17       	cp	r24, r18
    36ca:	38 f4       	brcc	.+14     	; 0x36da <twiInterruptHandler+0xc2>
    36cc:	e7 5b       	subi	r30, 0xB7	; 183
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 81       	ld	r24, Z
    36d2:	81 60       	ori	r24, 0x01	; 1
    36d4:	16 96       	adiw	r26, 0x06	; 6
    36d6:	8c 93       	st	X, r24
    36d8:	36 c1       	rjmp	.+620    	; 0x3946 <twiInterruptHandler+0x32e>
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	13 96       	adiw	r26, 0x03	; 3
    36de:	8c 93       	st	X, r24
    36e0:	df 01       	movw	r26, r30
    36e2:	a8 5b       	subi	r26, 0xB8	; 184
    36e4:	bf 4f       	sbci	r27, 0xFF	; 255
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	8c 93       	st	X, r24
    36ea:	11 97       	sbiw	r26, 0x01	; 1
    36ec:	1c 92       	st	X, r1
    36ee:	05 80       	ldd	r0, Z+5	; 0x05
    36f0:	f6 81       	ldd	r31, Z+6	; 0x06
    36f2:	e0 2d       	mov	r30, r0
    36f4:	30 97       	sbiw	r30, 0x00	; 0
    36f6:	09 f4       	brne	.+2      	; 0x36fa <twiInterruptHandler+0xe2>
    36f8:	26 c1       	rjmp	.+588    	; 0x3946 <twiInterruptHandler+0x32e>
    36fa:	19 95       	eicall
    36fc:	24 c1       	rjmp	.+584    	; 0x3946 <twiInterruptHandler+0x32e>
    36fe:	88 23       	and	r24, r24
    3700:	0c f0       	brlt	.+2      	; 0x3704 <twiInterruptHandler+0xec>
    3702:	41 c0       	rjmp	.+130    	; 0x3786 <twiInterruptHandler+0x16e>
    3704:	ef 01       	movw	r28, r30
    3706:	c3 5b       	subi	r28, 0xB3	; 179
    3708:	df 4f       	sbci	r29, 0xFF	; 255
    370a:	88 81       	ld	r24, Y
    370c:	80 32       	cpi	r24, 0x20	; 32
    370e:	50 f4       	brcc	.+20     	; 0x3724 <twiInterruptHandler+0x10c>
    3710:	88 81       	ld	r24, Y
    3712:	91 e0       	ldi	r25, 0x01	; 1
    3714:	98 0f       	add	r25, r24
    3716:	98 83       	st	Y, r25
    3718:	17 96       	adiw	r26, 0x07	; 7
    371a:	9c 91       	ld	r25, X
    371c:	e8 0f       	add	r30, r24
    371e:	f1 1d       	adc	r31, r1
    3720:	97 a3       	std	Z+39, r25	; 0x27
    3722:	0b c0       	rjmp	.+22     	; 0x373a <twiInterruptHandler+0x122>
    3724:	83 e0       	ldi	r24, 0x03	; 3
    3726:	13 96       	adiw	r26, 0x03	; 3
    3728:	8c 93       	st	X, r24
    372a:	df 01       	movw	r26, r30
    372c:	a8 5b       	subi	r26, 0xB8	; 184
    372e:	bf 4f       	sbci	r27, 0xFF	; 255
    3730:	82 e0       	ldi	r24, 0x02	; 2
    3732:	8c 93       	st	X, r24
    3734:	e9 5b       	subi	r30, 0xB9	; 185
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	10 82       	st	Z, r1
    373a:	e0 91 18 26 	lds	r30, 0x2618
    373e:	f0 91 19 26 	lds	r31, 0x2619
    3742:	df 01       	movw	r26, r30
    3744:	a5 5b       	subi	r26, 0xB5	; 181
    3746:	bf 4f       	sbci	r27, 0xFF	; 255
    3748:	9c 91       	ld	r25, X
    374a:	12 96       	adiw	r26, 0x02	; 2
    374c:	8c 91       	ld	r24, X
    374e:	89 17       	cp	r24, r25
    3750:	30 f4       	brcc	.+12     	; 0x375e <twiInterruptHandler+0x146>
    3752:	01 90       	ld	r0, Z+
    3754:	f0 81       	ld	r31, Z
    3756:	e0 2d       	mov	r30, r0
    3758:	82 e0       	ldi	r24, 0x02	; 2
    375a:	83 83       	std	Z+3, r24	; 0x03
    375c:	f4 c0       	rjmp	.+488    	; 0x3946 <twiInterruptHandler+0x32e>
    375e:	a0 81       	ld	r26, Z
    3760:	b1 81       	ldd	r27, Z+1	; 0x01
    3762:	87 e0       	ldi	r24, 0x07	; 7
    3764:	13 96       	adiw	r26, 0x03	; 3
    3766:	8c 93       	st	X, r24
    3768:	df 01       	movw	r26, r30
    376a:	a8 5b       	subi	r26, 0xB8	; 184
    376c:	bf 4f       	sbci	r27, 0xFF	; 255
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	8c 93       	st	X, r24
    3772:	11 97       	sbiw	r26, 0x01	; 1
    3774:	1c 92       	st	X, r1
    3776:	05 80       	ldd	r0, Z+5	; 0x05
    3778:	f6 81       	ldd	r31, Z+6	; 0x06
    377a:	e0 2d       	mov	r30, r0
    377c:	30 97       	sbiw	r30, 0x00	; 0
    377e:	09 f4       	brne	.+2      	; 0x3782 <twiInterruptHandler+0x16a>
    3780:	e2 c0       	rjmp	.+452    	; 0x3946 <twiInterruptHandler+0x32e>
    3782:	19 95       	eicall
    3784:	e0 c0       	rjmp	.+448    	; 0x3946 <twiInterruptHandler+0x32e>
    3786:	df 01       	movw	r26, r30
    3788:	a8 5b       	subi	r26, 0xB8	; 184
    378a:	bf 4f       	sbci	r27, 0xFF	; 255
    378c:	86 e0       	ldi	r24, 0x06	; 6
    378e:	8c 93       	st	X, r24
    3790:	e9 5b       	subi	r30, 0xB9	; 185
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	10 82       	st	Z, r1
    3796:	d7 c0       	rjmp	.+430    	; 0x3946 <twiInterruptHandler+0x32e>
    3798:	a0 81       	ld	r26, Z
    379a:	b1 81       	ldd	r27, Z+1	; 0x01
    379c:	1a 96       	adiw	r26, 0x0a	; 10
    379e:	8c 91       	ld	r24, X
    37a0:	1a 97       	sbiw	r26, 0x0a	; 10
    37a2:	82 ff       	sbrs	r24, 2
    37a4:	0d c0       	rjmp	.+26     	; 0x37c0 <twiInterruptHandler+0x1a8>
    37a6:	df 01       	movw	r26, r30
    37a8:	a2 5b       	subi	r26, 0xB2	; 178
    37aa:	bf 4f       	sbci	r27, 0xFF	; 255
    37ac:	1c 92       	st	X, r1
    37ae:	11 96       	adiw	r26, 0x01	; 1
    37b0:	1c 92       	st	X, r1
    37b2:	17 97       	sbiw	r26, 0x07	; 7
    37b4:	84 e0       	ldi	r24, 0x04	; 4
    37b6:	8c 93       	st	X, r24
    37b8:	e9 5b       	subi	r30, 0xB9	; 185
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	10 82       	st	Z, r1
    37be:	c3 c0       	rjmp	.+390    	; 0x3946 <twiInterruptHandler+0x32e>
    37c0:	83 ff       	sbrs	r24, 3
    37c2:	0d c0       	rjmp	.+26     	; 0x37de <twiInterruptHandler+0x1c6>
    37c4:	df 01       	movw	r26, r30
    37c6:	a2 5b       	subi	r26, 0xB2	; 178
    37c8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ca:	1c 92       	st	X, r1
    37cc:	11 96       	adiw	r26, 0x01	; 1
    37ce:	1c 92       	st	X, r1
    37d0:	17 97       	sbiw	r26, 0x07	; 7
    37d2:	83 e0       	ldi	r24, 0x03	; 3
    37d4:	8c 93       	st	X, r24
    37d6:	e9 5b       	subi	r30, 0xB9	; 185
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	10 82       	st	Z, r1
    37dc:	b4 c0       	rjmp	.+360    	; 0x3946 <twiInterruptHandler+0x32e>
    37de:	28 2f       	mov	r18, r24
    37e0:	20 74       	andi	r18, 0x40	; 64
    37e2:	98 2f       	mov	r25, r24
    37e4:	91 74       	andi	r25, 0x41	; 65
    37e6:	91 34       	cpi	r25, 0x41	; 65
    37e8:	b9 f4       	brne	.+46     	; 0x3818 <twiInterruptHandler+0x200>
    37ea:	ef 01       	movw	r28, r30
    37ec:	c9 5b       	subi	r28, 0xB9	; 185
    37ee:	df 4f       	sbci	r29, 0xFF	; 255
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	88 83       	st	Y, r24
    37f4:	21 96       	adiw	r28, 0x01	; 1
    37f6:	18 82       	st	Y, r1
    37f8:	18 96       	adiw	r26, 0x08	; 8
    37fa:	8c 91       	ld	r24, X
    37fc:	18 97       	sbiw	r26, 0x08	; 8
    37fe:	8b 7f       	andi	r24, 0xFB	; 251
    3800:	18 96       	adiw	r26, 0x08	; 8
    3802:	8c 93       	st	X, r24
    3804:	df 01       	movw	r26, r30
    3806:	a1 5b       	subi	r26, 0xB1	; 177
    3808:	bf 4f       	sbci	r27, 0xFF	; 255
    380a:	1c 92       	st	X, r1
    380c:	01 90       	ld	r0, Z+
    380e:	f0 81       	ld	r31, Z
    3810:	e0 2d       	mov	r30, r0
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	81 87       	std	Z+9, r24	; 0x09
    3816:	97 c0       	rjmp	.+302    	; 0x3946 <twiInterruptHandler+0x32e>
    3818:	22 23       	and	r18, r18
    381a:	e9 f0       	breq	.+58     	; 0x3856 <twiInterruptHandler+0x23e>
    381c:	18 96       	adiw	r26, 0x08	; 8
    381e:	8c 91       	ld	r24, X
    3820:	18 97       	sbiw	r26, 0x08	; 8
    3822:	8b 7f       	andi	r24, 0xFB	; 251
    3824:	18 96       	adiw	r26, 0x08	; 8
    3826:	8c 93       	st	X, r24
    3828:	a0 81       	ld	r26, Z
    382a:	b1 81       	ldd	r27, Z+1	; 0x01
    382c:	1a 96       	adiw	r26, 0x0a	; 10
    382e:	8c 91       	ld	r24, X
    3830:	1a 97       	sbiw	r26, 0x0a	; 10
    3832:	80 64       	ori	r24, 0x40	; 64
    3834:	1a 96       	adiw	r26, 0x0a	; 10
    3836:	8c 93       	st	X, r24
    3838:	df 01       	movw	r26, r30
    383a:	a8 5b       	subi	r26, 0xB8	; 184
    383c:	bf 4f       	sbci	r27, 0xFF	; 255
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	8c 93       	st	X, r24
    3842:	11 97       	sbiw	r26, 0x01	; 1
    3844:	1c 92       	st	X, r1
    3846:	05 80       	ldd	r0, Z+5	; 0x05
    3848:	f6 81       	ldd	r31, Z+6	; 0x06
    384a:	e0 2d       	mov	r30, r0
    384c:	30 97       	sbiw	r30, 0x00	; 0
    384e:	09 f4       	brne	.+2      	; 0x3852 <twiInterruptHandler+0x23a>
    3850:	7a c0       	rjmp	.+244    	; 0x3946 <twiInterruptHandler+0x32e>
    3852:	19 95       	eicall
    3854:	78 c0       	rjmp	.+240    	; 0x3946 <twiInterruptHandler+0x32e>
    3856:	88 23       	and	r24, r24
    3858:	0c f0       	brlt	.+2      	; 0x385c <twiInterruptHandler+0x244>
    385a:	6d c0       	rjmp	.+218    	; 0x3936 <twiInterruptHandler+0x31e>
    385c:	1a 96       	adiw	r26, 0x0a	; 10
    385e:	8c 91       	ld	r24, X
    3860:	1a 97       	sbiw	r26, 0x0a	; 10
    3862:	81 ff       	sbrs	r24, 1
    3864:	3e c0       	rjmp	.+124    	; 0x38e2 <twiInterruptHandler+0x2ca>
    3866:	ef 01       	movw	r28, r30
    3868:	c1 5b       	subi	r28, 0xB1	; 177
    386a:	df 4f       	sbci	r29, 0xFF	; 255
    386c:	88 81       	ld	r24, Y
    386e:	88 23       	and	r24, r24
    3870:	b9 f0       	breq	.+46     	; 0x38a0 <twiInterruptHandler+0x288>
    3872:	1a 96       	adiw	r26, 0x0a	; 10
    3874:	8c 91       	ld	r24, X
    3876:	1a 97       	sbiw	r26, 0x0a	; 10
    3878:	84 ff       	sbrs	r24, 4
    387a:	12 c0       	rjmp	.+36     	; 0x38a0 <twiInterruptHandler+0x288>
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	19 96       	adiw	r26, 0x09	; 9
    3880:	8c 93       	st	X, r24
    3882:	df 01       	movw	r26, r30
    3884:	a8 5b       	subi	r26, 0xB8	; 184
    3886:	bf 4f       	sbci	r27, 0xFF	; 255
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	8c 93       	st	X, r24
    388c:	11 97       	sbiw	r26, 0x01	; 1
    388e:	1c 92       	st	X, r1
    3890:	05 80       	ldd	r0, Z+5	; 0x05
    3892:	f6 81       	ldd	r31, Z+6	; 0x06
    3894:	e0 2d       	mov	r30, r0
    3896:	30 97       	sbiw	r30, 0x00	; 0
    3898:	09 f4       	brne	.+2      	; 0x389c <twiInterruptHandler+0x284>
    389a:	55 c0       	rjmp	.+170    	; 0x3946 <twiInterruptHandler+0x32e>
    389c:	19 95       	eicall
    389e:	53 c0       	rjmp	.+166    	; 0x3946 <twiInterruptHandler+0x32e>
    38a0:	ef 01       	movw	r28, r30
    38a2:	c1 5b       	subi	r28, 0xB1	; 177
    38a4:	df 4f       	sbci	r29, 0xFF	; 255
    38a6:	88 81       	ld	r24, Y
    38a8:	80 32       	cpi	r24, 0x20	; 32
    38aa:	80 f4       	brcc	.+32     	; 0x38cc <twiInterruptHandler+0x2b4>
    38ac:	88 81       	ld	r24, Y
    38ae:	91 e0       	ldi	r25, 0x01	; 1
    38b0:	98 0f       	add	r25, r24
    38b2:	98 83       	st	Y, r25
    38b4:	ef 01       	movw	r28, r30
    38b6:	c8 0f       	add	r28, r24
    38b8:	d1 1d       	adc	r29, r1
    38ba:	8f 81       	ldd	r24, Y+7	; 0x07
    38bc:	1c 96       	adiw	r26, 0x0c	; 12
    38be:	8c 93       	st	X, r24
    38c0:	01 90       	ld	r0, Z+
    38c2:	f0 81       	ld	r31, Z
    38c4:	e0 2d       	mov	r30, r0
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	81 87       	std	Z+9, r24	; 0x09
    38ca:	3d c0       	rjmp	.+122    	; 0x3946 <twiInterruptHandler+0x32e>
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	19 96       	adiw	r26, 0x09	; 9
    38d0:	8c 93       	st	X, r24
    38d2:	df 01       	movw	r26, r30
    38d4:	a8 5b       	subi	r26, 0xB8	; 184
    38d6:	bf 4f       	sbci	r27, 0xFF	; 255
    38d8:	8c 93       	st	X, r24
    38da:	e9 5b       	subi	r30, 0xB9	; 185
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	10 82       	st	Z, r1
    38e0:	32 c0       	rjmp	.+100    	; 0x3946 <twiInterruptHandler+0x32e>
    38e2:	18 96       	adiw	r26, 0x08	; 8
    38e4:	8c 91       	ld	r24, X
    38e6:	18 97       	sbiw	r26, 0x08	; 8
    38e8:	84 60       	ori	r24, 0x04	; 4
    38ea:	18 96       	adiw	r26, 0x08	; 8
    38ec:	8c 93       	st	X, r24
    38ee:	df 01       	movw	r26, r30
    38f0:	a2 5b       	subi	r26, 0xB2	; 178
    38f2:	bf 4f       	sbci	r27, 0xFF	; 255
    38f4:	8c 91       	ld	r24, X
    38f6:	80 32       	cpi	r24, 0x20	; 32
    38f8:	80 f4       	brcc	.+32     	; 0x391a <twiInterruptHandler+0x302>
    38fa:	8c 91       	ld	r24, X
    38fc:	91 e0       	ldi	r25, 0x01	; 1
    38fe:	98 0f       	add	r25, r24
    3900:	9c 93       	st	X, r25
    3902:	a0 81       	ld	r26, Z
    3904:	b1 81       	ldd	r27, Z+1	; 0x01
    3906:	1c 96       	adiw	r26, 0x0c	; 12
    3908:	9c 91       	ld	r25, X
    390a:	1c 97       	sbiw	r26, 0x0c	; 12
    390c:	e8 0f       	add	r30, r24
    390e:	f1 1d       	adc	r31, r1
    3910:	97 a3       	std	Z+39, r25	; 0x27
    3912:	83 e0       	ldi	r24, 0x03	; 3
    3914:	19 96       	adiw	r26, 0x09	; 9
    3916:	8c 93       	st	X, r24
    3918:	16 c0       	rjmp	.+44     	; 0x3946 <twiInterruptHandler+0x32e>
    391a:	a0 81       	ld	r26, Z
    391c:	b1 81       	ldd	r27, Z+1	; 0x01
    391e:	86 e0       	ldi	r24, 0x06	; 6
    3920:	19 96       	adiw	r26, 0x09	; 9
    3922:	8c 93       	st	X, r24
    3924:	df 01       	movw	r26, r30
    3926:	a8 5b       	subi	r26, 0xB8	; 184
    3928:	bf 4f       	sbci	r27, 0xFF	; 255
    392a:	82 e0       	ldi	r24, 0x02	; 2
    392c:	8c 93       	st	X, r24
    392e:	e9 5b       	subi	r30, 0xB9	; 185
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	10 82       	st	Z, r1
    3934:	08 c0       	rjmp	.+16     	; 0x3946 <twiInterruptHandler+0x32e>
    3936:	df 01       	movw	r26, r30
    3938:	a8 5b       	subi	r26, 0xB8	; 184
    393a:	bf 4f       	sbci	r27, 0xFF	; 255
    393c:	85 e0       	ldi	r24, 0x05	; 5
    393e:	8c 93       	st	X, r24
    3940:	e9 5b       	subi	r30, 0xB9	; 185
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	10 82       	st	Z, r1
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	08 95       	ret

0000394c <twiInit>:
    394c:	6f 92       	push	r6
    394e:	7f 92       	push	r7
    3950:	8f 92       	push	r8
    3952:	9f 92       	push	r9
    3954:	af 92       	push	r10
    3956:	bf 92       	push	r11
    3958:	cf 92       	push	r12
    395a:	ef 92       	push	r14
    395c:	ff 92       	push	r15
    395e:	0f 93       	push	r16
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	3c 01       	movw	r6, r24
    396a:	fa 01       	movw	r30, r20
    396c:	88 e3       	ldi	r24, 0x38	; 56
    396e:	80 8b       	std	Z+16, r24	; 0x10
    3970:	81 8b       	std	Z+17, r24	; 0x11
    3972:	83 e0       	ldi	r24, 0x03	; 3
    3974:	85 83       	std	Z+5, r24	; 0x05
    3976:	81 83       	std	Z+1, r24	; 0x01
    3978:	60 92 18 26 	sts	0x2618, r6
    397c:	70 92 19 26 	sts	0x2619, r7
    3980:	d3 01       	movw	r26, r6
    3982:	12 96       	adiw	r26, 0x02	; 2
    3984:	4d 93       	st	X+, r20
    3986:	5c 93       	st	X, r21
    3988:	13 97       	sbiw	r26, 0x03	; 3
    398a:	14 96       	adiw	r26, 0x04	; 4
    398c:	2c 93       	st	X, r18
    398e:	14 97       	sbiw	r26, 0x04	; 4
    3990:	15 96       	adiw	r26, 0x05	; 5
    3992:	ed 92       	st	X+, r14
    3994:	fc 92       	st	X, r15
    3996:	16 97       	sbiw	r26, 0x06	; 6
    3998:	6d 93       	st	X+, r22
    399a:	7c 93       	st	X, r23
    399c:	11 97       	sbiw	r26, 0x01	; 1
    399e:	22 23       	and	r18, r18
    39a0:	29 f1       	breq	.+74     	; 0x39ec <twiInit+0xa0>
    39a2:	fb 01       	movw	r30, r22
    39a4:	10 82       	st	Z, r1
    39a6:	ed 90       	ld	r14, X+
    39a8:	fc 90       	ld	r15, X
    39aa:	88 89       	ldd	r24, Y+16	; 0x10
    39ac:	99 89       	ldd	r25, Y+17	; 0x11
    39ae:	aa 89       	ldd	r26, Y+18	; 0x12
    39b0:	bb 89       	ldd	r27, Y+19	; 0x13
    39b2:	9c 01       	movw	r18, r24
    39b4:	ad 01       	movw	r20, r26
    39b6:	22 0f       	add	r18, r18
    39b8:	33 1f       	adc	r19, r19
    39ba:	44 1f       	adc	r20, r20
    39bc:	55 1f       	adc	r21, r21
    39be:	c5 01       	movw	r24, r10
    39c0:	b4 01       	movw	r22, r8
    39c2:	3b d6       	rcall	.+3190   	; 0x463a <__udivmodsi4>
    39c4:	25 50       	subi	r18, 0x05	; 5
    39c6:	d7 01       	movw	r26, r14
    39c8:	15 96       	adiw	r26, 0x05	; 5
    39ca:	2c 93       	st	X, r18
    39cc:	d3 01       	movw	r26, r6
    39ce:	ed 91       	ld	r30, X+
    39d0:	fc 91       	ld	r31, X
    39d2:	11 97       	sbiw	r26, 0x01	; 1
    39d4:	8c 2d       	mov	r24, r12
    39d6:	88 63       	ori	r24, 0x38	; 56
    39d8:	81 83       	std	Z+1, r24	; 0x01
    39da:	ed 91       	ld	r30, X+
    39dc:	fc 91       	ld	r31, X
    39de:	11 97       	sbiw	r26, 0x01	; 1
    39e0:	12 82       	std	Z+2, r1	; 0x02
    39e2:	ed 91       	ld	r30, X+
    39e4:	fc 91       	ld	r31, X
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	84 83       	std	Z+4, r24	; 0x04
    39ea:	13 c0       	rjmp	.+38     	; 0x3a12 <twiInit+0xc6>
    39ec:	f3 01       	movw	r30, r6
    39ee:	e2 5b       	subi	r30, 0xB2	; 178
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	10 82       	st	Z, r1
    39f4:	31 96       	adiw	r30, 0x01	; 1
    39f6:	10 82       	st	Z, r1
    39f8:	38 97       	sbiw	r30, 0x08	; 8
    39fa:	10 82       	st	Z, r1
    39fc:	31 96       	adiw	r30, 0x01	; 1
    39fe:	10 82       	st	Z, r1
    3a00:	8c 2d       	mov	r24, r12
    3a02:	88 63       	ori	r24, 0x38	; 56
    3a04:	fb 01       	movw	r30, r22
    3a06:	80 87       	std	Z+8, r24	; 0x08
    3a08:	d3 01       	movw	r26, r6
    3a0a:	ed 91       	ld	r30, X+
    3a0c:	fc 91       	ld	r31, X
    3a0e:	00 0f       	add	r16, r16
    3a10:	03 87       	std	Z+11, r16	; 0x0b
    3a12:	df 91       	pop	r29
    3a14:	cf 91       	pop	r28
    3a16:	0f 91       	pop	r16
    3a18:	ff 90       	pop	r15
    3a1a:	ef 90       	pop	r14
    3a1c:	cf 90       	pop	r12
    3a1e:	bf 90       	pop	r11
    3a20:	af 90       	pop	r10
    3a22:	9f 90       	pop	r9
    3a24:	8f 90       	pop	r8
    3a26:	7f 90       	pop	r7
    3a28:	6f 90       	pop	r6
    3a2a:	08 95       	ret

00003a2c <__vector_13>:
	}
}


#ifdef TWIC_TWIM_vect
ISR(TWIC_TWIM_vect) {
    3a2c:	1f 92       	push	r1
    3a2e:	0f 92       	push	r0
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	0f 92       	push	r0
    3a34:	11 24       	eor	r1, r1
    3a36:	08 b6       	in	r0, 0x38	; 56
    3a38:	0f 92       	push	r0
    3a3a:	18 be       	out	0x38, r1	; 56
    3a3c:	09 b6       	in	r0, 0x39	; 57
    3a3e:	0f 92       	push	r0
    3a40:	19 be       	out	0x39, r1	; 57
    3a42:	0b b6       	in	r0, 0x3b	; 59
    3a44:	0f 92       	push	r0
    3a46:	1b be       	out	0x3b, r1	; 59
    3a48:	2f 93       	push	r18
    3a4a:	3f 93       	push	r19
    3a4c:	4f 93       	push	r20
    3a4e:	5f 93       	push	r21
    3a50:	6f 93       	push	r22
    3a52:	7f 93       	push	r23
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25
    3a58:	af 93       	push	r26
    3a5a:	bf 93       	push	r27
    3a5c:	ef 93       	push	r30
    3a5e:	ff 93       	push	r31
	twiInterruptHandler();
    3a60:	db dd       	rcall	.-1098   	; 0x3618 <twiInterruptHandler>
}
    3a62:	ff 91       	pop	r31
    3a64:	ef 91       	pop	r30
    3a66:	bf 91       	pop	r27
    3a68:	af 91       	pop	r26
    3a6a:	9f 91       	pop	r25
    3a6c:	8f 91       	pop	r24
    3a6e:	7f 91       	pop	r23
    3a70:	6f 91       	pop	r22
    3a72:	5f 91       	pop	r21
    3a74:	4f 91       	pop	r20
    3a76:	3f 91       	pop	r19
    3a78:	2f 91       	pop	r18
    3a7a:	0f 90       	pop	r0
    3a7c:	0b be       	out	0x3b, r0	; 59
    3a7e:	0f 90       	pop	r0
    3a80:	09 be       	out	0x39, r0	; 57
    3a82:	0f 90       	pop	r0
    3a84:	08 be       	out	0x38, r0	; 56
    3a86:	0f 90       	pop	r0
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	0f 90       	pop	r0
    3a8c:	1f 90       	pop	r1
    3a8e:	18 95       	reti

00003a90 <__vector_12>:
#endif

#ifdef TWIC_TWIS_vect
ISR(TWIC_TWIS_vect) {
    3a90:	1f 92       	push	r1
    3a92:	0f 92       	push	r0
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	0f 92       	push	r0
    3a98:	11 24       	eor	r1, r1
    3a9a:	08 b6       	in	r0, 0x38	; 56
    3a9c:	0f 92       	push	r0
    3a9e:	18 be       	out	0x38, r1	; 56
    3aa0:	09 b6       	in	r0, 0x39	; 57
    3aa2:	0f 92       	push	r0
    3aa4:	19 be       	out	0x39, r1	; 57
    3aa6:	0b b6       	in	r0, 0x3b	; 59
    3aa8:	0f 92       	push	r0
    3aaa:	1b be       	out	0x3b, r1	; 59
    3aac:	2f 93       	push	r18
    3aae:	3f 93       	push	r19
    3ab0:	4f 93       	push	r20
    3ab2:	5f 93       	push	r21
    3ab4:	6f 93       	push	r22
    3ab6:	7f 93       	push	r23
    3ab8:	8f 93       	push	r24
    3aba:	9f 93       	push	r25
    3abc:	af 93       	push	r26
    3abe:	bf 93       	push	r27
    3ac0:	ef 93       	push	r30
    3ac2:	ff 93       	push	r31
	twiInterruptHandler();
    3ac4:	a9 dd       	rcall	.-1198   	; 0x3618 <twiInterruptHandler>
}
    3ac6:	ff 91       	pop	r31
    3ac8:	ef 91       	pop	r30
    3aca:	bf 91       	pop	r27
    3acc:	af 91       	pop	r26
    3ace:	9f 91       	pop	r25
    3ad0:	8f 91       	pop	r24
    3ad2:	7f 91       	pop	r23
    3ad4:	6f 91       	pop	r22
    3ad6:	5f 91       	pop	r21
    3ad8:	4f 91       	pop	r20
    3ada:	3f 91       	pop	r19
    3adc:	2f 91       	pop	r18
    3ade:	0f 90       	pop	r0
    3ae0:	0b be       	out	0x3b, r0	; 59
    3ae2:	0f 90       	pop	r0
    3ae4:	09 be       	out	0x39, r0	; 57
    3ae6:	0f 90       	pop	r0
    3ae8:	08 be       	out	0x38, r0	; 56
    3aea:	0f 90       	pop	r0
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	0f 90       	pop	r0
    3af0:	1f 90       	pop	r1
    3af2:	18 95       	reti

00003af4 <__vector_76>:
#endif



#ifdef TWID_TWIM_vect
ISR(TWID_TWIM_vect) {
    3af4:	1f 92       	push	r1
    3af6:	0f 92       	push	r0
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	0f 92       	push	r0
    3afc:	11 24       	eor	r1, r1
    3afe:	08 b6       	in	r0, 0x38	; 56
    3b00:	0f 92       	push	r0
    3b02:	18 be       	out	0x38, r1	; 56
    3b04:	09 b6       	in	r0, 0x39	; 57
    3b06:	0f 92       	push	r0
    3b08:	19 be       	out	0x39, r1	; 57
    3b0a:	0b b6       	in	r0, 0x3b	; 59
    3b0c:	0f 92       	push	r0
    3b0e:	1b be       	out	0x3b, r1	; 59
    3b10:	2f 93       	push	r18
    3b12:	3f 93       	push	r19
    3b14:	4f 93       	push	r20
    3b16:	5f 93       	push	r21
    3b18:	6f 93       	push	r22
    3b1a:	7f 93       	push	r23
    3b1c:	8f 93       	push	r24
    3b1e:	9f 93       	push	r25
    3b20:	af 93       	push	r26
    3b22:	bf 93       	push	r27
    3b24:	ef 93       	push	r30
    3b26:	ff 93       	push	r31
	twiInterruptHandler();
    3b28:	77 dd       	rcall	.-1298   	; 0x3618 <twiInterruptHandler>
}
    3b2a:	ff 91       	pop	r31
    3b2c:	ef 91       	pop	r30
    3b2e:	bf 91       	pop	r27
    3b30:	af 91       	pop	r26
    3b32:	9f 91       	pop	r25
    3b34:	8f 91       	pop	r24
    3b36:	7f 91       	pop	r23
    3b38:	6f 91       	pop	r22
    3b3a:	5f 91       	pop	r21
    3b3c:	4f 91       	pop	r20
    3b3e:	3f 91       	pop	r19
    3b40:	2f 91       	pop	r18
    3b42:	0f 90       	pop	r0
    3b44:	0b be       	out	0x3b, r0	; 59
    3b46:	0f 90       	pop	r0
    3b48:	09 be       	out	0x39, r0	; 57
    3b4a:	0f 90       	pop	r0
    3b4c:	08 be       	out	0x38, r0	; 56
    3b4e:	0f 90       	pop	r0
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	0f 90       	pop	r0
    3b54:	1f 90       	pop	r1
    3b56:	18 95       	reti

00003b58 <__vector_75>:
#endif

#ifdef TWID_TWIS_vect
ISR(TWID_TWIS_vect) {
    3b58:	1f 92       	push	r1
    3b5a:	0f 92       	push	r0
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	0f 92       	push	r0
    3b60:	11 24       	eor	r1, r1
    3b62:	08 b6       	in	r0, 0x38	; 56
    3b64:	0f 92       	push	r0
    3b66:	18 be       	out	0x38, r1	; 56
    3b68:	09 b6       	in	r0, 0x39	; 57
    3b6a:	0f 92       	push	r0
    3b6c:	19 be       	out	0x39, r1	; 57
    3b6e:	0b b6       	in	r0, 0x3b	; 59
    3b70:	0f 92       	push	r0
    3b72:	1b be       	out	0x3b, r1	; 59
    3b74:	2f 93       	push	r18
    3b76:	3f 93       	push	r19
    3b78:	4f 93       	push	r20
    3b7a:	5f 93       	push	r21
    3b7c:	6f 93       	push	r22
    3b7e:	7f 93       	push	r23
    3b80:	8f 93       	push	r24
    3b82:	9f 93       	push	r25
    3b84:	af 93       	push	r26
    3b86:	bf 93       	push	r27
    3b88:	ef 93       	push	r30
    3b8a:	ff 93       	push	r31
	twiInterruptHandler();
    3b8c:	45 dd       	rcall	.-1398   	; 0x3618 <twiInterruptHandler>
}
    3b8e:	ff 91       	pop	r31
    3b90:	ef 91       	pop	r30
    3b92:	bf 91       	pop	r27
    3b94:	af 91       	pop	r26
    3b96:	9f 91       	pop	r25
    3b98:	8f 91       	pop	r24
    3b9a:	7f 91       	pop	r23
    3b9c:	6f 91       	pop	r22
    3b9e:	5f 91       	pop	r21
    3ba0:	4f 91       	pop	r20
    3ba2:	3f 91       	pop	r19
    3ba4:	2f 91       	pop	r18
    3ba6:	0f 90       	pop	r0
    3ba8:	0b be       	out	0x3b, r0	; 59
    3baa:	0f 90       	pop	r0
    3bac:	09 be       	out	0x39, r0	; 57
    3bae:	0f 90       	pop	r0
    3bb0:	08 be       	out	0x38, r0	; 56
    3bb2:	0f 90       	pop	r0
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	0f 90       	pop	r0
    3bb8:	1f 90       	pop	r1
    3bba:	18 95       	reti

00003bbc <__vector_46>:
#endif


#ifdef TWIE_TWIM_vect
ISR(TWIE_TWIM_vect) {
    3bbc:	1f 92       	push	r1
    3bbe:	0f 92       	push	r0
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	0f 92       	push	r0
    3bc4:	11 24       	eor	r1, r1
    3bc6:	08 b6       	in	r0, 0x38	; 56
    3bc8:	0f 92       	push	r0
    3bca:	18 be       	out	0x38, r1	; 56
    3bcc:	09 b6       	in	r0, 0x39	; 57
    3bce:	0f 92       	push	r0
    3bd0:	19 be       	out	0x39, r1	; 57
    3bd2:	0b b6       	in	r0, 0x3b	; 59
    3bd4:	0f 92       	push	r0
    3bd6:	1b be       	out	0x3b, r1	; 59
    3bd8:	2f 93       	push	r18
    3bda:	3f 93       	push	r19
    3bdc:	4f 93       	push	r20
    3bde:	5f 93       	push	r21
    3be0:	6f 93       	push	r22
    3be2:	7f 93       	push	r23
    3be4:	8f 93       	push	r24
    3be6:	9f 93       	push	r25
    3be8:	af 93       	push	r26
    3bea:	bf 93       	push	r27
    3bec:	ef 93       	push	r30
    3bee:	ff 93       	push	r31
	twiInterruptHandler();
    3bf0:	13 dd       	rcall	.-1498   	; 0x3618 <twiInterruptHandler>
}
    3bf2:	ff 91       	pop	r31
    3bf4:	ef 91       	pop	r30
    3bf6:	bf 91       	pop	r27
    3bf8:	af 91       	pop	r26
    3bfa:	9f 91       	pop	r25
    3bfc:	8f 91       	pop	r24
    3bfe:	7f 91       	pop	r23
    3c00:	6f 91       	pop	r22
    3c02:	5f 91       	pop	r21
    3c04:	4f 91       	pop	r20
    3c06:	3f 91       	pop	r19
    3c08:	2f 91       	pop	r18
    3c0a:	0f 90       	pop	r0
    3c0c:	0b be       	out	0x3b, r0	; 59
    3c0e:	0f 90       	pop	r0
    3c10:	09 be       	out	0x39, r0	; 57
    3c12:	0f 90       	pop	r0
    3c14:	08 be       	out	0x38, r0	; 56
    3c16:	0f 90       	pop	r0
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	0f 90       	pop	r0
    3c1c:	1f 90       	pop	r1
    3c1e:	18 95       	reti

00003c20 <__vector_45>:
#endif


#ifdef TWIE_TWIS_vect
ISR(TWIE_TWIS_vect) {
    3c20:	1f 92       	push	r1
    3c22:	0f 92       	push	r0
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	0f 92       	push	r0
    3c28:	11 24       	eor	r1, r1
    3c2a:	08 b6       	in	r0, 0x38	; 56
    3c2c:	0f 92       	push	r0
    3c2e:	18 be       	out	0x38, r1	; 56
    3c30:	09 b6       	in	r0, 0x39	; 57
    3c32:	0f 92       	push	r0
    3c34:	19 be       	out	0x39, r1	; 57
    3c36:	0b b6       	in	r0, 0x3b	; 59
    3c38:	0f 92       	push	r0
    3c3a:	1b be       	out	0x3b, r1	; 59
    3c3c:	2f 93       	push	r18
    3c3e:	3f 93       	push	r19
    3c40:	4f 93       	push	r20
    3c42:	5f 93       	push	r21
    3c44:	6f 93       	push	r22
    3c46:	7f 93       	push	r23
    3c48:	8f 93       	push	r24
    3c4a:	9f 93       	push	r25
    3c4c:	af 93       	push	r26
    3c4e:	bf 93       	push	r27
    3c50:	ef 93       	push	r30
    3c52:	ff 93       	push	r31
	twiInterruptHandler();
    3c54:	e1 dc       	rcall	.-1598   	; 0x3618 <twiInterruptHandler>
}
    3c56:	ff 91       	pop	r31
    3c58:	ef 91       	pop	r30
    3c5a:	bf 91       	pop	r27
    3c5c:	af 91       	pop	r26
    3c5e:	9f 91       	pop	r25
    3c60:	8f 91       	pop	r24
    3c62:	7f 91       	pop	r23
    3c64:	6f 91       	pop	r22
    3c66:	5f 91       	pop	r21
    3c68:	4f 91       	pop	r20
    3c6a:	3f 91       	pop	r19
    3c6c:	2f 91       	pop	r18
    3c6e:	0f 90       	pop	r0
    3c70:	0b be       	out	0x3b, r0	; 59
    3c72:	0f 90       	pop	r0
    3c74:	09 be       	out	0x39, r0	; 57
    3c76:	0f 90       	pop	r0
    3c78:	08 be       	out	0x38, r0	; 56
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <__divsf3>:
    3c84:	0c d0       	rcall	.+24     	; 0x3c9e <__divsf3x>
    3c86:	ba c0       	rjmp	.+372    	; 0x3dfc <__fp_round>
    3c88:	b2 d0       	rcall	.+356    	; 0x3dee <__fp_pscB>
    3c8a:	40 f0       	brcs	.+16     	; 0x3c9c <__divsf3+0x18>
    3c8c:	a9 d0       	rcall	.+338    	; 0x3de0 <__fp_pscA>
    3c8e:	30 f0       	brcs	.+12     	; 0x3c9c <__divsf3+0x18>
    3c90:	21 f4       	brne	.+8      	; 0x3c9a <__divsf3+0x16>
    3c92:	5f 3f       	cpi	r21, 0xFF	; 255
    3c94:	19 f0       	breq	.+6      	; 0x3c9c <__divsf3+0x18>
    3c96:	9b c0       	rjmp	.+310    	; 0x3dce <__fp_inf>
    3c98:	51 11       	cpse	r21, r1
    3c9a:	e4 c0       	rjmp	.+456    	; 0x3e64 <__fp_szero>
    3c9c:	9e c0       	rjmp	.+316    	; 0x3dda <__fp_nan>

00003c9e <__divsf3x>:
    3c9e:	bf d0       	rcall	.+382    	; 0x3e1e <__fp_split3>
    3ca0:	98 f3       	brcs	.-26     	; 0x3c88 <__divsf3+0x4>

00003ca2 <__divsf3_pse>:
    3ca2:	99 23       	and	r25, r25
    3ca4:	c9 f3       	breq	.-14     	; 0x3c98 <__divsf3+0x14>
    3ca6:	55 23       	and	r21, r21
    3ca8:	b1 f3       	breq	.-20     	; 0x3c96 <__divsf3+0x12>
    3caa:	95 1b       	sub	r25, r21
    3cac:	55 0b       	sbc	r21, r21
    3cae:	bb 27       	eor	r27, r27
    3cb0:	aa 27       	eor	r26, r26
    3cb2:	62 17       	cp	r22, r18
    3cb4:	73 07       	cpc	r23, r19
    3cb6:	84 07       	cpc	r24, r20
    3cb8:	38 f0       	brcs	.+14     	; 0x3cc8 <__divsf3_pse+0x26>
    3cba:	9f 5f       	subi	r25, 0xFF	; 255
    3cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbe:	22 0f       	add	r18, r18
    3cc0:	33 1f       	adc	r19, r19
    3cc2:	44 1f       	adc	r20, r20
    3cc4:	aa 1f       	adc	r26, r26
    3cc6:	a9 f3       	breq	.-22     	; 0x3cb2 <__divsf3_pse+0x10>
    3cc8:	33 d0       	rcall	.+102    	; 0x3d30 <__divsf3_pse+0x8e>
    3cca:	0e 2e       	mov	r0, r30
    3ccc:	3a f0       	brmi	.+14     	; 0x3cdc <__divsf3_pse+0x3a>
    3cce:	e0 e8       	ldi	r30, 0x80	; 128
    3cd0:	30 d0       	rcall	.+96     	; 0x3d32 <__divsf3_pse+0x90>
    3cd2:	91 50       	subi	r25, 0x01	; 1
    3cd4:	50 40       	sbci	r21, 0x00	; 0
    3cd6:	e6 95       	lsr	r30
    3cd8:	00 1c       	adc	r0, r0
    3cda:	ca f7       	brpl	.-14     	; 0x3cce <__divsf3_pse+0x2c>
    3cdc:	29 d0       	rcall	.+82     	; 0x3d30 <__divsf3_pse+0x8e>
    3cde:	fe 2f       	mov	r31, r30
    3ce0:	27 d0       	rcall	.+78     	; 0x3d30 <__divsf3_pse+0x8e>
    3ce2:	66 0f       	add	r22, r22
    3ce4:	77 1f       	adc	r23, r23
    3ce6:	88 1f       	adc	r24, r24
    3ce8:	bb 1f       	adc	r27, r27
    3cea:	26 17       	cp	r18, r22
    3cec:	37 07       	cpc	r19, r23
    3cee:	48 07       	cpc	r20, r24
    3cf0:	ab 07       	cpc	r26, r27
    3cf2:	b0 e8       	ldi	r27, 0x80	; 128
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <__divsf3_pse+0x56>
    3cf6:	bb 0b       	sbc	r27, r27
    3cf8:	80 2d       	mov	r24, r0
    3cfa:	bf 01       	movw	r22, r30
    3cfc:	ff 27       	eor	r31, r31
    3cfe:	93 58       	subi	r25, 0x83	; 131
    3d00:	5f 4f       	sbci	r21, 0xFF	; 255
    3d02:	2a f0       	brmi	.+10     	; 0x3d0e <__divsf3_pse+0x6c>
    3d04:	9e 3f       	cpi	r25, 0xFE	; 254
    3d06:	51 05       	cpc	r21, r1
    3d08:	68 f0       	brcs	.+26     	; 0x3d24 <__divsf3_pse+0x82>
    3d0a:	61 c0       	rjmp	.+194    	; 0x3dce <__fp_inf>
    3d0c:	ab c0       	rjmp	.+342    	; 0x3e64 <__fp_szero>
    3d0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3d10:	ec f3       	brlt	.-6      	; 0x3d0c <__divsf3_pse+0x6a>
    3d12:	98 3e       	cpi	r25, 0xE8	; 232
    3d14:	dc f3       	brlt	.-10     	; 0x3d0c <__divsf3_pse+0x6a>
    3d16:	86 95       	lsr	r24
    3d18:	77 95       	ror	r23
    3d1a:	67 95       	ror	r22
    3d1c:	b7 95       	ror	r27
    3d1e:	f7 95       	ror	r31
    3d20:	9f 5f       	subi	r25, 0xFF	; 255
    3d22:	c9 f7       	brne	.-14     	; 0x3d16 <__divsf3_pse+0x74>
    3d24:	88 0f       	add	r24, r24
    3d26:	91 1d       	adc	r25, r1
    3d28:	96 95       	lsr	r25
    3d2a:	87 95       	ror	r24
    3d2c:	97 f9       	bld	r25, 7
    3d2e:	08 95       	ret
    3d30:	e1 e0       	ldi	r30, 0x01	; 1
    3d32:	66 0f       	add	r22, r22
    3d34:	77 1f       	adc	r23, r23
    3d36:	88 1f       	adc	r24, r24
    3d38:	bb 1f       	adc	r27, r27
    3d3a:	62 17       	cp	r22, r18
    3d3c:	73 07       	cpc	r23, r19
    3d3e:	84 07       	cpc	r24, r20
    3d40:	ba 07       	cpc	r27, r26
    3d42:	20 f0       	brcs	.+8      	; 0x3d4c <__divsf3_pse+0xaa>
    3d44:	62 1b       	sub	r22, r18
    3d46:	73 0b       	sbc	r23, r19
    3d48:	84 0b       	sbc	r24, r20
    3d4a:	ba 0b       	sbc	r27, r26
    3d4c:	ee 1f       	adc	r30, r30
    3d4e:	88 f7       	brcc	.-30     	; 0x3d32 <__divsf3_pse+0x90>
    3d50:	e0 95       	com	r30
    3d52:	08 95       	ret

00003d54 <__floatunsisf>:
    3d54:	e8 94       	clt
    3d56:	09 c0       	rjmp	.+18     	; 0x3d6a <__floatsisf+0x12>

00003d58 <__floatsisf>:
    3d58:	97 fb       	bst	r25, 7
    3d5a:	3e f4       	brtc	.+14     	; 0x3d6a <__floatsisf+0x12>
    3d5c:	90 95       	com	r25
    3d5e:	80 95       	com	r24
    3d60:	70 95       	com	r23
    3d62:	61 95       	neg	r22
    3d64:	7f 4f       	sbci	r23, 0xFF	; 255
    3d66:	8f 4f       	sbci	r24, 0xFF	; 255
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	99 23       	and	r25, r25
    3d6c:	a9 f0       	breq	.+42     	; 0x3d98 <__floatsisf+0x40>
    3d6e:	f9 2f       	mov	r31, r25
    3d70:	96 e9       	ldi	r25, 0x96	; 150
    3d72:	bb 27       	eor	r27, r27
    3d74:	93 95       	inc	r25
    3d76:	f6 95       	lsr	r31
    3d78:	87 95       	ror	r24
    3d7a:	77 95       	ror	r23
    3d7c:	67 95       	ror	r22
    3d7e:	b7 95       	ror	r27
    3d80:	f1 11       	cpse	r31, r1
    3d82:	f8 cf       	rjmp	.-16     	; 0x3d74 <__floatsisf+0x1c>
    3d84:	fa f4       	brpl	.+62     	; 0x3dc4 <__floatsisf+0x6c>
    3d86:	bb 0f       	add	r27, r27
    3d88:	11 f4       	brne	.+4      	; 0x3d8e <__floatsisf+0x36>
    3d8a:	60 ff       	sbrs	r22, 0
    3d8c:	1b c0       	rjmp	.+54     	; 0x3dc4 <__floatsisf+0x6c>
    3d8e:	6f 5f       	subi	r22, 0xFF	; 255
    3d90:	7f 4f       	sbci	r23, 0xFF	; 255
    3d92:	8f 4f       	sbci	r24, 0xFF	; 255
    3d94:	9f 4f       	sbci	r25, 0xFF	; 255
    3d96:	16 c0       	rjmp	.+44     	; 0x3dc4 <__floatsisf+0x6c>
    3d98:	88 23       	and	r24, r24
    3d9a:	11 f0       	breq	.+4      	; 0x3da0 <__floatsisf+0x48>
    3d9c:	96 e9       	ldi	r25, 0x96	; 150
    3d9e:	11 c0       	rjmp	.+34     	; 0x3dc2 <__floatsisf+0x6a>
    3da0:	77 23       	and	r23, r23
    3da2:	21 f0       	breq	.+8      	; 0x3dac <__floatsisf+0x54>
    3da4:	9e e8       	ldi	r25, 0x8E	; 142
    3da6:	87 2f       	mov	r24, r23
    3da8:	76 2f       	mov	r23, r22
    3daa:	05 c0       	rjmp	.+10     	; 0x3db6 <__floatsisf+0x5e>
    3dac:	66 23       	and	r22, r22
    3dae:	71 f0       	breq	.+28     	; 0x3dcc <__floatsisf+0x74>
    3db0:	96 e8       	ldi	r25, 0x86	; 134
    3db2:	86 2f       	mov	r24, r22
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	2a f0       	brmi	.+10     	; 0x3dc4 <__floatsisf+0x6c>
    3dba:	9a 95       	dec	r25
    3dbc:	66 0f       	add	r22, r22
    3dbe:	77 1f       	adc	r23, r23
    3dc0:	88 1f       	adc	r24, r24
    3dc2:	da f7       	brpl	.-10     	; 0x3dba <__floatsisf+0x62>
    3dc4:	88 0f       	add	r24, r24
    3dc6:	96 95       	lsr	r25
    3dc8:	87 95       	ror	r24
    3dca:	97 f9       	bld	r25, 7
    3dcc:	08 95       	ret

00003dce <__fp_inf>:
    3dce:	97 f9       	bld	r25, 7
    3dd0:	9f 67       	ori	r25, 0x7F	; 127
    3dd2:	80 e8       	ldi	r24, 0x80	; 128
    3dd4:	70 e0       	ldi	r23, 0x00	; 0
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	08 95       	ret

00003dda <__fp_nan>:
    3dda:	9f ef       	ldi	r25, 0xFF	; 255
    3ddc:	80 ec       	ldi	r24, 0xC0	; 192
    3dde:	08 95       	ret

00003de0 <__fp_pscA>:
    3de0:	00 24       	eor	r0, r0
    3de2:	0a 94       	dec	r0
    3de4:	16 16       	cp	r1, r22
    3de6:	17 06       	cpc	r1, r23
    3de8:	18 06       	cpc	r1, r24
    3dea:	09 06       	cpc	r0, r25
    3dec:	08 95       	ret

00003dee <__fp_pscB>:
    3dee:	00 24       	eor	r0, r0
    3df0:	0a 94       	dec	r0
    3df2:	12 16       	cp	r1, r18
    3df4:	13 06       	cpc	r1, r19
    3df6:	14 06       	cpc	r1, r20
    3df8:	05 06       	cpc	r0, r21
    3dfa:	08 95       	ret

00003dfc <__fp_round>:
    3dfc:	09 2e       	mov	r0, r25
    3dfe:	03 94       	inc	r0
    3e00:	00 0c       	add	r0, r0
    3e02:	11 f4       	brne	.+4      	; 0x3e08 <__fp_round+0xc>
    3e04:	88 23       	and	r24, r24
    3e06:	52 f0       	brmi	.+20     	; 0x3e1c <__fp_round+0x20>
    3e08:	bb 0f       	add	r27, r27
    3e0a:	40 f4       	brcc	.+16     	; 0x3e1c <__fp_round+0x20>
    3e0c:	bf 2b       	or	r27, r31
    3e0e:	11 f4       	brne	.+4      	; 0x3e14 <__fp_round+0x18>
    3e10:	60 ff       	sbrs	r22, 0
    3e12:	04 c0       	rjmp	.+8      	; 0x3e1c <__fp_round+0x20>
    3e14:	6f 5f       	subi	r22, 0xFF	; 255
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	8f 4f       	sbci	r24, 0xFF	; 255
    3e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1c:	08 95       	ret

00003e1e <__fp_split3>:
    3e1e:	57 fd       	sbrc	r21, 7
    3e20:	90 58       	subi	r25, 0x80	; 128
    3e22:	44 0f       	add	r20, r20
    3e24:	55 1f       	adc	r21, r21
    3e26:	59 f0       	breq	.+22     	; 0x3e3e <__fp_splitA+0x10>
    3e28:	5f 3f       	cpi	r21, 0xFF	; 255
    3e2a:	71 f0       	breq	.+28     	; 0x3e48 <__fp_splitA+0x1a>
    3e2c:	47 95       	ror	r20

00003e2e <__fp_splitA>:
    3e2e:	88 0f       	add	r24, r24
    3e30:	97 fb       	bst	r25, 7
    3e32:	99 1f       	adc	r25, r25
    3e34:	61 f0       	breq	.+24     	; 0x3e4e <__fp_splitA+0x20>
    3e36:	9f 3f       	cpi	r25, 0xFF	; 255
    3e38:	79 f0       	breq	.+30     	; 0x3e58 <__fp_splitA+0x2a>
    3e3a:	87 95       	ror	r24
    3e3c:	08 95       	ret
    3e3e:	12 16       	cp	r1, r18
    3e40:	13 06       	cpc	r1, r19
    3e42:	14 06       	cpc	r1, r20
    3e44:	55 1f       	adc	r21, r21
    3e46:	f2 cf       	rjmp	.-28     	; 0x3e2c <__fp_split3+0xe>
    3e48:	46 95       	lsr	r20
    3e4a:	f1 df       	rcall	.-30     	; 0x3e2e <__fp_splitA>
    3e4c:	08 c0       	rjmp	.+16     	; 0x3e5e <__fp_splitA+0x30>
    3e4e:	16 16       	cp	r1, r22
    3e50:	17 06       	cpc	r1, r23
    3e52:	18 06       	cpc	r1, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	f1 cf       	rjmp	.-30     	; 0x3e3a <__fp_splitA+0xc>
    3e58:	86 95       	lsr	r24
    3e5a:	71 05       	cpc	r23, r1
    3e5c:	61 05       	cpc	r22, r1
    3e5e:	08 94       	sec
    3e60:	08 95       	ret

00003e62 <__fp_zero>:
    3e62:	e8 94       	clt

00003e64 <__fp_szero>:
    3e64:	bb 27       	eor	r27, r27
    3e66:	66 27       	eor	r22, r22
    3e68:	77 27       	eor	r23, r23
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	97 f9       	bld	r25, 7
    3e6e:	08 95       	ret

00003e70 <__mulsf3>:
    3e70:	0b d0       	rcall	.+22     	; 0x3e88 <__mulsf3x>
    3e72:	c4 cf       	rjmp	.-120    	; 0x3dfc <__fp_round>
    3e74:	b5 df       	rcall	.-150    	; 0x3de0 <__fp_pscA>
    3e76:	28 f0       	brcs	.+10     	; 0x3e82 <__mulsf3+0x12>
    3e78:	ba df       	rcall	.-140    	; 0x3dee <__fp_pscB>
    3e7a:	18 f0       	brcs	.+6      	; 0x3e82 <__mulsf3+0x12>
    3e7c:	95 23       	and	r25, r21
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <__mulsf3+0x12>
    3e80:	a6 cf       	rjmp	.-180    	; 0x3dce <__fp_inf>
    3e82:	ab cf       	rjmp	.-170    	; 0x3dda <__fp_nan>
    3e84:	11 24       	eor	r1, r1
    3e86:	ee cf       	rjmp	.-36     	; 0x3e64 <__fp_szero>

00003e88 <__mulsf3x>:
    3e88:	ca df       	rcall	.-108    	; 0x3e1e <__fp_split3>
    3e8a:	a0 f3       	brcs	.-24     	; 0x3e74 <__mulsf3+0x4>

00003e8c <__mulsf3_pse>:
    3e8c:	95 9f       	mul	r25, r21
    3e8e:	d1 f3       	breq	.-12     	; 0x3e84 <__mulsf3+0x14>
    3e90:	95 0f       	add	r25, r21
    3e92:	50 e0       	ldi	r21, 0x00	; 0
    3e94:	55 1f       	adc	r21, r21
    3e96:	62 9f       	mul	r22, r18
    3e98:	f0 01       	movw	r30, r0
    3e9a:	72 9f       	mul	r23, r18
    3e9c:	bb 27       	eor	r27, r27
    3e9e:	f0 0d       	add	r31, r0
    3ea0:	b1 1d       	adc	r27, r1
    3ea2:	63 9f       	mul	r22, r19
    3ea4:	aa 27       	eor	r26, r26
    3ea6:	f0 0d       	add	r31, r0
    3ea8:	b1 1d       	adc	r27, r1
    3eaa:	aa 1f       	adc	r26, r26
    3eac:	64 9f       	mul	r22, r20
    3eae:	66 27       	eor	r22, r22
    3eb0:	b0 0d       	add	r27, r0
    3eb2:	a1 1d       	adc	r26, r1
    3eb4:	66 1f       	adc	r22, r22
    3eb6:	82 9f       	mul	r24, r18
    3eb8:	22 27       	eor	r18, r18
    3eba:	b0 0d       	add	r27, r0
    3ebc:	a1 1d       	adc	r26, r1
    3ebe:	62 1f       	adc	r22, r18
    3ec0:	73 9f       	mul	r23, r19
    3ec2:	b0 0d       	add	r27, r0
    3ec4:	a1 1d       	adc	r26, r1
    3ec6:	62 1f       	adc	r22, r18
    3ec8:	83 9f       	mul	r24, r19
    3eca:	a0 0d       	add	r26, r0
    3ecc:	61 1d       	adc	r22, r1
    3ece:	22 1f       	adc	r18, r18
    3ed0:	74 9f       	mul	r23, r20
    3ed2:	33 27       	eor	r19, r19
    3ed4:	a0 0d       	add	r26, r0
    3ed6:	61 1d       	adc	r22, r1
    3ed8:	23 1f       	adc	r18, r19
    3eda:	84 9f       	mul	r24, r20
    3edc:	60 0d       	add	r22, r0
    3ede:	21 1d       	adc	r18, r1
    3ee0:	82 2f       	mov	r24, r18
    3ee2:	76 2f       	mov	r23, r22
    3ee4:	6a 2f       	mov	r22, r26
    3ee6:	11 24       	eor	r1, r1
    3ee8:	9f 57       	subi	r25, 0x7F	; 127
    3eea:	50 40       	sbci	r21, 0x00	; 0
    3eec:	8a f0       	brmi	.+34     	; 0x3f10 <__mulsf3_pse+0x84>
    3eee:	e1 f0       	breq	.+56     	; 0x3f28 <__mulsf3_pse+0x9c>
    3ef0:	88 23       	and	r24, r24
    3ef2:	4a f0       	brmi	.+18     	; 0x3f06 <__mulsf3_pse+0x7a>
    3ef4:	ee 0f       	add	r30, r30
    3ef6:	ff 1f       	adc	r31, r31
    3ef8:	bb 1f       	adc	r27, r27
    3efa:	66 1f       	adc	r22, r22
    3efc:	77 1f       	adc	r23, r23
    3efe:	88 1f       	adc	r24, r24
    3f00:	91 50       	subi	r25, 0x01	; 1
    3f02:	50 40       	sbci	r21, 0x00	; 0
    3f04:	a9 f7       	brne	.-22     	; 0x3ef0 <__mulsf3_pse+0x64>
    3f06:	9e 3f       	cpi	r25, 0xFE	; 254
    3f08:	51 05       	cpc	r21, r1
    3f0a:	70 f0       	brcs	.+28     	; 0x3f28 <__mulsf3_pse+0x9c>
    3f0c:	60 cf       	rjmp	.-320    	; 0x3dce <__fp_inf>
    3f0e:	aa cf       	rjmp	.-172    	; 0x3e64 <__fp_szero>
    3f10:	5f 3f       	cpi	r21, 0xFF	; 255
    3f12:	ec f3       	brlt	.-6      	; 0x3f0e <__mulsf3_pse+0x82>
    3f14:	98 3e       	cpi	r25, 0xE8	; 232
    3f16:	dc f3       	brlt	.-10     	; 0x3f0e <__mulsf3_pse+0x82>
    3f18:	86 95       	lsr	r24
    3f1a:	77 95       	ror	r23
    3f1c:	67 95       	ror	r22
    3f1e:	b7 95       	ror	r27
    3f20:	f7 95       	ror	r31
    3f22:	e7 95       	ror	r30
    3f24:	9f 5f       	subi	r25, 0xFF	; 255
    3f26:	c1 f7       	brne	.-16     	; 0x3f18 <__mulsf3_pse+0x8c>
    3f28:	fe 2b       	or	r31, r30
    3f2a:	88 0f       	add	r24, r24
    3f2c:	91 1d       	adc	r25, r1
    3f2e:	96 95       	lsr	r25
    3f30:	87 95       	ror	r24
    3f32:	97 f9       	bld	r25, 7
    3f34:	08 95       	ret

00003f36 <vfprintf>:
    3f36:	2f 92       	push	r2
    3f38:	3f 92       	push	r3
    3f3a:	4f 92       	push	r4
    3f3c:	5f 92       	push	r5
    3f3e:	6f 92       	push	r6
    3f40:	7f 92       	push	r7
    3f42:	8f 92       	push	r8
    3f44:	9f 92       	push	r9
    3f46:	af 92       	push	r10
    3f48:	bf 92       	push	r11
    3f4a:	cf 92       	push	r12
    3f4c:	df 92       	push	r13
    3f4e:	ef 92       	push	r14
    3f50:	ff 92       	push	r15
    3f52:	0f 93       	push	r16
    3f54:	1f 93       	push	r17
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	63 97       	sbiw	r28, 0x13	; 19
    3f60:	cd bf       	out	0x3d, r28	; 61
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	6c 01       	movw	r12, r24
    3f66:	4b 01       	movw	r8, r22
    3f68:	2a 01       	movw	r4, r20
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	16 82       	std	Z+6, r1	; 0x06
    3f6e:	17 82       	std	Z+7, r1	; 0x07
    3f70:	83 81       	ldd	r24, Z+3	; 0x03
    3f72:	81 ff       	sbrs	r24, 1
    3f74:	29 c3       	rjmp	.+1618   	; 0x45c8 <__stack+0x5c9>
    3f76:	ae 01       	movw	r20, r28
    3f78:	4f 5f       	subi	r20, 0xFF	; 255
    3f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7c:	3a 01       	movw	r6, r20
    3f7e:	f6 01       	movw	r30, r12
    3f80:	93 81       	ldd	r25, Z+3	; 0x03
    3f82:	f4 01       	movw	r30, r8
    3f84:	93 fd       	sbrc	r25, 3
    3f86:	85 91       	lpm	r24, Z+
    3f88:	93 ff       	sbrs	r25, 3
    3f8a:	81 91       	ld	r24, Z+
    3f8c:	4f 01       	movw	r8, r30
    3f8e:	88 23       	and	r24, r24
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <vfprintf+0x5e>
    3f92:	16 c3       	rjmp	.+1580   	; 0x45c0 <__stack+0x5c1>
    3f94:	85 32       	cpi	r24, 0x25	; 37
    3f96:	39 f4       	brne	.+14     	; 0x3fa6 <vfprintf+0x70>
    3f98:	93 fd       	sbrc	r25, 3
    3f9a:	85 91       	lpm	r24, Z+
    3f9c:	93 ff       	sbrs	r25, 3
    3f9e:	81 91       	ld	r24, Z+
    3fa0:	4f 01       	movw	r8, r30
    3fa2:	85 32       	cpi	r24, 0x25	; 37
    3fa4:	31 f4       	brne	.+12     	; 0x3fb2 <vfprintf+0x7c>
    3fa6:	b6 01       	movw	r22, r12
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	6e d4       	rcall	.+2268   	; 0x4888 <fputc>
    3fac:	52 01       	movw	r10, r4
    3fae:	25 01       	movw	r4, r10
    3fb0:	e6 cf       	rjmp	.-52     	; 0x3f7e <vfprintf+0x48>
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	f1 2c       	mov	r15, r1
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	20 32       	cpi	r18, 0x20	; 32
    3fba:	a0 f4       	brcc	.+40     	; 0x3fe4 <vfprintf+0xae>
    3fbc:	8b 32       	cpi	r24, 0x2B	; 43
    3fbe:	69 f0       	breq	.+26     	; 0x3fda <vfprintf+0xa4>
    3fc0:	30 f4       	brcc	.+12     	; 0x3fce <vfprintf+0x98>
    3fc2:	80 32       	cpi	r24, 0x20	; 32
    3fc4:	59 f0       	breq	.+22     	; 0x3fdc <vfprintf+0xa6>
    3fc6:	83 32       	cpi	r24, 0x23	; 35
    3fc8:	69 f4       	brne	.+26     	; 0x3fe4 <vfprintf+0xae>
    3fca:	20 61       	ori	r18, 0x10	; 16
    3fcc:	2c c0       	rjmp	.+88     	; 0x4026 <__stack+0x27>
    3fce:	8d 32       	cpi	r24, 0x2D	; 45
    3fd0:	39 f0       	breq	.+14     	; 0x3fe0 <vfprintf+0xaa>
    3fd2:	80 33       	cpi	r24, 0x30	; 48
    3fd4:	39 f4       	brne	.+14     	; 0x3fe4 <vfprintf+0xae>
    3fd6:	21 60       	ori	r18, 0x01	; 1
    3fd8:	26 c0       	rjmp	.+76     	; 0x4026 <__stack+0x27>
    3fda:	22 60       	ori	r18, 0x02	; 2
    3fdc:	24 60       	ori	r18, 0x04	; 4
    3fde:	23 c0       	rjmp	.+70     	; 0x4026 <__stack+0x27>
    3fe0:	28 60       	ori	r18, 0x08	; 8
    3fe2:	21 c0       	rjmp	.+66     	; 0x4026 <__stack+0x27>
    3fe4:	27 fd       	sbrc	r18, 7
    3fe6:	27 c0       	rjmp	.+78     	; 0x4036 <__stack+0x37>
    3fe8:	30 ed       	ldi	r19, 0xD0	; 208
    3fea:	38 0f       	add	r19, r24
    3fec:	3a 30       	cpi	r19, 0x0A	; 10
    3fee:	78 f4       	brcc	.+30     	; 0x400e <__stack+0xf>
    3ff0:	26 ff       	sbrs	r18, 6
    3ff2:	06 c0       	rjmp	.+12     	; 0x4000 <__stack+0x1>
    3ff4:	fa e0       	ldi	r31, 0x0A	; 10
    3ff6:	1f 9f       	mul	r17, r31
    3ff8:	30 0d       	add	r19, r0
    3ffa:	11 24       	eor	r1, r1
    3ffc:	13 2f       	mov	r17, r19
    3ffe:	13 c0       	rjmp	.+38     	; 0x4026 <__stack+0x27>
    4000:	4a e0       	ldi	r20, 0x0A	; 10
    4002:	f4 9e       	mul	r15, r20
    4004:	30 0d       	add	r19, r0
    4006:	11 24       	eor	r1, r1
    4008:	f3 2e       	mov	r15, r19
    400a:	20 62       	ori	r18, 0x20	; 32
    400c:	0c c0       	rjmp	.+24     	; 0x4026 <__stack+0x27>
    400e:	8e 32       	cpi	r24, 0x2E	; 46
    4010:	21 f4       	brne	.+8      	; 0x401a <__stack+0x1b>
    4012:	26 fd       	sbrc	r18, 6
    4014:	d5 c2       	rjmp	.+1450   	; 0x45c0 <__stack+0x5c1>
    4016:	20 64       	ori	r18, 0x40	; 64
    4018:	06 c0       	rjmp	.+12     	; 0x4026 <__stack+0x27>
    401a:	8c 36       	cpi	r24, 0x6C	; 108
    401c:	11 f4       	brne	.+4      	; 0x4022 <__stack+0x23>
    401e:	20 68       	ori	r18, 0x80	; 128
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <__stack+0x27>
    4022:	88 36       	cpi	r24, 0x68	; 104
    4024:	41 f4       	brne	.+16     	; 0x4036 <__stack+0x37>
    4026:	f4 01       	movw	r30, r8
    4028:	93 fd       	sbrc	r25, 3
    402a:	85 91       	lpm	r24, Z+
    402c:	93 ff       	sbrs	r25, 3
    402e:	81 91       	ld	r24, Z+
    4030:	4f 01       	movw	r8, r30
    4032:	81 11       	cpse	r24, r1
    4034:	c1 cf       	rjmp	.-126    	; 0x3fb8 <vfprintf+0x82>
    4036:	9b eb       	ldi	r25, 0xBB	; 187
    4038:	98 0f       	add	r25, r24
    403a:	93 30       	cpi	r25, 0x03	; 3
    403c:	18 f4       	brcc	.+6      	; 0x4044 <__stack+0x45>
    403e:	20 61       	ori	r18, 0x10	; 16
    4040:	80 5e       	subi	r24, 0xE0	; 224
    4042:	06 c0       	rjmp	.+12     	; 0x4050 <__stack+0x51>
    4044:	9b e9       	ldi	r25, 0x9B	; 155
    4046:	98 0f       	add	r25, r24
    4048:	93 30       	cpi	r25, 0x03	; 3
    404a:	08 f0       	brcs	.+2      	; 0x404e <__stack+0x4f>
    404c:	64 c1       	rjmp	.+712    	; 0x4316 <__stack+0x317>
    404e:	2f 7e       	andi	r18, 0xEF	; 239
    4050:	26 ff       	sbrs	r18, 6
    4052:	16 e0       	ldi	r17, 0x06	; 6
    4054:	2f 73       	andi	r18, 0x3F	; 63
    4056:	32 2e       	mov	r3, r18
    4058:	85 36       	cpi	r24, 0x65	; 101
    405a:	19 f4       	brne	.+6      	; 0x4062 <__stack+0x63>
    405c:	20 64       	ori	r18, 0x40	; 64
    405e:	32 2e       	mov	r3, r18
    4060:	08 c0       	rjmp	.+16     	; 0x4072 <__stack+0x73>
    4062:	86 36       	cpi	r24, 0x66	; 102
    4064:	21 f4       	brne	.+8      	; 0x406e <__stack+0x6f>
    4066:	f2 2f       	mov	r31, r18
    4068:	f0 68       	ori	r31, 0x80	; 128
    406a:	3f 2e       	mov	r3, r31
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <__stack+0x73>
    406e:	11 11       	cpse	r17, r1
    4070:	11 50       	subi	r17, 0x01	; 1
    4072:	37 fe       	sbrs	r3, 7
    4074:	07 c0       	rjmp	.+14     	; 0x4084 <__stack+0x85>
    4076:	1c 33       	cpi	r17, 0x3C	; 60
    4078:	50 f4       	brcc	.+20     	; 0x408e <__stack+0x8f>
    407a:	ee 24       	eor	r14, r14
    407c:	e3 94       	inc	r14
    407e:	e1 0e       	add	r14, r17
    4080:	27 e0       	ldi	r18, 0x07	; 7
    4082:	0b c0       	rjmp	.+22     	; 0x409a <__stack+0x9b>
    4084:	18 30       	cpi	r17, 0x08	; 8
    4086:	38 f0       	brcs	.+14     	; 0x4096 <__stack+0x97>
    4088:	27 e0       	ldi	r18, 0x07	; 7
    408a:	17 e0       	ldi	r17, 0x07	; 7
    408c:	05 c0       	rjmp	.+10     	; 0x4098 <__stack+0x99>
    408e:	27 e0       	ldi	r18, 0x07	; 7
    4090:	4c e3       	ldi	r20, 0x3C	; 60
    4092:	e4 2e       	mov	r14, r20
    4094:	02 c0       	rjmp	.+4      	; 0x409a <__stack+0x9b>
    4096:	21 2f       	mov	r18, r17
    4098:	e1 2c       	mov	r14, r1
    409a:	52 01       	movw	r10, r4
    409c:	44 e0       	ldi	r20, 0x04	; 4
    409e:	a4 0e       	add	r10, r20
    40a0:	b1 1c       	adc	r11, r1
    40a2:	f2 01       	movw	r30, r4
    40a4:	60 81       	ld	r22, Z
    40a6:	71 81       	ldd	r23, Z+1	; 0x01
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
    40aa:	93 81       	ldd	r25, Z+3	; 0x03
    40ac:	0e 2d       	mov	r16, r14
    40ae:	a3 01       	movw	r20, r6
    40b0:	e6 d2       	rcall	.+1484   	; 0x467e <__ftoa_engine>
    40b2:	2c 01       	movw	r4, r24
    40b4:	09 81       	ldd	r16, Y+1	; 0x01
    40b6:	00 ff       	sbrs	r16, 0
    40b8:	02 c0       	rjmp	.+4      	; 0x40be <__stack+0xbf>
    40ba:	03 ff       	sbrs	r16, 3
    40bc:	07 c0       	rjmp	.+14     	; 0x40cc <__stack+0xcd>
    40be:	31 fc       	sbrc	r3, 1
    40c0:	08 c0       	rjmp	.+16     	; 0x40d2 <__stack+0xd3>
    40c2:	32 fe       	sbrs	r3, 2
    40c4:	09 c0       	rjmp	.+18     	; 0x40d8 <__stack+0xd9>
    40c6:	30 e2       	ldi	r19, 0x20	; 32
    40c8:	23 2e       	mov	r2, r19
    40ca:	07 c0       	rjmp	.+14     	; 0x40da <__stack+0xdb>
    40cc:	2d e2       	ldi	r18, 0x2D	; 45
    40ce:	22 2e       	mov	r2, r18
    40d0:	04 c0       	rjmp	.+8      	; 0x40da <__stack+0xdb>
    40d2:	9b e2       	ldi	r25, 0x2B	; 43
    40d4:	29 2e       	mov	r2, r25
    40d6:	01 c0       	rjmp	.+2      	; 0x40da <__stack+0xdb>
    40d8:	21 2c       	mov	r2, r1
    40da:	80 2f       	mov	r24, r16
    40dc:	8c 70       	andi	r24, 0x0C	; 12
    40de:	19 f0       	breq	.+6      	; 0x40e6 <__stack+0xe7>
    40e0:	21 10       	cpse	r2, r1
    40e2:	51 c2       	rjmp	.+1186   	; 0x4586 <__stack+0x587>
    40e4:	8d c2       	rjmp	.+1306   	; 0x4600 <__stack+0x601>
    40e6:	37 fe       	sbrs	r3, 7
    40e8:	0f c0       	rjmp	.+30     	; 0x4108 <__stack+0x109>
    40ea:	e4 0c       	add	r14, r4
    40ec:	04 ff       	sbrs	r16, 4
    40ee:	04 c0       	rjmp	.+8      	; 0x40f8 <__stack+0xf9>
    40f0:	8a 81       	ldd	r24, Y+2	; 0x02
    40f2:	81 33       	cpi	r24, 0x31	; 49
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <__stack+0xf9>
    40f6:	ea 94       	dec	r14
    40f8:	1e 14       	cp	r1, r14
    40fa:	74 f5       	brge	.+92     	; 0x4158 <__stack+0x159>
    40fc:	f8 e0       	ldi	r31, 0x08	; 8
    40fe:	fe 15       	cp	r31, r14
    4100:	78 f5       	brcc	.+94     	; 0x4160 <__stack+0x161>
    4102:	88 e0       	ldi	r24, 0x08	; 8
    4104:	e8 2e       	mov	r14, r24
    4106:	2c c0       	rjmp	.+88     	; 0x4160 <__stack+0x161>
    4108:	36 fc       	sbrc	r3, 6
    410a:	2a c0       	rjmp	.+84     	; 0x4160 <__stack+0x161>
    410c:	81 2f       	mov	r24, r17
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	84 15       	cp	r24, r4
    4112:	95 05       	cpc	r25, r5
    4114:	9c f0       	brlt	.+38     	; 0x413c <__stack+0x13d>
    4116:	2c ef       	ldi	r18, 0xFC	; 252
    4118:	42 16       	cp	r4, r18
    411a:	2f ef       	ldi	r18, 0xFF	; 255
    411c:	52 06       	cpc	r5, r18
    411e:	74 f0       	brlt	.+28     	; 0x413c <__stack+0x13d>
    4120:	43 2d       	mov	r20, r3
    4122:	40 68       	ori	r20, 0x80	; 128
    4124:	34 2e       	mov	r3, r20
    4126:	0a c0       	rjmp	.+20     	; 0x413c <__stack+0x13d>
    4128:	e2 e0       	ldi	r30, 0x02	; 2
    412a:	f0 e0       	ldi	r31, 0x00	; 0
    412c:	ec 0f       	add	r30, r28
    412e:	fd 1f       	adc	r31, r29
    4130:	e1 0f       	add	r30, r17
    4132:	f1 1d       	adc	r31, r1
    4134:	80 81       	ld	r24, Z
    4136:	80 33       	cpi	r24, 0x30	; 48
    4138:	19 f4       	brne	.+6      	; 0x4140 <__stack+0x141>
    413a:	11 50       	subi	r17, 0x01	; 1
    413c:	11 11       	cpse	r17, r1
    413e:	f4 cf       	rjmp	.-24     	; 0x4128 <__stack+0x129>
    4140:	37 fe       	sbrs	r3, 7
    4142:	0e c0       	rjmp	.+28     	; 0x4160 <__stack+0x161>
    4144:	ee 24       	eor	r14, r14
    4146:	e3 94       	inc	r14
    4148:	e1 0e       	add	r14, r17
    414a:	81 2f       	mov	r24, r17
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	48 16       	cp	r4, r24
    4150:	59 06       	cpc	r5, r25
    4152:	2c f4       	brge	.+10     	; 0x415e <__stack+0x15f>
    4154:	14 19       	sub	r17, r4
    4156:	04 c0       	rjmp	.+8      	; 0x4160 <__stack+0x161>
    4158:	ee 24       	eor	r14, r14
    415a:	e3 94       	inc	r14
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <__stack+0x161>
    415e:	10 e0       	ldi	r17, 0x00	; 0
    4160:	37 fe       	sbrs	r3, 7
    4162:	06 c0       	rjmp	.+12     	; 0x4170 <__stack+0x171>
    4164:	14 14       	cp	r1, r4
    4166:	15 04       	cpc	r1, r5
    4168:	34 f4       	brge	.+12     	; 0x4176 <__stack+0x177>
    416a:	c2 01       	movw	r24, r4
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	05 c0       	rjmp	.+10     	; 0x417a <__stack+0x17b>
    4170:	85 e0       	ldi	r24, 0x05	; 5
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	02 c0       	rjmp	.+4      	; 0x417a <__stack+0x17b>
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	21 10       	cpse	r2, r1
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	11 23       	and	r17, r17
    4180:	31 f0       	breq	.+12     	; 0x418e <__stack+0x18f>
    4182:	21 2f       	mov	r18, r17
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	2f 5f       	subi	r18, 0xFF	; 255
    4188:	3f 4f       	sbci	r19, 0xFF	; 255
    418a:	82 0f       	add	r24, r18
    418c:	93 1f       	adc	r25, r19
    418e:	2f 2d       	mov	r18, r15
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	82 17       	cp	r24, r18
    4194:	93 07       	cpc	r25, r19
    4196:	14 f4       	brge	.+4      	; 0x419c <__stack+0x19d>
    4198:	f8 1a       	sub	r15, r24
    419a:	01 c0       	rjmp	.+2      	; 0x419e <__stack+0x19f>
    419c:	f1 2c       	mov	r15, r1
    419e:	83 2d       	mov	r24, r3
    41a0:	89 70       	andi	r24, 0x09	; 9
    41a2:	41 f4       	brne	.+16     	; 0x41b4 <__stack+0x1b5>
    41a4:	ff 20       	and	r15, r15
    41a6:	31 f0       	breq	.+12     	; 0x41b4 <__stack+0x1b5>
    41a8:	b6 01       	movw	r22, r12
    41aa:	80 e2       	ldi	r24, 0x20	; 32
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	6c d3       	rcall	.+1752   	; 0x4888 <fputc>
    41b0:	fa 94       	dec	r15
    41b2:	f8 cf       	rjmp	.-16     	; 0x41a4 <__stack+0x1a5>
    41b4:	22 20       	and	r2, r2
    41b6:	21 f0       	breq	.+8      	; 0x41c0 <__stack+0x1c1>
    41b8:	b6 01       	movw	r22, r12
    41ba:	82 2d       	mov	r24, r2
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	64 d3       	rcall	.+1736   	; 0x4888 <fputc>
    41c0:	33 fc       	sbrc	r3, 3
    41c2:	08 c0       	rjmp	.+16     	; 0x41d4 <__stack+0x1d5>
    41c4:	ff 20       	and	r15, r15
    41c6:	31 f0       	breq	.+12     	; 0x41d4 <__stack+0x1d5>
    41c8:	b6 01       	movw	r22, r12
    41ca:	80 e3       	ldi	r24, 0x30	; 48
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	5c d3       	rcall	.+1720   	; 0x4888 <fputc>
    41d0:	fa 94       	dec	r15
    41d2:	f8 cf       	rjmp	.-16     	; 0x41c4 <__stack+0x1c5>
    41d4:	37 fe       	sbrs	r3, 7
    41d6:	58 c0       	rjmp	.+176    	; 0x4288 <__stack+0x289>
    41d8:	94 2d       	mov	r25, r4
    41da:	85 2d       	mov	r24, r5
    41dc:	57 fe       	sbrs	r5, 7
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <__stack+0x1e5>
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	29 2e       	mov	r2, r25
    41e6:	38 2e       	mov	r3, r24
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	a2 01       	movw	r20, r4
    41ee:	4e 19       	sub	r20, r14
    41f0:	51 09       	sbc	r21, r1
    41f2:	4c 87       	std	Y+12, r20	; 0x0c
    41f4:	5d 87       	std	Y+13, r21	; 0x0d
    41f6:	a2 01       	movw	r20, r4
    41f8:	42 19       	sub	r20, r2
    41fa:	53 09       	sbc	r21, r3
    41fc:	4e 87       	std	Y+14, r20	; 0x0e
    41fe:	5f 87       	std	Y+15, r21	; 0x0f
    4200:	61 2f       	mov	r22, r17
    4202:	70 e0       	ldi	r23, 0x00	; 0
    4204:	44 27       	eor	r20, r20
    4206:	55 27       	eor	r21, r21
    4208:	46 1b       	sub	r20, r22
    420a:	57 0b       	sbc	r21, r23
    420c:	48 8b       	std	Y+16, r20	; 0x10
    420e:	59 8b       	std	Y+17, r21	; 0x11
    4210:	5f ef       	ldi	r21, 0xFF	; 255
    4212:	25 16       	cp	r2, r21
    4214:	35 06       	cpc	r3, r21
    4216:	41 f4       	brne	.+16     	; 0x4228 <__stack+0x229>
    4218:	b6 01       	movw	r22, r12
    421a:	8e e2       	ldi	r24, 0x2E	; 46
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	2a 8b       	std	Y+18, r18	; 0x12
    4220:	3b 8b       	std	Y+19, r19	; 0x13
    4222:	32 d3       	rcall	.+1636   	; 0x4888 <fputc>
    4224:	3b 89       	ldd	r19, Y+19	; 0x13
    4226:	2a 89       	ldd	r18, Y+18	; 0x12
    4228:	42 14       	cp	r4, r2
    422a:	53 04       	cpc	r5, r3
    422c:	6c f0       	brlt	.+26     	; 0x4248 <__stack+0x249>
    422e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4230:	5d 85       	ldd	r21, Y+13	; 0x0d
    4232:	42 15       	cp	r20, r2
    4234:	53 05       	cpc	r21, r3
    4236:	44 f4       	brge	.+16     	; 0x4248 <__stack+0x249>
    4238:	ee 85       	ldd	r30, Y+14	; 0x0e
    423a:	ff 85       	ldd	r31, Y+15	; 0x0f
    423c:	e2 0f       	add	r30, r18
    423e:	f3 1f       	adc	r31, r19
    4240:	e6 0d       	add	r30, r6
    4242:	f7 1d       	adc	r31, r7
    4244:	81 81       	ldd	r24, Z+1	; 0x01
    4246:	01 c0       	rjmp	.+2      	; 0x424a <__stack+0x24b>
    4248:	80 e3       	ldi	r24, 0x30	; 48
    424a:	51 e0       	ldi	r21, 0x01	; 1
    424c:	25 1a       	sub	r2, r21
    424e:	31 08       	sbc	r3, r1
    4250:	2f 5f       	subi	r18, 0xFF	; 255
    4252:	3f 4f       	sbci	r19, 0xFF	; 255
    4254:	48 89       	ldd	r20, Y+16	; 0x10
    4256:	59 89       	ldd	r21, Y+17	; 0x11
    4258:	24 16       	cp	r2, r20
    425a:	35 06       	cpc	r3, r21
    425c:	44 f0       	brlt	.+16     	; 0x426e <__stack+0x26f>
    425e:	b6 01       	movw	r22, r12
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	2a 8b       	std	Y+18, r18	; 0x12
    4264:	3b 8b       	std	Y+19, r19	; 0x13
    4266:	10 d3       	rcall	.+1568   	; 0x4888 <fputc>
    4268:	2a 89       	ldd	r18, Y+18	; 0x12
    426a:	3b 89       	ldd	r19, Y+19	; 0x13
    426c:	d1 cf       	rjmp	.-94     	; 0x4210 <__stack+0x211>
    426e:	24 14       	cp	r2, r4
    4270:	35 04       	cpc	r3, r5
    4272:	39 f4       	brne	.+14     	; 0x4282 <__stack+0x283>
    4274:	9a 81       	ldd	r25, Y+2	; 0x02
    4276:	96 33       	cpi	r25, 0x36	; 54
    4278:	18 f4       	brcc	.+6      	; 0x4280 <__stack+0x281>
    427a:	95 33       	cpi	r25, 0x35	; 53
    427c:	11 f4       	brne	.+4      	; 0x4282 <__stack+0x283>
    427e:	04 ff       	sbrs	r16, 4
    4280:	81 e3       	ldi	r24, 0x31	; 49
    4282:	b6 01       	movw	r22, r12
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	45 c0       	rjmp	.+138    	; 0x4312 <__stack+0x313>
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	81 33       	cpi	r24, 0x31	; 49
    428c:	09 f0       	breq	.+2      	; 0x4290 <__stack+0x291>
    428e:	0f 7e       	andi	r16, 0xEF	; 239
    4290:	b6 01       	movw	r22, r12
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	f9 d2       	rcall	.+1522   	; 0x4888 <fputc>
    4296:	11 11       	cpse	r17, r1
    4298:	05 c0       	rjmp	.+10     	; 0x42a4 <__stack+0x2a5>
    429a:	34 fc       	sbrc	r3, 4
    429c:	16 c0       	rjmp	.+44     	; 0x42ca <__stack+0x2cb>
    429e:	85 e6       	ldi	r24, 0x65	; 101
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	15 c0       	rjmp	.+42     	; 0x42ce <__stack+0x2cf>
    42a4:	b6 01       	movw	r22, r12
    42a6:	8e e2       	ldi	r24, 0x2E	; 46
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	ee d2       	rcall	.+1500   	; 0x4888 <fputc>
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	ee 24       	eor	r14, r14
    42b0:	e3 94       	inc	r14
    42b2:	e8 0e       	add	r14, r24
    42b4:	f3 01       	movw	r30, r6
    42b6:	e8 0f       	add	r30, r24
    42b8:	f1 1d       	adc	r31, r1
    42ba:	80 81       	ld	r24, Z
    42bc:	b6 01       	movw	r22, r12
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	e3 d2       	rcall	.+1478   	; 0x4888 <fputc>
    42c2:	11 50       	subi	r17, 0x01	; 1
    42c4:	8e 2d       	mov	r24, r14
    42c6:	99 f7       	brne	.-26     	; 0x42ae <__stack+0x2af>
    42c8:	e8 cf       	rjmp	.-48     	; 0x429a <__stack+0x29b>
    42ca:	85 e4       	ldi	r24, 0x45	; 69
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	b6 01       	movw	r22, r12
    42d0:	db d2       	rcall	.+1462   	; 0x4888 <fputc>
    42d2:	57 fc       	sbrc	r5, 7
    42d4:	05 c0       	rjmp	.+10     	; 0x42e0 <__stack+0x2e1>
    42d6:	41 14       	cp	r4, r1
    42d8:	51 04       	cpc	r5, r1
    42da:	39 f4       	brne	.+14     	; 0x42ea <__stack+0x2eb>
    42dc:	04 ff       	sbrs	r16, 4
    42de:	05 c0       	rjmp	.+10     	; 0x42ea <__stack+0x2eb>
    42e0:	51 94       	neg	r5
    42e2:	41 94       	neg	r4
    42e4:	51 08       	sbc	r5, r1
    42e6:	8d e2       	ldi	r24, 0x2D	; 45
    42e8:	01 c0       	rjmp	.+2      	; 0x42ec <__stack+0x2ed>
    42ea:	8b e2       	ldi	r24, 0x2B	; 43
    42ec:	b6 01       	movw	r22, r12
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	cb d2       	rcall	.+1430   	; 0x4888 <fputc>
    42f2:	80 e3       	ldi	r24, 0x30	; 48
    42f4:	9a e0       	ldi	r25, 0x0A	; 10
    42f6:	49 16       	cp	r4, r25
    42f8:	51 04       	cpc	r5, r1
    42fa:	2c f0       	brlt	.+10     	; 0x4306 <__stack+0x307>
    42fc:	8f 5f       	subi	r24, 0xFF	; 255
    42fe:	5a e0       	ldi	r21, 0x0A	; 10
    4300:	45 1a       	sub	r4, r21
    4302:	51 08       	sbc	r5, r1
    4304:	f7 cf       	rjmp	.-18     	; 0x42f4 <__stack+0x2f5>
    4306:	b6 01       	movw	r22, r12
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	be d2       	rcall	.+1404   	; 0x4888 <fputc>
    430c:	b6 01       	movw	r22, r12
    430e:	c2 01       	movw	r24, r4
    4310:	c0 96       	adiw	r24, 0x30	; 48
    4312:	ba d2       	rcall	.+1396   	; 0x4888 <fputc>
    4314:	4c c1       	rjmp	.+664    	; 0x45ae <__stack+0x5af>
    4316:	83 36       	cpi	r24, 0x63	; 99
    4318:	31 f0       	breq	.+12     	; 0x4326 <__stack+0x327>
    431a:	83 37       	cpi	r24, 0x73	; 115
    431c:	79 f0       	breq	.+30     	; 0x433c <__stack+0x33d>
    431e:	83 35       	cpi	r24, 0x53	; 83
    4320:	09 f0       	breq	.+2      	; 0x4324 <__stack+0x325>
    4322:	54 c0       	rjmp	.+168    	; 0x43cc <__stack+0x3cd>
    4324:	20 c0       	rjmp	.+64     	; 0x4366 <__stack+0x367>
    4326:	52 01       	movw	r10, r4
    4328:	e2 e0       	ldi	r30, 0x02	; 2
    432a:	ae 0e       	add	r10, r30
    432c:	b1 1c       	adc	r11, r1
    432e:	f2 01       	movw	r30, r4
    4330:	80 81       	ld	r24, Z
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	01 e0       	ldi	r16, 0x01	; 1
    4336:	10 e0       	ldi	r17, 0x00	; 0
    4338:	23 01       	movw	r4, r6
    433a:	13 c0       	rjmp	.+38     	; 0x4362 <__stack+0x363>
    433c:	52 01       	movw	r10, r4
    433e:	f2 e0       	ldi	r31, 0x02	; 2
    4340:	af 0e       	add	r10, r31
    4342:	b1 1c       	adc	r11, r1
    4344:	f2 01       	movw	r30, r4
    4346:	40 80       	ld	r4, Z
    4348:	51 80       	ldd	r5, Z+1	; 0x01
    434a:	26 ff       	sbrs	r18, 6
    434c:	03 c0       	rjmp	.+6      	; 0x4354 <__stack+0x355>
    434e:	61 2f       	mov	r22, r17
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	02 c0       	rjmp	.+4      	; 0x4358 <__stack+0x359>
    4354:	6f ef       	ldi	r22, 0xFF	; 255
    4356:	7f ef       	ldi	r23, 0xFF	; 255
    4358:	c2 01       	movw	r24, r4
    435a:	2a 8b       	std	Y+18, r18	; 0x12
    435c:	8a d2       	rcall	.+1300   	; 0x4872 <strnlen>
    435e:	8c 01       	movw	r16, r24
    4360:	2a 89       	ldd	r18, Y+18	; 0x12
    4362:	2f 77       	andi	r18, 0x7F	; 127
    4364:	14 c0       	rjmp	.+40     	; 0x438e <__stack+0x38f>
    4366:	52 01       	movw	r10, r4
    4368:	f2 e0       	ldi	r31, 0x02	; 2
    436a:	af 0e       	add	r10, r31
    436c:	b1 1c       	adc	r11, r1
    436e:	f2 01       	movw	r30, r4
    4370:	40 80       	ld	r4, Z
    4372:	51 80       	ldd	r5, Z+1	; 0x01
    4374:	26 ff       	sbrs	r18, 6
    4376:	03 c0       	rjmp	.+6      	; 0x437e <__stack+0x37f>
    4378:	61 2f       	mov	r22, r17
    437a:	70 e0       	ldi	r23, 0x00	; 0
    437c:	02 c0       	rjmp	.+4      	; 0x4382 <__stack+0x383>
    437e:	6f ef       	ldi	r22, 0xFF	; 255
    4380:	7f ef       	ldi	r23, 0xFF	; 255
    4382:	c2 01       	movw	r24, r4
    4384:	2a 8b       	std	Y+18, r18	; 0x12
    4386:	5a d2       	rcall	.+1204   	; 0x483c <strnlen_P>
    4388:	8c 01       	movw	r16, r24
    438a:	2a 89       	ldd	r18, Y+18	; 0x12
    438c:	20 68       	ori	r18, 0x80	; 128
    438e:	32 2e       	mov	r3, r18
    4390:	23 fd       	sbrc	r18, 3
    4392:	18 c0       	rjmp	.+48     	; 0x43c4 <__stack+0x3c5>
    4394:	8f 2d       	mov	r24, r15
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	08 17       	cp	r16, r24
    439a:	19 07       	cpc	r17, r25
    439c:	98 f4       	brcc	.+38     	; 0x43c4 <__stack+0x3c5>
    439e:	b6 01       	movw	r22, r12
    43a0:	80 e2       	ldi	r24, 0x20	; 32
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	71 d2       	rcall	.+1250   	; 0x4888 <fputc>
    43a6:	fa 94       	dec	r15
    43a8:	f5 cf       	rjmp	.-22     	; 0x4394 <__stack+0x395>
    43aa:	f2 01       	movw	r30, r4
    43ac:	37 fc       	sbrc	r3, 7
    43ae:	85 91       	lpm	r24, Z+
    43b0:	37 fe       	sbrs	r3, 7
    43b2:	81 91       	ld	r24, Z+
    43b4:	2f 01       	movw	r4, r30
    43b6:	b6 01       	movw	r22, r12
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	66 d2       	rcall	.+1228   	; 0x4888 <fputc>
    43bc:	f1 10       	cpse	r15, r1
    43be:	fa 94       	dec	r15
    43c0:	01 50       	subi	r16, 0x01	; 1
    43c2:	11 09       	sbc	r17, r1
    43c4:	01 15       	cp	r16, r1
    43c6:	11 05       	cpc	r17, r1
    43c8:	81 f7       	brne	.-32     	; 0x43aa <__stack+0x3ab>
    43ca:	f1 c0       	rjmp	.+482    	; 0x45ae <__stack+0x5af>
    43cc:	84 36       	cpi	r24, 0x64	; 100
    43ce:	11 f0       	breq	.+4      	; 0x43d4 <__stack+0x3d5>
    43d0:	89 36       	cpi	r24, 0x69	; 105
    43d2:	51 f5       	brne	.+84     	; 0x4428 <__stack+0x429>
    43d4:	52 01       	movw	r10, r4
    43d6:	27 ff       	sbrs	r18, 7
    43d8:	09 c0       	rjmp	.+18     	; 0x43ec <__stack+0x3ed>
    43da:	f4 e0       	ldi	r31, 0x04	; 4
    43dc:	af 0e       	add	r10, r31
    43de:	b1 1c       	adc	r11, r1
    43e0:	f2 01       	movw	r30, r4
    43e2:	60 81       	ld	r22, Z
    43e4:	71 81       	ldd	r23, Z+1	; 0x01
    43e6:	82 81       	ldd	r24, Z+2	; 0x02
    43e8:	93 81       	ldd	r25, Z+3	; 0x03
    43ea:	0a c0       	rjmp	.+20     	; 0x4400 <__stack+0x401>
    43ec:	f2 e0       	ldi	r31, 0x02	; 2
    43ee:	af 0e       	add	r10, r31
    43f0:	b1 1c       	adc	r11, r1
    43f2:	f2 01       	movw	r30, r4
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	07 2e       	mov	r0, r23
    43fa:	00 0c       	add	r0, r0
    43fc:	88 0b       	sbc	r24, r24
    43fe:	99 0b       	sbc	r25, r25
    4400:	2f 76       	andi	r18, 0x6F	; 111
    4402:	32 2e       	mov	r3, r18
    4404:	97 ff       	sbrs	r25, 7
    4406:	09 c0       	rjmp	.+18     	; 0x441a <__stack+0x41b>
    4408:	90 95       	com	r25
    440a:	80 95       	com	r24
    440c:	70 95       	com	r23
    440e:	61 95       	neg	r22
    4410:	7f 4f       	sbci	r23, 0xFF	; 255
    4412:	8f 4f       	sbci	r24, 0xFF	; 255
    4414:	9f 4f       	sbci	r25, 0xFF	; 255
    4416:	20 68       	ori	r18, 0x80	; 128
    4418:	32 2e       	mov	r3, r18
    441a:	2a e0       	ldi	r18, 0x0A	; 10
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	a3 01       	movw	r20, r6
    4420:	d2 d2       	rcall	.+1444   	; 0x49c6 <__ultoa_invert>
    4422:	e8 2e       	mov	r14, r24
    4424:	e6 18       	sub	r14, r6
    4426:	3e c0       	rjmp	.+124    	; 0x44a4 <__stack+0x4a5>
    4428:	02 2f       	mov	r16, r18
    442a:	85 37       	cpi	r24, 0x75	; 117
    442c:	21 f4       	brne	.+8      	; 0x4436 <__stack+0x437>
    442e:	0f 7e       	andi	r16, 0xEF	; 239
    4430:	2a e0       	ldi	r18, 0x0A	; 10
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	1d c0       	rjmp	.+58     	; 0x4470 <__stack+0x471>
    4436:	09 7f       	andi	r16, 0xF9	; 249
    4438:	8f 36       	cpi	r24, 0x6F	; 111
    443a:	91 f0       	breq	.+36     	; 0x4460 <__stack+0x461>
    443c:	18 f4       	brcc	.+6      	; 0x4444 <__stack+0x445>
    443e:	88 35       	cpi	r24, 0x58	; 88
    4440:	59 f0       	breq	.+22     	; 0x4458 <__stack+0x459>
    4442:	be c0       	rjmp	.+380    	; 0x45c0 <__stack+0x5c1>
    4444:	80 37       	cpi	r24, 0x70	; 112
    4446:	19 f0       	breq	.+6      	; 0x444e <__stack+0x44f>
    4448:	88 37       	cpi	r24, 0x78	; 120
    444a:	11 f0       	breq	.+4      	; 0x4450 <__stack+0x451>
    444c:	b9 c0       	rjmp	.+370    	; 0x45c0 <__stack+0x5c1>
    444e:	00 61       	ori	r16, 0x10	; 16
    4450:	04 ff       	sbrs	r16, 4
    4452:	09 c0       	rjmp	.+18     	; 0x4466 <__stack+0x467>
    4454:	04 60       	ori	r16, 0x04	; 4
    4456:	07 c0       	rjmp	.+14     	; 0x4466 <__stack+0x467>
    4458:	24 ff       	sbrs	r18, 4
    445a:	08 c0       	rjmp	.+16     	; 0x446c <__stack+0x46d>
    445c:	06 60       	ori	r16, 0x06	; 6
    445e:	06 c0       	rjmp	.+12     	; 0x446c <__stack+0x46d>
    4460:	28 e0       	ldi	r18, 0x08	; 8
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	05 c0       	rjmp	.+10     	; 0x4470 <__stack+0x471>
    4466:	20 e1       	ldi	r18, 0x10	; 16
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	02 c0       	rjmp	.+4      	; 0x4470 <__stack+0x471>
    446c:	20 e1       	ldi	r18, 0x10	; 16
    446e:	32 e0       	ldi	r19, 0x02	; 2
    4470:	52 01       	movw	r10, r4
    4472:	07 ff       	sbrs	r16, 7
    4474:	09 c0       	rjmp	.+18     	; 0x4488 <__stack+0x489>
    4476:	f4 e0       	ldi	r31, 0x04	; 4
    4478:	af 0e       	add	r10, r31
    447a:	b1 1c       	adc	r11, r1
    447c:	f2 01       	movw	r30, r4
    447e:	60 81       	ld	r22, Z
    4480:	71 81       	ldd	r23, Z+1	; 0x01
    4482:	82 81       	ldd	r24, Z+2	; 0x02
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	08 c0       	rjmp	.+16     	; 0x4498 <__stack+0x499>
    4488:	f2 e0       	ldi	r31, 0x02	; 2
    448a:	af 0e       	add	r10, r31
    448c:	b1 1c       	adc	r11, r1
    448e:	f2 01       	movw	r30, r4
    4490:	60 81       	ld	r22, Z
    4492:	71 81       	ldd	r23, Z+1	; 0x01
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	a3 01       	movw	r20, r6
    449a:	95 d2       	rcall	.+1322   	; 0x49c6 <__ultoa_invert>
    449c:	e8 2e       	mov	r14, r24
    449e:	e6 18       	sub	r14, r6
    44a0:	0f 77       	andi	r16, 0x7F	; 127
    44a2:	30 2e       	mov	r3, r16
    44a4:	36 fe       	sbrs	r3, 6
    44a6:	0b c0       	rjmp	.+22     	; 0x44be <__stack+0x4bf>
    44a8:	33 2d       	mov	r19, r3
    44aa:	3e 7f       	andi	r19, 0xFE	; 254
    44ac:	e1 16       	cp	r14, r17
    44ae:	50 f4       	brcc	.+20     	; 0x44c4 <__stack+0x4c5>
    44b0:	34 fe       	sbrs	r3, 4
    44b2:	0a c0       	rjmp	.+20     	; 0x44c8 <__stack+0x4c9>
    44b4:	32 fc       	sbrc	r3, 2
    44b6:	08 c0       	rjmp	.+16     	; 0x44c8 <__stack+0x4c9>
    44b8:	33 2d       	mov	r19, r3
    44ba:	3e 7e       	andi	r19, 0xEE	; 238
    44bc:	05 c0       	rjmp	.+10     	; 0x44c8 <__stack+0x4c9>
    44be:	0e 2d       	mov	r16, r14
    44c0:	33 2d       	mov	r19, r3
    44c2:	03 c0       	rjmp	.+6      	; 0x44ca <__stack+0x4cb>
    44c4:	0e 2d       	mov	r16, r14
    44c6:	01 c0       	rjmp	.+2      	; 0x44ca <__stack+0x4cb>
    44c8:	01 2f       	mov	r16, r17
    44ca:	34 ff       	sbrs	r19, 4
    44cc:	0c c0       	rjmp	.+24     	; 0x44e6 <__stack+0x4e7>
    44ce:	fe 01       	movw	r30, r28
    44d0:	ee 0d       	add	r30, r14
    44d2:	f1 1d       	adc	r31, r1
    44d4:	80 81       	ld	r24, Z
    44d6:	80 33       	cpi	r24, 0x30	; 48
    44d8:	11 f4       	brne	.+4      	; 0x44de <__stack+0x4df>
    44da:	39 7e       	andi	r19, 0xE9	; 233
    44dc:	08 c0       	rjmp	.+16     	; 0x44ee <__stack+0x4ef>
    44de:	32 ff       	sbrs	r19, 2
    44e0:	05 c0       	rjmp	.+10     	; 0x44ec <__stack+0x4ed>
    44e2:	0e 5f       	subi	r16, 0xFE	; 254
    44e4:	04 c0       	rjmp	.+8      	; 0x44ee <__stack+0x4ef>
    44e6:	83 2f       	mov	r24, r19
    44e8:	86 78       	andi	r24, 0x86	; 134
    44ea:	09 f0       	breq	.+2      	; 0x44ee <__stack+0x4ef>
    44ec:	0f 5f       	subi	r16, 0xFF	; 255
    44ee:	33 fd       	sbrc	r19, 3
    44f0:	12 c0       	rjmp	.+36     	; 0x4516 <__stack+0x517>
    44f2:	30 ff       	sbrs	r19, 0
    44f4:	06 c0       	rjmp	.+12     	; 0x4502 <__stack+0x503>
    44f6:	1e 2d       	mov	r17, r14
    44f8:	0f 15       	cp	r16, r15
    44fa:	18 f4       	brcc	.+6      	; 0x4502 <__stack+0x503>
    44fc:	1f 0d       	add	r17, r15
    44fe:	10 1b       	sub	r17, r16
    4500:	0f 2d       	mov	r16, r15
    4502:	0f 15       	cp	r16, r15
    4504:	60 f4       	brcc	.+24     	; 0x451e <__stack+0x51f>
    4506:	b6 01       	movw	r22, r12
    4508:	80 e2       	ldi	r24, 0x20	; 32
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	3b 8b       	std	Y+19, r19	; 0x13
    450e:	bc d1       	rcall	.+888    	; 0x4888 <fputc>
    4510:	0f 5f       	subi	r16, 0xFF	; 255
    4512:	3b 89       	ldd	r19, Y+19	; 0x13
    4514:	f6 cf       	rjmp	.-20     	; 0x4502 <__stack+0x503>
    4516:	0f 15       	cp	r16, r15
    4518:	10 f4       	brcc	.+4      	; 0x451e <__stack+0x51f>
    451a:	f0 1a       	sub	r15, r16
    451c:	01 c0       	rjmp	.+2      	; 0x4520 <__stack+0x521>
    451e:	f1 2c       	mov	r15, r1
    4520:	34 ff       	sbrs	r19, 4
    4522:	11 c0       	rjmp	.+34     	; 0x4546 <__stack+0x547>
    4524:	b6 01       	movw	r22, r12
    4526:	80 e3       	ldi	r24, 0x30	; 48
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	3b 8b       	std	Y+19, r19	; 0x13
    452c:	ad d1       	rcall	.+858    	; 0x4888 <fputc>
    452e:	3b 89       	ldd	r19, Y+19	; 0x13
    4530:	32 ff       	sbrs	r19, 2
    4532:	16 c0       	rjmp	.+44     	; 0x4560 <__stack+0x561>
    4534:	31 fd       	sbrc	r19, 1
    4536:	03 c0       	rjmp	.+6      	; 0x453e <__stack+0x53f>
    4538:	88 e7       	ldi	r24, 0x78	; 120
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	02 c0       	rjmp	.+4      	; 0x4542 <__stack+0x543>
    453e:	88 e5       	ldi	r24, 0x58	; 88
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	b6 01       	movw	r22, r12
    4544:	0c c0       	rjmp	.+24     	; 0x455e <__stack+0x55f>
    4546:	83 2f       	mov	r24, r19
    4548:	86 78       	andi	r24, 0x86	; 134
    454a:	51 f0       	breq	.+20     	; 0x4560 <__stack+0x561>
    454c:	31 ff       	sbrs	r19, 1
    454e:	02 c0       	rjmp	.+4      	; 0x4554 <__stack+0x555>
    4550:	8b e2       	ldi	r24, 0x2B	; 43
    4552:	01 c0       	rjmp	.+2      	; 0x4556 <__stack+0x557>
    4554:	80 e2       	ldi	r24, 0x20	; 32
    4556:	37 fd       	sbrc	r19, 7
    4558:	8d e2       	ldi	r24, 0x2D	; 45
    455a:	b6 01       	movw	r22, r12
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	94 d1       	rcall	.+808    	; 0x4888 <fputc>
    4560:	e1 16       	cp	r14, r17
    4562:	30 f4       	brcc	.+12     	; 0x4570 <__stack+0x571>
    4564:	b6 01       	movw	r22, r12
    4566:	80 e3       	ldi	r24, 0x30	; 48
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	8e d1       	rcall	.+796    	; 0x4888 <fputc>
    456c:	11 50       	subi	r17, 0x01	; 1
    456e:	f8 cf       	rjmp	.-16     	; 0x4560 <__stack+0x561>
    4570:	ea 94       	dec	r14
    4572:	f3 01       	movw	r30, r6
    4574:	ee 0d       	add	r30, r14
    4576:	f1 1d       	adc	r31, r1
    4578:	80 81       	ld	r24, Z
    457a:	b6 01       	movw	r22, r12
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	84 d1       	rcall	.+776    	; 0x4888 <fputc>
    4580:	e1 10       	cpse	r14, r1
    4582:	f6 cf       	rjmp	.-20     	; 0x4570 <__stack+0x571>
    4584:	14 c0       	rjmp	.+40     	; 0x45ae <__stack+0x5af>
    4586:	f4 e0       	ldi	r31, 0x04	; 4
    4588:	ff 15       	cp	r31, r15
    458a:	48 f5       	brcc	.+82     	; 0x45de <__stack+0x5df>
    458c:	84 e0       	ldi	r24, 0x04	; 4
    458e:	f8 1a       	sub	r15, r24
    4590:	33 fe       	sbrs	r3, 3
    4592:	1d c0       	rjmp	.+58     	; 0x45ce <__stack+0x5cf>
    4594:	21 10       	cpse	r2, r1
    4596:	24 c0       	rjmp	.+72     	; 0x45e0 <__stack+0x5e1>
    4598:	03 ff       	sbrs	r16, 3
    459a:	27 c0       	rjmp	.+78     	; 0x45ea <__stack+0x5eb>
    459c:	08 e1       	ldi	r16, 0x18	; 24
    459e:	18 e0       	ldi	r17, 0x08	; 8
    45a0:	f3 2d       	mov	r31, r3
    45a2:	f0 71       	andi	r31, 0x10	; 16
    45a4:	3f 2e       	mov	r3, r31
    45a6:	f8 01       	movw	r30, r16
    45a8:	84 91       	lpm	r24, Z
    45aa:	81 11       	cpse	r24, r1
    45ac:	21 c0       	rjmp	.+66     	; 0x45f0 <__stack+0x5f1>
    45ae:	ff 20       	and	r15, r15
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <__stack+0x5b5>
    45b2:	fd cc       	rjmp	.-1542   	; 0x3fae <vfprintf+0x78>
    45b4:	b6 01       	movw	r22, r12
    45b6:	80 e2       	ldi	r24, 0x20	; 32
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	66 d1       	rcall	.+716    	; 0x4888 <fputc>
    45bc:	fa 94       	dec	r15
    45be:	f7 cf       	rjmp	.-18     	; 0x45ae <__stack+0x5af>
    45c0:	f6 01       	movw	r30, r12
    45c2:	86 81       	ldd	r24, Z+6	; 0x06
    45c4:	97 81       	ldd	r25, Z+7	; 0x07
    45c6:	23 c0       	rjmp	.+70     	; 0x460e <__stack+0x60f>
    45c8:	8f ef       	ldi	r24, 0xFF	; 255
    45ca:	9f ef       	ldi	r25, 0xFF	; 255
    45cc:	20 c0       	rjmp	.+64     	; 0x460e <__stack+0x60f>
    45ce:	b6 01       	movw	r22, r12
    45d0:	80 e2       	ldi	r24, 0x20	; 32
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	59 d1       	rcall	.+690    	; 0x4888 <fputc>
    45d6:	fa 94       	dec	r15
    45d8:	f1 10       	cpse	r15, r1
    45da:	f9 cf       	rjmp	.-14     	; 0x45ce <__stack+0x5cf>
    45dc:	db cf       	rjmp	.-74     	; 0x4594 <__stack+0x595>
    45de:	f1 2c       	mov	r15, r1
    45e0:	b6 01       	movw	r22, r12
    45e2:	82 2d       	mov	r24, r2
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	50 d1       	rcall	.+672    	; 0x4888 <fputc>
    45e8:	d7 cf       	rjmp	.-82     	; 0x4598 <__stack+0x599>
    45ea:	0c e1       	ldi	r16, 0x1C	; 28
    45ec:	18 e0       	ldi	r17, 0x08	; 8
    45ee:	d8 cf       	rjmp	.-80     	; 0x45a0 <__stack+0x5a1>
    45f0:	31 10       	cpse	r3, r1
    45f2:	80 52       	subi	r24, 0x20	; 32
    45f4:	b6 01       	movw	r22, r12
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	47 d1       	rcall	.+654    	; 0x4888 <fputc>
    45fa:	0f 5f       	subi	r16, 0xFF	; 255
    45fc:	1f 4f       	sbci	r17, 0xFF	; 255
    45fe:	d3 cf       	rjmp	.-90     	; 0x45a6 <__stack+0x5a7>
    4600:	23 e0       	ldi	r18, 0x03	; 3
    4602:	2f 15       	cp	r18, r15
    4604:	10 f4       	brcc	.+4      	; 0x460a <__stack+0x60b>
    4606:	83 e0       	ldi	r24, 0x03	; 3
    4608:	c2 cf       	rjmp	.-124    	; 0x458e <__stack+0x58f>
    460a:	f1 2c       	mov	r15, r1
    460c:	c5 cf       	rjmp	.-118    	; 0x4598 <__stack+0x599>
    460e:	63 96       	adiw	r28, 0x13	; 19
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	ff 90       	pop	r15
    461e:	ef 90       	pop	r14
    4620:	df 90       	pop	r13
    4622:	cf 90       	pop	r12
    4624:	bf 90       	pop	r11
    4626:	af 90       	pop	r10
    4628:	9f 90       	pop	r9
    462a:	8f 90       	pop	r8
    462c:	7f 90       	pop	r7
    462e:	6f 90       	pop	r6
    4630:	5f 90       	pop	r5
    4632:	4f 90       	pop	r4
    4634:	3f 90       	pop	r3
    4636:	2f 90       	pop	r2
    4638:	08 95       	ret

0000463a <__udivmodsi4>:
    463a:	a1 e2       	ldi	r26, 0x21	; 33
    463c:	1a 2e       	mov	r1, r26
    463e:	aa 1b       	sub	r26, r26
    4640:	bb 1b       	sub	r27, r27
    4642:	fd 01       	movw	r30, r26
    4644:	0d c0       	rjmp	.+26     	; 0x4660 <__udivmodsi4_ep>

00004646 <__udivmodsi4_loop>:
    4646:	aa 1f       	adc	r26, r26
    4648:	bb 1f       	adc	r27, r27
    464a:	ee 1f       	adc	r30, r30
    464c:	ff 1f       	adc	r31, r31
    464e:	a2 17       	cp	r26, r18
    4650:	b3 07       	cpc	r27, r19
    4652:	e4 07       	cpc	r30, r20
    4654:	f5 07       	cpc	r31, r21
    4656:	20 f0       	brcs	.+8      	; 0x4660 <__udivmodsi4_ep>
    4658:	a2 1b       	sub	r26, r18
    465a:	b3 0b       	sbc	r27, r19
    465c:	e4 0b       	sbc	r30, r20
    465e:	f5 0b       	sbc	r31, r21

00004660 <__udivmodsi4_ep>:
    4660:	66 1f       	adc	r22, r22
    4662:	77 1f       	adc	r23, r23
    4664:	88 1f       	adc	r24, r24
    4666:	99 1f       	adc	r25, r25
    4668:	1a 94       	dec	r1
    466a:	69 f7       	brne	.-38     	; 0x4646 <__udivmodsi4_loop>
    466c:	60 95       	com	r22
    466e:	70 95       	com	r23
    4670:	80 95       	com	r24
    4672:	90 95       	com	r25
    4674:	9b 01       	movw	r18, r22
    4676:	ac 01       	movw	r20, r24
    4678:	bd 01       	movw	r22, r26
    467a:	cf 01       	movw	r24, r30
    467c:	08 95       	ret

0000467e <__ftoa_engine>:
    467e:	28 30       	cpi	r18, 0x08	; 8
    4680:	08 f0       	brcs	.+2      	; 0x4684 <__ftoa_engine+0x6>
    4682:	27 e0       	ldi	r18, 0x07	; 7
    4684:	33 27       	eor	r19, r19
    4686:	da 01       	movw	r26, r20
    4688:	99 0f       	add	r25, r25
    468a:	31 1d       	adc	r19, r1
    468c:	87 fd       	sbrc	r24, 7
    468e:	91 60       	ori	r25, 0x01	; 1
    4690:	00 96       	adiw	r24, 0x00	; 0
    4692:	61 05       	cpc	r22, r1
    4694:	71 05       	cpc	r23, r1
    4696:	39 f4       	brne	.+14     	; 0x46a6 <__ftoa_engine+0x28>
    4698:	32 60       	ori	r19, 0x02	; 2
    469a:	2e 5f       	subi	r18, 0xFE	; 254
    469c:	3d 93       	st	X+, r19
    469e:	30 e3       	ldi	r19, 0x30	; 48
    46a0:	2a 95       	dec	r18
    46a2:	e1 f7       	brne	.-8      	; 0x469c <__ftoa_engine+0x1e>
    46a4:	08 95       	ret
    46a6:	9f 3f       	cpi	r25, 0xFF	; 255
    46a8:	30 f0       	brcs	.+12     	; 0x46b6 <__ftoa_engine+0x38>
    46aa:	80 38       	cpi	r24, 0x80	; 128
    46ac:	71 05       	cpc	r23, r1
    46ae:	61 05       	cpc	r22, r1
    46b0:	09 f0       	breq	.+2      	; 0x46b4 <__ftoa_engine+0x36>
    46b2:	3c 5f       	subi	r19, 0xFC	; 252
    46b4:	3c 5f       	subi	r19, 0xFC	; 252
    46b6:	3d 93       	st	X+, r19
    46b8:	91 30       	cpi	r25, 0x01	; 1
    46ba:	08 f0       	brcs	.+2      	; 0x46be <__ftoa_engine+0x40>
    46bc:	80 68       	ori	r24, 0x80	; 128
    46be:	91 1d       	adc	r25, r1
    46c0:	df 93       	push	r29
    46c2:	cf 93       	push	r28
    46c4:	1f 93       	push	r17
    46c6:	0f 93       	push	r16
    46c8:	ff 92       	push	r15
    46ca:	ef 92       	push	r14
    46cc:	19 2f       	mov	r17, r25
    46ce:	98 7f       	andi	r25, 0xF8	; 248
    46d0:	96 95       	lsr	r25
    46d2:	e9 2f       	mov	r30, r25
    46d4:	96 95       	lsr	r25
    46d6:	96 95       	lsr	r25
    46d8:	e9 0f       	add	r30, r25
    46da:	ff 27       	eor	r31, r31
    46dc:	e6 58       	subi	r30, 0x86	; 134
    46de:	f7 4f       	sbci	r31, 0xF7	; 247
    46e0:	99 27       	eor	r25, r25
    46e2:	33 27       	eor	r19, r19
    46e4:	ee 24       	eor	r14, r14
    46e6:	ff 24       	eor	r15, r15
    46e8:	a7 01       	movw	r20, r14
    46ea:	e7 01       	movw	r28, r14
    46ec:	05 90       	lpm	r0, Z+
    46ee:	08 94       	sec
    46f0:	07 94       	ror	r0
    46f2:	28 f4       	brcc	.+10     	; 0x46fe <__ftoa_engine+0x80>
    46f4:	36 0f       	add	r19, r22
    46f6:	e7 1e       	adc	r14, r23
    46f8:	f8 1e       	adc	r15, r24
    46fa:	49 1f       	adc	r20, r25
    46fc:	51 1d       	adc	r21, r1
    46fe:	66 0f       	add	r22, r22
    4700:	77 1f       	adc	r23, r23
    4702:	88 1f       	adc	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	06 94       	lsr	r0
    4708:	a1 f7       	brne	.-24     	; 0x46f2 <__ftoa_engine+0x74>
    470a:	05 90       	lpm	r0, Z+
    470c:	07 94       	ror	r0
    470e:	28 f4       	brcc	.+10     	; 0x471a <__ftoa_engine+0x9c>
    4710:	e7 0e       	add	r14, r23
    4712:	f8 1e       	adc	r15, r24
    4714:	49 1f       	adc	r20, r25
    4716:	56 1f       	adc	r21, r22
    4718:	c1 1d       	adc	r28, r1
    471a:	77 0f       	add	r23, r23
    471c:	88 1f       	adc	r24, r24
    471e:	99 1f       	adc	r25, r25
    4720:	66 1f       	adc	r22, r22
    4722:	06 94       	lsr	r0
    4724:	a1 f7       	brne	.-24     	; 0x470e <__ftoa_engine+0x90>
    4726:	05 90       	lpm	r0, Z+
    4728:	07 94       	ror	r0
    472a:	28 f4       	brcc	.+10     	; 0x4736 <__ftoa_engine+0xb8>
    472c:	f8 0e       	add	r15, r24
    472e:	49 1f       	adc	r20, r25
    4730:	56 1f       	adc	r21, r22
    4732:	c7 1f       	adc	r28, r23
    4734:	d1 1d       	adc	r29, r1
    4736:	88 0f       	add	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	66 1f       	adc	r22, r22
    473c:	77 1f       	adc	r23, r23
    473e:	06 94       	lsr	r0
    4740:	a1 f7       	brne	.-24     	; 0x472a <__ftoa_engine+0xac>
    4742:	05 90       	lpm	r0, Z+
    4744:	07 94       	ror	r0
    4746:	20 f4       	brcc	.+8      	; 0x4750 <__ftoa_engine+0xd2>
    4748:	49 0f       	add	r20, r25
    474a:	56 1f       	adc	r21, r22
    474c:	c7 1f       	adc	r28, r23
    474e:	d8 1f       	adc	r29, r24
    4750:	99 0f       	add	r25, r25
    4752:	66 1f       	adc	r22, r22
    4754:	77 1f       	adc	r23, r23
    4756:	88 1f       	adc	r24, r24
    4758:	06 94       	lsr	r0
    475a:	a9 f7       	brne	.-22     	; 0x4746 <__ftoa_engine+0xc8>
    475c:	84 91       	lpm	r24, Z
    475e:	10 95       	com	r17
    4760:	17 70       	andi	r17, 0x07	; 7
    4762:	41 f0       	breq	.+16     	; 0x4774 <__ftoa_engine+0xf6>
    4764:	d6 95       	lsr	r29
    4766:	c7 95       	ror	r28
    4768:	57 95       	ror	r21
    476a:	47 95       	ror	r20
    476c:	f7 94       	ror	r15
    476e:	e7 94       	ror	r14
    4770:	1a 95       	dec	r17
    4772:	c1 f7       	brne	.-16     	; 0x4764 <__ftoa_engine+0xe6>
    4774:	e0 e2       	ldi	r30, 0x20	; 32
    4776:	f8 e0       	ldi	r31, 0x08	; 8
    4778:	68 94       	set
    477a:	15 90       	lpm	r1, Z+
    477c:	15 91       	lpm	r17, Z+
    477e:	35 91       	lpm	r19, Z+
    4780:	65 91       	lpm	r22, Z+
    4782:	95 91       	lpm	r25, Z+
    4784:	05 90       	lpm	r0, Z+
    4786:	7f e2       	ldi	r23, 0x2F	; 47
    4788:	73 95       	inc	r23
    478a:	e1 18       	sub	r14, r1
    478c:	f1 0a       	sbc	r15, r17
    478e:	43 0b       	sbc	r20, r19
    4790:	56 0b       	sbc	r21, r22
    4792:	c9 0b       	sbc	r28, r25
    4794:	d0 09       	sbc	r29, r0
    4796:	c0 f7       	brcc	.-16     	; 0x4788 <__ftoa_engine+0x10a>
    4798:	e1 0c       	add	r14, r1
    479a:	f1 1e       	adc	r15, r17
    479c:	43 1f       	adc	r20, r19
    479e:	56 1f       	adc	r21, r22
    47a0:	c9 1f       	adc	r28, r25
    47a2:	d0 1d       	adc	r29, r0
    47a4:	7e f4       	brtc	.+30     	; 0x47c4 <__ftoa_engine+0x146>
    47a6:	70 33       	cpi	r23, 0x30	; 48
    47a8:	11 f4       	brne	.+4      	; 0x47ae <__ftoa_engine+0x130>
    47aa:	8a 95       	dec	r24
    47ac:	e6 cf       	rjmp	.-52     	; 0x477a <__ftoa_engine+0xfc>
    47ae:	e8 94       	clt
    47b0:	01 50       	subi	r16, 0x01	; 1
    47b2:	30 f0       	brcs	.+12     	; 0x47c0 <__ftoa_engine+0x142>
    47b4:	08 0f       	add	r16, r24
    47b6:	0a f4       	brpl	.+2      	; 0x47ba <__ftoa_engine+0x13c>
    47b8:	00 27       	eor	r16, r16
    47ba:	02 17       	cp	r16, r18
    47bc:	08 f4       	brcc	.+2      	; 0x47c0 <__ftoa_engine+0x142>
    47be:	20 2f       	mov	r18, r16
    47c0:	23 95       	inc	r18
    47c2:	02 2f       	mov	r16, r18
    47c4:	7a 33       	cpi	r23, 0x3A	; 58
    47c6:	28 f0       	brcs	.+10     	; 0x47d2 <__ftoa_engine+0x154>
    47c8:	79 e3       	ldi	r23, 0x39	; 57
    47ca:	7d 93       	st	X+, r23
    47cc:	2a 95       	dec	r18
    47ce:	e9 f7       	brne	.-6      	; 0x47ca <__ftoa_engine+0x14c>
    47d0:	10 c0       	rjmp	.+32     	; 0x47f2 <__ftoa_engine+0x174>
    47d2:	7d 93       	st	X+, r23
    47d4:	2a 95       	dec	r18
    47d6:	89 f6       	brne	.-94     	; 0x477a <__ftoa_engine+0xfc>
    47d8:	06 94       	lsr	r0
    47da:	97 95       	ror	r25
    47dc:	67 95       	ror	r22
    47de:	37 95       	ror	r19
    47e0:	17 95       	ror	r17
    47e2:	17 94       	ror	r1
    47e4:	e1 18       	sub	r14, r1
    47e6:	f1 0a       	sbc	r15, r17
    47e8:	43 0b       	sbc	r20, r19
    47ea:	56 0b       	sbc	r21, r22
    47ec:	c9 0b       	sbc	r28, r25
    47ee:	d0 09       	sbc	r29, r0
    47f0:	98 f0       	brcs	.+38     	; 0x4818 <__ftoa_engine+0x19a>
    47f2:	23 95       	inc	r18
    47f4:	7e 91       	ld	r23, -X
    47f6:	73 95       	inc	r23
    47f8:	7a 33       	cpi	r23, 0x3A	; 58
    47fa:	08 f0       	brcs	.+2      	; 0x47fe <__ftoa_engine+0x180>
    47fc:	70 e3       	ldi	r23, 0x30	; 48
    47fe:	7c 93       	st	X, r23
    4800:	20 13       	cpse	r18, r16
    4802:	b8 f7       	brcc	.-18     	; 0x47f2 <__ftoa_engine+0x174>
    4804:	7e 91       	ld	r23, -X
    4806:	70 61       	ori	r23, 0x10	; 16
    4808:	7d 93       	st	X+, r23
    480a:	30 f0       	brcs	.+12     	; 0x4818 <__ftoa_engine+0x19a>
    480c:	83 95       	inc	r24
    480e:	71 e3       	ldi	r23, 0x31	; 49
    4810:	7d 93       	st	X+, r23
    4812:	70 e3       	ldi	r23, 0x30	; 48
    4814:	2a 95       	dec	r18
    4816:	e1 f7       	brne	.-8      	; 0x4810 <__ftoa_engine+0x192>
    4818:	11 24       	eor	r1, r1
    481a:	ef 90       	pop	r14
    481c:	ff 90       	pop	r15
    481e:	0f 91       	pop	r16
    4820:	1f 91       	pop	r17
    4822:	cf 91       	pop	r28
    4824:	df 91       	pop	r29
    4826:	99 27       	eor	r25, r25
    4828:	87 fd       	sbrc	r24, 7
    482a:	90 95       	com	r25
    482c:	08 95       	ret

0000482e <strcpy_P>:
    482e:	fb 01       	movw	r30, r22
    4830:	dc 01       	movw	r26, r24
    4832:	05 90       	lpm	r0, Z+
    4834:	0d 92       	st	X+, r0
    4836:	00 20       	and	r0, r0
    4838:	e1 f7       	brne	.-8      	; 0x4832 <strcpy_P+0x4>
    483a:	08 95       	ret

0000483c <strnlen_P>:
    483c:	fc 01       	movw	r30, r24
    483e:	05 90       	lpm	r0, Z+
    4840:	61 50       	subi	r22, 0x01	; 1
    4842:	70 40       	sbci	r23, 0x00	; 0
    4844:	01 10       	cpse	r0, r1
    4846:	d8 f7       	brcc	.-10     	; 0x483e <strnlen_P+0x2>
    4848:	80 95       	com	r24
    484a:	90 95       	com	r25
    484c:	8e 0f       	add	r24, r30
    484e:	9f 1f       	adc	r25, r31
    4850:	08 95       	ret

00004852 <memcpy>:
    4852:	fb 01       	movw	r30, r22
    4854:	dc 01       	movw	r26, r24
    4856:	02 c0       	rjmp	.+4      	; 0x485c <memcpy+0xa>
    4858:	01 90       	ld	r0, Z+
    485a:	0d 92       	st	X+, r0
    485c:	41 50       	subi	r20, 0x01	; 1
    485e:	50 40       	sbci	r21, 0x00	; 0
    4860:	d8 f7       	brcc	.-10     	; 0x4858 <memcpy+0x6>
    4862:	08 95       	ret

00004864 <memset>:
    4864:	dc 01       	movw	r26, r24
    4866:	01 c0       	rjmp	.+2      	; 0x486a <memset+0x6>
    4868:	6d 93       	st	X+, r22
    486a:	41 50       	subi	r20, 0x01	; 1
    486c:	50 40       	sbci	r21, 0x00	; 0
    486e:	e0 f7       	brcc	.-8      	; 0x4868 <memset+0x4>
    4870:	08 95       	ret

00004872 <strnlen>:
    4872:	fc 01       	movw	r30, r24
    4874:	61 50       	subi	r22, 0x01	; 1
    4876:	70 40       	sbci	r23, 0x00	; 0
    4878:	01 90       	ld	r0, Z+
    487a:	01 10       	cpse	r0, r1
    487c:	d8 f7       	brcc	.-10     	; 0x4874 <strnlen+0x2>
    487e:	80 95       	com	r24
    4880:	90 95       	com	r25
    4882:	8e 0f       	add	r24, r30
    4884:	9f 1f       	adc	r25, r31
    4886:	08 95       	ret

00004888 <fputc>:
    4888:	0f 93       	push	r16
    488a:	1f 93       	push	r17
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	fb 01       	movw	r30, r22
    4892:	23 81       	ldd	r18, Z+3	; 0x03
    4894:	21 fd       	sbrc	r18, 1
    4896:	03 c0       	rjmp	.+6      	; 0x489e <fputc+0x16>
    4898:	8f ef       	ldi	r24, 0xFF	; 255
    489a:	9f ef       	ldi	r25, 0xFF	; 255
    489c:	28 c0       	rjmp	.+80     	; 0x48ee <fputc+0x66>
    489e:	22 ff       	sbrs	r18, 2
    48a0:	16 c0       	rjmp	.+44     	; 0x48ce <fputc+0x46>
    48a2:	46 81       	ldd	r20, Z+6	; 0x06
    48a4:	57 81       	ldd	r21, Z+7	; 0x07
    48a6:	24 81       	ldd	r18, Z+4	; 0x04
    48a8:	35 81       	ldd	r19, Z+5	; 0x05
    48aa:	42 17       	cp	r20, r18
    48ac:	53 07       	cpc	r21, r19
    48ae:	44 f4       	brge	.+16     	; 0x48c0 <fputc+0x38>
    48b0:	a0 81       	ld	r26, Z
    48b2:	b1 81       	ldd	r27, Z+1	; 0x01
    48b4:	9d 01       	movw	r18, r26
    48b6:	2f 5f       	subi	r18, 0xFF	; 255
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	20 83       	st	Z, r18
    48bc:	31 83       	std	Z+1, r19	; 0x01
    48be:	8c 93       	st	X, r24
    48c0:	26 81       	ldd	r18, Z+6	; 0x06
    48c2:	37 81       	ldd	r19, Z+7	; 0x07
    48c4:	2f 5f       	subi	r18, 0xFF	; 255
    48c6:	3f 4f       	sbci	r19, 0xFF	; 255
    48c8:	26 83       	std	Z+6, r18	; 0x06
    48ca:	37 83       	std	Z+7, r19	; 0x07
    48cc:	10 c0       	rjmp	.+32     	; 0x48ee <fputc+0x66>
    48ce:	eb 01       	movw	r28, r22
    48d0:	09 2f       	mov	r16, r25
    48d2:	18 2f       	mov	r17, r24
    48d4:	00 84       	ldd	r0, Z+8	; 0x08
    48d6:	f1 85       	ldd	r31, Z+9	; 0x09
    48d8:	e0 2d       	mov	r30, r0
    48da:	19 95       	eicall
    48dc:	89 2b       	or	r24, r25
    48de:	e1 f6       	brne	.-72     	; 0x4898 <fputc+0x10>
    48e0:	8e 81       	ldd	r24, Y+6	; 0x06
    48e2:	9f 81       	ldd	r25, Y+7	; 0x07
    48e4:	01 96       	adiw	r24, 0x01	; 1
    48e6:	8e 83       	std	Y+6, r24	; 0x06
    48e8:	9f 83       	std	Y+7, r25	; 0x07
    48ea:	81 2f       	mov	r24, r17
    48ec:	90 2f       	mov	r25, r16
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	1f 91       	pop	r17
    48f4:	0f 91       	pop	r16
    48f6:	08 95       	ret

000048f8 <printf_P>:
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	ae 01       	movw	r20, r28
    4906:	48 5f       	subi	r20, 0xF8	; 248
    4908:	5f 4f       	sbci	r21, 0xFF	; 255
    490a:	da 01       	movw	r26, r20
    490c:	6d 91       	ld	r22, X+
    490e:	7d 91       	ld	r23, X+
    4910:	ad 01       	movw	r20, r26
    4912:	01 e2       	ldi	r16, 0x21	; 33
    4914:	19 e2       	ldi	r17, 0x29	; 41
    4916:	f8 01       	movw	r30, r16
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	93 81       	ldd	r25, Z+3	; 0x03
    491c:	dc 01       	movw	r26, r24
    491e:	13 96       	adiw	r26, 0x03	; 3
    4920:	2c 91       	ld	r18, X
    4922:	13 97       	sbiw	r26, 0x03	; 3
    4924:	28 60       	ori	r18, 0x08	; 8
    4926:	13 96       	adiw	r26, 0x03	; 3
    4928:	2c 93       	st	X, r18
    492a:	05 db       	rcall	.-2550   	; 0x3f36 <vfprintf>
    492c:	d8 01       	movw	r26, r16
    492e:	12 96       	adiw	r26, 0x02	; 2
    4930:	ed 91       	ld	r30, X+
    4932:	fc 91       	ld	r31, X
    4934:	13 97       	sbiw	r26, 0x03	; 3
    4936:	23 81       	ldd	r18, Z+3	; 0x03
    4938:	27 7f       	andi	r18, 0xF7	; 247
    493a:	23 83       	std	Z+3, r18	; 0x03
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	08 95       	ret

00004946 <vfprintf_P>:
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	ec 01       	movw	r28, r24
    494c:	8b 81       	ldd	r24, Y+3	; 0x03
    494e:	88 60       	ori	r24, 0x08	; 8
    4950:	8b 83       	std	Y+3, r24	; 0x03
    4952:	ce 01       	movw	r24, r28
    4954:	f0 da       	rcall	.-2592   	; 0x3f36 <vfprintf>
    4956:	2b 81       	ldd	r18, Y+3	; 0x03
    4958:	27 7f       	andi	r18, 0xF7	; 247
    495a:	2b 83       	std	Y+3, r18	; 0x03
    495c:	df 91       	pop	r29
    495e:	cf 91       	pop	r28
    4960:	08 95       	ret

00004962 <vsnprintf_P>:
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	cd b7       	in	r28, 0x3d	; 61
    496c:	de b7       	in	r29, 0x3e	; 62
    496e:	2e 97       	sbiw	r28, 0x0e	; 14
    4970:	cd bf       	out	0x3d, r28	; 61
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	8c 01       	movw	r16, r24
    4976:	ca 01       	movw	r24, r20
    4978:	4e e0       	ldi	r20, 0x0E	; 14
    497a:	4c 83       	std	Y+4, r20	; 0x04
    497c:	09 83       	std	Y+1, r16	; 0x01
    497e:	1a 83       	std	Y+2, r17	; 0x02
    4980:	77 ff       	sbrs	r23, 7
    4982:	02 c0       	rjmp	.+4      	; 0x4988 <vsnprintf_P+0x26>
    4984:	60 e0       	ldi	r22, 0x00	; 0
    4986:	70 e8       	ldi	r23, 0x80	; 128
    4988:	fb 01       	movw	r30, r22
    498a:	31 97       	sbiw	r30, 0x01	; 1
    498c:	ed 83       	std	Y+5, r30	; 0x05
    498e:	fe 83       	std	Y+6, r31	; 0x06
    4990:	a9 01       	movw	r20, r18
    4992:	bc 01       	movw	r22, r24
    4994:	ce 01       	movw	r24, r28
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	ce da       	rcall	.-2660   	; 0x3f36 <vfprintf>
    499a:	4d 81       	ldd	r20, Y+5	; 0x05
    499c:	5e 81       	ldd	r21, Y+6	; 0x06
    499e:	57 fd       	sbrc	r21, 7
    49a0:	0a c0       	rjmp	.+20     	; 0x49b6 <vsnprintf_P+0x54>
    49a2:	2f 81       	ldd	r18, Y+7	; 0x07
    49a4:	38 85       	ldd	r19, Y+8	; 0x08
    49a6:	42 17       	cp	r20, r18
    49a8:	53 07       	cpc	r21, r19
    49aa:	0c f4       	brge	.+2      	; 0x49ae <vsnprintf_P+0x4c>
    49ac:	9a 01       	movw	r18, r20
    49ae:	f8 01       	movw	r30, r16
    49b0:	e2 0f       	add	r30, r18
    49b2:	f3 1f       	adc	r31, r19
    49b4:	10 82       	st	Z, r1
    49b6:	2e 96       	adiw	r28, 0x0e	; 14
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	de bf       	out	0x3e, r29	; 62
    49bc:	df 91       	pop	r29
    49be:	cf 91       	pop	r28
    49c0:	1f 91       	pop	r17
    49c2:	0f 91       	pop	r16
    49c4:	08 95       	ret

000049c6 <__ultoa_invert>:
    49c6:	fa 01       	movw	r30, r20
    49c8:	aa 27       	eor	r26, r26
    49ca:	28 30       	cpi	r18, 0x08	; 8
    49cc:	51 f1       	breq	.+84     	; 0x4a22 <__ultoa_invert+0x5c>
    49ce:	20 31       	cpi	r18, 0x10	; 16
    49d0:	81 f1       	breq	.+96     	; 0x4a32 <__ultoa_invert+0x6c>
    49d2:	e8 94       	clt
    49d4:	6f 93       	push	r22
    49d6:	6e 7f       	andi	r22, 0xFE	; 254
    49d8:	6e 5f       	subi	r22, 0xFE	; 254
    49da:	7f 4f       	sbci	r23, 0xFF	; 255
    49dc:	8f 4f       	sbci	r24, 0xFF	; 255
    49de:	9f 4f       	sbci	r25, 0xFF	; 255
    49e0:	af 4f       	sbci	r26, 0xFF	; 255
    49e2:	b1 e0       	ldi	r27, 0x01	; 1
    49e4:	3e d0       	rcall	.+124    	; 0x4a62 <__ultoa_invert+0x9c>
    49e6:	b4 e0       	ldi	r27, 0x04	; 4
    49e8:	3c d0       	rcall	.+120    	; 0x4a62 <__ultoa_invert+0x9c>
    49ea:	67 0f       	add	r22, r23
    49ec:	78 1f       	adc	r23, r24
    49ee:	89 1f       	adc	r24, r25
    49f0:	9a 1f       	adc	r25, r26
    49f2:	a1 1d       	adc	r26, r1
    49f4:	68 0f       	add	r22, r24
    49f6:	79 1f       	adc	r23, r25
    49f8:	8a 1f       	adc	r24, r26
    49fa:	91 1d       	adc	r25, r1
    49fc:	a1 1d       	adc	r26, r1
    49fe:	6a 0f       	add	r22, r26
    4a00:	71 1d       	adc	r23, r1
    4a02:	81 1d       	adc	r24, r1
    4a04:	91 1d       	adc	r25, r1
    4a06:	a1 1d       	adc	r26, r1
    4a08:	20 d0       	rcall	.+64     	; 0x4a4a <__ultoa_invert+0x84>
    4a0a:	09 f4       	brne	.+2      	; 0x4a0e <__ultoa_invert+0x48>
    4a0c:	68 94       	set
    4a0e:	3f 91       	pop	r19
    4a10:	2a e0       	ldi	r18, 0x0A	; 10
    4a12:	26 9f       	mul	r18, r22
    4a14:	11 24       	eor	r1, r1
    4a16:	30 19       	sub	r19, r0
    4a18:	30 5d       	subi	r19, 0xD0	; 208
    4a1a:	31 93       	st	Z+, r19
    4a1c:	de f6       	brtc	.-74     	; 0x49d4 <__ultoa_invert+0xe>
    4a1e:	cf 01       	movw	r24, r30
    4a20:	08 95       	ret
    4a22:	46 2f       	mov	r20, r22
    4a24:	47 70       	andi	r20, 0x07	; 7
    4a26:	40 5d       	subi	r20, 0xD0	; 208
    4a28:	41 93       	st	Z+, r20
    4a2a:	b3 e0       	ldi	r27, 0x03	; 3
    4a2c:	0f d0       	rcall	.+30     	; 0x4a4c <__ultoa_invert+0x86>
    4a2e:	c9 f7       	brne	.-14     	; 0x4a22 <__ultoa_invert+0x5c>
    4a30:	f6 cf       	rjmp	.-20     	; 0x4a1e <__ultoa_invert+0x58>
    4a32:	46 2f       	mov	r20, r22
    4a34:	4f 70       	andi	r20, 0x0F	; 15
    4a36:	40 5d       	subi	r20, 0xD0	; 208
    4a38:	4a 33       	cpi	r20, 0x3A	; 58
    4a3a:	18 f0       	brcs	.+6      	; 0x4a42 <__ultoa_invert+0x7c>
    4a3c:	49 5d       	subi	r20, 0xD9	; 217
    4a3e:	31 fd       	sbrc	r19, 1
    4a40:	40 52       	subi	r20, 0x20	; 32
    4a42:	41 93       	st	Z+, r20
    4a44:	02 d0       	rcall	.+4      	; 0x4a4a <__ultoa_invert+0x84>
    4a46:	a9 f7       	brne	.-22     	; 0x4a32 <__ultoa_invert+0x6c>
    4a48:	ea cf       	rjmp	.-44     	; 0x4a1e <__ultoa_invert+0x58>
    4a4a:	b4 e0       	ldi	r27, 0x04	; 4
    4a4c:	a6 95       	lsr	r26
    4a4e:	97 95       	ror	r25
    4a50:	87 95       	ror	r24
    4a52:	77 95       	ror	r23
    4a54:	67 95       	ror	r22
    4a56:	ba 95       	dec	r27
    4a58:	c9 f7       	brne	.-14     	; 0x4a4c <__ultoa_invert+0x86>
    4a5a:	00 97       	sbiw	r24, 0x00	; 0
    4a5c:	61 05       	cpc	r22, r1
    4a5e:	71 05       	cpc	r23, r1
    4a60:	08 95       	ret
    4a62:	9b 01       	movw	r18, r22
    4a64:	ac 01       	movw	r20, r24
    4a66:	0a 2e       	mov	r0, r26
    4a68:	06 94       	lsr	r0
    4a6a:	57 95       	ror	r21
    4a6c:	47 95       	ror	r20
    4a6e:	37 95       	ror	r19
    4a70:	27 95       	ror	r18
    4a72:	ba 95       	dec	r27
    4a74:	c9 f7       	brne	.-14     	; 0x4a68 <__ultoa_invert+0xa2>
    4a76:	62 0f       	add	r22, r18
    4a78:	73 1f       	adc	r23, r19
    4a7a:	84 1f       	adc	r24, r20
    4a7c:	95 1f       	adc	r25, r21
    4a7e:	a0 1d       	adc	r26, r0
    4a80:	08 95       	ret

00004a82 <eeprom_read_block>:
    4a82:	e0 ec       	ldi	r30, 0xC0	; 192
    4a84:	f1 e0       	ldi	r31, 0x01	; 1
    4a86:	a7 85       	ldd	r26, Z+15	; 0x0f
    4a88:	a7 fd       	sbrc	r26, 7
    4a8a:	fd cf       	rjmp	.-6      	; 0x4a86 <eeprom_read_block+0x4>
    4a8c:	a4 85       	ldd	r26, Z+12	; 0x0c
    4a8e:	a8 60       	ori	r26, 0x08	; 8
    4a90:	a4 87       	std	Z+12, r26	; 0x0c
    4a92:	60 50       	subi	r22, 0x00	; 0
    4a94:	70 4f       	sbci	r23, 0xF0	; 240
    4a96:	dd ce       	rjmp	.-582    	; 0x4852 <memcpy>

00004a98 <eeprom_read_byte>:
    4a98:	03 d0       	rcall	.+6      	; 0x4aa0 <eeprom_mapen>
    4a9a:	80 81       	ld	r24, Z
    4a9c:	99 27       	eor	r25, r25
    4a9e:	08 95       	ret

00004aa0 <eeprom_mapen>:
    4aa0:	e0 ec       	ldi	r30, 0xC0	; 192
    4aa2:	f1 e0       	ldi	r31, 0x01	; 1
    4aa4:	37 85       	ldd	r19, Z+15	; 0x0f
    4aa6:	37 fd       	sbrc	r19, 7
    4aa8:	fd cf       	rjmp	.-6      	; 0x4aa4 <eeprom_mapen+0x4>
    4aaa:	34 85       	ldd	r19, Z+12	; 0x0c
    4aac:	38 60       	ori	r19, 0x08	; 8
    4aae:	34 87       	std	Z+12, r19	; 0x0c
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	e0 50       	subi	r30, 0x00	; 0
    4ab4:	f0 4f       	sbci	r31, 0xF0	; 240
    4ab6:	08 95       	ret

00004ab8 <eeprom_update_byte>:
    4ab8:	26 2f       	mov	r18, r22

00004aba <eeprom_update_r18>:
    4aba:	f2 df       	rcall	.-28     	; 0x4aa0 <eeprom_mapen>
    4abc:	00 80       	ld	r0, Z
    4abe:	02 16       	cp	r0, r18
    4ac0:	11 f0       	breq	.+4      	; 0x4ac6 <eeprom_update_r18+0xc>
    4ac2:	04 d0       	rcall	.+8      	; 0x4acc <eeprom_write_r18>
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	01 97       	sbiw	r24, 0x01	; 1
    4ac8:	08 95       	ret

00004aca <eeprom_write_byte>:
    4aca:	26 2f       	mov	r18, r22

00004acc <eeprom_write_r18>:
    4acc:	e0 ec       	ldi	r30, 0xC0	; 192
    4ace:	f1 e0       	ldi	r31, 0x01	; 1
    4ad0:	37 85       	ldd	r19, Z+15	; 0x0f
    4ad2:	37 fd       	sbrc	r19, 7
    4ad4:	fd cf       	rjmp	.-6      	; 0x4ad0 <eeprom_write_r18+0x4>
    4ad6:	34 85       	ldd	r19, Z+12	; 0x0c
    4ad8:	37 7f       	andi	r19, 0xF7	; 247
    4ada:	34 87       	std	Z+12, r19	; 0x0c
    4adc:	37 85       	ldd	r19, Z+15	; 0x0f
    4ade:	31 ff       	sbrs	r19, 1
    4ae0:	09 c0       	rjmp	.+18     	; 0x4af4 <eeprom_write_r18+0x28>
    4ae2:	36 e3       	ldi	r19, 0x36	; 54
    4ae4:	32 87       	std	Z+10, r19	; 0x0a
    4ae6:	38 ed       	ldi	r19, 0xD8	; 216
    4ae8:	34 bf       	out	0x34, r19	; 52
    4aea:	31 e0       	ldi	r19, 0x01	; 1
    4aec:	33 87       	std	Z+11, r19	; 0x0b
    4aee:	37 85       	ldd	r19, Z+15	; 0x0f
    4af0:	37 fd       	sbrc	r19, 7
    4af2:	fd cf       	rjmp	.-6      	; 0x4aee <eeprom_write_r18+0x22>
    4af4:	33 e3       	ldi	r19, 0x33	; 51
    4af6:	32 87       	std	Z+10, r19	; 0x0a
    4af8:	80 83       	st	Z, r24
    4afa:	91 83       	std	Z+1, r25	; 0x01
    4afc:	12 82       	std	Z+2, r1	; 0x02
    4afe:	24 83       	std	Z+4, r18	; 0x04
    4b00:	25 e3       	ldi	r18, 0x35	; 53
    4b02:	22 87       	std	Z+10, r18	; 0x0a
    4b04:	28 ed       	ldi	r18, 0xD8	; 216
    4b06:	31 e0       	ldi	r19, 0x01	; 1
    4b08:	24 bf       	out	0x34, r18	; 52
    4b0a:	33 87       	std	Z+11, r19	; 0x0b
    4b0c:	01 96       	adiw	r24, 0x01	; 1
    4b0e:	08 95       	ret

00004b10 <_exit>:
    4b10:	f8 94       	cli

00004b12 <__stop_program>:
    4b12:	ff cf       	rjmp	.-2      	; 0x4b12 <__stop_program>
